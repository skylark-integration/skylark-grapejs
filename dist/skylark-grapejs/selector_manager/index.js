/**
 * skylark-grapejs - A version of garpejs that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-grapejs/
 * @license MIT
 */
define(["skylark-langx/langx","skylark-underscore","../utils/mixins","./config/config","./model/Selector","./model/Selectors","./view/ClassTagsView"],function(e,t,r,s,n,i,a){"use strict";const o=e=>t.isString(e)&&"#"==e[0],c=e=>t.isString(e)&&"."==e[0];return l=>{var g,d=l||{};return{Selector:n,Selectors:i,name:"SelectorManager",getConfig:()=>d,init(e={}){const t=(d={...s,...e}).em,r=d.pStylePrefix;return this.em=t,r&&(d.stylePrefix=r+d.stylePrefix),this.selectorTags=new a({collection:new i([],{em:t,config:d}),config:d}),(g=new i(d.selectors)).on("add",e=>t.trigger("selector:add",e)),g.on("remove",e=>t.trigger("selector:remove",e)),g.on("change",e=>t.trigger("selector:update",e,e.previousAttributes(),e.changedAttributes())),t.on("change:state",(e,r)=>t.trigger("selector:state",r)),this},postRender(){const e=this.getConfig().appendTo;if(e){(t.isElement(e)?e:document.querySelector(e)).appendChild(this.render([]))}},select(e,t={}){const s=Array.isArray(e)?e:[e],n=this.em.get("StyleManager").setTarget(s,t).filter(e=>e).map(e=>r.isComponent(e)?e:r.isRule(e)&&!e.get("selectorsAdd")?e:e.getSelectorsString());return this.selectorTags.componentChanged({targets:n}),this},setState(e){return this.em.setState(e),this},getState(){return this.em.setState()},addSelector(r,s={}){let i=e.clone(s);t.isObject(r)?i=r:i.name=r,o(i.name)?(i.name=i.name.substr(1),i.type=n.TYPE_ID):c(i.name)&&(i.name=i.name.substr(1)),i.label&&!i.name&&(i.name=this.escapeName(i.label));const a=i.name,l=a?this.get(a,i.type):g.where(i)[0];return l||g.add(i,{config:d})},getSelector:(e,t=n.TYPE_CLASS)=>(o(e)?(e=e.substr(1),t=n.TYPE_ID):c(e)&&(e=e.substr(1)),g.where({name:e,type:t})[0]),add(e,r={}){return t.isArray(e)?e.map(e=>this.addSelector(e,r)):this.addSelector(e,r)},addClass(e){const r=[];return t.isString(e)&&(e=e.trim().split(" ")),e.forEach(e=>r.push(this.addSelector(e))),r},get(e,r){if(t.isArray(e)){const t=[];return e.map(e=>this.getSelector(e)).filter(e=>e).forEach(e=>t.indexOf(e)<0&&t.push(e)),t}return this.getSelector(e,r)},getAll:()=>g,escapeName(e){const{escapeName:t}=d;return t?t(e):n.escapeName(e)},render(e){return e?(this.selectorTags=new a({collection:new i(e),config:d}),this.selectorTags.render().el):this.selectorTags.render().el}}}});
//# sourceMappingURL=../sourcemaps/selector_manager/index.js.map
