{"version":3,"sources":["storage_manager/index.js"],"names":["define","langx","defaults","LocalStorage","RemoteStorage","c","em","storages","defaultStorages","name","[object Object]","config","mixin","_disable","type","remote","local","currentStorage","this","loadDefaultProviders","setCurrent","getConfig","isAutosave","autosave","v","getStepsBeforeSave","stepsBeforeSave","id","storage","get","getStorages","getCurrent","data","clb","st","toStore","onStart","key","store","res","onEnd","err","onError","keys","keysF","result","i","len","length","push","load","reg","RegExp","itemKey","itemKeyR","replace","add","ctx","trigger","getCurrentStorage","autoload"],"mappings":";;;;;;;AAAAA,QACI,sBACA,kBACA,uBACA,yBACD,SAAUC,EAAMC,EAAUC,EAAcC,GACvC,aACA,MAAO,KACH,IAAIC,KACJ,IAAIC,EACJ,IAAIC,KACAC,KAIJ,OACIC,KAAM,iBACNC,KAAKC,MASD,OARAN,EAAIJ,EAAMW,SAASV,EAASS,GAC5BL,EAAKD,EAAEC,GACHD,EAAEQ,WACFR,EAAES,KAAO,GACbN,EAAgBO,OAAS,IAAIX,EAAcC,GAC3CG,EAAgBQ,MAAQ,IAAIb,EAAaE,GACzCA,EAAEY,eAAiBZ,EAAES,KACrBI,KAAKC,uBAAuBC,WAAWf,EAAES,MAClCI,MAEXG,UAAS,IACEhB,EAEXiB,WAAU,MACGjB,EAAEkB,SAEfb,YAAYc,GAER,OADAnB,EAAEkB,WAAaC,EACRN,MAEXO,mBAAkB,IACPpB,EAAEqB,gBAEbhB,mBAAmBc,GAEf,OADAnB,EAAEqB,gBAAkBF,EACbN,MAEXR,IAAIiB,EAAIC,GAEJ,OADArB,EAASoB,GAAMC,EACRV,MAEXW,IAAIF,GACOpB,EAASoB,IAAO,KAE3BG,YAAW,IACAvB,EAEXwB,WAAU,IACC1B,EAAEY,eAEbP,WAAWiB,GAEP,OADAtB,EAAEY,eAAiBU,EACZT,MAEXR,MAAMsB,EAAMC,GACR,MAAMC,EAAKhB,KAAKW,IAAIX,KAAKa,cACnBI,KACNjB,KAAKkB,QAAQ,QAASJ,GACtB,IAAK,IAAIK,KAAOL,EACZG,EAAQ9B,EAAEsB,GAAKU,GAAOL,EAAKK,GAE/B,OAAOH,EAAKA,EAAGI,MAAMH,EAASI,IAC1BN,GAAOA,EAAIM,GACXrB,KAAKsB,MAAM,QAASD,IACrBE,IACCvB,KAAKwB,QAAQ,QAASD,KACrB,MAET/B,KAAKiC,EAAMV,GACP,IAAIC,EAAKhB,KAAKW,IAAIX,KAAKa,cACnBa,KACAC,KACgB,iBAATF,IACPA,GAAQA,IACZzB,KAAKkB,QAAQ,OAAQO,GACrB,IAAK,IAAIG,EAAI,EAAGC,EAAMJ,EAAKK,OAAQF,EAAIC,EAAKD,IACxCF,EAAMK,KAAK5C,EAAEsB,GAAKgB,EAAKG,IAEvBZ,EACAA,EAAGgB,KAAKN,EAAOL,IACX,IAAIY,EAAM,IAAIC,OAAO,IAAM/C,EAAEsB,IAC7B,IAAK,IAAI0B,KAAWd,EAAK,CACrB,IAAIe,EAAWD,EAAQE,QAAQJ,EAAK,IACpCN,EAAOS,GAAYf,EAAIc,GAE3BpB,GAAOA,EAAIY,GACX3B,KAAKsB,MAAM,OAAQK,IACpBJ,IACCR,GAAOA,EAAIY,GACX3B,KAAKwB,QAAQ,OAAQD,KAGzBR,GAAOA,EAAIY,IAGnBnC,uBACI,IAAK,IAAIiB,KAAMnB,EACXU,KAAKsC,IAAI7B,EAAInB,EAAgBmB,IACjC,OAAOT,MAEXR,oBACI,OAAOQ,KAAKW,IAAIX,KAAKa,eAEzBrB,QAAQ+C,EAAKzB,GACL1B,IACAA,EAAGoD,QArGI,iBAsGPD,GAAOnD,EAAGoD,yBAA4BD,IAAQzB,KAGtDtB,MAAM+C,EAAKzB,GACH1B,IACAA,EAAGoD,QA1GE,eA2GLD,GAAOnD,EAAGoD,uBAA0BD,IAAQzB,KAGpDtB,QAAQ+C,EAAKzB,GACL1B,IACAA,EAAGoD,QA/GI,gBA+GgB1B,GACvByB,GAAOnD,EAAGoD,yBAA4BD,IAAQzB,GAC9Cd,KAAKsB,MAAMiB,EAAKzB,KAGxBtB,cAEI,OADgBQ,KAAKyC,qBACHzC,KAAKG,YAAYuC","file":"../../storage_manager/index.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    './config/config',\n    './model/LocalStorage',\n    './model/RemoteStorage'\n], function (langx,defaults, LocalStorage, RemoteStorage) {\n    'use strict';\n    return () => {\n        var c = {};\n        let em;\n        var storages = {};\n        var defaultStorages = {};\n        const eventStart = 'storage:start';\n        const eventEnd = 'storage:end';\n        const eventError = 'storage:error';\n        return {\n            name: 'StorageManager',\n            init(config = {}) {\n                c = langx.mixin({},defaults,config);\n                em = c.em;\n                if (c._disable)\n                    c.type = 0;\n                defaultStorages.remote = new RemoteStorage(c);\n                defaultStorages.local = new LocalStorage(c);\n                c.currentStorage = c.type;\n                this.loadDefaultProviders().setCurrent(c.type);\n                return this;\n            },\n            getConfig() {\n                return c;\n            },\n            isAutosave() {\n                return !!c.autosave;\n            },\n            setAutosave(v) {\n                c.autosave = !!v;\n                return this;\n            },\n            getStepsBeforeSave() {\n                return c.stepsBeforeSave;\n            },\n            setStepsBeforeSave(v) {\n                c.stepsBeforeSave = v;\n                return this;\n            },\n            add(id, storage) {\n                storages[id] = storage;\n                return this;\n            },\n            get(id) {\n                return storages[id] || null;\n            },\n            getStorages() {\n                return storages;\n            },\n            getCurrent() {\n                return c.currentStorage;\n            },\n            setCurrent(id) {\n                c.currentStorage = id;\n                return this;\n            },\n            store(data, clb) {\n                const st = this.get(this.getCurrent());\n                const toStore = {};\n                this.onStart('store', data);\n                for (let key in data) {\n                    toStore[c.id + key] = data[key];\n                }\n                return st ? st.store(toStore, res => {\n                    clb && clb(res);\n                    this.onEnd('store', res);\n                }, err => {\n                    this.onError('store', err);\n                }) : null;\n            },\n            load(keys, clb) {\n                var st = this.get(this.getCurrent());\n                var keysF = [];\n                var result = {};\n                if (typeof keys === 'string')\n                    keys = [keys];\n                this.onStart('load', keys);\n                for (var i = 0, len = keys.length; i < len; i++) {\n                    keysF.push(c.id + keys[i]);\n                }\n                if (st) {\n                    st.load(keysF, res => {\n                        var reg = new RegExp('^' + c.id + '');\n                        for (var itemKey in res) {\n                            var itemKeyR = itemKey.replace(reg, '');\n                            result[itemKeyR] = res[itemKey];\n                        }\n                        clb && clb(result);\n                        this.onEnd('load', result);\n                    }, err => {\n                        clb && clb(result);\n                        this.onError('load', err);\n                    });\n                } else {\n                    clb && clb(result);\n                }\n            },\n            loadDefaultProviders() {\n                for (var id in defaultStorages)\n                    this.add(id, defaultStorages[id]);\n                return this;\n            },\n            getCurrentStorage() {\n                return this.get(this.getCurrent());\n            },\n            onStart(ctx, data) {\n                if (em) {\n                    em.trigger(eventStart);\n                    ctx && em.trigger(`${ eventStart }:${ ctx }`, data);\n                }\n            },\n            onEnd(ctx, data) {\n                if (em) {\n                    em.trigger(eventEnd);\n                    ctx && em.trigger(`${ eventEnd }:${ ctx }`, data);\n                }\n            },\n            onError(ctx, data) {\n                if (em) {\n                    em.trigger(eventError, data);\n                    ctx && em.trigger(`${ eventError }:${ ctx }`, data);\n                    this.onEnd(ctx, data);\n                }\n            },\n            canAutoload() {\n                const storage = this.getCurrentStorage();\n                return storage && this.getConfig().autoload;\n            }\n        };\n    };\n});"]}