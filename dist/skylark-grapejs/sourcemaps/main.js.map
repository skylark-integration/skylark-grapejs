{"version":3,"sources":["main.js"],"names":["define","langx","$","startEditor","_","polyfills","pluginsInit","plugins","editors","defaultConfig","autorender","pluginsOpts","version","[object Object]","config","els","container","Error","mixin","el","isElement","document","querySelector","editor","init","forEach","pluginId","plugin","get","plgOptions","wplg","window","default","isFunction","console","warn","getModel","loadOnStart","render","push"],"mappings":";;;;;;;AAAAA,QACI,sBACA,iBACA,iBACA,qBACA,oBACA,0BACD,SACCC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,aACAD,IACA,MAAME,EAAUD,IACVE,KACAC,GACFC,WAAY,EACZH,WACAI,gBAEJ,OACIT,EAAAA,EACAM,QAAAA,EACAD,QAAAA,EACAK,QAAS,gBACTC,KAAKC,MACD,MAAMC,EAAMD,EAAOE,UACnB,IAAKD,EACD,MAAM,IAAIE,MAAM,4BACpBH,EAASb,EAAMiB,SACXT,EACAK,IAEGK,GAAKf,EAAEgB,UAAUL,GAAOA,EAAMM,SAASC,cAAcP,GAC5D,MAAMQ,EAASpB,EAAYW,GAAQU,OAmBnC,OAlBAV,EAAOP,QAAQkB,QAAQC,IACnB,IAAIC,EAASpB,EAAQqB,IAAIF,GACzB,MAAMG,EAAaf,EAAOH,YAAYe,OACtC,IAAKC,EAAQ,CACT,MAAMG,EAAOC,OAAOL,GACpBC,EAASG,GAAQA,EAAKE,QAAUF,EAAKE,QAAUF,EAE/CH,EACAA,EAAOJ,EAAQM,GACRzB,EAAE6B,WAAWP,GACpBA,EAASH,EAAQM,GAEjBK,QAAQC,eAAgBT,iBAGhCH,EAAOa,WAAWC,cAClBvB,EAAOJ,YAAca,EAAOe,SAC5B9B,EAAQ+B,KAAKhB,GACNA","file":"../main.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-jquery',\n    './editor/index',\n    'skylark-underscore',\n    './utils/polyfills',\n    './plugin_manager/index'\n], function (\n    langx,\n    $, \n    startEditor, \n    _, \n    polyfills, \n    pluginsInit\n) {\n    'use strict';\n    polyfills();\n    const plugins = pluginsInit();\n    const editors = [];\n    const defaultConfig = {\n        autorender: 1,\n        plugins: [],\n        pluginsOpts: {}\n    };\n    return {\n        $,\n        editors,\n        plugins,\n        version: '<# VERSION #>',\n        init(config = {}) {\n            const els = config.container;\n            if (!els)\n                throw new Error(\"'container' is required\");\n            config = langx.mixin({},\n                defaultConfig,\n                config\n            );\n            config.el = _.isElement(els) ? els : document.querySelector(els);\n            const editor = startEditor(config).init();\n            config.plugins.forEach(pluginId => {\n                let plugin = plugins.get(pluginId);\n                const plgOptions = config.pluginsOpts[pluginId] || {};\n                if (!plugin) {\n                    const wplg = window[pluginId];\n                    plugin = wplg && wplg.default ? wplg.default : wplg;\n                }\n                if (plugin) {\n                    plugin(editor, plgOptions);\n                } else if (_.isFunction(pluginId)) {\n                    pluginId(editor, plgOptions);\n                } else {\n                    console.warn(`Plugin ${ pluginId } not found`);\n                }\n            });\n            editor.getModel().loadOnStart();\n            config.autorender && editor.render();\n            editors.push(editor);\n            return editor;\n        }\n    };\n});"]}