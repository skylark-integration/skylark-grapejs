{"version":3,"sources":["trait_manager/model/Trait.js"],"names":["define","Backbone","a","Model","extend","defaults","type","label","name","min","max","unit","step","value","target","default","placeholder","changeProp","options","[object Object]","this","get","unset","targetEvent","listenTo","targetUpdated","attributes","getTargetValue","set","fromTarget","getAttributes","isUndefined","opts","valueToSet","attrs","final","toSet","avoidStore"],"mappings":";;;;;;;AAAAA,QACI,mBACA,sBACD,SAAUC,EAAUC,GACnB,aACA,OAAOD,EAASE,MAAMC,QAClBC,UACIC,KAAM,OACNC,MAAO,GACPC,KAAM,GACNC,IAAK,GACLC,IAAK,GACLC,KAAM,GACNC,KAAM,EACNC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,YAAa,GACbC,WAAY,EACZC,YAEJC,aACI,MAAML,EAASM,KAAKC,IAAI,UAClBb,EAAOY,KAAKC,IAAI,QAChBJ,EAAaG,KAAKC,IAAI,cAC5B,GAAIP,EAAQ,CACRM,KAAKN,OAASA,EACdM,KAAKE,MAAM,UACX,MAAMC,EAAcN,YAAwBT,yBAAgCA,IAC5EY,KAAKI,SAASV,EAAQS,EAAaH,KAAKK,iBAGhDN,QACI,OAAOC,KAAKM,YAEhBP,gBACI,MAAMN,EAAQO,KAAKO,iBACnBP,KAAKQ,KAAMf,MAAAA,IAAWgB,WAAY,KAEtCV,iBACI,MAAMX,EAAOY,KAAKC,IAAI,QAChBP,EAASM,KAAKN,OACpB,IAAID,EAMJ,OAJIA,EADAO,KAAKC,IAAI,cACDP,EAAOO,IAAIb,GAEXM,EAAOgB,gBAAgBtB,GAE3BN,EAAE6B,YAAYlB,GAAiB,GAARA,GAEnCM,eAAeN,EAAOmB,MAClB,MAAMlB,EAASM,KAAKN,OACdN,EAAOY,KAAKC,IAAI,QACtB,GAAInB,EAAE6B,YAAYlB,GACd,OACJ,IAAIoB,EAAapB,EAMjB,GALc,UAAVA,EACAoB,GAAa,EACI,SAAVpB,IACPoB,GAAa,GAEbb,KAAKC,IAAI,cACTP,EAAOc,IAAIpB,EAAMyB,EAAYD,OAC1B,CACH,MAAME,MAAapB,EAAOO,IAAI,eAC9Ba,EAAM1B,GAAQyB,EACdnB,EAAOc,IAAI,aAAcM,EAAOF,KAGxCb,kBAAkBN,EAAOsB,EAAQ,EAAGH,MAChC,MAAMI,GAAUvB,MAAAA,GAChBO,KAAKQ,IAAIQ,MACFJ,EACHK,WAAY,IAEZF,IACAf,KAAKQ,IAAI,QAAS,GAAII,GACtBZ,KAAKQ,IAAIQ,EAAOJ,KAGxBb,eACI,MAAML,EAASM,KAAKN,OACdN,EAAOY,KAAKC,IAAI,QACtB,IAAIR,EACJ,GAAIC,EAAQ,CACR,MAAMoB,EAAQpB,EAAOO,IAAI,cACzBR,EAAQO,KAAKC,IAAI,cAAgBP,EAAOO,IAAIb,GAAQ0B,EAAM1B,GAE9D,OAAOK,GAASO,KAAKC,IAAI,UAAYD,KAAKC,IAAI","file":"../../../trait_manager/model/Trait.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore'\n], function (Backbone, a) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            type: 'text',\n            label: '',\n            name: '',\n            min: '',\n            max: '',\n            unit: '',\n            step: 1,\n            value: '',\n            target: '',\n            default: '',\n            placeholder: '',\n            changeProp: 0,\n            options: []\n        },\n        initialize() {\n            const target = this.get('target');\n            const name = this.get('name');\n            const changeProp = this.get('changeProp');\n            if (target) {\n                this.target = target;\n                this.unset('target');\n                const targetEvent = changeProp ? `change:${ name }` : `change:attributes:${ name }`;\n                this.listenTo(target, targetEvent, this.targetUpdated);\n            }\n        },\n        props() {\n            return this.attributes;\n        },\n        targetUpdated() {\n            const value = this.getTargetValue();\n            this.set({ value }, { fromTarget: 1 });\n        },\n        getTargetValue() {\n            const name = this.get('name');\n            const target = this.target;\n            let value;\n            if (this.get('changeProp')) {\n                value = target.get(name);\n            } else {\n                value = target.getAttributes()[name];\n            }\n            return !a.isUndefined(value) ? value : '';\n        },\n        setTargetValue(value, opts = {}) {\n            const target = this.target;\n            const name = this.get('name');\n            if (a.isUndefined(value))\n                return;\n            let valueToSet = value;\n            if (value === 'false') {\n                valueToSet = false;\n            } else if (value === 'true') {\n                valueToSet = true;\n            }\n            if (this.get('changeProp')) {\n                target.set(name, valueToSet, opts);\n            } else {\n                const attrs = { ...target.get('attributes') };\n                attrs[name] = valueToSet;\n                target.set('attributes', attrs, opts);\n            }\n        },\n        setValueFromInput(value, final = 1, opts = {}) {\n            const toSet = { value };\n            this.set(toSet, {\n                ...opts,\n                avoidStore: 1\n            });\n            if (final) {\n                this.set('value', '', opts);\n                this.set(toSet, opts);\n            }\n        },\n        getInitValue() {\n            const target = this.target;\n            const name = this.get('name');\n            let value;\n            if (target) {\n                const attrs = target.get('attributes');\n                value = this.get('changeProp') ? target.get(name) : attrs[name];\n            }\n            return value || this.get('value') || this.get('default');\n        }\n    });\n});"]}