{"version":3,"sources":["trait_manager/model/Traits.js"],"names":["define","Backbone","a","Trait","TraitFactory","Collection","extend","model","[object Object]","coll","options","this","em","listenTo","handleAdd","handleReset","previousModels","forEach","trigger","target","models","opt","isString","isArray","tm","get","tmOpts","getConfig","tf","i","len","length","str","build","prototype","add","apply"],"mappings":";;;;;;;AAAAA,QACI,mBACA,qBACA,UACA,kBACD,SAAUC,EAAUC,EAAGC,EAAOC,GAC7B,aACA,OAAOH,EAASI,WAAWC,QACvBC,MAAOJ,EACPK,WAAWC,EAAMC,MACbC,KAAKC,GAAKF,EAAQE,IAAM,GACxBD,KAAKE,SAASF,KAAM,MAAOA,KAAKG,WAChCH,KAAKE,SAASF,KAAM,QAASA,KAAKI,cAEtCP,YAAYC,GAAMO,eACdA,UAEAA,EAAeC,QAAQV,GAASA,EAAMW,QAAQ,YAElDV,UAAUD,GACN,MAAMY,EAASR,KAAKQ,OAChBA,IACAZ,EAAMY,OAASA,IAGvBX,UAAUW,GACNR,KAAKQ,OAASA,GAElBX,IAAIY,EAAQC,GACR,MAAMT,EAAKD,KAAKC,GAChB,GAAIV,EAAEoB,SAASF,IAAWlB,EAAEqB,QAAQH,GAAS,CACzC,MAAMI,EAAKZ,GAAMA,EAAGa,KAAOb,EAAGa,IAAI,gBAC5BC,EAASF,GAAMA,EAAGG,YAClBC,EAAKxB,EAAasB,GACpBxB,EAAEoB,SAASF,KACXA,GAAUA,IAEd,IAAK,IAAIS,EAAI,EAAGC,EAAMV,EAAOW,OAAQF,EAAIC,EAAKD,IAAK,CAC/C,MAAMG,EAAMZ,EAAOS,GACbtB,EAAQL,EAAEoB,SAASU,GAAOJ,EAAGK,MAAMD,GAAK,GAAKA,EACnDzB,EAAMY,OAASR,KAAKQ,OACpBC,EAAOS,GAAKtB,GAGpB,OAAON,EAASI,WAAW6B,UAAUC,IAAIC,MAAMzB,MAC3CS,EACAC","file":"../../../trait_manager/model/Traits.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    './Trait',\n    './TraitFactory'\n], function (Backbone, a, Trait, TraitFactory) {\n    'use strict';\n    return Backbone.Collection.extend({\n        model: Trait,\n        initialize(coll, options = {}) {\n            this.em = options.em || '';\n            this.listenTo(this, 'add', this.handleAdd);\n            this.listenTo(this, 'reset', this.handleReset);\n        },\n        handleReset(coll, {\n            previousModels = []\n        } = {}) {\n            previousModels.forEach(model => model.trigger('remove'));\n        },\n        handleAdd(model) {\n            const target = this.target;\n            if (target) {\n                model.target = target;\n            }\n        },\n        setTarget(target) {\n            this.target = target;\n        },\n        add(models, opt) {\n            const em = this.em;\n            if (a.isString(models) || a.isArray(models)) {\n                const tm = em && em.get && em.get('TraitManager');\n                const tmOpts = tm && tm.getConfig();\n                const tf = TraitFactory(tmOpts);\n                if (a.isString(models)) {\n                    models = [models];\n                }\n                for (var i = 0, len = models.length; i < len; i++) {\n                    const str = models[i];\n                    const model = a.isString(str) ? tf.build(str)[0] : str;\n                    model.target = this.target;\n                    models[i] = model;\n                }\n            }\n            return Backbone.Collection.prototype.add.apply(this, [\n                models,\n                opt\n            ]);\n        }\n    });\n});"]}