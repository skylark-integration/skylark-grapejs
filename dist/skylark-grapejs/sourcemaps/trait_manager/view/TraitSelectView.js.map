{"version":3,"sources":["trait_manager/view/TraitSelectView.js"],"names":["define","Backbone","a","TraitView","$","extend","[object Object]","this","listenTo","model","rerender","ppfx","clsField","$input","em","propName","get","input","forEach","el","name","value","style","attrs","isString","label","isUndefined","id","replace","resultName","t","val","getTargetValue"],"mappings":";;;;;;;AAAAA,QACI,mBACA,qBACA,eACD,SAAUC,EAAUC,EAAGC,GACtB,aACA,MAAMC,EAAIH,EAASG,EACnB,OAAOD,EAAUE,QACbC,OACIC,KAAKC,SAASD,KAAKE,MAAO,iBAAkBF,KAAKG,WAErDJ,gBACI,MAAMK,KAACA,EAAIC,SAAEA,GAAYL,KACzB,qBAAuBK,wDAEdD,qCACEA,gDAIfL,aACI,IAAKC,KAAKM,OAAQ,CACd,MAAMJ,MAACA,EAAKK,GAAEA,GAAMP,KACdQ,EAAWN,EAAMO,IAAI,QAE3B,IAAIC,EAAQ,YADCR,EAAMO,IAAI,gBAElBE,QAAQC,IACT,IACIC,EAAMC,EAAOC,EADbC,EAAQ,GAERrB,EAAEsB,SAASL,IACXC,EAAOD,EACPE,EAAQF,IAERC,EAAOD,EAAGC,MAAQD,EAAGM,OAASN,EAAGE,MACjCA,KAAYnB,EAAEwB,YAAYP,EAAGE,OAASF,EAAGQ,GAAKR,EAAGE,QAASO,QAAQ,KAAM,UAExEL,IADAD,EAAQH,EAAGG,MAAQH,EAAGG,MAAMM,QAAQ,KAAM,UAAY,eACzBN,KAAY,IAE7C,MAAMO,EAAaf,EAAGgB,iCAAkCf,KAAcM,MAAaD,EACnFH,qBAA4BI,KAAWE,KAAWM,eAEtDZ,GAAS,YACTV,KAAKM,OAAST,EAAEa,GAChB,MAAMc,EAAMtB,EAAMuB,kBACjB9B,EAAEwB,YAAYK,IAAQxB,KAAKM,OAAOkB,IAAIA,GAE3C,OAAOxB,KAAKM,OAAOG,IAAI","file":"../../../trait_manager/view/TraitSelectView.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    './TraitView'\n], function (Backbone, a, TraitView) {\n    'use strict';\n    const $ = Backbone.$;\n    return TraitView.extend({\n        init() {\n            this.listenTo(this.model, 'change:options', this.rerender);\n        },\n        templateInput() {\n            const {ppfx, clsField} = this;\n            return `<div class=\"${ clsField }\">\n      <div data-input></div>\n      <div class=\"${ ppfx }sel-arrow\">\n        <div class=\"${ ppfx }d-s-arrow\"></div>\n      </div>\n    </div>`;\n        },\n        getInputEl() {\n            if (!this.$input) {\n                const {model, em} = this;\n                const propName = model.get('name');\n                const opts = model.get('options') || [];\n                let input = '<select>';\n                opts.forEach(el => {\n                    let attrs = '';\n                    let name, value, style;\n                    if (a.isString(el)) {\n                        name = el;\n                        value = el;\n                    } else {\n                        name = el.name || el.label || el.value;\n                        value = `${ a.isUndefined(el.value) ? el.id : el.value }`.replace(/\"/g, '&quot;');\n                        style = el.style ? el.style.replace(/\"/g, '&quot;') : '';\n                        attrs += style ? ` style=\"${ style }\"` : '';\n                    }\n                    const resultName = em.t(`traitManager.traits.options.${ propName }.${ value }`) || name;\n                    input += `<option value=\"${ value }\"${ attrs }>${ resultName }</option>`;\n                });\n                input += '</select>';\n                this.$input = $(input);\n                const val = model.getTargetValue();\n                !a.isUndefined(val) && this.$input.val(val);\n            }\n            return this.$input.get(0);\n        }\n    });\n});"]}