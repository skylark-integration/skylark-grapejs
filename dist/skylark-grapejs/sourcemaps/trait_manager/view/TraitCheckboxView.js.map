{"version":3,"sources":["trait_manager/view/TraitCheckboxView.js"],"names":["define","a","TraitView","extend","appendInput","[object Object]","ppfx","clsField","this","value","getInputElem","checked","model","set","getCheckedValue","result","valueTrue","valueFalse","attributes","isUndefined","args","toInit","$input","el","prototype","getInputEl","apply","targetValue","target","name","get"],"mappings":";;;;;;;AAAAA,QACI,qBACA,eACD,SAAUC,EAAGC,GACZ,aACA,OAAOA,EAAUC,QACbC,YAAa,EACbC,gBACI,MAAMC,KAACA,EAAIC,SAAEA,GAAYC,KACzB,uBAAyBD,iCACpBD,+BAGTD,WACI,MAAMI,EAAQD,KAAKE,eAAeC,QAClCH,KAAKI,MAAMC,IAAI,QAASL,KAAKM,gBAAgBL,KAEjDJ,gBAAgBM,GACZ,IAAII,EAASJ,EACb,MAAMK,UAACA,EAASC,WAAEA,GAAcT,KAAKI,MAAMM,WAO3C,OANIH,IAAWd,EAAEkB,YAAYH,KACzBD,EAASC,GAERD,GAAWd,EAAEkB,YAAYF,KAC1BF,EAASE,GAENF,GAEXV,cAAce,GACV,MAAMC,GAAUb,KAAKc,OACfC,EAAKrB,EAAUsB,UAAUC,WAAWC,MAAMlB,KAAMY,GACtD,GAAIC,EAAQ,CACR,IAAIV,EAASgB,EACb,MAAMf,MAACA,EAAKgB,OAAEA,GAAUpB,MAClBQ,UAACA,EAASC,WAAEA,GAAcL,EAAMM,WAChCW,EAAOjB,EAAMkB,IAAI,QACnBlB,EAAMkB,IAAI,cAEVH,EADAhB,EAAUiB,EAAOE,IAAID,GAIrBlB,MADAgB,EAAcC,EAAOE,IAAI,cAAcD,KACE,KAAhBF,GAExB1B,EAAEkB,YAAYF,IAAeU,IAAgBV,IAC9CN,GAAU,GAEdY,EAAGZ,QAAUA,EAEjB,OAAOY","file":"../../../trait_manager/view/TraitCheckboxView.js","sourcesContent":["define([\n    'skylark-underscore',\n    './TraitView'\n], function (a, TraitView) {\n    'use strict';\n    return TraitView.extend({\n        appendInput: 0,\n        templateInput() {\n            const {ppfx, clsField} = this;\n            return `<label class=\"${ clsField }\" data-input>\n    <i class=\"${ ppfx }chk-icon\"></i>\n  </label>`;\n        },\n        onChange() {\n            const value = this.getInputElem().checked;\n            this.model.set('value', this.getCheckedValue(value));\n        },\n        getCheckedValue(checked) {\n            let result = checked;\n            const {valueTrue, valueFalse} = this.model.attributes;\n            if (result && !a.isUndefined(valueTrue)) {\n                result = valueTrue;\n            }\n            if (!result && !a.isUndefined(valueFalse)) {\n                result = valueFalse;\n            }\n            return result;\n        },\n        getInputEl(...args) {\n            const toInit = !this.$input;\n            const el = TraitView.prototype.getInputEl.apply(this, args);\n            if (toInit) {\n                let checked, targetValue;\n                const {model, target} = this;\n                const {valueTrue, valueFalse} = model.attributes;\n                const name = model.get('name');\n                if (model.get('changeProp')) {\n                    checked = target.get(name);\n                    targetValue = checked;\n                } else {\n                    targetValue = target.get('attributes')[name];\n                    checked = targetValue || targetValue === '' ? !0 : !1;\n                }\n                if (!a.isUndefined(valueFalse) && targetValue === valueFalse) {\n                    checked = !1;\n                }\n                el.checked = checked;\n            }\n            return el;\n        }\n    });\n});"]}