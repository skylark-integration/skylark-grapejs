{"version":3,"sources":["trait_manager/view/TraitView.js"],"names":["define","Backbone","a","b","$","View","extend","events","eventCapture","appendInput","[object Object]","this","model","get","ppfx","label","getLabel","clsField","o","config","target","type","attributes","em","pfx","stylePrefix","pStylePrefix","onValueChange","removeView","forEach","event","clb","off","listenTo","view","render","rerender","delegateEvents","init","component","trait","elInput","getInputElem","remove","removed","el","isUndefined","value","set","onEvent","getClbOpts","opts","fromTarget","setInputValue","postUpdate","val","getValueForTarget","setTargetValue","$el","tpl","templateLabel","createLabel","find","append","name","t","capitalize","replace","$input","md","plh","min","max","getModelValue","input","i18nAttr","attr","silent","prop","getElInput","attrs","inputs","length","createInput","getInputEl","isString","innerHTML","firstChild","appendChild","insertBefore","noLabel","onUpdate","hasLabel","cls","tmpl","templateInput","isFunction","empty","renderLabel","renderField","className","onRender"],"mappings":"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","file":"../../../trait_manager/view/TraitView.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins'\n], function (Backbone, a, b) {\n    'use strict';\n    const $ = Backbone.$;\n    return Backbone.View.extend({\n        events: {},\n        eventCapture: ['change'],\n        appendInput: 1,\n        attributes() {\n            return this.model.get('attributes');\n        },\n        templateLabel() {\n            const {ppfx} = this;\n            const label = this.getLabel();\n            return `<div class=\"${ ppfx }label\" title=\"${ label }\">${ label }</div>`;\n        },\n        templateInput() {\n            const {clsField} = this;\n            return `<div class=\"${ clsField }\" data-input></div>`;\n        },\n        initialize(o = {}) {\n            const {\n                config = {}\n            } = o;\n            const {model, eventCapture} = this;\n            const {target} = model;\n            const {type} = model.attributes;\n            this.config = config;\n            this.em = config.em;\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.target = target;\n            const {ppfx} = this;\n            this.clsField = `${ ppfx }field ${ ppfx }field-${ type }`;\n            [\n                [\n                    'change:value',\n                    this.onValueChange\n                ],\n                [\n                    'remove',\n                    this.removeView\n                ]\n            ].forEach(([event, clb]) => {\n                model.off(event, clb);\n                this.listenTo(model, event, clb);\n            });\n            model.view = this;\n            this.listenTo(model, 'change:label', this.render);\n            this.listenTo(model, 'change:placeholder', this.rerender);\n            eventCapture.forEach(event => this.events[event] = 'onChange');\n            this.delegateEvents();\n            this.init();\n        },\n        getClbOpts() {\n            return {\n                component: this.target,\n                trait: this.model,\n                elInput: this.getInputElem()\n            };\n        },\n        removeView() {\n            this.remove();\n            this.removed();\n        },\n        init() {\n        },\n        removed() {\n        },\n        onRender() {\n        },\n        onUpdate() {\n        },\n        onEvent() {\n        },\n        onChange(event) {\n            const el = this.getInputElem();\n            if (el && !a.isUndefined(el.value)) {\n                this.model.set('value', el.value);\n            }\n            this.onEvent({\n                ...this.getClbOpts(),\n                event\n            });\n        },\n        getValueForTarget() {\n            return this.model.get('value');\n        },\n        setInputValue(value) {\n            const el = this.getInputElem();\n            el && (el.value = value);\n        },\n        onValueChange(model, value, opts = {}) {\n            if (opts.fromTarget) {\n                this.setInputValue(model.get('value'));\n                this.postUpdate();\n            } else {\n                const val = this.getValueForTarget();\n                model.setTargetValue(val, opts);\n            }\n        },\n        renderLabel() {\n            const {$el, target} = this;\n            const label = this.getLabel();\n            let tpl = this.templateLabel(target);\n            if (this.createLabel) {\n                tpl = this.createLabel({\n                    label,\n                    component: target,\n                    trait: this\n                }) || '';\n            }\n            $el.find('[data-label]').append(tpl);\n        },\n        getLabel() {\n            const {em} = this;\n            const {label, name} = this.model.attributes;\n            return em.t(`traitManager.traits.labels.${ name }`) || b.capitalize(label || name).replace(/-/g, ' ');\n        },\n        getComponent() {\n            return this.target;\n        },\n        getInputEl() {\n            if (!this.$input) {\n                const {em, model} = this;\n                const md = model;\n                const {name} = model.attributes;\n                const plh = md.get('placeholder') || md.get('default') || '';\n                const type = md.get('type') || 'text';\n                const min = md.get('min');\n                const max = md.get('max');\n                const value = this.getModelValue();\n                const input = $(`<input type=\"${ type }\" placeholder=\"${ plh }\">`);\n                const i18nAttr = em.t(`traitManager.traits.attributes.${ name }`) || {};\n                input.attr(i18nAttr);\n                if (!a.isUndefined(value)) {\n                    md.set({ value }, { silent: true });\n                    input.prop('value', value);\n                }\n                if (min) {\n                    input.prop('min', min);\n                }\n                if (max) {\n                    input.prop('max', max);\n                }\n                this.$input = input;\n            }\n            return this.$input.get(0);\n        },\n        getInputElem() {\n            const {input, $input} = this;\n            return input || $input && $input.get && $input.get(0) || this.getElInput();\n        },\n        getModelValue() {\n            let value;\n            const model = this.model;\n            const target = this.target;\n            const name = model.get('name');\n            if (model.get('changeProp')) {\n                value = target.get(name);\n            } else {\n                const attrs = target.get('attributes');\n                value = model.get('value') || attrs[name];\n            }\n            return !a.isUndefined(value) ? value : '';\n        },\n        getElInput() {\n            return this.elInput;\n        },\n        renderField() {\n            const {$el, appendInput, model} = this;\n            const inputs = $el.find('[data-input]');\n            const el = inputs[inputs.length - 1];\n            let tpl = model.el;\n            if (!tpl) {\n                tpl = this.createInput ? this.createInput(this.getClbOpts()) : this.getInputEl();\n            }\n            if (a.isString(tpl)) {\n                el.innerHTML = tpl;\n                this.elInput = el.firstChild;\n            } else {\n                appendInput ? el.appendChild(tpl) : el.insertBefore(tpl, el.firstChild);\n                this.elInput = tpl;\n            }\n            model.el = this.elInput;\n        },\n        hasLabel() {\n            const {label} = this.model.attributes;\n            return !this.noLabel && label !== false;\n        },\n        rerender() {\n            this.model.el = null;\n            this.render();\n        },\n        postUpdate() {\n            this.onUpdate(this.getClbOpts());\n        },\n        render() {\n            const {$el, pfx, ppfx, model} = this;\n            const {type} = model.attributes;\n            const hasLabel = this.hasLabel && this.hasLabel();\n            const cls = `${ pfx }trait`;\n            this.$input = null;\n            let tmpl = `<div class=\"${ cls }\">\n      ${ hasLabel ? `<div class=\"${ ppfx }label-wrp\" data-label></div>` : '' }\n      <div class=\"${ ppfx }field-wrp ${ ppfx }field-wrp--${ type }\" data-input>\n        ${ this.templateInput ? a.isFunction(this.templateInput) ? this.templateInput(this.getClbOpts()) : this.templateInput : '' }\n      </div>\n    </div>`;\n            $el.empty().append(tmpl);\n            hasLabel && this.renderLabel();\n            this.renderField();\n            this.el.className = `${ cls }__wrp`;\n            this.postUpdate();\n            this.onRender(this.getClbOpts());\n            return this;\n        }\n    });\n});"]}