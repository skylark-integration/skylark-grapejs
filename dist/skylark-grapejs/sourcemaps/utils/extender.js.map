{"version":3,"sources":["utils/extender.js"],"names":["define","_","$"],"mappings":";;;;;;;AAAAA,QAAQ,sBAAuB,SAAUC,GACrC,aACA,MAAO,EAAEC,EAAAA","file":"../../utils/extender.js","sourcesContent":["define(['skylark-underscore'], function (_) {\n    'use strict';\n    return ({$}) => {\n        return;//modified by lwf\n        if ($ && $.prototype.constructor.name !== 'jQuery') {\n            const fn = $.fn;\n            fn.hide = function () {\n                return this.css('display', 'none');\n            };\n            fn.show = function () {\n                return this.css('display', 'block');\n            };\n            fn.focus = function () {\n                const el = this.get(0);\n                el && el.focus();\n                return this;\n            };\n            fn.bind = function (ev, h) {\n                return this.on(ev, h);\n            };\n            fn.unbind = function (ev, h) {\n                if (_.isObject(ev)) {\n                    for (let name in ev) {\n                        ev.hasOwnProperty(name) && this.off(name, ev[name]);\n                    }\n                    return this;\n                } else {\n                    return this.off(ev, h);\n                }\n            };\n            fn.click = function (h) {\n                return h ? this.on('click', h) : this.trigger('click');\n            };\n            fn.change = function (h) {\n                return h ? this.on('change', h) : this.trigger('change');\n            };\n            fn.keydown = function (h) {\n                return h ? this.on('keydown', h) : this.trigger('keydown');\n            };\n            fn.delegate = function (selector, events, data, handler) {\n                if (!handler) {\n                    handler = data;\n                }\n                return this.on(events, selector, function (e) {\n                    e.data = data;\n                    handler(e);\n                });\n            };\n            fn.scrollLeft = function () {\n                let el = this.get(0);\n                el = el.nodeType == 9 ? el.defaultView : el;\n                let win = el instanceof Window ? el : null;\n                return win ? win.pageXOffset : el.scrollLeft || 0;\n            };\n            fn.scrollTop = function () {\n                let el = this.get(0);\n                el = el.nodeType == 9 ? el.defaultView : el;\n                let win = el instanceof Window ? el : null;\n                return win ? win.pageYOffset : el.scrollTop || 0;\n            };\n            const offset = $.prototype.offset;\n            fn.offset = function (coords) {\n                let top, left;\n                if (coords) {\n                    top = coords.top;\n                    left = coords.left;\n                }\n                if (typeof top != 'undefined') {\n                    this.css('top', `${ top }px`);\n                }\n                if (typeof left != 'undefined') {\n                    this.css('left', `${ left }px`);\n                }\n                return offset.call(this);\n            };\n            $.map = function (items, clb) {\n                const ar = [];\n                for (var i = 0; i < items.length; i++) {\n                    ar.push(clb(items[i], i));\n                }\n                return ar;\n            };\n            const indexOf = Array.prototype.indexOf;\n            $.inArray = function (val, arr, i) {\n                return arr == null ? -1 : indexOf.call(arr, val, i);\n            };\n            $.Event = function (src, props) {\n                if (!(this instanceof $.Event)) {\n                    return new $.Event(src, props);\n                }\n                this.type = src;\n                this.isDefaultPrevented = () => false;\n            };\n        }\n    };\n});"]}