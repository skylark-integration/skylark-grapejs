{"version":3,"sources":["utils/Droppable.js"],"names":["define","mixins","_","[object Object]","em","rootEl","this","el","get","getFrames","map","frame","getEl","els","Array","isArray","counter","bindAll","forEach","toggleEffects","enable","method","handleDragEnter","handleDragOver","handleDrop","handleDragLeave","cancel","ev","dragStop","over","runDefault","preserveSelected","trigger","updateCounter","value","endDrop","dt","dataTransfer","utils","canvas","container","getBody","dragContent","content","stopDefault","inAbsoluteMode","wrapper","getWrapper","target","append","dragger","run","event","guidesInfo","center","onEnd","cancelled","comp","left","top","position","getStyle","addStyle","handleDragEnd","remove","stop","cnt","sorter","Sorter","wmargin","nested","canvasRelative","direction","placer","getPlacerEl","containerSel","itemSel","pfx","onEndMove","model","document","getFrameEl","contentDocument","setDropContent","startSort","moved","endMove","set","preventDefault","getContentByData","style","border","types","files","getData","length","i","file","type","split","push","attributes","alt","name","indexOf","replace","href","json","JSON","parse","result"],"mappings":"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","file":"../../utils/Droppable.js","sourcesContent":["define([\n    './mixins',\n    'skylark-underscore'\n], function (mixins, _) {\n    'use strict';\n    return class Droppable {\n        constructor(em, rootEl) {\n            this.em = em;\n            const el = rootEl || em.get('Canvas').getFrames().map(frame => frame.get('root').getEl());\n            const els = Array.isArray(el) ? el : [el];\n            this.el = el;\n            this.counter = 0;\n            _.bindAll(this, 'handleDragEnter', 'handleDragOver', 'handleDrop', 'handleDragLeave');\n            els.forEach(el => this.toggleEffects(el, 1));\n            return this;\n        }\n        toggleEffects(el, enable) {\n\n            const method = enable ? 'on' : 'off';\n            mixins[method](el, 'dragenter', this.handleDragEnter);\n            mixins[method](el, 'dragover', this.handleDragOver);\n            mixins[method](el, 'drop', this.handleDrop);\n            mixins[method](el, 'dragleave', this.handleDragLeave);\n        }\n        endDrop(cancel, ev) {\n            const {em, dragStop} = this;\n            this.counter = 0;\n            this.over = 0;\n            dragStop && dragStop(cancel);\n            em.runDefault({ preserveSelected: 1 });\n            em.trigger('canvas:dragend', ev);\n        }\n        handleDragLeave(ev) {\n            this.updateCounter(-1, ev);\n        }\n        updateCounter(value, ev) {\n            this.counter += value;\n            this.counter === 0 && this.endDrop(1, ev);\n        }\n        handleDragEnter(ev) {\n            const {em} = this;\n            const dt = ev.dataTransfer;\n            this.updateCounter(1, ev);\n            if (this.over)\n                return;\n            this.over = 1;\n            const utils = em.get('Utils');\n            const canvas = em.get('Canvas');\n            const container = canvas.getBody();\n            let content = em.get('dragContent') || '<br>';\n            let dragStop, dragContent;\n            em.stopDefault();\n            if (em.inAbsoluteMode()) {\n                const wrapper = em.get('DomComponents').getWrapper();\n                const target = wrapper.append({})[0];\n                const dragger = em.get('Commands').run('core:component-drag', {\n                    event: ev,\n                    guidesInfo: 1,\n                    center: 1,\n                    target,\n                    onEnd: (ev, dragger, {cancelled}) => {\n                        if (!cancelled) {\n                            const comp = wrapper.append(content)[0];\n                            const {left, top, position} = target.getStyle();\n                            comp.addStyle({\n                                left,\n                                top,\n                                position\n                            });\n                            this.handleDragEnd(comp, dt);\n                        }\n                        target.remove();\n                    }\n                });\n                dragStop = cancel => dragger.stop(ev, { cancel });\n                dragContent = cnt => content = cnt;\n            } else {\n                const sorter = new utils.Sorter({\n                    em,\n                    wmargin: 1,\n                    nested: 1,\n                    canvasRelative: 1,\n                    direction: 'a',\n                    container,\n                    placer: canvas.getPlacerEl(),\n                    containerSel: '*',\n                    itemSel: '*',\n                    pfx: 'gjs-',\n                    onEndMove: model => this.handleDragEnd(model, dt),\n                    document: canvas.getFrameEl().contentDocument\n                });\n                sorter.setDropContent(content);\n                sorter.startSort();\n                this.sorter = sorter;\n                dragStop = cancel => {\n                    cancel && (sorter.moved = 0);\n                    sorter.endMove();\n                };\n                dragContent = content => sorter.setDropContent(content);\n            }\n            this.dragStop = dragStop;\n            this.dragContent = dragContent;\n            em.trigger('canvas:dragenter', dt, content);\n        }\n        handleDragEnd(model, dt) {\n            if (!model)\n                return;\n            const {em} = this;\n            em.set('dragResult', model);\n            em.trigger('canvas:drop', dt, model);\n        }\n        handleDragOver(ev) {\n            ev.preventDefault();\n            this.em.trigger('canvas:dragover', ev);\n        }\n        handleDrop(ev) {\n            ev.preventDefault();\n            const {dragContent} = this;\n            const dt = ev.dataTransfer;\n            const content = this.getContentByData(dt).content;\n            ev.target.style.border = '';\n            content && dragContent && dragContent(content);\n            this.endDrop(!content, ev);\n        }\n        getContentByData(dataTransfer) {\n            const em = this.em;\n            const types = dataTransfer.types;\n            const files = dataTransfer.files || [];\n            const dragContent = em.get('dragContent');\n            let content = dataTransfer.getData('text');\n            if (files.length) {\n                content = [];\n                for (let i = 0; i < files.length; i++) {\n                    const file = files[i];\n                    const type = file.type.split('/')[0];\n                    if (type == 'image') {\n                        content.push({\n                            type,\n                            file,\n                            attributes: { alt: file.name }\n                        });\n                    }\n                }\n            } else if (dragContent) {\n                content = dragContent;\n            } else if (_.indexOf(types, 'text/html') >= 0) {\n                content = dataTransfer.getData('text/html').replace(/<\\/?meta[^>]*>/g, '');\n            } else if (_.indexOf(types, 'text/uri-list') >= 0) {\n                content = {\n                    type: 'link',\n                    attributes: { href: content },\n                    content: content\n                };\n            } else if (_.indexOf(types, 'text/json') >= 0) {\n                const json = dataTransfer.getData('text/json');\n                json && (content = JSON.parse(json));\n            }\n            const result = { content };\n            em.trigger('canvas:dragdata', dataTransfer, result);\n            return result;\n        }\n    };\n});"]}