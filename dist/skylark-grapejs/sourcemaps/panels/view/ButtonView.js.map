{"version":3,"sources":["panels/view/ButtonView.js"],"names":["define","Backbone","a","$","View","extend","[object Object]","this","model","get","events","click","o","cls","config","em","pfx","stylePrefix","ppfx","pStylePrefix","id","activeCls","disableCls","btnsVisCls","className","listenTo","render","updateActive","checkActive","updateBtnsVis","updateAttributes","updateClassName","updateDisable","commands","attrCls","class","classStr","$el","attr","trim","title","t","$buttons","addClass","removeClass","opts","fromCollection","context","options","commandName","command","isString","isFunction","create","run","isObject","collection","deactivateAll","set","silent","trigger","runCommand","sender","noStop","stopCommand","force","disable","e","toggleActive","active","togglable","attributes","runDefault","stopDefault","label","empty","append"],"mappings":"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","file":"../../../panels/view/ButtonView.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore'\n], function (Backbone, a) {\n    'use strict';\n    const $ = Backbone.$;\n    return Backbone.View.extend({\n        tagName() {\n            return this.model.get('tagName');\n        },\n        events: { click: 'clicked' },\n        initialize(o) {\n            var cls = this.model.get('className');\n            this.config = o.config || {};\n            this.em = this.config.em || {};\n            const pfx = this.config.stylePrefix || '';\n            const ppfx = this.config.pStylePrefix || '';\n            this.pfx = pfx;\n            this.ppfx = this.config.pStylePrefix || '';\n            this.id = pfx + this.model.get('id');\n            this.activeCls = `${ pfx }active ${ ppfx }four-color`;\n            this.disableCls = `${ ppfx }disabled`;\n            this.btnsVisCls = `${ pfx }visible`;\n            this.className = pfx + 'btn' + (cls ? ' ' + cls : '');\n            this.listenTo(this.model, 'change', this.render);\n            this.listenTo(this.model, 'change:active updateActive', this.updateActive);\n            this.listenTo(this.model, 'checkActive', this.checkActive);\n            this.listenTo(this.model, 'change:bntsVis', this.updateBtnsVis);\n            this.listenTo(this.model, 'change:attributes', this.updateAttributes);\n            this.listenTo(this.model, 'change:className', this.updateClassName);\n            this.listenTo(this.model, 'change:disable', this.updateDisable);\n            if (this.em && this.em.get)\n                this.commands = this.em.get('Commands');\n        },\n        updateClassName() {\n            const {model, pfx} = this;\n            const cls = model.get('className');\n            const attrCls = model.get('attributes').class;\n            const classStr = `${ attrCls ? attrCls : '' } ${ pfx }btn ${ cls ? cls : '' }`;\n            this.$el.attr('class', classStr.trim());\n        },\n        updateAttributes() {\n            const {em, model, $el} = this;\n            const attr = model.get('attributes') || {};\n            const title = em && em.t && em.t(`panels.buttons.titles.${ model.id }`);\n            $el.attr(attr);\n            title && $el.attr({ title });\n            this.updateClassName();\n        },\n        updateBtnsVis() {\n            if (!this.$buttons)\n                return;\n            if (this.model.get('bntsVis'))\n                this.$buttons.addClass(this.btnsVisCls);\n            else\n                this.$buttons.removeClass(this.btnsVisCls);\n        },\n        updateActive(opts = {}) {\n            const {model, commands, $el, activeCls} = this;\n            const {fromCollection} = opts;\n            const context = model.get('context');\n            const options = model.get('options');\n            const commandName = model.get('command');\n            let command = {};\n            if (commands && a.isString(commandName)) {\n                command = commands.get(commandName) || {};\n            } else if (a.isFunction(commandName)) {\n                command = commands.create({ run: commandName });\n            } else if (commandName !== null && a.isObject(commandName)) {\n                command = commands.create(commandName);\n            }\n            if (model.get('active')) {\n                !fromCollection && model.collection.deactivateAll(context, model);\n                model.set('active', true, { silent: true }).trigger('checkActive');\n                commands.runCommand(command, {\n                    ...options,\n                    sender: model\n                });\n                command.noStop && model.set('active', false);\n            } else {\n                $el.removeClass(activeCls);\n                commands.stopCommand(command, {\n                    ...options,\n                    sender: model,\n                    force: 1\n                });\n            }\n        },\n        updateDisable() {\n            const {disableCls, model} = this;\n            const disable = model.get('disable');\n            this.$el[disable ? 'addClass' : 'removeClass'](disableCls);\n        },\n        checkActive() {\n            const {model, $el, activeCls} = this;\n            model.get('active') ? $el.addClass(activeCls) : $el.removeClass(activeCls);\n        },\n        clicked(e) {\n            if (this.model.get('bntsVis'))\n                return;\n            if (this.model.get('disable'))\n                return;\n            this.toggleActive();\n        },\n        toggleActive() {\n            const {model} = this;\n            const {active, togglable} = model.attributes;\n            if (active && !togglable)\n                return;\n            model.set('active', !active);\n            var command = this.em.get('Commands').get('select-comp');\n            if (active) {\n                if (model.get('runDefaultCommand'))\n                    this.em.runDefault();\n            } else {\n                if (model.get('stopDefaultCommand'))\n                    this.em.stopDefault();\n            }\n        },\n        render() {\n            const label = this.model.get('label');\n            const {$el} = this;\n            $el.empty();\n            this.updateAttributes();\n            label && $el.append(label);\n            this.checkActive();\n            this.updateDisable();\n            return this;\n        }\n    });\n});"]}