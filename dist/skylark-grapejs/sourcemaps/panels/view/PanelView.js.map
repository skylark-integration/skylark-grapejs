{"version":3,"sources":["panels/view/PanelView.js"],"names":["define","Backbone","ButtonsView","View","extend","[object Object]","o","config","model","this","pfx","stylePrefix","ppfx","pStylePrefix","buttons","get","className","id","listenTo","appendContent","updateContent","toggleVisible","view","$el","append","html","removeClass","addClass","em","editor","resizable","tc","cr","bc","resz","resLen","length","cl","resizer","Utils","Resizer","init","tl","tr","bl","br","appendTo","el","silentFrames","avoidContainerUpdate","prefix","getConfig","trigger","posFetcher","target","style","keyWidth","keyHeight","rect","getBoundingClientRect","forContainer","styleWidth","styleHeight","left","top","width","parseFloat","height","blur","focus","cls","collection","render"],"mappings":";;;;;;;AAAAA,QACI,mBACA,iBACD,SAAUC,EAAUC,GACnB,aACA,OAAOD,EAASE,KAAKC,QACjBC,WAAWC,GACP,MAAMC,EAASD,EAAEC,WACXC,EAAQC,KAAKD,MACnBC,KAAKF,OAASA,EACdE,KAAKC,IAAMH,EAAOI,aAAe,GACjCF,KAAKG,KAAOL,EAAOM,cAAgB,GACnCJ,KAAKK,QAAUN,EAAMO,IAAI,WACzBN,KAAKO,UAAYP,KAAKC,IAAM,QAC5BD,KAAKQ,GAAKR,KAAKC,IAAMF,EAAMO,IAAI,MAC/BN,KAAKS,SAASV,EAAO,uBAAwBC,KAAKU,eAClDV,KAAKS,SAASV,EAAO,iBAAkBC,KAAKW,eAC5CX,KAAKS,SAASV,EAAO,iBAAkBC,KAAKY,eAC5Cb,EAAMc,KAAOb,MAEjBJ,gBACII,KAAKc,IAAIC,OAAOf,KAAKD,MAAMO,IAAI,mBAEnCV,gBACII,KAAKc,IAAIE,KAAKhB,KAAKD,MAAMO,IAAI,aAEjCV,gBACSI,KAAKD,MAAMO,IAAI,WAIpBN,KAAKc,IAAIG,eAAgBjB,KAAKG,cAH1BH,KAAKc,IAAII,YAAalB,KAAKG,eAKnCP,aACI,OAAOI,KAAKD,MAAMO,IAAI,eAE1BV,aACI,MAAMuB,EAAKnB,KAAKF,OAAOqB,GACjBC,EAASD,EAAKA,EAAGb,IAAI,UAAY,GACjCe,EAAYrB,KAAKD,MAAMO,IAAI,aACjC,GAAIc,GAAUC,EAAW,CACrB,IAOIC,EAAIC,EAAIC,EAPRC,GAAqB,IAAdJ,GACP,EACA,EACA,EACA,GACAA,EACAK,EAASD,EAAKE,OACFC,EAAK,EACP,GAAVF,GACAJ,EAAKG,EAAK,GACVD,EAAKC,EAAK,GACVF,EAAKE,EAAK,GACVG,EAAKH,EAAK,IACO,GAAVC,IACPJ,EAAKG,EAAK,GACVF,EAAKE,EAAK,GACVD,EAAKC,EAAK,GACVG,EAAKH,EAAK,IAEd,IAAII,EAAUT,EAAOU,MAAMC,QAAQC,MAC/BV,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAI,GAAAA,EACAK,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,SAAUrC,KAAKsC,GACfC,aAAc,EACdC,qBAAsB,EACtBC,OAAQrB,EAAOsB,YAAYxC,YAC3BN,QACIuB,GAAMA,EAAGwB,QAAQ,wBAErBC,WAAY,CAACN,GAAKO,OAAAA,MACd,MAAMC,EAAQR,EAAGQ,MACXhD,EAAS+B,EAAQa,YACjBK,EAAWjD,EAAOiD,SAClBC,EAAYlD,EAAOkD,UACnBC,EAAOX,EAAGY,wBACVC,EAAyB,aAAVN,EACfO,EAAaN,EAAMC,GACnBM,EAAcP,EAAME,GAG1B,OACIM,KAAM,EACNC,IAAK,EACLC,MALUJ,IAAeD,EAAeM,WAAWL,GAAcH,EAAKO,MAMtEE,OALWL,IAAgBF,EAAeM,WAAWJ,GAAeJ,EAAKS,YAQ9ErC,IAEPQ,EAAQ8B,KAAO,SAEf9B,EAAQ+B,MAAM5D,KAAKsC,MAG3B1C,SACI,MAAMkB,EAAMd,KAAKc,IACXX,EAAOH,KAAKG,KACZ0D,KAAU7D,KAAKO,aAAeP,KAAKQ,MAAQL,WAAgBA,aAEjE,GADAW,EAAII,SAAS2C,GACT7D,KAAKK,QAAQsB,OAAQ,CACrB,IAAItB,EAAU,IAAIZ,GACdqE,WAAY9D,KAAKK,QACjBP,OAAQE,KAAKF,SAEjBgB,EAAIC,OAAOV,EAAQ0D,SAASzB,IAGhC,OADAxB,EAAIC,OAAOf,KAAKD,MAAMO,IAAI,YACnBN","file":"../../../panels/view/PanelView.js","sourcesContent":["define([\n    'skylark-backbone',\n    './ButtonsView'\n], function (Backbone, ButtonsView) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize(o) {\n            const config = o.config || {};\n            const model = this.model;\n            this.config = config;\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.buttons = model.get('buttons');\n            this.className = this.pfx + 'panel';\n            this.id = this.pfx + model.get('id');\n            this.listenTo(model, 'change:appendContent', this.appendContent);\n            this.listenTo(model, 'change:content', this.updateContent);\n            this.listenTo(model, 'change:visible', this.toggleVisible);\n            model.view = this;\n        },\n        appendContent() {\n            this.$el.append(this.model.get('appendContent'));\n        },\n        updateContent() {\n            this.$el.html(this.model.get('content'));\n        },\n        toggleVisible() {\n            if (!this.model.get('visible')) {\n                this.$el.addClass(`${ this.ppfx }hidden`);\n                return;\n            }\n            this.$el.removeClass(`${ this.ppfx }hidden`);\n        },\n        attributes() {\n            return this.model.get('attributes');\n        },\n        initResize() {\n            const em = this.config.em;\n            const editor = em ? em.get('Editor') : '';\n            const resizable = this.model.get('resizable');\n            if (editor && resizable) {\n                var resz = resizable === true ? [\n                    1,\n                    1,\n                    1,\n                    1\n                ] : resizable;\n                var resLen = resz.length;\n                var tc, cr, bc, cl = 0;\n                if (resLen == 2) {\n                    tc = resz[0];\n                    bc = resz[0];\n                    cr = resz[1];\n                    cl = resz[1];\n                } else if (resLen == 4) {\n                    tc = resz[0];\n                    cr = resz[1];\n                    bc = resz[2];\n                    cl = resz[3];\n                }\n                var resizer = editor.Utils.Resizer.init({\n                    tc,\n                    cr,\n                    bc,\n                    cl,\n                    tl: 0,\n                    tr: 0,\n                    bl: 0,\n                    br: 0,\n                    appendTo: this.el,\n                    silentFrames: 1,\n                    avoidContainerUpdate: 1,\n                    prefix: editor.getConfig().stylePrefix,\n                    onEnd() {\n                        em && em.trigger('change:canvasOffset');\n                    },\n                    posFetcher: (el, {target}) => {\n                        const style = el.style;\n                        const config = resizer.getConfig();\n                        const keyWidth = config.keyWidth;\n                        const keyHeight = config.keyHeight;\n                        const rect = el.getBoundingClientRect();\n                        const forContainer = target == 'container';\n                        const styleWidth = style[keyWidth];\n                        const styleHeight = style[keyHeight];\n                        const width = styleWidth && !forContainer ? parseFloat(styleWidth) : rect.width;\n                        const height = styleHeight && !forContainer ? parseFloat(styleHeight) : rect.height;\n                        return {\n                            left: 0,\n                            top: 0,\n                            width,\n                            height\n                        };\n                    },\n                    ...resizable\n                });\n                resizer.blur = () => {\n                };\n                resizer.focus(this.el);\n            }\n        },\n        render() {\n            const $el = this.$el;\n            const ppfx = this.ppfx;\n            const cls = `${ this.className } ${ this.id } ${ ppfx }one-bg ${ ppfx }two-color`;\n            $el.addClass(cls);\n            if (this.buttons.length) {\n                var buttons = new ButtonsView({\n                    collection: this.buttons,\n                    config: this.config\n                });\n                $el.append(buttons.render().el);\n            }\n            $el.append(this.model.get('content'));\n            return this;\n        }\n    });\n});"]}