{"version":3,"sources":["asset_manager/index.js"],"names":["define","defaults","Assets","AssetsView","FileUpload","assets","am","fu","c","name","storageKey","getConfig","[object Object]","config","ppfx","pStylePrefix","em","stylePrefix","obj","collection","globalCollection","listenTo","model","this","getAllVisible","add","trigger","remove","asset","opts","at","get","src","where","getAll","noStore","JSON","stringify","toJSON","stm","store","data","parse","err","length","reset","getContainer","el","getAssetsEl","querySelector","toRender","models","rendered","render","id","definition","addType","getType","getTypes","FileUploader","editorView","dropzone","initDropzone","m","target","f","onSelect","func","onClick","onDblClick"],"mappings":";;;;;;;AAAAA,QACI,kBACA,iBACA,oBACA,uBACD,SAAUC,EAAUC,EAAQC,EAAYC,GACvC,aACA,MAAO,KACH,IACIC,EAAQC,EAAIC,EADZC,KAEJ,OACIC,KAAM,eACNC,WAAY,SACZC,UAAS,IACEH,EAEXI,KAAKC,GACDL,EAAIK,MACJ,IAAK,IAAIJ,KAAQR,EACPQ,KAAQD,IACVA,EAAEC,GAAQR,EAASQ,IAE3B,MAAMK,EAAON,EAAEO,aACTC,EAAKR,EAAEQ,GACTF,IACAN,EAAES,YAAcH,EAAON,EAAES,aAE7BZ,EAAS,IAAIH,MACb,MAAMgB,GACFC,WAAY,IAAIjB,MAChBkB,iBAAkBf,EAClBQ,OAAQL,GAaZ,OAXAD,EAAK,IAAIH,EAAWc,GACpBA,EAAIX,GAAKA,EACTD,EAAK,IAAIH,EAAWe,GACpBb,EAAOgB,SAAShB,EAAQ,MAAOiB,IAC3BC,KAAKC,gBAAgBC,IAAIH,GACzBN,GAAMA,EAAGU,QAAQ,YAAaJ,KAElCjB,EAAOgB,SAAShB,EAAQ,SAAUiB,IAC9BC,KAAKC,gBAAgBG,OAAOL,GAC5BN,GAAMA,EAAGU,QAAQ,eAAgBJ,KAE9BC,MAEXE,IAAG,CAACG,EAAOC,aACe,IAAXA,EAAKC,KACZD,EAAKC,GAAK,GAEPzB,EAAOoB,IAAIG,EAAOC,IAE7BE,IAAIC,GACO3B,EAAO4B,OAAQD,IAAAA,IAAO,GAEjCE,OAAM,IACK7B,EAEXmB,cAAa,IACFlB,EAAGa,WAEdP,OAAOoB,GACH,IAAIJ,EAAQL,KAAKQ,IAAIC,GAErB,OADAT,KAAKW,SAASP,OAAOC,GACdL,MAEXX,MAAMuB,GACF,IAAIjB,KACAb,EAAS+B,KAAKC,UAAUd,KAAKW,SAASI,UAI1C,OAHApB,EAAIK,KAAKb,YAAcL,GAClB8B,GAAW3B,EAAE+B,KACd/B,EAAE+B,IAAIC,MAAMtB,GACTA,GAEXN,KAAK6B,MACD,MAAMhC,EAAOc,KAAKb,WAClB,IAAIL,EAASoC,EAAKhC,OAClB,GAAqB,iBAAVJ,EACP,IACIA,EAAS+B,KAAKM,MAAMD,EAAKhC,IAC3B,MAAOkC,IAMb,OAHItC,GAAUA,EAAOuC,QACjBrB,KAAKW,SAASW,MAAMxC,GAEjBA,GAEXyC,aAAY,IACDxC,EAAGyC,GAEdC,YAAW,IACA1C,EAAGyC,GAAGE,cAAc,oBAE/BrC,OAAOP,GACH,MAAM6C,EAAW7C,GAAUkB,KAAKW,SAASiB,OAKzC,OAJK7C,EAAG8C,UACJ9C,EAAG+C,SAEP/C,EAAGa,WAAW0B,MAAMK,GACb3B,KAAKuB,gBAEhBlC,QAAQ0C,EAAIC,GACRhC,KAAKW,SAASsB,QAAQF,EAAIC,IAE9B3C,QAAQ0C,GACJ,OAAO/B,KAAKW,SAASuB,QAAQH,IAEjC1C,WACI,OAAOW,KAAKW,SAASwB,YAEzBvD,WAAU,IACCG,EAEXqD,aAAY,IACDpD,EAEXK,SACIW,KAAKW,SAASW,MAAMrC,EAAEH,SAE1BO,WAAWgD,GACPpD,EAAEqD,UAAYtD,EAAGuD,aAAaF,IAElChD,UAAUmD,GACNzD,EAAGa,WAAW6C,OAASD,GAE3BnD,SAASqD,GACL3D,EAAGa,WAAW+C,SAAWD,GAE7BrD,QAAQuD,GACJ3D,EAAE4D,QAAUD,GAEhBvD,WAAWuD,GACP3D,EAAE6D,WAAaF","file":"../../asset_manager/index.js","sourcesContent":["define([\n    './config/config',\n    './model/Assets',\n    './view/AssetsView',\n    './view/FileUploader'\n], function (defaults, Assets, AssetsView, FileUpload) {\n    'use strict';\n    return () => {\n        let c = {};\n        let assets, am, fu;\n        return {\n            name: 'AssetManager',\n            storageKey: 'assets',\n            getConfig() {\n                return c;\n            },\n            init(config) {\n                c = config || {};\n                for (let name in defaults) {\n                    if (!(name in c))\n                        c[name] = defaults[name];\n                }\n                const ppfx = c.pStylePrefix;\n                const em = c.em;\n                if (ppfx) {\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                }\n                assets = new Assets([]);\n                const obj = {\n                    collection: new Assets([]),\n                    globalCollection: assets,\n                    config: c\n                };\n                fu = new FileUpload(obj);\n                obj.fu = fu;\n                am = new AssetsView(obj);\n                assets.listenTo(assets, 'add', model => {\n                    this.getAllVisible().add(model);\n                    em && em.trigger('asset:add', model);\n                });\n                assets.listenTo(assets, 'remove', model => {\n                    this.getAllVisible().remove(model);\n                    em && em.trigger('asset:remove', model);\n                });\n                return this;\n            },\n            add(asset, opts = {}) {\n                if (typeof opts.at == 'undefined') {\n                    opts.at = 0;\n                }\n                return assets.add(asset, opts);\n            },\n            get(src) {\n                return assets.where({ src })[0];\n            },\n            getAll() {\n                return assets;\n            },\n            getAllVisible() {\n                return am.collection;\n            },\n            remove(src) {\n                var asset = this.get(src);\n                this.getAll().remove(asset);\n                return this;\n            },\n            store(noStore) {\n                var obj = {};\n                var assets = JSON.stringify(this.getAll().toJSON());\n                obj[this.storageKey] = assets;\n                if (!noStore && c.stm)\n                    c.stm.store(obj);\n                return obj;\n            },\n            load(data = {}) {\n                const name = this.storageKey;\n                let assets = data[name] || [];\n                if (typeof assets == 'string') {\n                    try {\n                        assets = JSON.parse(data[name]);\n                    } catch (err) {\n                    }\n                }\n                if (assets && assets.length) {\n                    this.getAll().reset(assets);\n                }\n                return assets;\n            },\n            getContainer() {\n                return am.el;\n            },\n            getAssetsEl() {\n                return am.el.querySelector('[data-el=assets]');\n            },\n            render(assets) {\n                const toRender = assets || this.getAll().models;\n                if (!am.rendered) {\n                    am.render();\n                }\n                am.collection.reset(toRender);\n                return this.getContainer();\n            },\n            addType(id, definition) {\n                this.getAll().addType(id, definition);\n            },\n            getType(id) {\n                return this.getAll().getType(id);\n            },\n            getTypes() {\n                return this.getAll().getTypes();\n            },\n            AssetsView() {\n                return am;\n            },\n            FileUploader() {\n                return fu;\n            },\n            onLoad() {\n                this.getAll().reset(c.assets);\n            },\n            postRender(editorView) {\n                c.dropzone && fu.initDropzone(editorView);\n            },\n            setTarget(m) {\n                am.collection.target = m;\n            },\n            onSelect(f) {\n                am.collection.onSelect = f;\n            },\n            onClick(func) {\n                c.onClick = func;\n            },\n            onDblClick(func) {\n                c.onDblClick = func;\n            }\n        };\n    };\n});"]}