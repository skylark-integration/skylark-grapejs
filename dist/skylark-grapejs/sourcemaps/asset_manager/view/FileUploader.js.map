{"version":3,"sources":["asset_manager/view/FileUploader.js"],"names":["define","_","Backbone","fetch","View","extend","template","events","[object Object]","opts","this","options","c","config","em","pfx","stylePrefix","ppfx","pStylePrefix","target","globalCollection","uploadId","disabled","undefined","disableUpload","upload","embedAsBase64","multiUpload","uploadFile","bind","constructor","delegateEvents","trigger","res","$el","input","find","val","err","console","error","onUploadEnd","text","clb","json","JSON","parse","e","autoAdd","add","data","at","files","dataTransfer","beforeUpload","body","FormData","params","customFetch","param","append","i","length","uploadName","url","headers","onUploadStart","fetchOpts","method","credentials","then","status","Promise","reject","onUploadResponse","catch","onUploadError","that","uploadForm","get","ondragover","className","ondragleave","ondrop","preventDefault","ev","addedCls","model","edEl","el","editor","frameEl","getBody","updatedCls","dropzoneCls","cleanEditorElCls","replace","trim","onDragOver","onDragLeave","onDrop","stopPropagation","openAssetsOnDrop","getSelected","runCommand","Modal","close","AssetManager","setTarget","dropzoneContent","forEach","item","html","title","t","initDrop","attr","response","FileReader","Error","promises","mimeTypeMatcher","file","promise","resolve","reader","addEventListener","event","type","name","match","exec","src","result","height","width","image","Image","readAsDataURL","push","all"],"mappings":"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","file":"../../../asset_manager/view/FileUploader.js","sourcesContent":["define([\n    'skylark-underscore',\n    'skylark-backbone',\n    '../../utils/fetch'\n], function (_, Backbone, fetch) {\n    'use strict';\n    return Backbone.View.extend({\n        template: _.template(`\n  <form>\n    <div id=\"<%= pfx %>title\"><%= title %></div>\n    <input type=\"file\" id=\"<%= uploadId %>\" name=\"file\" accept=\"*/*\" <%= disabled ? 'disabled' : '' %> <%= multiUpload ? 'multiple' : '' %>/>\n    <div style=\"clear:both;\"></div>\n  </form>\n  `),\n        events: {},\n        initialize(opts = {}) {\n            this.options = opts;\n            const c = opts.config || {};\n            this.config = c;\n            this.em = this.config.em;\n            this.pfx = c.stylePrefix || '';\n            this.ppfx = c.pStylePrefix || '';\n            this.target = this.options.globalCollection || {};\n            this.uploadId = this.pfx + 'uploadFile';\n            this.disabled = c.disableUpload !== undefined ? c.disableUpload : !c.upload && !c.embedAsBase64;\n            this.multiUpload = c.multiUpload !== undefined ? c.multiUpload : true;\n            this.events['change #' + this.uploadId] = 'uploadFile';\n            let uploadFile = c.uploadFile;\n            if (uploadFile) {\n                this.uploadFile = uploadFile.bind(this);\n            } else if (!c.upload && c.embedAsBase64) {\n                this.uploadFile = this.constructor.embedAsBase64;\n            }\n            this.delegateEvents();\n        },\n        onUploadStart() {\n            const em = this.config.em;\n            em && em.trigger('asset:upload:start');\n        },\n        onUploadEnd(res) {\n            const {$el, config} = this;\n            const em = config.em;\n            em && em.trigger('asset:upload:end', res);\n            const input = $el.find('input');\n            input && input.val('');\n        },\n        onUploadError(err) {\n            const em = this.config.em;\n            console.error(err);\n            this.onUploadEnd(err);\n            em && em.trigger('asset:upload:error', err);\n        },\n        onUploadResponse(text, clb) {\n            const em = this.config.em;\n            const config = this.config;\n            const target = this.target;\n            let json;\n            try {\n                json = typeof text === 'string' ? JSON.parse(text) : text;\n            } catch (e) {\n                json = text;\n            }\n            em && em.trigger('asset:upload:response', json);\n            if (config.autoAdd && target) {\n                target.add(json.data, { at: 0 });\n            }\n            this.onUploadEnd(text);\n            clb && clb(json);\n        },\n        uploadFile(e, clb) {\n            const files = e.dataTransfer ? e.dataTransfer.files : e.target.files;\n            const {config} = this;\n            const {beforeUpload} = config;\n            const beforeUploadResponse = beforeUpload && beforeUpload(files);\n            if (beforeUploadResponse === false)\n                return;\n            const body = new FormData();\n            const {params, customFetch} = config;\n            for (let param in params) {\n                body.append(param, params[param]);\n            }\n            if (this.multiUpload) {\n                for (let i = 0; i < files.length; i++) {\n                    body.append(`${ config.uploadName }[]`, files[i]);\n                }\n            } else if (files.length) {\n                body.append(config.uploadName, files[0]);\n            }\n            var target = this.target;\n            const url = config.upload;\n            const headers = config.headers;\n            const reqHead = 'X-Requested-With';\n            if (typeof headers[reqHead] == 'undefined') {\n                headers[reqHead] = 'XMLHttpRequest';\n            }\n            if (url) {\n                this.onUploadStart();\n                const fetchOpts = {\n                    method: 'post',\n                    credentials: config.credentials || 'include',\n                    headers,\n                    body\n                };\n                const fetchResult = customFetch ? customFetch(url, fetchOpts) : fetch(url, fetchOpts).then(res => (res.status / 200 | 0) == 1 ? res.text() : res.text().then(text => Promise.reject(text)));\n                return fetchResult.then(text => this.onUploadResponse(text, clb)).catch(err => this.onUploadError(err));\n            }\n        },\n        initDrop() {\n            var that = this;\n            if (!this.uploadForm) {\n                this.uploadForm = this.$el.find('form').get(0);\n                if ('draggable' in this.uploadForm) {\n                    var uploadFile = this.uploadFile;\n                    this.uploadForm.ondragover = function () {\n                        this.className = that.pfx + 'hover';\n                        return false;\n                    };\n                    this.uploadForm.ondragleave = function () {\n                        this.className = '';\n                        return false;\n                    };\n                    this.uploadForm.ondrop = function (e) {\n                        this.className = '';\n                        e.preventDefault();\n                        that.uploadFile(e);\n                        return;\n                    };\n                }\n            }\n        },\n        initDropzone(ev) {\n            let addedCls = 0;\n            const c = this.config;\n            const em = ev.model;\n            const edEl = ev.el;\n            const editor = em.get('Editor');\n            const container = em.get('Config').el;\n            const frameEl = em.get('Canvas').getBody();\n            const ppfx = this.ppfx;\n            const updatedCls = `${ ppfx }dropzone-active`;\n            const dropzoneCls = `${ ppfx }dropzone`;\n            const cleanEditorElCls = () => {\n                edEl.className = edEl.className.replace(updatedCls, '').trim();\n                addedCls = 0;\n            };\n            const onDragOver = () => {\n                if (!addedCls) {\n                    edEl.className += ` ${ updatedCls }`;\n                    addedCls = 1;\n                }\n                return false;\n            };\n            const onDragLeave = () => {\n                cleanEditorElCls();\n                return false;\n            };\n            const onDrop = e => {\n                cleanEditorElCls();\n                e.preventDefault();\n                e.stopPropagation();\n                this.uploadFile(e);\n                if (c.openAssetsOnDrop && editor) {\n                    const target = editor.getSelected();\n                    editor.runCommand('open-assets', {\n                        target,\n                        onSelect() {\n                            editor.Modal.close();\n                            editor.AssetManager.setTarget(null);\n                        }\n                    });\n                }\n                return false;\n            };\n            ev.$el.append(`<div class=\"${ dropzoneCls }\">${ c.dropzoneContent }</div>`);\n            cleanEditorElCls();\n            if ('draggable' in edEl) {\n                [\n                    edEl,\n                    frameEl\n                ].forEach(item => {\n                    item.ondragover = onDragOver;\n                    item.ondragleave = onDragLeave;\n                    item.ondrop = onDrop;\n                });\n            }\n        },\n        render() {\n            const {$el, pfx, em} = this;\n            $el.html(this.undefined({\n                title: em && em.t('assetManager.uploadTitle'),\n                uploadId: this.uploadId,\n                disabled: this.disabled,\n                multiUpload: this.multiUpload,\n                pfx\n            }));\n            this.initDrop();\n            $el.attr('class', pfx + 'file-uploader');\n            return this;\n        }\n    }, {\n        embedAsBase64: function (e, clb) {\n            const files = e.dataTransfer ? e.dataTransfer.files : e.target.files;\n            const response = { data: [] };\n            if (!FileReader) {\n                this.onUploadError(new Error('Unsupported platform, FileReader is not defined'));\n                return;\n            }\n            const promises = [];\n            const mimeTypeMatcher = /^(.+)\\/(.+)$/;\n            for (const file of files) {\n                const promise = new Promise((resolve, reject) => {\n                    const reader = new FileReader();\n                    reader.addEventListener('load', event => {\n                        let type;\n                        const name = file.name;\n                        const match = mimeTypeMatcher.exec(file.type);\n                        if (match) {\n                            type = match[1];\n                        } else {\n                            type = file.type;\n                        }\n                        if (type === 'image') {\n                            const data = {\n                                src: reader.result,\n                                name,\n                                type,\n                                height: 0,\n                                width: 0\n                            };\n                            const image = new Image();\n                            image.addEventListener('error', error => {\n                                reject(error);\n                            });\n                            image.addEventListener('load', () => {\n                                data.height = image.height;\n                                data.width = image.width;\n                                resolve(data);\n                            });\n                            image.src = data.src;\n                        } else if (type) {\n                            resolve({\n                                src: reader.result,\n                                name,\n                                type\n                            });\n                        } else {\n                            resolve(reader.result);\n                        }\n                    });\n                    reader.addEventListener('error', error => {\n                        reject(error);\n                    });\n                    reader.addEventListener('abort', error => {\n                        reject('Aborted');\n                    });\n                    reader.readAsDataURL(file);\n                });\n                promises.push(promise);\n            }\n            Promise.all(promises).then(data => {\n                response.data = data;\n                this.onUploadResponse(response, clb);\n            }, error => {\n                this.onUploadError(error);\n            });\n        }\n    });\n});"]}