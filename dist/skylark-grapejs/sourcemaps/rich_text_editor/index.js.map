{"version":3,"sources":["rich_text_editor/index.js"],"names":["define","RichTextEditor","a","defaults","toolbar","actions","lastEl","lastElPos","globalRte","config","hideToolbar","style","top","left","display","customRte","name","getConfig","[object Object]","opts","ppfx","pStylePrefix","stylePrefix","this","pfx","document","createElement","className","initRte","on","e","stopPropagation","destroy","actionbar","ev","canvas","model","get","pointerEvents","getToolsEl","appendChild","el","actionbarContainer","rte","classes","button","active","inactive","disabled","setEl","action","addAction","sync","result","getActions","forEach","getAll","btn","index","indexOf","parentNode","removeChild","splice","getToolbarEl","em","pos","getTargetToElementFixed","event","view","getChildrenContainer","getElementPos","enable","setTimeout","updatePosition","bind","undefined","trigger","disable"],"mappings":"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","file":"../../rich_text_editor/index.js","sourcesContent":["define([\n    './model/RichTextEditor',\n    '../../utils/mixins',\n    './config/config'\n], function (RichTextEditor, a, defaults) {\n    'use strict';\n    return () => {\n        let config = {};\n        let toolbar, actions, lastEl, lastElPos, globalRte;\n        const hideToolbar = () => {\n            const style = toolbar.style;\n            const size = '-1000px';\n            style.top = size;\n            style.left = size;\n            style.display = 'none';\n        };\n        return {\n            customRte: null,\n            name: 'RichTextEditor',\n            getConfig() {\n                return config;\n            },\n            init(opts = {}) {\n                config = {\n                    ...defaults,\n                    ...opts\n                };\n                const ppfx = config.pStylePrefix;\n                if (ppfx) {\n                    config.stylePrefix = ppfx + config.stylePrefix;\n                }\n                this.pfx = config.stylePrefix;\n                actions = config.actions || [];\n                toolbar = document.createElement('div');\n                toolbar.className = `${ ppfx }rte-toolbar ${ ppfx }one-bg`;\n                globalRte = this.initRte(document.createElement('div'));\n                a.on(toolbar, 'mousedown', e => e.stopPropagation());\n                return this;\n            },\n            destroy() {\n                const {customRte} = this;\n                globalRte && globalRte.destroy();\n                customRte && customRte.destroy && customRte.destroy();\n                toolbar = 0;\n                globalRte = 0;\n                this.actionbar = 0;\n                this.actions = 0;\n            },\n            postRender(ev) {\n                const canvas = ev.model.get('Canvas');\n                toolbar.style.pointerEvents = 'all';\n                hideToolbar();\n                canvas.getToolsEl().appendChild(toolbar);\n            },\n            initRte(el) {\n                const pfx = this.pfx;\n                const actionbarContainer = toolbar;\n                const actionbar = this.actionbar;\n                const actions = this.actions || [...config.actions];\n                const classes = {\n                    actionbar: `${ pfx }actionbar`,\n                    button: `${ pfx }action`,\n                    active: `${ pfx }active`,\n                    inactive: `${ pfx }inactive`,\n                    disabled: `${ pfx }disabled`\n                };\n                const rte = new RichTextEditor({\n                    el,\n                    classes,\n                    actions,\n                    actionbar,\n                    actionbarContainer\n                });\n                globalRte && globalRte.setEl(el);\n                if (rte.actionbar) {\n                    this.actionbar = rte.actionbar;\n                }\n                if (rte.actions) {\n                    this.actions = rte.actions;\n                }\n                return rte;\n            },\n            add(name, action = {}) {\n                action.name = name;\n                globalRte.addAction(action, { sync: 1 });\n            },\n            get(name) {\n                let result;\n                globalRte.getActions().forEach(action => {\n                    if (action.name == name) {\n                        result = action;\n                    }\n                });\n                return result;\n            },\n            getAll() {\n                return globalRte.getActions();\n            },\n            remove(name) {\n                const actions = this.getAll();\n                const action = this.get(name);\n                if (action) {\n                    const btn = action.btn;\n                    const index = actions.indexOf(action);\n                    btn.parentNode.removeChild(btn);\n                    actions.splice(index, 1);\n                }\n                return action;\n            },\n            getToolbarEl() {\n                return toolbar;\n            },\n            updatePosition() {\n                const un = 'px';\n                const canvas = config.em.get('Canvas');\n                const {style} = toolbar;\n                const pos = canvas.getTargetToElementFixed(lastEl, toolbar, { event: 'rteToolbarPosUpdate' });\n                style.top = pos.top + un;\n                style.left = 0 + un;\n            },\n            enable(view, rte) {\n                lastEl = view.el;\n                const canvas = config.em.get('Canvas');\n                const em = config.em;\n                const el = view.getChildrenContainer();\n                const customRte = this.customRte;\n                lastElPos = canvas.getElementPos(lastEl);\n                toolbar.style.display = '';\n                rte = customRte ? customRte.enable(el, rte) : this.initRte(el).enable();\n                if (em) {\n                    setTimeout(this.updatePosition.bind(this), 0);\n                    const event = 'change:canvasOffset canvasScroll frame:scroll component:update';\n                    em.undefined(event, this.updatePosition, this);\n                    em.undefined(event, this.updatePosition, this);\n                    em.trigger('rte:enable', view, rte);\n                }\n                return rte;\n            },\n            disable(view, rte) {\n                const em = config.em;\n                const customRte = this.customRte;\n                var el = view.getChildrenContainer();\n                if (customRte) {\n                    customRte.disable(el, rte);\n                } else {\n                    rte && rte.disable();\n                }\n                hideToolbar();\n                em && em.trigger('rte:disable', view, rte);\n            }\n        };\n    };\n});"]}