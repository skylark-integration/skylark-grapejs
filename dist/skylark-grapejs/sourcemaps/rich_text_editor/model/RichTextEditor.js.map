{"version":3,"sources":["rich_text_editor/model/RichTextEditor.js"],"names":["define","a","btnState","isValidAnchor","rte","anchor","selection","anchorNode","parentNode","nextSibling","nodeName","defActions","bold","name","icon","attributes","title","result","exec","italic","underline","strikethrough","link","style","state","doc","insertHTML","[object Object]","settings","el","this","setEl","updateActiveActions","bind","settAct","actions","forEach","action","i","length","Object","keys","map","classes","actionbar","button","active","disabled","inactive","actionbarCont","actionbarContainer","document","createElement","className","appendChild","addAction","styleWithCSS","syncActions","ownerDocument","getActions","btn","update","replace","trim","queryCommandSupported","queryCommandState","enabled","actionbarEl","display","contentEditable","on","focus","off","event","e","opts","sync","attr","key","setAttribute","innerHTML","push","getSelection","command","value","execCommand","lastNode","sel","rangeCount","node","range","getRangeAt","deleteContents","Array","prototype","slice","call","childNodes","nd","insertNode","removeAllRanges","addRange"],"mappings":";;;;;;;AAAAA,QAAQ,sBAAuB,SAAUC,GACrC,aACA,MACMC,EACM,EADNA,EAEQ,EAFRA,GAGS,EAETC,EAAgBC,IAClB,MAAMC,EAASD,EAAIE,YAAYC,WACzBC,EAAaH,GAAUA,EAAOG,WAC9BC,EAAcJ,GAAUA,EAAOI,YACrC,OAAOD,GAAqC,KAAvBA,EAAWE,UAAmBD,GAAuC,KAAxBA,EAAYC,UAE5EC,GACFC,MACIC,KAAM,OACNC,KAAM,WACNC,YAAcC,MAAO,QACrBC,OAAQb,GAAOA,EAAIc,KAAK,SAE5BC,QACIN,KAAM,SACNC,KAAM,WACNC,YAAcC,MAAO,UACrBC,OAAQb,GAAOA,EAAIc,KAAK,WAE5BE,WACIP,KAAM,YACNC,KAAM,WACNC,YAAcC,MAAO,aACrBC,OAAQb,GAAOA,EAAIc,KAAK,cAE5BG,eACIR,KAAM,gBACNC,KAAM,qBACNC,YAAcC,MAAO,kBACrBC,OAAQb,GAAOA,EAAIc,KAAK,kBAE5BI,MACIR,KAAM,yDACND,KAAM,OACNE,YACIQ,MAAO,sCACPP,MAAO,QAEXQ,MAAO,CAACpB,EAAKqB,IACLrB,GAAOA,EAAIE,aACJH,EAAcC,GAAOF,EAErBA,EAGfe,OAAQb,IACAD,EAAcC,GACdA,EAAIc,KAAK,UAETd,EAAIsB,sCAAuCtB,EAAIE,sBAK/D,aACIqB,YAAYC,MACR,MAAMC,EAAKD,EAASC,GACpB,GAAIA,EAAU,KACV,OAAOA,EAAU,KAErBA,EAAU,KAAIC,KACdA,KAAKC,MAAMF,GACXC,KAAKE,oBAAsBF,KAAKE,oBAAoBC,KAAKH,MACzD,MAAMI,EAAUN,EAASO,YACzBD,EAAQE,QAAQ,CAACC,EAAQC,KACC,iBAAXD,EACPA,EAAS1B,EAAW0B,GACb1B,EAAW0B,EAAOxB,QACzBwB,MACO1B,EAAW0B,EAAOxB,SAClBwB,IAGXH,EAAQI,GAAKD,IAEjB,MAAMF,EAAUD,EAAQK,OAASL,EAAUM,OAAOC,KAAK9B,GAAY+B,IAAIL,GAAU1B,EAAW0B,IAC5FT,EAASe,aAEDC,UAAW,YACXC,OAAQ,SACRC,OAAQ,SACRC,SAAU,WACVC,SAAU,eAEXpB,EAASe,SAEhB,MAAMA,EAAUf,EAASe,QACzB,IAAIC,EAAYhB,EAASgB,UAKzB,GAJAd,KAAKc,UAAYA,EACjBd,KAAKF,SAAWA,EAChBE,KAAKa,QAAUA,EACfb,KAAKK,QAAUA,GACVS,EAAW,CACZ,MAAMK,EAAgBrB,EAASsB,oBAC/BN,EAAYO,SAASC,cAAc,QACzBC,UAAYV,EAAQC,UAC9BK,EAAcK,YAAYV,GAC1Bd,KAAKc,UAAYA,EACjBT,EAAQC,QAAQC,GAAUP,KAAKyB,UAAUlB,IAI7C,OAFAT,EAAS4B,cAAgB1B,KAAKZ,KAAK,gBACnCY,KAAK2B,cACE3B,KAEXH,UACIG,KAAKD,GAAK,EACVC,KAAKL,IAAM,EACXK,KAAKc,UAAY,EACjBd,KAAKF,YACLE,KAAKa,WACLb,KAAKK,WAETR,MAAME,GACFC,KAAKD,GAAKA,EACVC,KAAKL,IAAMI,EAAG6B,cAElB/B,sBACIG,KAAK6B,aAAavB,QAAQC,IACtB,MAAMuB,EAAMvB,EAAOuB,IACbC,EAASxB,EAAOwB,QAChBf,OAACA,EAAME,SAAEA,EAAQD,SAAEA,OAAiBjB,KAAKa,SACzCnB,EAAQa,EAAOb,MACfX,EAAOwB,EAAOxB,KACdY,EAAMK,KAAKL,IAIjB,GAHAmC,EAAIP,UAAYO,EAAIP,UAAUS,QAAQhB,EAAQ,IAAIiB,OAClDH,EAAIP,UAAYO,EAAIP,UAAUS,QAAQd,EAAU,IAAIe,OACpDH,EAAIP,UAAYO,EAAIP,UAAUS,QAAQf,EAAU,IAAIgB,OAChDvC,EACA,OAAQA,EAAMM,KAAML,IACpB,KAAKvB,EACD0D,EAAIP,eAAkBP,IACtB,MACJ,KAAK5C,EACD0D,EAAIP,eAAkBL,IACtB,MACJ,KAAK9C,EACD0D,EAAIP,eAAkBN,SAItBtB,EAAIuC,sBAAsBnD,IAASY,EAAIwC,kBAAkBpD,KACzD+C,EAAIP,eAAkBP,KAG9Be,GAAUA,EAAO/B,KAAMO,KAG/BV,SACI,OAAIG,KAAKoC,QACEpC,MAEXA,KAAKqC,cAAc5C,MAAM6C,QAAU,GACnCtC,KAAKD,GAAGwC,iBAAkB,EAC1BpE,EAAEqE,GAAGxC,KAAKD,GAAI,gBAAiBC,KAAKE,qBACpCF,KAAK2B,cACL3B,KAAKE,sBACLF,KAAKD,GAAG0C,QACRzC,KAAKoC,QAAU,EACRpC,MAEXH,UAKI,OAJAG,KAAKqC,cAAc5C,MAAM6C,QAAU,OACnCtC,KAAKD,GAAGwC,iBAAkB,EAC1BpE,EAAEuE,IAAI1C,KAAKD,GAAI,gBAAiBC,KAAKE,qBACrCF,KAAKoC,QAAU,EACRpC,KAEXH,cACIG,KAAK6B,aAAavB,QAAQC,IACtB,GAAIP,KAAKF,SAASgB,aACTP,EAAOb,OAASa,EAAOb,OAASa,EAAOb,MAAMM,KAAMA,KAAKL,MAAQ,GAAG,CACpE,MAAMgD,EAAQpC,EAAOoC,OAAS,QAC9BpC,EAAOuB,SAAUa,KAAYC,CAAAA,IACzBrC,EAAOpB,OAAOa,KAAMO,GACpBP,KAAKE,2BAMzBL,UAAUU,EAAQsC,MACd,MAAMC,EAAOD,EAAKC,KACZhB,EAAMT,SAASC,cAAc,QAC7BtC,EAAOuB,EAAOvB,KACd+D,EAAOxC,EAAOtB,eACpB6C,EAAIP,UAAYvB,KAAKa,QAAQE,OAC7BR,EAAOuB,IAAMA,EACb,IAAK,IAAIkB,KAAOD,EACZjB,EAAImB,aAAaD,EAAKD,EAAKC,IAEZ,iBAARhE,EACP8C,EAAIoB,UAAYlE,EAEhB8C,EAAIN,YAAYxC,GAEpBgB,KAAKqC,cAAcb,YAAYM,GAC3BgB,IACA9C,KAAKK,QAAQ8C,KAAK5C,GAClBP,KAAK2B,eAGb9B,aACI,OAAOG,KAAKK,QAEhBR,YACI,OAAOG,KAAKL,IAAIyD,eAEpBvD,KAAKwD,EAASC,EAAQ,MAClBtD,KAAKL,IAAI4D,YAAYF,GAAS,EAAOC,GAEzCzD,cACI,OAAOG,KAAKc,UAEhBjB,WAAWyD,GACP,IAAIE,EACJ,MAAM7D,EAAMK,KAAKL,IACX8D,EAAM9D,EAAIyD,eAChB,GAAIK,GAAOA,EAAIC,WAAY,CACvB,MAAMC,EAAOhE,EAAI2B,cAAc,OACzBsC,EAAQH,EAAII,WAAW,GAC7BD,EAAME,iBACNH,EAAKT,UAAYI,EACjBS,MAAMC,UAAUC,MAAMC,KAAKP,EAAKQ,YAAY7D,QAAQ8D,IAChDR,EAAMS,WAAWD,GACjBZ,EAAWY,IAEfX,EAAIa,kBACJb,EAAIc,SAASX,GACb5D,KAAKD,GAAG0C","file":"../../../rich_text_editor/model/RichTextEditor.js","sourcesContent":["define(['../../utils/mixins'], function (a) {\n    'use strict';\n    const RTE_KEY = '_rte';\n    const btnState = {\n        ACTIVE: 1,\n        INACTIVE: 0,\n        DISABLED: -1\n    };\n    const isValidAnchor = rte => {\n        const anchor = rte.selection().anchorNode;\n        const parentNode = anchor && anchor.parentNode;\n        const nextSibling = anchor && anchor.nextSibling;\n        return parentNode && parentNode.nodeName == 'A' || nextSibling && nextSibling.nodeName == 'A';\n    };\n    const defActions = {\n        bold: {\n            name: 'bold',\n            icon: '<b>B</b>',\n            attributes: { title: 'Bold' },\n            result: rte => rte.exec('bold')\n        },\n        italic: {\n            name: 'italic',\n            icon: '<i>I</i>',\n            attributes: { title: 'Italic' },\n            result: rte => rte.exec('italic')\n        },\n        underline: {\n            name: 'underline',\n            icon: '<u>U</u>',\n            attributes: { title: 'Underline' },\n            result: rte => rte.exec('underline')\n        },\n        strikethrough: {\n            name: 'strikethrough',\n            icon: '<strike>S</strike>',\n            attributes: { title: 'Strike-through' },\n            result: rte => rte.exec('strikeThrough')\n        },\n        link: {\n            icon: `<span style=\"transform:rotate(45deg)\">&supdsub;</span>`,\n            name: 'link',\n            attributes: {\n                style: 'font-size:1.4rem;padding:0 4px 2px;',\n                title: 'Link'\n            },\n            state: (rte, doc) => {\n                if (rte && rte.selection()) {\n                    return isValidAnchor(rte) ? btnState.ACTIVE : btnState.INACTIVE;\n                } else {\n                    return btnState.INACTIVE;\n                }\n            },\n            result: rte => {\n                if (isValidAnchor(rte)) {\n                    rte.exec('unlink');\n                } else {\n                    rte.insertHTML(`<a class=\"link\" href=\"\">${ rte.selection() }</a>`);\n                }\n            }\n        }\n    };\n    return class RichTextEditor {\n        constructor(settings = {}) {\n            const el = settings.el;\n            if (el[RTE_KEY]) {\n                return el[RTE_KEY];\n            }\n            el[RTE_KEY] = this;\n            this.setEl(el);\n            this.updateActiveActions = this.updateActiveActions.bind(this);\n            const settAct = settings.actions || [];\n            settAct.forEach((action, i) => {\n                if (typeof action === 'string') {\n                    action = defActions[action];\n                } else if (defActions[action.name]) {\n                    action = {\n                        ...defActions[action.name],\n                        ...action\n                    };\n                }\n                settAct[i] = action;\n            });\n            const actions = settAct.length ? settAct : Object.keys(defActions).map(action => defActions[action]);\n            settings.classes = {\n                ...{\n                    actionbar: 'actionbar',\n                    button: 'action',\n                    active: 'active',\n                    disabled: 'disabled',\n                    inactive: 'inactive'\n                },\n                ...settings.classes\n            };\n            const classes = settings.classes;\n            let actionbar = settings.actionbar;\n            this.actionbar = actionbar;\n            this.settings = settings;\n            this.classes = classes;\n            this.actions = actions;\n            if (!actionbar) {\n                const actionbarCont = settings.actionbarContainer;\n                actionbar = document.createElement('div');\n                actionbar.className = classes.actionbar;\n                actionbarCont.appendChild(actionbar);\n                this.actionbar = actionbar;\n                actions.forEach(action => this.addAction(action));\n            }\n            settings.styleWithCSS && this.exec('styleWithCSS');\n            this.syncActions();\n            return this;\n        }\n        destroy() {\n            this.el = 0;\n            this.doc = 0;\n            this.actionbar = 0;\n            this.settings = {};\n            this.classes = {};\n            this.actions = [];\n        }\n        setEl(el) {\n            this.el = el;\n            this.doc = el.ownerDocument;\n        }\n        updateActiveActions() {\n            this.getActions().forEach(action => {\n                const btn = action.btn;\n                const update = action.update;\n                const {active, inactive, disabled} = { ...this.classes };\n                const state = action.state;\n                const name = action.name;\n                const doc = this.doc;\n                btn.className = btn.className.replace(active, '').trim();\n                btn.className = btn.className.replace(inactive, '').trim();\n                btn.className = btn.className.replace(disabled, '').trim();\n                if (state) {\n                    switch (state(this, doc)) {\n                    case btnState.ACTIVE:\n                        btn.className += ` ${ active }`;\n                        break;\n                    case btnState.INACTIVE:\n                        btn.className += ` ${ inactive }`;\n                        break;\n                    case btnState.DISABLED:\n                        btn.className += ` ${ disabled }`;\n                        break;\n                    }\n                } else {\n                    if (doc.queryCommandSupported(name) && doc.queryCommandState(name)) {\n                        btn.className += ` ${ active }`;\n                    }\n                }\n                update && update(this, action);\n            });\n        }\n        enable() {\n            if (this.enabled) {\n                return this;\n            }\n            this.actionbarEl().style.display = '';\n            this.el.contentEditable = true;\n            a.on(this.el, 'mouseup keyup', this.updateActiveActions);\n            this.syncActions();\n            this.updateActiveActions();\n            this.el.focus();\n            this.enabled = 1;\n            return this;\n        }\n        disable() {\n            this.actionbarEl().style.display = 'none';\n            this.el.contentEditable = false;\n            a.off(this.el, 'mouseup keyup', this.updateActiveActions);\n            this.enabled = 0;\n            return this;\n        }\n        syncActions() {\n            this.getActions().forEach(action => {\n                if (this.settings.actionbar) {\n                    if (!action.state || action.state && action.state(this, this.doc) >= 0) {\n                        const event = action.event || 'click';\n                        action.btn[`on${ event }`] = e => {\n                            action.result(this, action);\n                            this.updateActiveActions();\n                        };\n                    }\n                }\n            });\n        }\n        addAction(action, opts = {}) {\n            const sync = opts.sync;\n            const btn = document.createElement('span');\n            const icon = action.icon;\n            const attr = action.attributes || {};\n            btn.className = this.classes.button;\n            action.btn = btn;\n            for (let key in attr) {\n                btn.setAttribute(key, attr[key]);\n            }\n            if (typeof icon == 'string') {\n                btn.innerHTML = icon;\n            } else {\n                btn.appendChild(icon);\n            }\n            this.actionbarEl().appendChild(btn);\n            if (sync) {\n                this.actions.push(action);\n                this.syncActions();\n            }\n        }\n        getActions() {\n            return this.actions;\n        }\n        selection() {\n            return this.doc.getSelection();\n        }\n        exec(command, value = null) {\n            this.doc.execCommand(command, false, value);\n        }\n        actionbarEl() {\n            return this.actionbar;\n        }\n        insertHTML(value) {\n            let lastNode;\n            const doc = this.doc;\n            const sel = doc.getSelection();\n            if (sel && sel.rangeCount) {\n                const node = doc.createElement('div');\n                const range = sel.getRangeAt(0);\n                range.deleteContents();\n                node.innerHTML = value;\n                Array.prototype.slice.call(node.childNodes).forEach(nd => {\n                    range.insertNode(nd);\n                    lastNode = nd;\n                });\n                sel.removeAllRanges();\n                sel.addRange(range);\n                this.el.focus();\n            }\n        }\n    };\n});"]}