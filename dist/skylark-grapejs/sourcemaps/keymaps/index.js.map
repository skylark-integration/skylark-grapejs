{"version":3,"sources":["keymaps/index.js"],"names":["define","langx","_","keymaster","em","config","keymaps","configDef","defaults","core:undo","keys","handler","core:redo","core:copy","core:paste","core:component-next","core:component-prev","core:component-enter","core:component-exit","core:component-delete","name","getConfig","[object Object]","opts","mixin","this","defKeys","id","value","add","cmd","get","editor","getEditor","canvas","keymap","remove","e","h","opt","event","isString","prevent","getCanvasView","preventDefault","isEditing","Canvas","isInputFocused","force","run","args","shortcut","trigger","getAll","unbind","Object","forEach"],"mappings":";;;;;;;AAAAA,QACI,sBACA,qBACA,eACD,SAAUC,EAAMC,EAAGC,GAClB,aACA,MAAO,KACH,IAAIC,EACAC,EACJ,MAAMC,KACAC,GACFC,UACIC,aACIC,KAAM,cACNC,QAAS,aAEbC,aACIF,KAAM,0BACNC,QAAS,aAEbE,aACIH,KAAM,cACNC,QAAS,aAEbG,cACIJ,KAAM,cACNC,QAAS,cAEbI,uBACIL,KAAM,IACNC,QAAS,uBAEbK,uBACIN,KAAM,IACNC,QAAS,uBAEbM,wBACIP,KAAM,IACNC,QAAS,wBAEbO,uBACIR,KAAM,IACNC,QAAS,uBAEbQ,yBACIT,KAAM,oBACNC,QAAS,2BAIrB,OACIR,UAAAA,EACAiB,KAAM,UACNC,UAAS,IACEhB,EAEXiB,KAAKC,MAOD,OANAlB,EAASJ,EAAMuB,SACXjB,EACAgB,GAEJnB,EAAKC,EAAOD,GACZqB,KAAKrB,GAAKA,EACHqB,MAEXH,SACI,MAAMI,EAAUrB,EAAOG,SACvB,IAAK,IAAImB,KAAMD,EAAS,CACpB,MAAME,EAAQF,EAAQC,GACtBF,KAAKI,IAAIF,EAAIC,EAAMlB,KAAMkB,EAAMjB,WAGvCW,IAAIK,EAAIjB,EAAMC,EAASY,MACnB,MAAMnB,GAACA,GAAMqB,KACPK,EAAM1B,EAAG2B,IAAI,YACbC,EAAS5B,EAAG6B,YACZC,EAAS9B,EAAG2B,IAAI,UAChBI,GACFR,GAAAA,EACAjB,KAAAA,EACAC,QAAAA,GAyBJ,OAvBWL,EAAQqB,IACbF,KAAKW,OAAOT,GAClBrB,EAAQqB,GAAMQ,EACdhC,EAAUO,EAAM,CAAC2B,EAAGC,KAChB,MAAMC,GACFC,MAAOH,EACPC,EAAAA,GAKJ,GAHA3B,EAAUT,EAAEuC,SAAS9B,GAAWmB,EAAIC,IAAIpB,GAAWA,EACnDY,EAAKmB,SAAWR,EAAOS,gBAAgBC,eAAeP,IACnCjC,EAAGyC,cAAgBb,EAAOc,OAAOC,kBACnCxB,EAAKyB,MAAO,CACP,iBAAXrC,EAAsBA,EAAQsC,IAAIjB,EAAQ,EAAGO,GAAO5B,EAAQqB,EAAQ,EAAGO,GAC9E,MAAMW,GACFvB,EACAW,EAAEa,SACFd,GAEJjC,EAAGgD,QAAQ,iBAAkBF,GAC7B9C,EAAGgD,uBAAwBzB,OAAUuB,MAG7C9C,EAAGgD,QAAQ,aAAcjB,GAClBA,GAEXJ,IAAIJ,GACOrB,EAAQqB,GAEnB0B,OAAM,IACK/C,EAEXgB,OAAOK,GACH,MAAMvB,EAAKqB,KAAKrB,GACV+B,EAASV,KAAKM,IAAIJ,GACxB,GAAIQ,EAIA,cAHO7B,EAAQqB,GACfxB,EAAUmD,OAAOnB,EAAOzB,MACxBN,GAAMA,EAAGgD,QAAQ,gBAAiBjB,GAC3BA,GAGfb,YAEI,OADAiC,OAAO7C,KAAKJ,GAASkD,QAAQrB,GAAUV,KAAKW,OAAOD,IAC5CV","file":"../../keymaps/index.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    './keymaster'\n], function (langx,_, keymaster) {\n    'use strict';\n    return () => {\n        let em;\n        let config;\n        const keymaps = {};\n        const configDef = {\n            defaults: {\n                'core:undo': {\n                    keys: '\\u2318+z, ctrl+z',\n                    handler: 'core:undo'\n                },\n                'core:redo': {\n                    keys: '\\u2318+shift+z, ctrl+shift+z',\n                    handler: 'core:redo'\n                },\n                'core:copy': {\n                    keys: '\\u2318+c, ctrl+c',\n                    handler: 'core:copy'\n                },\n                'core:paste': {\n                    keys: '\\u2318+v, ctrl+v',\n                    handler: 'core:paste'\n                },\n                'core:component-next': {\n                    keys: 's',\n                    handler: 'core:component-next'\n                },\n                'core:component-prev': {\n                    keys: 'w',\n                    handler: 'core:component-prev'\n                },\n                'core:component-enter': {\n                    keys: 'd',\n                    handler: 'core:component-enter'\n                },\n                'core:component-exit': {\n                    keys: 'a',\n                    handler: 'core:component-exit'\n                },\n                'core:component-delete': {\n                    keys: 'backspace, delete',\n                    handler: 'core:component-delete'\n                }\n            }\n        };\n        return {\n            keymaster,\n            name: 'Keymaps',\n            getConfig() {\n                return config;\n            },\n            init(opts = {}) {\n                config = langx.mixin({},\n                    configDef,\n                    opts\n                );\n                em = config.em;\n                this.em = em;\n                return this;\n            },\n            onLoad() {\n                const defKeys = config.defaults;\n                for (let id in defKeys) {\n                    const value = defKeys[id];\n                    this.add(id, value.keys, value.handler);\n                }\n            },\n            add(id, keys, handler, opts = {}) {\n                const {em} = this;\n                const cmd = em.get('Commands');\n                const editor = em.getEditor();\n                const canvas = em.get('Canvas');\n                const keymap = {\n                    id,\n                    keys,\n                    handler\n                };\n                const pk = keymaps[id];\n                pk && this.remove(id);\n                keymaps[id] = keymap;\n                keymaster(keys, (e, h) => {\n                    const opt = {\n                        event: e,\n                        h\n                    };\n                    handler = _.isString(handler) ? cmd.get(handler) : handler;\n                    opts.prevent && canvas.getCanvasView().preventDefault(e);\n                    const ableTorun = !em.isEditing() && !editor.Canvas.isInputFocused();\n                    if (ableTorun || opts.force) {\n                        typeof handler == 'object' ? handler.run(editor, 0, opt) : handler(editor, 0, opt);\n                        const args = [\n                            id,\n                            h.shortcut,\n                            e\n                        ];\n                        em.trigger('keymap:emit', ...args);\n                        em.trigger(`keymap:emit:${ id }`, ...args);\n                    }\n                });\n                em.trigger('keymap:add', keymap);\n                return keymap;\n            },\n            get(id) {\n                return keymaps[id];\n            },\n            getAll() {\n                return keymaps;\n            },\n            remove(id) {\n                const em = this.em;\n                const keymap = this.get(id);\n                if (keymap) {\n                    delete keymaps[id];\n                    keymaster.unbind(keymap.keys);\n                    em && em.trigger('keymap:remove', keymap);\n                    return keymap;\n                }\n            },\n            removeAll() {\n                Object.keys(keymaps).forEach(keymap => this.remove(keymap));\n                return this;\n            }\n        };\n    };\n});"]}