{"version":3,"sources":["navigator/view/ItemsView.js"],"names":["define","Backbone","a","ItemsView","View","extend","[object Object]","o","this","opt","config","level","preview","ppfx","pStylePrefix","pfx","stylePrefix","parent","parentView","coll","collection","listenTo","addTo","render","removeChildren","className","em","sortable","sorter","utils","get","Sorter","container","sortContainer","el","containerSel","itemSel","ignoreViewChildren","created","data","srcModel","getSourceModel","setSelected","forceChange","trigger","eventDrag","avoidSelectOnEnd","nested","$el","removed","view","viewLayer","remove","apply","model","i","indexOf","addToCollection","fragmentEl","index","fragment","rendered","viewObject","ItemView","isCountable","opened","appendChild","method","children","length","append","eq","hide","type","tag","frag","document","createDocumentFragment","innerHTML","each"],"mappings":";;;;;;;AAAAA,QACI,mBACA,wCACD,SAAUC,EAAUC,GACnB,aACA,IAAIC,EAAaF,EAASG,KAAKC,QAC3BC,WAAWC,MACPC,KAAKC,IAAMF,EACX,MAAMG,EAASH,EAAEG,WACjBF,KAAKG,MAAQJ,EAAEI,MACfH,KAAKE,OAASA,EACdF,KAAKI,QAAUL,EAAEK,QACjBJ,KAAKK,KAAOH,EAAOI,cAAgB,GACnCN,KAAKO,IAAML,EAAOM,aAAe,GACjCR,KAAKS,OAASV,EAAEU,OAChBT,KAAKU,WAAaX,EAAEW,WACpB,MAAMH,EAAMP,KAAKO,IACXF,EAAOL,KAAKK,KACZI,EAAST,KAAKS,OACdE,EAAOX,KAAKY,WAClBZ,KAAKa,SAASF,EAAM,MAAOX,KAAKc,OAChCd,KAAKa,SAASF,EAAM,uBAAwBX,KAAKe,QACjDf,KAAKa,SAASF,EAAM,SAAUX,KAAKgB,gBACnChB,KAAKiB,aAAgBV,UACrB,MAAMW,EAAKhB,EAAOgB,GAClB,GAAIhB,EAAOiB,WAAanB,KAAKC,IAAImB,OAAQ,CACrC,MAAMC,EAAQH,EAAGI,IAAI,SACrBtB,KAAKC,IAAImB,OAAS,IAAIC,EAAME,QACxBC,UAAWtB,EAAOuB,eAAiBzB,KAAK0B,GACxCC,iBAAmB3B,KAAKiB,YACxBW,YAAcrB,SACdsB,mBAAoB,EACpB/B,UAAUgC,EAASV,EAAQW,GACvB,MAAMC,EAAWZ,EAAOa,iBACxBf,EAAGgB,YAAYF,GAAYG,YAAa,IACxCjB,EAAGkB,WAAY1C,EAAE2C,gBAAkBN,IAEvCO,iBAAkB,EAClBC,OAAQ,EACRlC,KAAAA,EACAE,IAAAA,IAGRP,KAAKoB,OAASpB,KAAKC,IAAImB,QAAU,GACjCpB,KAAKwC,IAAIT,KAAK,aAAcpB,GAC5BF,GAAUT,KAAKwC,IAAIT,KAAK,QAAStB,IAErCX,eAAe2C,GACX,MAAMC,EAAOD,EAAQE,UAChBD,GAELA,EAAKE,OAAOC,MAAMH,IAEtB5C,MAAMgD,GACF,IAAIC,EAAI/C,KAAKY,WAAWoC,QAAQF,GAChC9C,KAAKiD,gBAAgBH,EAAO,KAAMC,IAEtCjD,gBAAgBgD,EAAOI,EAAYC,GAC/B,MAAMhD,MAACA,EAAKO,WAAEA,GAAcV,KAC5B,IAAIoD,EAAWF,GAAc,KAWzBG,EATO,IAAIC,EADE3D,EAAU4D,WAEvBpD,MAAAA,EACA2C,MAAAA,EACApC,WAAAA,EACAR,OAAQF,KAAKE,OACbkB,OAAQpB,KAAKoB,OACboC,YAAaxD,KAAKwD,YAClBC,OAAQzD,KAAKC,IAAIwD,SAED1C,SAASW,GAC7B,GAAI0B,EACAA,EAASM,YAAYL,QAErB,QAAoB,IAATF,EAAsB,CAC7B,IAAIQ,EAAS,SACT3D,KAAKwC,IAAIoB,WAAWC,QAAUV,IAC9BA,IACAQ,EAAS,SAETR,EAAQ,EACRnD,KAAKwC,IAAIsB,OAAOT,GAEhBrD,KAAKwC,IAAIoB,WAAWG,GAAGZ,GAAOQ,GAAQN,QAE1CrD,KAAKwC,IAAIsB,OAAOT,GAExB,OAAOA,GAEXvD,YAAYgD,EAAOkB,GACf,IAAIC,EAAOnB,EAAMxB,IAAI,QACjB4C,EAAMpB,EAAMxB,IAAI,WACpB,SAAa,YAAR2C,GAA6B,MAAPC,IAAgBF,IAASlB,EAAMxB,IAAI,eAKlExB,SACI,MAAMqE,EAAOC,SAASC,yBAChB3C,EAAK1B,KAAK0B,GAKhB,OAJAA,EAAG4C,UAAY,GACftE,KAAKY,WAAW2D,KAAKzB,GAAS9C,KAAKiD,gBAAgBH,EAAOqB,IAC1DzC,EAAGgC,YAAYS,GACfzC,EAAGT,UAAYjB,KAAKiB,UACbjB,QAIf,OAAOL","file":"../../../navigator/view/ItemsView.js","sourcesContent":["define([\n    'skylark-backbone',\n    '../../dom_components/model/Component'\n], function (Backbone, a) {\n    'use strict';\n    var ItemsView =  Backbone.View.extend({\n        initialize(o = {}) {\n            this.opt = o;\n            const config = o.config || {};\n            this.level = o.level;\n            this.config = config;\n            this.preview = o.preview;\n            this.ppfx = config.pStylePrefix || '';\n            this.pfx = config.stylePrefix || '';\n            this.parent = o.parent;\n            this.parentView = o.parentView;\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            const parent = this.parent;\n            const coll = this.collection;\n            this.listenTo(coll, 'add', this.addTo);\n            this.listenTo(coll, 'reset resetNavigator', this.render);\n            this.listenTo(coll, 'remove', this.removeChildren);\n            this.className = `${ pfx }layers`;\n            const em = config.em;\n            if (config.sortable && !this.opt.sorter) {\n                const utils = em.get('Utils');\n                this.opt.sorter = new utils.Sorter({\n                    container: config.sortContainer || this.el,\n                    containerSel: `.${ this.className }`,\n                    itemSel: `.${ pfx }layer`,\n                    ignoreViewChildren: 1,\n                    onEndMove(created, sorter, data) {\n                        const srcModel = sorter.getSourceModel();\n                        em.setSelected(srcModel, { forceChange: 1 });\n                        em.trigger(`${ a.eventDrag }:end`, data);\n                    },\n                    avoidSelectOnEnd: 1,\n                    nested: 1,\n                    ppfx,\n                    pfx\n                });\n            }\n            this.sorter = this.opt.sorter || '';\n            this.$el.data('collection', coll);\n            parent && this.$el.data('model', parent);\n        },\n        removeChildren(removed) {\n            const view = removed.viewLayer;\n            if (!view)\n                return;\n            view.remove.apply(view);\n        },\n        addTo(model) {\n            var i = this.collection.indexOf(model);\n            this.addToCollection(model, null, i);\n        },\n        addToCollection(model, fragmentEl, index) {\n            const {level, parentView} = this;\n            var fragment = fragmentEl || null;\n            var viewObject = ItemsView.ItemView;\n            var view = new viewObject({\n                level,\n                model,\n                parentView,\n                config: this.config,\n                sorter: this.sorter,\n                isCountable: this.isCountable,\n                opened: this.opt.opened\n            });\n            var rendered = view.render().el;\n            if (fragment) {\n                fragment.appendChild(rendered);\n            } else {\n                if (typeof index != 'undefined') {\n                    var method = 'before';\n                    if (this.$el.children().length == index) {\n                        index--;\n                        method = 'after';\n                    }\n                    if (index < 0) {\n                        this.$el.append(rendered);\n                    } else\n                        this.$el.children().eq(index)[method](rendered);\n                } else\n                    this.$el.append(rendered);\n            }\n            return rendered;\n        },\n        isCountable(model, hide) {\n            var type = model.get('type');\n            var tag = model.get('tagName');\n            if ((type == 'textnode' || tag == 'br') && hide || !model.get('layerable')) {\n                return false;\n            }\n            return true;\n        },\n        render() {\n            const frag = document.createDocumentFragment();\n            const el = this.el;\n            el.innerHTML = '';\n            this.collection.each(model => this.addToCollection(model, frag));\n            el.appendChild(frag);\n            el.className = this.className;\n            return this;\n        }\n    });\n\n    return ItemsView;\n});"]}