{"version":3,"sources":["navigator/index.js"],"names":["define","defaults","ItemView","a","em","layers","config","name","[object Object]","opts","stylePrefix","pStylePrefix","this","getConfig","level","opened","model","get","getWrapper","on","componentChanged","elTo","appendTo","root","setRoot","isElement","document","querySelector","appendChild","render","el","getRoot","getAll","selected","fromLayers","getSelected","scroll","scrollLayers","parent","collection","cid","set","viewLayer","scrollIntoView"],"mappings":";;;;;;;AAAAA,QACI,kBACA,kBACA,sBACD,SAAUC,EAAUC,EAAUC,GAC7B,aACA,MAAO,KACH,IAAIC,EACAC,EACAC,KACJ,OACIC,KAAM,eACNC,KAAKC,MAOD,OANAH,MACOL,KACAQ,IAEAC,YAAcD,EAAKE,aAC1BP,EAAKE,EAAOF,GACLQ,MAEXC,UAAS,IACEP,EAEXE,SACIH,EAAS,IAAIH,GACTY,MAAO,EACPR,OAAAA,EACAS,OAAQT,EAAOS,WACfC,MAAOZ,EAAGa,IAAI,iBAAiBC,eAEnCd,GAAMA,EAAGe,GAAG,qBAAsBP,KAAKQ,kBACvCR,KAAKQ,oBAETZ,aACI,MAAMa,EAAOf,EAAOgB,SACdC,EAAOjB,EAAOiB,KAEpB,GADAA,GAAQX,KAAKY,QAAQD,GACjBF,EAAM,EACKlB,EAAEsB,UAAUJ,GAAQA,EAAOK,SAASC,cAAcN,IAC1DO,YAAYhB,KAAKiB,YAG5BrB,QAAQsB,GAEJ,OADAzB,EAAOmB,QAAQM,GACRlB,MAEXmB,QAAO,IACI1B,EAAOW,MAElBgB,OAAM,IACK3B,EAEXG,iBAAiByB,EAAUxB,MACvB,GAAIA,EAAKyB,WACL,OACJ,MAAMnB,EAASX,EAAGa,IAAI,UAChBD,EAAQZ,EAAG+B,cACXC,EAAS9B,EAAO+B,aACtB,IAAIC,EAAStB,GAASA,EAAMuB,WAAavB,EAAMuB,WAAWD,OAAS,KACnE,IAAK,IAAIE,KAAOzB,EACZA,EAAOyB,GAAKC,IAAI,OAAQ,GAC5B,KAAOH,GACHA,EAAOG,IAAI,OAAQ,GACnB1B,EAAOuB,EAAOE,KAAOF,EACrBA,EAASA,EAAOC,WAAaD,EAAOC,WAAWD,OAAS,KAE5D,GAAItB,GAASoB,EAAQ,CACjB,MAAMN,EAAKd,EAAM0B,WAAa1B,EAAM0B,UAAUZ,GAC9CA,GAAMA,EAAGa,eAAeP,KAGhCP,OAAM,IACKxB,EAAOwB,SAASC","file":"../../navigator/index.js","sourcesContent":["define([\n    './config/config',\n    './view/ItemView',\n    'skylark-underscore'\n], function (defaults, ItemView, a) {\n    'use strict';\n    return () => {\n        let em;\n        let layers;\n        let config = {};\n        return {\n            name: 'LayerManager',\n            init(opts = {}) {\n                config = {\n                    ...defaults,\n                    ...opts\n                };\n                config.stylePrefix = opts.pStylePrefix;\n                em = config.em;\n                return this;\n            },\n            getConfig() {\n                return config;\n            },\n            onLoad() {\n                layers = new ItemView({\n                    level: 0,\n                    config,\n                    opened: config.opened || {},\n                    model: em.get('DomComponents').getWrapper()\n                });\n                em && em.on('component:selected', this.componentChanged);\n                this.componentChanged();\n            },\n            postRender() {\n                const elTo = config.appendTo;\n                const root = config.root;\n                root && this.setRoot(root);\n                if (elTo) {\n                    const el = a.isElement(elTo) ? elTo : document.querySelector(elTo);\n                    el.appendChild(this.render());\n                }\n            },\n            setRoot(el) {\n                layers.setRoot(el);\n                return this;\n            },\n            getRoot() {\n                return layers.model;\n            },\n            getAll() {\n                return layers;\n            },\n            componentChanged(selected, opts = {}) {\n                if (opts.fromLayers)\n                    return;\n                const opened = em.get('opened');\n                const model = em.getSelected();\n                const scroll = config.scrollLayers;\n                let parent = model && model.collection ? model.collection.parent : null;\n                for (let cid in opened)\n                    opened[cid].set('open', 0);\n                while (parent) {\n                    parent.set('open', 1);\n                    opened[parent.cid] = parent;\n                    parent = parent.collection ? parent.collection.parent : null;\n                }\n                if (model && scroll) {\n                    const el = model.viewLayer && model.viewLayer.el;\n                    el && el.scrollIntoView(scroll);\n                }\n            },\n            render() {\n                return layers.render().el;\n            }\n        };\n    };\n});"]}