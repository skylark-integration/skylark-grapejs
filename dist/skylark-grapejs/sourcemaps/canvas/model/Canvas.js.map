{"version":3,"sources":["canvas/model/Canvas.js"],"names":["define","Backbone","Frame","Frames","Model","extend","defaults","frame","frames","wrapper","rulers","zoom","x","y","[object Object]","config","em","styles","scripts","forEach","style","addLink","script","addScript","this","set","listenTo","onZoomChange","updateDevice","device","getDeviceModel","model","getCurrentFrameModel","width","height","attributes","get"],"mappings":";;;;;;;AAAAA,QACI,mBACA,UACA,YACD,SAAUC,EAAUC,EAAOC,GAC1B,aACA,OAAOF,EAASG,MAAMC,QAClBC,UACIC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,QAAQ,EACRC,KAAM,IACNC,EAAG,EACHC,EAAG,GAEPC,WAAWC,MACP,MAAMC,GAACA,GAAMD,GACPE,OAACA,KAAWC,QAAEA,MAAgBH,EAC9BR,EAAQ,IAAIL,KAAUa,GAC5BE,EAAOE,QAAQC,GAASb,EAAMc,QAAQD,IACtCF,EAAQC,QAAQG,GAAUf,EAAMgB,UAAUD,IAC1CE,KAAKR,GAAKA,EACVQ,KAAKC,IAAI,QAASlB,GAClBiB,KAAKC,IAAI,SAAU,IAAItB,GAAQI,GAAQQ,IACvCS,KAAKE,SAASF,KAAM,cAAeA,KAAKG,cACxCH,KAAKE,SAASV,EAAI,gBAAiBQ,KAAKI,eAE5Cd,eACI,MAAME,GAACA,GAAMQ,KACPK,EAASb,EAAGc,iBACZC,EAAQf,EAAGgB,uBACjB,GAAID,GAASF,EAAQ,CACjB,MAAMI,MAACA,EAAKC,OAAEA,GAAUL,EAAOM,WAC/BJ,EAAMN,KACFQ,MAAAA,EACAC,OAAAA,MAIZpB,eACiBU,KAAKY,IAAI,QACf,GAAKZ,KAAKC,IAAI,OAAQ","file":"../../../canvas/model/Canvas.js","sourcesContent":["define([\n    'skylark-backbone',\n    './Frame',\n    './Frames'\n], function (Backbone, Frame, Frames) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            frame: '',\n            frames: '',\n            wrapper: '',\n            rulers: false,\n            zoom: 100,\n            x: 0,\n            y: 0\n        },\n        initialize(config = {}) {\n            const {em} = config;\n            const {styles = [], scripts = []} = config;\n            const frame = new Frame({}, config);\n            styles.forEach(style => frame.addLink(style));\n            scripts.forEach(script => frame.addScript(script));\n            this.em = em;\n            this.set('frame', frame);\n            this.set('frames', new Frames([frame], config));\n            this.listenTo(this, 'change:zoom', this.onZoomChange);\n            this.listenTo(em, 'change:device', this.updateDevice);\n        },\n        updateDevice() {\n            const {em} = this;\n            const device = em.getDeviceModel();\n            const model = em.getCurrentFrameModel();\n            if (model && device) {\n                const {width, height} = device.attributes;\n                model.set({\n                    width,\n                    height\n                });\n            }\n        },\n        onZoomChange() {\n            const zoom = this.get('zoom');\n            zoom < 1 && this.set('zoom', 1);\n        }\n    });\n});"]}