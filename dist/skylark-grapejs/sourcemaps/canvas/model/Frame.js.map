{"version":3,"sources":["canvas/model/Frame.js"],"names":["define","Backbone","Component","CssRules","a","Model","extend","defaults","wrapper","width","height","head","x","y","root","components","styles","attributes","[object Object]","props","opts","this","set","em","modOpts","config","get","getConfig","frame","type","isString","view","coll","collection","remove","value","item","getHead","push","setHead","attr","tag","filter","getHeadByAttr","index","indexOf","splice","href","addHeadItem","rel","removeHeadByAttr","src","data","trigger"],"mappings":";;;;;;;AAAAA,QACI,mBACA,uCACA,oCACA,sBACD,SAAUC,EAAUC,EAAWC,EAAUC,GACxC,aACA,OAAOH,EAASI,MAAMC,QAClBC,UACIC,QAAS,GACTC,MAAO,KACPC,OAAQ,KACRC,KAAM,GACNC,EAAG,EACHC,EAAG,EACHC,KAAM,EACNC,WAAY,EACZC,OAAQ,EACRC,eAEJC,WAAWC,EAAOC,MACd,MAAMN,KAACA,EAAIE,OAAEA,EAAMD,WAAEA,GAAcM,KAAKJ,WACxCI,KAAKC,IAAI,WACTD,KAAKE,GAAKH,EAAKG,GACf,MAAMC,GACFD,GAAIH,EAAKG,GACTE,OAAQL,EAAKG,GAAGG,IAAI,iBAAiBC,YACrCC,MAAOP,OAEVP,GAAQO,KAAKC,IAAI,OAAQ,IAAIpB,GAC1B2B,KAAM,UACNd,WAAYA,OACbS,MACDR,GAAUZ,EAAE0B,SAASd,KAAYK,KAAKC,IAAI,SAAU,IAAInB,EAASa,EAAQQ,KAE/EN,SACIG,KAAKU,KAAO,EACZ,MAAMC,EAAOX,KAAKY,WAClB,OAAOD,GAAQA,EAAKE,OAAOb,OAE/BH,UACI,UAAWG,KAAKK,IAAI,UAExBR,QAAQiB,GACJ,OAAOd,KAAKC,IAAI,WAAYa,KAEhCjB,YAAYkB,GACR,MAAMzB,EAAOU,KAAKgB,UAClB1B,EAAK2B,KAAKF,GACVf,KAAKkB,QAAQ5B,IAEjBO,cAAcsB,EAAML,EAAOM,GAEvB,OADapB,KAAKgB,UACNK,OAAON,GAAQA,EAAKnB,YAAcmB,EAAKnB,WAAWuB,IAASL,KAAWM,GAAOA,IAAQL,EAAKK,MAAM,IAEhHvB,iBAAiBsB,EAAML,EAAOM,GAC1B,MAAM9B,EAAOU,KAAKgB,UACZD,EAAOf,KAAKsB,cAAcH,EAAML,EAAOM,GACvCG,EAAQjC,EAAKkC,QAAQT,GACvBQ,GAAS,IACTjC,EAAKmC,OAAOF,EAAO,GACnBvB,KAAKkB,QAAQ5B,KAGrBO,QAAQ6B,IAEH1B,KAAKsB,cAAc,OAAQI,EADhB,SAC8B1B,KAAK2B,aAC3CP,IAFQ,OAGRxB,YACI8B,KAAAA,EACAE,IAAK,iBAIjB/B,WAAW6B,GACP1B,KAAK6B,iBAAiB,OAAQH,EAAM,SAExC7B,UAAUiC,IAEL9B,KAAKsB,cAAc,MAAOQ,EADf,WAC4B9B,KAAK2B,aACzCP,IAFQ,SAGRxB,YAAckC,IAAAA,MAGtBjC,aAAaiC,GACT9B,KAAK6B,iBAAiB,MAAOC,EAAK,WAEtCjC,aAAakC,MACT/B,KAAKE,GAAG8B,QAAQ,iBACZzB,MAAOP,QACJ+B","file":"../../../canvas/model/Frame.js","sourcesContent":["define([\n    'skylark-backbone',\n    '../../dom_components/model/Component',\n    '../../css_composer/model/CssRules',\n    'skylark-underscore'\n], function (Backbone, Component, CssRules, a) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            wrapper: '',\n            width: null,\n            height: null,\n            head: '',\n            x: 0,\n            y: 0,\n            root: 0,\n            components: 0,\n            styles: 0,\n            attributes: {}\n        },\n        initialize(props, opts = {}) {\n            const {root, styles, components} = this.attributes;\n            this.set('head', []);\n            this.em = opts.em;\n            const modOpts = {\n                em: opts.em,\n                config: opts.em.get('DomComponents').getConfig(),\n                frame: this\n            };\n            !root && this.set('root', new Component({\n                type: 'wrapper',\n                components: components || []\n            }, modOpts));\n            (!styles || a.isString(styles)) && this.set('styles', new CssRules(styles, modOpts));\n        },\n        remove() {\n            this.view = 0;\n            const coll = this.collection;\n            return coll && coll.remove(this);\n        },\n        getHead() {\n            return [...this.get('head')];\n        },\n        setHead(value) {\n            return this.set('head', [...value]);\n        },\n        addHeadItem(item) {\n            const head = this.getHead();\n            head.push(item);\n            this.setHead(head);\n        },\n        getHeadByAttr(attr, value, tag) {\n            const head = this.getHead();\n            return head.filter(item => item.attributes && item.attributes[attr] == value && (!tag || tag === item.tag))[0];\n        },\n        removeHeadByAttr(attr, value, tag) {\n            const head = this.getHead();\n            const item = this.getHeadByAttr(attr, value, tag);\n            const index = head.indexOf(item);\n            if (index >= 0) {\n                head.splice(index, 1);\n                this.setHead(head);\n            }\n        },\n        addLink(href) {\n            const tag = 'link';\n            !this.getHeadByAttr('href', href, tag) && this.addHeadItem({\n                tag,\n                attributes: {\n                    href,\n                    rel: 'stylesheet'\n                }\n            });\n        },\n        removeLink(href) {\n            this.removeHeadByAttr('href', href, 'link');\n        },\n        addScript(src) {\n            const tag = 'script';\n            !this.getHeadByAttr('src', src, tag) && this.addHeadItem({\n                tag,\n                attributes: { src }\n            });\n        },\n        removeScript(src) {\n            this.removeHeadByAttr('src', src, 'script');\n        },\n        _emitUpdated(data = {}) {\n            this.em.trigger('frame:updated', {\n                frame: this,\n                ...data\n            });\n        }\n    });\n});"]}