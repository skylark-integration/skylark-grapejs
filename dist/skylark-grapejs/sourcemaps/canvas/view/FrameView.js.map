{"version":3,"sources":["canvas/view/FrameView.js"],"names":["define","langx","Backbone","_","CssRulesView","ComponentView","dom","mixins","View","extend","tagName","attributes","allowfullscreen","data-frame-el","[object Object]","o","bindAll","this","model","el","config","frameView","ppfx","pStylePrefix","em","listenTo","updateHead","view","setViewEl","headEl","getHead","empty","appendVNodes","getEl","contentWindow","contentDocument","getDoc","querySelector","getBody","jsContainer","createEl","class","frameWrapView","elTools","get","getGlobalToolsEl","_getTool","rect","getBoundingClientRect","scrollTop","scrollLeft","height","offsetHeight","width","offsetWidth","top","offsetTop","left","offsetLeft","scrollBottom","scrollRight","name","toolsEl","getToolsEl","root","_toggleEffects","prototype","remove","apply","arguments","lastMaxHeight","getWrapper","setTimeout","_toggleAutoscrollFx","requestAnimationFrame","autoscroll","dragging","canvas","win","getWindow","actualTop","clientY","lastClientY","limitTop","getConfig","autoscrollLimit","limitBottom","getRect","nextTop","style","opacity","showGlobalTools","scrollTo","ev","preventDefault","getPointerEvent","getZoomDecimal","debounce","enable","method","updateClientY","stopAutoscroll","$el","attr","scripts","length","renderScripts","renderContent","onload","renderBody","bind","appendScript","src","shift","scriptEl","mixin","type","isString","onerror","head","appendChild","styles","doc","body","conf","extStyles","forEach","href","push","tag","rel","append","baseCss","canvasCss","protectedCss","render","collection","getJsContainer","on","target","event","obj","split","addEventListener","dispatchEvent","createCustomEvent","trigger","off","motionsEv","_emitUpdate","_emitUpdated"],"mappings":"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","file":"../../../canvas/view/FrameView.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../css_composer/view/CssRulesView',\n    '../../dom_components/view/ComponentView',\n    '../../utils/dom',\n    '../../utils/mixins'\n], function (langx,Backbone, _, CssRulesView, ComponentView, dom, mixins) {\n    'use strict';\n    return Backbone.View.extend({\n        tagName: 'iframe',\n        attributes: {\n            allowfullscreen: 'allowfullscreen',\n            'data-frame-el': true\n        },\n        initialize(o) {\n            _.bindAll(this, 'updateClientY', 'stopAutoscroll', 'autoscroll', '_emitUpdate');\n            const {model, el} = this;\n            this.config = {\n                ...o.config ,\n                frameView: this\n            };\n            this.ppfx = this.config.pStylePrefix || '';\n            this.em = this.config.em;\n            this.listenTo(model, 'change:head', this.updateHead);\n            model.view = this;\n            mixins.setViewEl(el, this);\n        },\n        updateHead() {\n            const headEl = this.getHead();\n            dom.empty(headEl);\n            dom.appendVNodes(headEl, this.model.getHead());\n        },\n        getEl() {\n            return this.el;\n        },\n        getWindow() {\n            return this.getEl().contentWindow;\n        },\n        getDoc() {\n            return this.getEl().contentDocument;\n        },\n        getHead() {\n            return this.getDoc().querySelector('head');\n        },\n        getBody() {\n            return this.getDoc().querySelector('body');\n        },\n        getWrapper() {\n            return this.getBody().querySelector('[data-gjs-type=wrapper]');\n        },\n        getJsContainer() {\n            if (!this.jsContainer) {\n                this.jsContainer = dom.createEl('div', { class: `${ this.ppfx }js-cont` });\n            }\n            return this.jsContainer;\n        },\n        getToolsEl() {\n            const {frameWrapView} = this.config;\n            return frameWrapView && frameWrapView.elTools;\n        },\n        getGlobalToolsEl() {\n            return this.em.get('Canvas').getGlobalToolsEl();\n        },\n        getHighlighter() {\n            return this._getTool('[data-hl]');\n        },\n        getBadgeEl() {\n            return this._getTool('[data-badge]');\n        },\n        getOffsetViewerEl() {\n            return this._getTool('[data-offset]');\n        },\n        getRect() {\n            if (!this.rect) {\n                this.rect = this.el.getBoundingClientRect();\n            }\n            return this.rect;\n        },\n        getOffsetRect() {\n            const {el} = this;\n            const {scrollTop, scrollLeft} = this.getBody();\n            const height = el.offsetHeight;\n            const width = el.offsetWidth;\n            return {\n                top: el.offsetTop,\n                left: el.offsetLeft,\n                height,\n                width,\n                scrollTop,\n                scrollLeft,\n                scrollBottom: scrollTop + height,\n                scrollRight: scrollLeft + width\n            };\n        },\n        _getTool(name) {\n            const toolsEl = this.getToolsEl();\n            if (!this[name]) {\n                this[name] = toolsEl.querySelector(name);\n            }\n            return this[name];\n        },\n        remove() {\n            const {root, model} = this;\n            this._toggleEffects();\n            Backbone.View.prototype.remove.apply(this, arguments);\n            root.remove();\n            model.remove();\n        },\n        startAutoscroll() {\n            this.lastMaxHeight = this.getWrapper().offsetHeight - this.el.offsetHeight;\n            setTimeout(() => {\n                this._toggleAutoscrollFx(1);\n                requestAnimationFrame(this.autoscroll);\n            }, 0);\n        },\n        autoscroll() {\n            if (this.dragging) {\n                const canvas = this.em.get('Canvas');\n                const win = this.getWindow();\n                const body = this.getBody();\n                const actualTop = body.scrollTop;\n                const clientY = this.lastClientY || 0;\n                const limitTop = canvas.getConfig().autoscrollLimit;\n                const limitBottom = this.getRect().height - limitTop;\n                let nextTop = actualTop;\n                if (clientY < limitTop) {\n                    nextTop -= limitTop - clientY;\n                }\n                if (clientY > limitBottom) {\n                    nextTop += clientY - limitBottom;\n                }\n                if (nextTop !== actualTop && nextTop > 0 && nextTop < this.lastMaxHeight) {\n                    const toolsEl = this.getGlobalToolsEl();\n                    toolsEl.style.opacity = 0;\n                    this.showGlobalTools();\n                    win.scrollTo(0, nextTop);\n                }\n                requestAnimationFrame(this.autoscroll);\n            }\n        },\n        updateClientY(ev) {\n            ev.preventDefault();\n            this.lastClientY = mixins.getPointerEvent(ev).clientY * this.em.getZoomDecimal();\n        },\n        showGlobalTools: _.debounce(function () {\n            this.getGlobalToolsEl().style.opacity = '';\n        }, 50),\n        stopAutoscroll() {\n            this.dragging && this._toggleAutoscrollFx();\n        },\n        _toggleAutoscrollFx(enable) {\n            this.dragging = enable;\n            const win = this.getWindow();\n            const method = enable ? 'on' : 'off';\n            mixins[method](win, 'mousemove dragover', this.updateClientY);\n            mixins[method](win, 'mouseup', this.stopAutoscroll);\n        },\n        render() {\n            const {el, $el, ppfx, config} = this;\n            $el.attr({ class: ppfx + 'frame' });\n            if (config.scripts.length) {\n                this.renderScripts();\n            } else if (config.renderContent) {\n                el.onload = this.renderBody.bind(this);\n            }\n            return this;\n        },\n        renderScripts() {\n            const {el, config} = this;\n            const appendScript = scripts => {\n                if (scripts.length > 0) {\n                    const src = scripts.shift();\n                    const scriptEl = dom.createEl('script', langx.mixin({\n                                            type: 'text/javascript'\n                                        },_.isString(src) ? { src } : src\n                    ));\n                    scriptEl.onerror = scriptEl.onload = appendScript.bind(null, scripts);\n                    el.contentDocument.head.appendChild(scriptEl);\n                } else {\n                    this.renderBody();\n                }\n            };\n            el.onload = () => appendScript([...config.scripts]);\n        },\n        renderBody() {\n            const {config, model, ppfx} = this;\n            const root = model.get('root');\n            const styles = model.get('styles');\n            const {em} = config;\n            const doc = this.getDoc();\n            const head = this.getHead();\n            const body = this.getBody();\n            const win = this.getWindow();\n            const conf = em.get('Config');\n            const extStyles = [];\n            config.styles.forEach(href => extStyles.push(_.isString(href) ? {\n                tag: 'link',\n                attributes: {\n                    href,\n                    rel: 'stylesheet'\n                }\n            } : {\n                tag: 'link',\n                attributes: {\n                    rel: 'stylesheet',\n                    ...href\n                }\n            }));\n            extStyles.length && dom.appendVNodes(head, extStyles);\n            const colorWarn = '#ffca6f';\n            dom.append(body, `<style>\n      ${ conf.baseCss || '' }\n\n      .${ ppfx }dashed *[data-highlightable] {\n        outline: 1px dashed rgba(170,170,170,0.7);\n        outline-offset: -2px;\n      }\n\n      .${ ppfx }selected {\n        outline: 3px solid #3b97e3 !important;\n        outline-offset: -3px;\n      }\n\n      .${ ppfx }selected-parent {\n        outline: 2px solid ${ colorWarn } !important\n      }\n\n      .${ ppfx }no-select {\n        user-select: none;\n        -webkit-user-select:none;\n        -moz-user-select: none;\n      }\n\n      .${ ppfx }freezed {\n        opacity: 0.5;\n        pointer-events: none;\n      }\n\n      .${ ppfx }no-pointer {\n        pointer-events: none;\n      }\n\n      .${ ppfx }plh-image {\n        background: #f5f5f5;\n        border: none;\n        height: 100px;\n        width: 100px;\n        display: block;\n        outline: 3px solid #ffca6f;\n        cursor: pointer;\n        outline-offset: -2px\n      }\n\n      .${ ppfx }grabbing {\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n      }\n\n      .${ ppfx }is__grabbing {\n        overflow-x: hidden;\n      }\n\n      .${ ppfx }is__grabbing,\n      .${ ppfx }is__grabbing * {\n        cursor: grabbing !important;\n      }\n\n      ${ conf.canvasCss || '' }\n      ${ conf.protectedCss || '' }\n    </style>`);\n            this.root = new ComponentView({\n                model: root,\n                config: {\n                    ...root.config,\n                    frameView: this\n                }\n            }).render();\n            dom.append(body, this.root.el);\n            dom.append(body, new CssRulesView({\n                collection: styles,\n                config: {\n                    ...em.get('CssComposer').getConfig(),\n                    frameView: this\n                }\n            }).render().el);\n            dom.append(body, this.getJsContainer());\n            mixins.on(body, 'click', ev => ev && ev.target.tagName == 'A' && ev.preventDefault());\n            mixins.on(body, 'submit', ev => ev && ev.preventDefault());\n            [\n                {\n                    event: 'keydown keyup keypress',\n                    class: 'KeyboardEvent'\n                },\n                {\n                    event: 'wheel',\n                    class: 'WheelEvent'\n                }\n            ].forEach(obj => obj.event.split(' ').forEach(event => {\n                doc.addEventListener(event, ev => this.el.dispatchEvent(dom.createCustomEvent(ev, obj.class)));\n            }));\n            this._toggleEffects(1);\n            model.trigger('loaded');\n        },\n        _toggleEffects(enable) {\n            const method = enable ? mixins.on : mixins.off;\n            const win = this.getWindow();\n            method(win, `${ dom.motionsEv } resize`, this._emitUpdate);\n        },\n        _emitUpdate() {\n            this.model._emitUpdated();\n        }\n    });\n});"]}