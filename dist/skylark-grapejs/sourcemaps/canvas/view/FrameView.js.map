{"version":3,"sources":["canvas/view/FrameView.js"],"names":["define","langx","Backbone","_","CssRulesView","ComponentView","dom","mixins","View","extend","tagName","attributes","allowfullscreen","data-frame-el","[object Object]","o","bindAll","this","model","el","config","mixin","frameView","ppfx","pStylePrefix","em","listenTo","updateHead","view","setViewEl","headEl","getHead","empty","appendVNodes","getEl","contentWindow","contentDocument","getDoc","querySelector","getBody","jsContainer","createEl","class","frameWrapView","elTools","get","getGlobalToolsEl","_getTool","rect","getBoundingClientRect","scrollTop","scrollLeft","height","offsetHeight","width","offsetWidth","top","offsetTop","left","offsetLeft","scrollBottom","scrollRight","name","toolsEl","getToolsEl","root","_toggleEffects","prototype","remove","apply","arguments","lastMaxHeight","getWrapper","setTimeout","_toggleAutoscrollFx","requestAnimationFrame","autoscroll","dragging","canvas","win","getWindow","actualTop","clientY","lastClientY","limitTop","getConfig","autoscrollLimit","limitBottom","getRect","nextTop","style","opacity","showGlobalTools","scrollTo","ev","preventDefault","getPointerEvent","getZoomDecimal","debounce","enable","method","updateClientY","stopAutoscroll","$el","attr","scripts","length","renderScripts","renderContent","onload","renderBody","bind","appendScript","src","shift","scriptEl","type","isString","onerror","head","appendChild","styles","doc","body","conf","extStyles","forEach","href","push","tag","rel","append","baseCss","canvasCss","protectedCss","render","collection","getJsContainer","on","target","event","obj","split","addEventListener","dispatchEvent","createCustomEvent","trigger","off","motionsEv","_emitUpdate","_emitUpdated"],"mappings":"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","file":"../../../canvas/view/FrameView.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../css_composer/view/CssRulesView',\n    '../../dom_components/view/ComponentView',\n    '../../utils/dom',\n    '../../utils/mixins'\n], function (langx,Backbone, _, CssRulesView, ComponentView, dom, mixins) {\n    'use strict';\n    return Backbone.View.extend({\n        tagName: 'iframe',\n        attributes: {\n            allowfullscreen: 'allowfullscreen',\n            'data-frame-el': true\n        },\n        initialize(o) {\n            _.bindAll(this, 'updateClientY', 'stopAutoscroll', 'autoscroll', '_emitUpdate');\n            const {model, el} = this;\n            this.config = langx.mixin({},\n                ...o.config ,{\n                frameView: this\n            });\n            this.ppfx = this.config.pStylePrefix || '';\n            this.em = this.config.em;\n            this.listenTo(model, 'change:head', this.updateHead);\n            model.view = this;\n            mixins.setViewEl(el, this);\n        },\n        updateHead() {\n            const headEl = this.getHead();\n            dom.empty(headEl);\n            dom.appendVNodes(headEl, this.model.getHead());\n        },\n        getEl() {\n            return this.el;\n        },\n        getWindow() {\n            return this.getEl().contentWindow;\n        },\n        getDoc() {\n            return this.getEl().contentDocument;\n        },\n        getHead() {\n            return this.getDoc().querySelector('head');\n        },\n        getBody() {\n            return this.getDoc().querySelector('body');\n        },\n        getWrapper() {\n            return this.getBody().querySelector('[data-gjs-type=wrapper]');\n        },\n        getJsContainer() {\n            if (!this.jsContainer) {\n                this.jsContainer = dom.createEl('div', { class: `${ this.ppfx }js-cont` });\n            }\n            return this.jsContainer;\n        },\n        getToolsEl() {\n            const {frameWrapView} = this.config;\n            return frameWrapView && frameWrapView.elTools;\n        },\n        getGlobalToolsEl() {\n            return this.em.get('Canvas').getGlobalToolsEl();\n        },\n        getHighlighter() {\n            return this._getTool('[data-hl]');\n        },\n        getBadgeEl() {\n            return this._getTool('[data-badge]');\n        },\n        getOffsetViewerEl() {\n            return this._getTool('[data-offset]');\n        },\n        getRect() {\n            if (!this.rect) {\n                this.rect = this.el.getBoundingClientRect();\n            }\n            return this.rect;\n        },\n        getOffsetRect() {\n            const {el} = this;\n            const {scrollTop, scrollLeft} = this.getBody();\n            const height = el.offsetHeight;\n            const width = el.offsetWidth;\n            return {\n                top: el.offsetTop,\n                left: el.offsetLeft,\n                height,\n                width,\n                scrollTop,\n                scrollLeft,\n                scrollBottom: scrollTop + height,\n                scrollRight: scrollLeft + width\n            };\n        },\n        _getTool(name) {\n            const toolsEl = this.getToolsEl();\n            if (!this[name]) {\n                this[name] = toolsEl.querySelector(name);\n            }\n            return this[name];\n        },\n        remove() {\n            const {root, model} = this;\n            this._toggleEffects();\n            Backbone.View.prototype.remove.apply(this, arguments);\n            root.remove();\n            model.remove();\n        },\n        startAutoscroll() {\n            this.lastMaxHeight = this.getWrapper().offsetHeight - this.el.offsetHeight;\n            setTimeout(() => {\n                this._toggleAutoscrollFx(1);\n                requestAnimationFrame(this.autoscroll);\n            }, 0);\n        },\n        autoscroll() {\n            if (this.dragging) {\n                const canvas = this.em.get('Canvas');\n                const win = this.getWindow();\n                const body = this.getBody();\n                const actualTop = body.scrollTop;\n                const clientY = this.lastClientY || 0;\n                const limitTop = canvas.getConfig().autoscrollLimit;\n                const limitBottom = this.getRect().height - limitTop;\n                let nextTop = actualTop;\n                if (clientY < limitTop) {\n                    nextTop -= limitTop - clientY;\n                }\n                if (clientY > limitBottom) {\n                    nextTop += clientY - limitBottom;\n                }\n                if (nextTop !== actualTop && nextTop > 0 && nextTop < this.lastMaxHeight) {\n                    const toolsEl = this.getGlobalToolsEl();\n                    toolsEl.style.opacity = 0;\n                    this.showGlobalTools();\n                    win.scrollTo(0, nextTop);\n                }\n                requestAnimationFrame(this.autoscroll);\n            }\n        },\n        updateClientY(ev) {\n            ev.preventDefault();\n            this.lastClientY = mixins.getPointerEvent(ev).clientY * this.em.getZoomDecimal();\n        },\n        showGlobalTools: _.debounce(function () {\n            this.getGlobalToolsEl().style.opacity = '';\n        }, 50),\n        stopAutoscroll() {\n            this.dragging && this._toggleAutoscrollFx();\n        },\n        _toggleAutoscrollFx(enable) {\n            this.dragging = enable;\n            const win = this.getWindow();\n            const method = enable ? 'on' : 'off';\n            mixins[method](win, 'mousemove dragover', this.updateClientY);\n            mixins[method](win, 'mouseup', this.stopAutoscroll);\n        },\n        render() {\n            const {el, $el, ppfx, config} = this;\n            $el.attr({ class: ppfx + 'frame' });\n            if (config.scripts.length) {\n                this.renderScripts();\n            } else if (config.renderContent) {\n                el.onload = this.renderBody.bind(this);\n            }\n            return this;\n        },\n        renderScripts() {\n            const {el, config} = this;\n            const appendScript = scripts => {\n                if (scripts.length > 0) {\n                    const src = scripts.shift();\n                    const scriptEl = dom.createEl('script', langx.mixin({\n                                            type: 'text/javascript'\n                                        },_.isString(src) ? { src } : src\n                    ));\n                    scriptEl.onerror = scriptEl.onload = appendScript.bind(null, scripts);\n                    el.contentDocument.head.appendChild(scriptEl);\n                } else {\n                    this.renderBody();\n                }\n            };\n            el.onload = () => appendScript([...config.scripts]);\n        },\n        renderBody() {\n            const {config, model, ppfx} = this;\n            const root = model.get('root');\n            const styles = model.get('styles');\n            const {em} = config;\n            const doc = this.getDoc();\n            const head = this.getHead();\n            const body = this.getBody();\n            const win = this.getWindow();\n            const conf = em.get('Config');\n            const extStyles = [];\n            config.styles.forEach(href => extStyles.push(_.isString(href) ? {\n                tag: 'link',\n                attributes: {\n                    href,\n                    rel: 'stylesheet'\n                }\n            } : {\n                tag: 'link',\n                attributes: {\n                    rel: 'stylesheet',\n                    ...href\n                }\n            }));\n            extStyles.length && dom.appendVNodes(head, extStyles);\n            const colorWarn = '#ffca6f';\n            dom.append(body, `<style>\n      ${ conf.baseCss || '' }\n\n      .${ ppfx }dashed *[data-highlightable] {\n        outline: 1px dashed rgba(170,170,170,0.7);\n        outline-offset: -2px;\n      }\n\n      .${ ppfx }selected {\n        outline: 3px solid #3b97e3 !important;\n        outline-offset: -3px;\n      }\n\n      .${ ppfx }selected-parent {\n        outline: 2px solid ${ colorWarn } !important\n      }\n\n      .${ ppfx }no-select {\n        user-select: none;\n        -webkit-user-select:none;\n        -moz-user-select: none;\n      }\n\n      .${ ppfx }freezed {\n        opacity: 0.5;\n        pointer-events: none;\n      }\n\n      .${ ppfx }no-pointer {\n        pointer-events: none;\n      }\n\n      .${ ppfx }plh-image {\n        background: #f5f5f5;\n        border: none;\n        height: 100px;\n        width: 100px;\n        display: block;\n        outline: 3px solid #ffca6f;\n        cursor: pointer;\n        outline-offset: -2px\n      }\n\n      .${ ppfx }grabbing {\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n      }\n\n      .${ ppfx }is__grabbing {\n        overflow-x: hidden;\n      }\n\n      .${ ppfx }is__grabbing,\n      .${ ppfx }is__grabbing * {\n        cursor: grabbing !important;\n      }\n\n      ${ conf.canvasCss || '' }\n      ${ conf.protectedCss || '' }\n    </style>`);\n            this.root = new ComponentView({\n                model: root,\n                config: {\n                    ...root.config,\n                    frameView: this\n                }\n            }).render();\n            dom.append(body, this.root.el);\n            dom.append(body, new CssRulesView({\n                collection: styles,\n                config: {\n                    ...em.get('CssComposer').getConfig(),\n                    frameView: this\n                }\n            }).render().el);\n            dom.append(body, this.getJsContainer());\n            mixins.on(body, 'click', ev => ev && ev.target.tagName == 'A' && ev.preventDefault());\n            mixins.on(body, 'submit', ev => ev && ev.preventDefault());\n            [\n                {\n                    event: 'keydown keyup keypress',\n                    class: 'KeyboardEvent'\n                },\n                {\n                    event: 'wheel',\n                    class: 'WheelEvent'\n                }\n            ].forEach(obj => obj.event.split(' ').forEach(event => {\n                doc.addEventListener(event, ev => this.el.dispatchEvent(dom.createCustomEvent(ev, obj.class)));\n            }));\n            this._toggleEffects(1);\n            model.trigger('loaded');\n        },\n        _toggleEffects(enable) {\n            const method = enable ? mixins.on : mixins.off;\n            const win = this.getWindow();\n            method(win, `${ dom.motionsEv } resize`, this._emitUpdate);\n        },\n        _emitUpdate() {\n            this.model._emitUpdated();\n        }\n    });\n});"]}