{"version":3,"sources":["canvas/index.js"],"names":["define","langx","mixins","_","Droppable","defaults","Canvas","canvasView","requestAnimationFrame","window","canvas","CanvasView","c","getCanvasView","name","[object Object]","config","mixin","module","this","em","ppfx","pStylePrefix","stylePrefix","model","cm","get","setWrapper","startAutoscroll","bind","stopAutoscroll","getConfig","wrp","set","getElement","el","getFrame","frame","getFramesEl","framesArea","getFrameEl","contentWindow","contentDocument","doc","getDocument","body","getBody","querySelector","_getCompFrame","compView","_getFrame","globalEl","method","result","frameView","getGlobalToolsEl","toolsGlobEl","_getLocalEl","toolsEl","hlEl","badgeEl","getPlacerEl","placerEl","getGhostEl","ghostEl","getToolbarEl","toolbarEl","getResizerEl","resizerEl","offsetEl","getFixedOffsetViewerEl","fixedOffsetEl","render","frameOff","offset","canvasOff","undefined","top","left","f","customBadgeLabel","getElementPos","opts","getElementOffsets","getPosition","getCanvasOffset","topScroll","leftScroll","target","element","options","canvasPos","pos","elPos","toRight","targetHeight","offsetHeight","targetWidth","offsetWidth","eventToTrigger","event","elTop","elLeft","width","leftPos","topPos","height","elementTop","elementLeft","elementWidth","elementHeight","canvasTop","canvasLeft","canvasWidth","canvasHeight","trigger","rectOff","zoom","getZoomDecimal","side","ownerDocument","offsetTop","offsetLeft","defaultView","frameElement","getFrameElFromDoc","scrollTop","scrollLeft","scroll","elToMove","cvOff","canvasRectOffset","toolbarH","toolbarW","elRight","cv","frCvOff","frameOffset","getFrameOffset","fullHeight","elIsShort","canvasOffsetTop","canvasOffsetLeft","e","addTop","addLeft","subWinOffset","win","parentWindow","yOffset","pageYOffset","xOffset","pageXOffset","frameRect","getBoundingClientRect","y","clientY","x","clientX","ev","hasFocus","toIgnore","notTextable","focused","activeElement","some","item","matches","elem","view","getViewEl","scrollIntoView","fr","getCurrentFrame","hasDnd","droppable","value","parseFloat","getZoom","on","style","pointerEvents","getFrameWrapperEl","getWrapper","getFrames","map","props","add"],"mappings":"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","file":"../../canvas/index.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    '../utils/mixins',\n    'skylark-underscore',\n    '../utils/Droppable',\n    './config/config',\n    './model/Canvas',\n    './view/CanvasView'\n], function (langx,mixins, _, Droppable, defaults, Canvas, canvasView) {\n    'use strict';\n    const {requestAnimationFrame} = window;\n    return () => {\n        let c = {};\n        let canvas;\n        let frameRect;\n        let CanvasView;\n        return {\n            getCanvasView() {\n                return CanvasView;\n            },\n            name: 'Canvas',\n            init(config = {}) {\n                c = langx.mixin({},defaults,config, { module: this});\n                this.em = c.em;\n                const ppfx = c.pStylePrefix;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                canvas = new Canvas(config);\n                CanvasView = new canvasView({\n                    model: canvas,\n                    config: c\n                });\n                var cm = c.em.get('DomComponents');\n                if (cm)\n                    this.setWrapper(cm);\n                this.model = canvas;\n                this.startAutoscroll = this.startAutoscroll.bind(this);\n                this.stopAutoscroll = this.stopAutoscroll.bind(this);\n                return this;\n            },\n            getConfig() {\n                return c;\n            },\n            setWrapper(wrp) {\n                canvas.set('wrapper', wrp);\n            },\n            getElement() {\n                return CanvasView.el;\n            },\n            getFrame() {\n                return canvas.get('frame');\n            },\n            getFrameEl() {\n                const {frame} = CanvasView;\n                return frame && frame.el;\n            },\n            getFramesEl() {\n                return CanvasView.framesArea;\n            },\n            getWindow() {\n                return this.getFrameEl().contentWindow;\n            },\n            getDocument() {\n                const frame = this.getFrameEl();\n                return frame && frame.contentDocument;\n            },\n            getBody() {\n                const doc = this.getDocument();\n                return doc && doc.body;\n            },\n            getWrapperEl() {\n                const body = this.getBody();\n                return body && body.querySelector('#wrapper');\n            },\n            _getCompFrame(compView) {\n                return compView && compView._getFrame();\n            },\n            _getLocalEl(globalEl, compView, method) {\n                let result = globalEl;\n                const frameView = this._getCompFrame(compView);\n                result = frameView ? frameView[method]() : result;\n                return result;\n            },\n            getGlobalToolsEl() {\n                return CanvasView.toolsGlobEl;\n            },\n            getToolsEl(compView) {\n                return this._getLocalEl(CanvasView.toolsEl, compView, 'getToolsEl');\n            },\n            getHighlighter(compView) {\n                return this._getLocalEl(CanvasView.hlEl, compView, 'getHighlighter');\n            },\n            getBadgeEl(compView) {\n                return this._getLocalEl(CanvasView.badgeEl, compView, 'getBadgeEl');\n            },\n            getPlacerEl() {\n                return CanvasView.placerEl;\n            },\n            getGhostEl() {\n                return CanvasView.ghostEl;\n            },\n            getToolbarEl() {\n                return CanvasView.toolbarEl;\n            },\n            getResizerEl() {\n                return CanvasView.resizerEl;\n            },\n            getOffsetViewerEl(compView) {\n                return this._getLocalEl(CanvasView.offsetEl, compView, 'getOffsetViewerEl');\n            },\n            getFixedOffsetViewerEl() {\n                return CanvasView.fixedOffsetEl;\n            },\n            render() {\n                return CanvasView.render().el;\n            },\n            getOffset() {\n                var frameOff = this.offset(this.getFrameEl());\n                var canvasOff = this.offset(this.undefined());\n                return {\n                    top: frameOff.top - canvasOff.top,\n                    left: frameOff.left - canvasOff.left\n                };\n            },\n            offset(el) {\n                return CanvasView.offset(el);\n            },\n            setCustomBadgeLabel(f) {\n                c.customBadgeLabel = f;\n            },\n            getElementPos(el, opts) {\n                return CanvasView.getElementPos(el, opts);\n            },\n            getElementOffsets(el) {\n                return CanvasView.getElementOffsets(el);\n            },\n            getRect() {\n                const {top, left} = CanvasView.getPosition();\n                return {\n                    ...CanvasView.getCanvasOffset(),\n                    topScroll: top,\n                    leftScroll: left\n                };\n            },\n            getTargetToElementDim(target, element, options = {}) {\n                var opts = options || {};\n                var canvasPos = CanvasView.getPosition();\n                if (!canvasPos)\n                    return;\n                var pos = opts.elPos || CanvasView.getElementPos(element);\n                var toRight = options.toRight || 0;\n                var targetHeight = opts.targetHeight || target.offsetHeight;\n                var targetWidth = opts.targetWidth || target.offsetWidth;\n                var eventToTrigger = opts.event || null;\n                var elTop = pos.top - targetHeight;\n                var elLeft = pos.left;\n                elLeft += toRight ? pos.width : 0;\n                elLeft = toRight ? elLeft - targetWidth : elLeft;\n                var leftPos = elLeft < canvasPos.left ? canvasPos.left : elLeft;\n                var topPos = elTop < canvasPos.top ? canvasPos.top : elTop;\n                topPos = topPos > pos.top + pos.height ? pos.top + pos.height : topPos;\n                var result = {\n                    top: topPos,\n                    left: leftPos,\n                    elementTop: pos.top,\n                    elementLeft: pos.left,\n                    elementWidth: pos.width,\n                    elementHeight: pos.height,\n                    targetWidth: target.offsetWidth,\n                    targetHeight: target.offsetHeight,\n                    canvasTop: canvasPos.top,\n                    canvasLeft: canvasPos.left,\n                    canvasWidth: canvasPos.width,\n                    canvasHeight: canvasPos.height\n                };\n                if (eventToTrigger && c.em) {\n                    c.em.trigger(eventToTrigger, result);\n                }\n                return result;\n            },\n            canvasRectOffset(el, pos, opts = {}) {\n                const getFrameElFromDoc = doc => {\n                    const {defaultView} = doc;\n                    return defaultView && defaultView.frameElement;\n                };\n                const rectOff = (el, top = 1, pos) => {\n                    const zoom = this.em.getZoomDecimal();\n                    const side = top ? 'top' : 'left';\n                    const doc = el.ownerDocument;\n                    const {offsetTop = 0, offsetLeft = 0} = opts.offset ? getFrameElFromDoc(doc) : {};\n                    const {scrollTop = 0, scrollLeft = 0} = doc.body || {};\n                    const scroll = top ? scrollTop : scrollLeft;\n                    const offset = top ? offsetTop : offsetLeft;\n                    return pos[side] - (scroll - offset) * zoom;\n                };\n                return {\n                    top: rectOff(el, 1, pos),\n                    left: rectOff(el, 0, pos)\n                };\n            },\n            getTargetToElementFixed(el, elToMove, opts = {}) {\n                const pos = opts.pos || this.getElementPos(el);\n                const cvOff = opts.canvasOff || this.canvasRectOffset(el, pos);\n                const toolbarH = elToMove.offsetHeight || 0;\n                const toolbarW = elToMove.offsetWidth || 0;\n                const elRight = pos.left + pos.width;\n                const cv = this.getCanvasView();\n                const frCvOff = cv.getPosition();\n                const frameOffset = cv.getFrameOffset(el);\n                const {event} = opts;\n                let top = -toolbarH;\n                let left = pos.width - toolbarW;\n                left = pos.left < -left ? -pos.left : left;\n                left = elRight > frCvOff.width ? left - (elRight - frCvOff.width) : left;\n                const fullHeight = pos.height + toolbarH;\n                const elIsShort = fullHeight < frameOffset.height;\n                if (cvOff.top < toolbarH) {\n                    if (elIsShort) {\n                        top = top + fullHeight;\n                    } else {\n                        top = -cvOff.top < pos.height ? -cvOff.top : pos.height;\n                    }\n                }\n                const result = {\n                    top,\n                    left,\n                    canvasOffsetTop: cvOff.top,\n                    canvasOffsetLeft: cvOff.left\n                };\n                event && this.em.trigger(event, result);\n                return result;\n            },\n            getMouseRelativePos(e, options) {\n                var opts = options || {};\n                var addTop = 0;\n                var addLeft = 0;\n                var subWinOffset = opts.subWinOffset;\n                var doc = e.target.ownerDocument;\n                var win = doc.defaultView || doc.parentWindow;\n                var frame = win.frameElement;\n                var yOffset = subWinOffset ? win.pageYOffset : 0;\n                var xOffset = subWinOffset ? win.pageXOffset : 0;\n                if (frame) {\n                    var frameRect = frame.getBoundingClientRect();\n                    addTop = frameRect.top || 0;\n                    addLeft = frameRect.left || 0;\n                }\n                return {\n                    y: e.clientY + addTop - yOffset,\n                    x: e.clientX + addLeft - xOffset\n                };\n            },\n            getMouseRelativeCanvas(ev, opts) {\n                const zoom = this.getZoomDecimal();\n                const {top, left} = CanvasView.getPosition(opts);\n                return {\n                    y: ev.clientY * zoom + top,\n                    x: ev.clientX * zoom + left\n                };\n            },\n            hasFocus() {\n                return this.getDocument().hasFocus();\n            },\n            isInputFocused() {\n                const doc = this.getDocument();\n                const toIgnore = [\n                    'body',\n                    ...this.getConfig().notTextable\n                ];\n                const focused = doc && doc.activeElement;\n                return focused && !toIgnore.some(item => focused.matches(item));\n            },\n            scrollTo(el, opts = {}) {\n                const elem = mixins.getElement(el);\n                const view = elem && mixins.getViewEl(elem);\n                view && view.scrollIntoView(opts);\n            },\n            startAutoscroll(frame) {\n                const fr = frame && frame.view || this.em.getCurrentFrame();\n                fr && fr.startAutoscroll();\n            },\n            stopAutoscroll(frame) {\n                const fr = frame && frame.view || this.em.getCurrentFrame();\n                fr && fr.stopAutoscroll();\n            },\n            postRender() {\n                if (mixins.hasDnd(c.em))\n                    this.droppable = new Droppable(c.em);\n            },\n            setZoom(value) {\n                canvas.set('zoom', parseFloat(value));\n                return this;\n            },\n            getZoom() {\n                return parseFloat(canvas.get('zoom'));\n            },\n            getZoomDecimal() {\n                return this.getZoom() / 100;\n            },\n            getZoomMultiplier() {\n                const zoom = this.getZoomDecimal();\n                return zoom ? 1 / zoom : 1;\n            },\n            toggleFramesEvents(on) {\n                const {style} = this.getFramesEl();\n                style.pointerEvents = on ? '' : 'none';\n            },\n            getFrameWrapperEl() {\n                return CanvasView.frame.getWrapper();\n            },\n            getFrames() {\n                return canvas.get('frames').map(item => item);\n            },\n            addFrame(props = {}, opts = {}) {\n                return canvas.get('frames').add({ ...props }, {\n                    ...opts,\n                    em: this.em\n                });\n            }\n        };\n    };\n});"]}