{"version":3,"sources":["style_manager/view/PropertyStackView.js"],"names":["define","a","PropertyCompositeView","LayersView","CssGenerator","cssGen","extend","[object Object]","pfx","this","ppfx","model","set","events","listenTo","indexChanged","inputValueChanged","delegateEvents","args","get","status","_getTargetData","setStatus","checkVisibility","prototype","targetUpdated","apply","refreshLayers","e","getLayers","active","layers","prepend","properties","deepClone","each","property","layer","add","at","indexOf","elementUpdated","prop","trigger","getLayerValues","getFullValue","opts","em","skipAdd","selected","getSelected","targetAlt","getModelToStyle","useClasses","target","isValid","rule","getStyle","map","getAll","filter","selectorsToString","getSelectorsString","reduce","acc","getAtRule","sortedRules","sortMediaObject","item","value","currIndex","rulesToCheck","splice","result","i","length","layersObj","detached","getTarget","valueComput","getComputedValue","resultValue","style","targetAltDevice","valueTargetAlt","valueTrgAltDvc","hasDetachedStyle","name","isUndefined","keys","parentOpts","_getParentTarget","_getClassRule","getLayersFromStyle","getTargetValue","ignoreDefault","getDefaultValue","getLayersFromValue","toAdd","getLayersFromTarget","reset","stackIndex","silent","call","attributes","getValueFromStyle","self","fieldEl","el","querySelector","PropertiesView","require","default","propsConfig","propTarget","view","opt","subModel","subProp","defVal","values","getPropertyValues","updateTargetStyle","collection","stackModel","preview","config","render","onChange","appendChild"],"mappings":"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","file":"../../../style_manager/view/PropertyStackView.js","sourcesContent":["define([\n    'skylark-underscore',\n    './PropertyCompositeView',\n    './LayersView',\n    '../../code_manager/model/CssGenerator'\n], function (a, PropertyCompositeView, LayersView, CssGenerator) {\n    'use strict';\n    const cssGen = new CssGenerator();\n    return PropertyCompositeView.extend({\n        templateInput() {\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            return `\n      <div class=\"${ pfx }field ${ pfx }stack\">\n        <button type=\"button\" id=\"${ pfx }add\" data-add-layer>+</button>\n        <div data-layers-wrapper></div>\n      </div>\n    `;\n        },\n        init() {\n            const model = this.model;\n            const pfx = this.pfx;\n            model.set('stackIndex', null);\n            this.events[`click [data-add-layer]`] = 'addLayer';\n            this.listenTo(model, 'change:stackIndex', this.indexChanged);\n            this.listenTo(model, 'updateValue', this.inputValueChanged);\n            this.delegateEvents();\n        },\n        targetUpdated(...args) {\n            if (!this.model.get('detached')) {\n                PropertyCompositeView.prototype.targetUpdated.apply(this, args);\n            } else {\n                const {status} = this._getTargetData();\n                this.setStatus(status);\n                this.checkVisibility();\n            }\n            this.refreshLayers();\n        },\n        getLayers() {\n            return this.model.get('layers');\n        },\n        indexChanged(e) {\n            const model = this.model;\n            this.getLayers().active(model.get('stackIndex'));\n        },\n        addLayer() {\n            const model = this.model;\n            const layers = this.getLayers();\n            const prepend = model.get('prepend');\n            const properties = model.get('properties').deepClone();\n            properties.each(property => property.set('value', ''));\n            const layer = layers.add({ properties }, {\n                active: 1,\n                ...prepend && { at: 0 }\n            });\n            this.inputValueChanged();\n            model.set('stackIndex', layers.indexOf(layer));\n        },\n        inputValueChanged() {\n            const model = this.model;\n            this.elementUpdated();\n            if (!model.get('detached')) {\n                model.set('value', this.getLayerValues());\n            } else {\n                model.get('properties').each(prop => prop.trigger('change:value'));\n            }\n        },\n        setValue() {\n        },\n        getLayerValues() {\n            return this.getLayers().getFullValue();\n        },\n        _getClassRule(opts = {}) {\n            const {em} = this;\n            const {\n                skipAdd = 1\n            } = opts;\n            const selected = em.getSelected();\n            const targetAlt = em.get('StyleManager').getModelToStyle(selected, {\n                skipAdd,\n                useClasses: 1\n            });\n            return targetAlt !== selected && targetAlt;\n        },\n        _getParentTarget(target, opts = {}) {\n            const {em, model} = this;\n            const property = model.get('property');\n            const isValid = opts.isValid || (rule => rule.getStyle()[property]);\n            const targetsDevice = em.get('CssComposer').getAll().filter(rule => rule.selectorsToString() === target.getSelectorsString());\n            const map = targetsDevice.reduce((acc, rule) => {\n                acc[rule.getAtRule()] = rule;\n                return acc;\n            }, {});\n            const mapSorted = cssGen.sortMediaObject(map);\n            const sortedRules = mapSorted.map(item => item.value);\n            const currIndex = sortedRules.indexOf(target);\n            const rulesToCheck = sortedRules.splice(0, currIndex);\n            let result;\n            for (let i = rulesToCheck.length - 1; i > -1; i--) {\n                const rule = rulesToCheck[i];\n                if (isValid(rule)) {\n                    result = rule;\n                    break;\n                }\n            }\n            return result;\n        },\n        refreshLayers() {\n            let layersObj = [];\n            const {model, em} = this;\n            const layers = this.getLayers();\n            const detached = model.get('detached');\n            const property = model.get('property');\n            const target = this.getTarget();\n            const valueComput = this.getComputedValue();\n            const selected = em.getSelected();\n            let resultValue, style, targetAlt, targetAltDevice, valueTargetAlt, valueTrgAltDvc;\n            if (detached) {\n                style = target ? target.getStyle() : {};\n                const hasDetachedStyle = rule => {\n                    const name = model.get('properties').at(0).get('property');\n                    return rule && !a.isUndefined(rule.getStyle()[name]);\n                };\n                if (!a.keys(style).length && valueComput && selected) {\n                    const parentOpts = { isValid: rule => hasDetachedStyle(rule) };\n                    targetAltDevice = this._getParentTarget(target, parentOpts);\n                    if (targetAltDevice) {\n                        style = targetAltDevice.getStyle();\n                    } else {\n                        targetAlt = this._getClassRule();\n                        valueTargetAlt = hasDetachedStyle(targetAlt) && targetAlt.getStyle();\n                        targetAltDevice = !valueTargetAlt && this._getParentTarget(this._getClassRule({ skipAdd: 0 }), parentOpts);\n                        valueTrgAltDvc = hasDetachedStyle(targetAltDevice) && targetAltDevice.getStyle();\n                        style = valueTargetAlt || valueTrgAltDvc || {};\n                    }\n                }\n                resultValue = style;\n                layersObj = layers.getLayersFromStyle(style);\n            } else {\n                const valueTrg = this.getTargetValue({ ignoreDefault: 1 });\n                let value = valueTrg;\n                if (!value && valueComput) {\n                    targetAltDevice = this._getParentTarget(target);\n                    if (targetAltDevice) {\n                        value = targetAltDevice.getStyle()[property];\n                    } else {\n                        targetAlt = this._getClassRule();\n                        valueTargetAlt = targetAlt && targetAlt.getStyle()[property];\n                        targetAltDevice = !valueTargetAlt && this._getParentTarget(this._getClassRule({ skipAdd: 0 }));\n                        valueTrgAltDvc = targetAltDevice && targetAltDevice.getStyle()[property];\n                        value = valueTargetAlt || valueTrgAltDvc || valueComput;\n                    }\n                }\n                value = value == model.getDefaultValue() ? '' : value;\n                resultValue = value;\n                layersObj = layers.getLayersFromValue(value);\n            }\n            const toAdd = model.getLayersFromTarget(target, {\n                resultValue,\n                layersObj\n            }) || layersObj;\n            layers.reset();\n            layers.add(toAdd);\n            model.set({ stackIndex: null }, { silent: true });\n        },\n        getTargetValue(opts = {}) {\n            let result = PropertyCompositeView.prototype.getTargetValue.call(this, opts);\n            const {detached} = this.model.attributes;\n            if (a.isUndefined(result) && !detached) {\n                result = this.model.getValueFromStyle(this.getTarget().getStyle());\n            }\n            return result;\n        },\n        onRender() {\n            const self = this;\n            const model = this.model;\n            const fieldEl = this.el.querySelector('[data-layers-wrapper]');\n            const PropertiesView = require('./PropertiesView').default;\n            const propsConfig = {\n                target: this.target,\n                propTarget: this.propTarget,\n                onChange(el, view, opt) {\n                    const subModel = view.model;\n                    if (model.get('detached')) {\n                        const subProp = subModel.get('property');\n                        const defVal = subModel.getDefaultValue();\n                        const values = self.getLayers().getPropertyValues(subProp, defVal);\n                        view.updateTargetStyle(values, null, opt);\n                    } else {\n                        if (model.get('status') == 'updated') {\n                            const value = model.getFullValue();\n                            model.set('value', value, opt);\n                            !value && view.updateTargetStyle(value, null, opt);\n                        }\n                    }\n                }\n            };\n            const layers = new LayersView({\n                collection: this.getLayers(),\n                stackModel: model,\n                preview: model.get('preview'),\n                config: this.config,\n                propsConfig\n            }).render().el;\n            new PropertiesView({\n                target: this.target,\n                collection: this.model.get('properties'),\n                stackModel: model,\n                config: this.config,\n                onChange: propsConfig.onChange,\n                propTarget: propsConfig.propTarget\n            }).render();\n            fieldEl.appendChild(layers);\n        }\n    });\n});"]}