{"version":3,"sources":["style_manager/view/PropertyRadioView.js"],"names":["define","PropertyView","extend","[object Object]","this","pfx","ppfx","itemCls","model","prop","get","options","cid","clsInput","input","length","inputStr","forEach","el","cl","className","id","value","labelTxt","name","titleAttr","title","inputHld","querySelector","innerHTML","firstChild","inputChk","getCheckedEl","getInputEl","val","getDefaultValue","inputIn","checked"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,SAAUC,GACjC,aACA,OAAOA,EAAaC,QAChBC,gBACgBC,KAAKC,IAAjB,MACMC,EAAOF,KAAKE,KAClB,6BACSA,UAAeA,sCAI5BH,WACI,MAAME,EAAMD,KAAKC,IACXC,EAAOF,KAAKE,KACZC,KAAcD,oBACdE,EAAQJ,KAAKI,MACbC,EAAOD,EAAME,IAAI,YACjBC,EAAUH,EAAME,IAAI,SAAWF,EAAME,IAAI,gBACzCE,IAACA,GAAOJ,EACRK,KAAeR,UAAcA,UAAcI,IACjD,IAAKL,KAAKU,OACFH,GAAWA,EAAQI,OAAQ,CAC3B,IAAIC,EAAW,GACfL,EAAQM,QAAQC,IACZ,IAAIC,EAAKD,EAAGE,aAAgBF,EAAGE,aAAef,SAAaE,IAAa,GACpEc,KAASZ,KAAUS,EAAGI,SAAWV,IACjCW,EAAWL,EAAGM,MAAQN,EAAGI,MACzBG,EAAYP,EAAGQ,gBAAmBR,EAAGQ,SAAY,GACrDV,gCACGV,2DACiBO,UAAmBQ,YAAeZ,KAAUG,aAAiBM,EAAGI,yCAC7EH,GAAMZ,MAAckB,UAAoBJ,MAASF,EAAK,GAAKI,8CAItE,MAAMI,EAAWvB,KAAKc,GAAGU,kBAAmBtB,UAC5CqB,EAASE,yBAA4BvB,iBAAsBU,UAC3DZ,KAAKU,MAAQa,EAASG,aAIlC3B,gBACI,MAAM4B,EAAW3B,KAAK4B,eACtB,OAAOD,EAAWA,EAAST,MAAQ,IAEvCnB,eACI,MAAMW,EAAQV,KAAK6B,aACnB,OAAOnB,EAAQA,EAAMc,cAAc,iBAAmB,IAE1DzB,SAASmB,GACL,MAAMd,EAAQJ,KAAKI,MACnB,IAAI0B,EAAMZ,GAASd,EAAME,IAAI,UAAYF,EAAM2B,kBAC/C,MAAMrB,EAAQV,KAAK6B,aACbG,EAAUtB,EAAQA,EAAMc,yBAA0BM,OAAY,GACpE,GAAIE,EACAA,EAAQC,SAAU,MACf,CACH,MAAMN,EAAW3B,KAAK4B,eACtBD,IAAaA,EAASM,SAAU","file":"../../../style_manager/view/PropertyRadioView.js","sourcesContent":["define(['./PropertyView'], function (PropertyView) {\n    'use strict';\n    return PropertyView.extend({\n        templateInput() {\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            return `\n      <div class=\"${ ppfx }field ${ ppfx }field-radio\">\n      </div>\n    `;\n        },\n        onRender() {\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            const itemCls = `${ ppfx }radio-item-label`;\n            const model = this.model;\n            const prop = model.get('property');\n            const options = model.get('list') || model.get('options') || [];\n            const {cid} = model;\n            const clsInput = `${ pfx }radio ${ pfx }radio-${ prop }`;\n            if (!this.input) {\n                if (options && options.length) {\n                    let inputStr = '';\n                    options.forEach(el => {\n                        let cl = el.className ? `${ el.className } ${ pfx }icon ${ itemCls }` : '';\n                        let id = `${ prop }-${ el.value }-${ cid }`;\n                        let labelTxt = el.name || el.value;\n                        let titleAttr = el.title ? `title=\"${ el.title }\"` : '';\n                        inputStr += `\n            <div class=\"${ ppfx }radio-item\">\n              <input type=\"radio\" class=\"${ clsInput }\" id=\"${ id }\" name=\"${ prop }-${ cid }\" value=\"${ el.value }\"/>\n              <label class=\"${ cl || itemCls }\" ${ titleAttr } for=\"${ id }\">${ cl ? '' : labelTxt }</label>\n            </div>\n          `;\n                    });\n                    const inputHld = this.el.querySelector(`.${ ppfx }field`);\n                    inputHld.innerHTML = `<div class=\"${ ppfx }radio-items\">${ inputStr }</div>`;\n                    this.input = inputHld.firstChild;\n                }\n            }\n        },\n        getInputValue() {\n            const inputChk = this.getCheckedEl();\n            return inputChk ? inputChk.value : '';\n        },\n        getCheckedEl() {\n            const input = this.getInputEl();\n            return input ? input.querySelector('input:checked') : '';\n        },\n        setValue(value) {\n            const model = this.model;\n            let val = value || model.get('value') || model.getDefaultValue();\n            const input = this.getInputEl();\n            const inputIn = input ? input.querySelector(`[value=\"${ val }\"]`) : '';\n            if (inputIn) {\n                inputIn.checked = true;\n            } else {\n                const inputChk = this.getCheckedEl();\n                inputChk && (inputChk.checked = false);\n            }\n        }\n    });\n});"]}