{"version":3,"sources":["style_manager/view/PropertyIntegerView.js"],"names":["define","Backbone","PropertyView","$","extend","templateInput","[object Object]","model","this","listenTo","modelValueChanged","elementUpdated","render","value","parsed","parseValue","unit","inputInst","setValue","silent","ppfx","input","el","querySelector","appendChild","$input","inputEl","unitEl","$unit","get","prototype","clearCached","apply","arguments"],"mappings":";;;;;;;AAAAA,QACI,mBACA,kBACD,SAAUC,EAAUC,GACnB,aACA,MAAMC,EAAIF,EAASE,EACnB,OAAOD,EAAaE,QAChBC,cAAa,IACF,GAEXC,OACI,MAAMC,EAAQC,KAAKD,MACnBC,KAAKC,SAASF,EAAO,cAAeC,KAAKE,mBACzCF,KAAKC,SAASF,EAAO,YAAaC,KAAKG,gBACvCH,KAAKC,SAASF,EAAO,eAAgBC,KAAKI,SAE9CN,SAASO,GACL,MAAMC,EAASN,KAAKD,MAAMQ,WAAWF,GACrCA,KAAYC,EAAOD,QAAUC,EAAOE,OACpCR,KAAKS,UAAUC,SAASL,GAASM,OAAQ,KAE7Cb,WACI,MAAMc,EAAOZ,KAAKY,KAClB,IAAKZ,KAAKa,MAAO,CACb,MAAMA,EAAQb,KAAKD,MAAMc,MACzBA,EAAMD,KAAOA,EACbC,EAAMT,SACSJ,KAAKc,GAAGC,kBAAmBH,WACnCI,YAAYH,EAAMC,IACzBd,KAAKiB,OAASJ,EAAMK,QACpBlB,KAAKQ,KAAOK,EAAMM,OAClBnB,KAAKoB,MAAQzB,EAAEK,KAAKQ,MACpBR,KAAKa,MAAQb,KAAKiB,OAAOI,IAAI,GAC7BrB,KAAKS,UAAYI,IAGzBf,cACIJ,EAAa4B,UAAUC,YAAYC,MAAMxB,KAAMyB,WAC/CzB,KAAKQ,KAAO,KACZR,KAAKoB,MAAQ","file":"../../../style_manager/view/PropertyIntegerView.js","sourcesContent":["define([\n    'skylark-backbone',\n    './PropertyView'\n], function (Backbone, PropertyView) {\n    'use strict';\n    const $ = Backbone.$;\n    return PropertyView.extend({\n        templateInput() {\n            return '';\n        },\n        init() {\n            const model = this.model;\n            this.listenTo(model, 'change:unit', this.modelValueChanged);\n            this.listenTo(model, 'el:change', this.elementUpdated);\n            this.listenTo(model, 'change:units', this.render);\n        },\n        setValue(value) {\n            const parsed = this.model.parseValue(value);\n            value = `${ parsed.value }${ parsed.unit }`;\n            this.inputInst.setValue(value, { silent: 1 });\n        },\n        onRender() {\n            const ppfx = this.ppfx;\n            if (!this.input) {\n                const input = this.model.input;\n                input.ppfx = ppfx;\n                input.render();\n                const fields = this.el.querySelector(`.${ ppfx }fields`);\n                fields.appendChild(input.el);\n                this.$input = input.inputEl;\n                this.unit = input.unitEl;\n                this.$unit = $(this.unit);\n                this.input = this.$input.get(0);\n                this.inputInst = input;\n            }\n        },\n        clearCached() {\n            PropertyView.prototype.clearCached.apply(this, arguments);\n            this.unit = null;\n            this.$unit = null;\n        }\n    });\n});"]}