{"version":3,"sources":["style_manager/view/PropertySliderView.js"],"names":["define","Property","extend","events","prototype","change [type=range]","input [type=range]","change","[object Object]","model","ppfx","this","get","slider","el","querySelector","step","getInputEl","value","getSliderEl","getInputValue","set","avoidStore","elementUpdated","parsed","parseValue","parseFloat","setValue","apply","arguments","onRender","inputInst","style","display","clearCached"],"mappings":";;;;;;;AAAAA,QAAQ,yBAA0B,SAAUC,GACxC,aACA,OAAOA,EAASC,QACZC,OAAM,SAEKF,EAASG,UAAUD,OACtBE,sBAAuB,oBACvBC,qBAAsB,wBACtBC,OAAQ,KAGhBC,cAAcC,GACV,MAAMC,EAAOC,KAAKD,KAClB,6BACSA,UAAeA,+DAElBD,EAAMG,IAAI,2BACVH,EAAMG,IAAI,4BACTH,EAAMG,IAAI,kCAIrBJ,cAII,OAHKG,KAAKE,SACNF,KAAKE,OAASF,KAAKG,GAAGC,cAAc,sBAEjCJ,KAAKE,QAEhBL,oBACI,MAAMC,EAAQE,KAAKF,MACbO,EAAOP,EAAMG,IAAI,QACvBD,KAAKM,aAAaC,MAAQP,KAAKQ,cAAcD,MAC7C,MAAMA,EAAQP,KAAKS,gBAAkBJ,EACrCP,EAAMY,IAAI,QAASH,GAASI,WAAY,IAAKD,IAAI,QAASH,EAAQF,GAClEL,KAAKY,kBAETf,wBACIG,KAAKM,aAAaC,MAAQP,KAAKQ,cAAcD,MAC7CP,KAAKF,MAAMY,IAAI,QAASV,KAAKS,iBAAmBE,WAAY,IAC5DX,KAAKY,kBAETf,SAASU,GACL,MAAMM,EAASb,KAAKF,MAAMgB,WAAWP,GACrCP,KAAKQ,cAAcD,MAAQQ,WAAWF,EAAON,OAC7CjB,EAASG,UAAUuB,SAASC,MAAMjB,KAAMkB,YAE5CrB,WACIP,EAASG,UAAU0B,SAASF,MAAMjB,KAAMkB,WACnClB,KAAKF,MAAMG,IAAI,eAChBD,KAAKoB,UAAUjB,GAAGkB,MAAMC,QAAU,SAG1CzB,cACIP,EAASG,UAAU8B,YAAYN,MAAMjB,KAAMkB,WAC3ClB,KAAKE,OAAS","file":"../../../style_manager/view/PropertySliderView.js","sourcesContent":["define(['./PropertyIntegerView'], function (Property) {\n    'use strict';\n    return Property.extend({\n        events() {\n            return {\n                ...Property.prototype.events,\n                'change [type=range]': 'inputValueChanged',\n                'input [type=range]': 'inputValueChangedSoft',\n                change: ''\n            };\n        },\n        templateInput(model) {\n            const ppfx = this.ppfx;\n            return `\n      <div class=\"${ ppfx }field ${ ppfx }field-range\">\n        <input type=\"range\"\n          min=\"${ model.get('min') }\"\n          max=\"${ model.get('max') }\"\n          step=\"${ model.get('step') }\"/>\n      </div>\n    `;\n        },\n        getSliderEl() {\n            if (!this.slider) {\n                this.slider = this.el.querySelector('input[type=range]');\n            }\n            return this.slider;\n        },\n        inputValueChanged() {\n            const model = this.model;\n            const step = model.get('step');\n            this.getInputEl().value = this.getSliderEl().value;\n            const value = this.getInputValue() - step;\n            model.set('value', value, { avoidStore: 1 }).set('value', value + step);\n            this.elementUpdated();\n        },\n        inputValueChangedSoft() {\n            this.getInputEl().value = this.getSliderEl().value;\n            this.model.set('value', this.getInputValue(), { avoidStore: 1 });\n            this.elementUpdated();\n        },\n        setValue(value) {\n            const parsed = this.model.parseValue(value);\n            this.getSliderEl().value = parseFloat(parsed.value);\n            Property.prototype.setValue.apply(this, arguments);\n        },\n        onRender() {\n            Property.prototype.onRender.apply(this, arguments);\n            if (!this.model.get('showInput')) {\n                this.inputInst.el.style.display = 'none';\n            }\n        },\n        clearCached() {\n            Property.prototype.clearCached.apply(this, arguments);\n            this.slider = null;\n        }\n    });\n});"]}