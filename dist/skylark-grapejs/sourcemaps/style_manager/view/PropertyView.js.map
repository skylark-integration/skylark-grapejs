{"version":3,"sources":["style_manager/view/PropertyView.js"],"names":["define","Backbone","a","b","View","extend","[object Object]","model","this","pfx","templateLabel","ppfx","templateInput","em","parent","icon","info","id","name","attributes","t","getDefaultValue","events","change","click [data-clear-style]","o","bindAll","config","stylePrefix","pStylePrefix","target","propTarget","onChange","onInputRender","customValue","property","get","input","inputHolderId","sector","collection","view","set","on","targetUpdated","requires","Object","keys","forEach","listenTo","remove","modelValueChanged","updateVisibility","updateStatus","render","init","bind","status","updatedCls","computedCls","labelEl","$el","children","clearStyleEl","getClearEl","clearStyle","style","removeClass","display","addClass","clearProperties","ev","stopPropagation","clearValue","setTimeout","clearEl","el","querySelector","getTargetModel","targets","getTarget","helper","e","setValue","getInputValue","fromInput","elementUpdated","setStatus","value","emitUpdateTarget","debounce","trigger","targetValue","getTargetValue","ignoreDefault","defaultValue","computedValue","getComputedValue","highlightChanged","showComputed","highlightComputed","mod","val","opts","checkVisibility","targetData","_getTargetData","fromTarget","data","_emitUpdate","addData","_getEventData","propertyView","getTargets","getFullValue","result","hideNotStylable","isTargetStylable","isComponentStylable","show","hide","customFetchValue","getStyle","ignoreCustomValue","indexOf","computed","computedDef","computedDefault","avoid","avoidComputed","notToSkip","valueDef","camelCase","getInputEl","opt","__updateTarget","prop","fromParent","updateTargetStyle","component","getSelected","noEmit","setStyle","getHelperModel","trg","toRequire","unstylable","stylableReq","requiresParent","sectors","selected","stylable","isArray","properties","each","includes","values","parentEl","getEl","styles","window","getComputedStyle","parseValue","isUndefined","$input","clearCached","full","cls","className","innerHTML","template","trim","onRender","targetUpdate"],"mappings":"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","file":"../../../style_manager/view/PropertyView.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins'\n], function (Backbone, a, b) {\n    'use strict';\n    const clearProp = 'data-clear-style';\n    return Backbone.View.extend({\n        template(model) {\n            const pfx = this.pfx;\n            return `\n      <div class=\"${ pfx }label\">\n        ${ this.templateLabel(model) }\n      </div>\n      <div class=\"${ this.ppfx }fields\">\n        ${ this.templateInput(model) }\n      </div>\n    `;\n        },\n        templateLabel(model) {\n            const {pfx, em} = this;\n            const {parent} = model;\n            const {icon = '', info = '', id, name} = model.attributes;\n            const label = em && em.t(`styleManager.properties.${ id }`) || name;\n            return `\n      <span class=\"${ pfx }icon ${ icon }\" title=\"${ info }\">\n        ${ label }\n      </span>\n      ${ !parent ? `<b class=\"${ pfx }clear\" ${ clearProp }>&Cross;</b>` : '' }\n    `;\n        },\n        templateInput(model) {\n            return `\n      <div class=\"${ this.ppfx }field\">\n        <input placeholder=\"${ model.getDefaultValue() }\"/>\n      </div>\n    `;\n        },\n        events: {\n            change: 'inputValueChanged',\n            [`click [${ clearProp }]`]: 'clear'\n        },\n        initialize(o = {}) {\n            a.bindAll(this, 'targetUpdated');\n            this.config = o.config || {};\n            const em = this.config.em;\n            this.em = em;\n            this.pfx = this.config.stylePrefix || '';\n            this.ppfx = this.config.pStylePrefix || '';\n            this.target = o.target || {};\n            this.propTarget = o.propTarget || {};\n            this.onChange = o.onChange;\n            this.onInputRender = o.onInputRender || {};\n            this.customValue = o.customValue || {};\n            const model = this.model;\n            this.property = model.get('property');\n            this.input = null;\n            const pfx = this.pfx;\n            this.inputHolderId = '#' + pfx + 'input-holder';\n            this.sector = model.collection && model.collection.sector;\n            model.view = this;\n            if (!model.get('value')) {\n                model.set('value', model.getDefaultValue());\n            }\n            em && em.on(`update:component:style:${ this.property }`, this.targetUpdated);\n            const requires = model.get('requires');\n            requires && Object.keys(requires).forEach(property => {\n                em && em.on(`component:styleUpdate:${ property }`, this.targetUpdated);\n            });\n            this.listenTo(this.propTarget, 'update styleManager:update', this.targetUpdated);\n            this.listenTo(model, 'destroy remove', this.remove);\n            this.listenTo(model, 'change:value', this.modelValueChanged);\n            this.listenTo(model, 'targetUpdated', this.targetUpdated);\n            this.listenTo(model, 'change:visible', this.updateVisibility);\n            this.listenTo(model, 'change:status', this.updateStatus);\n            this.listenTo(model, 'change:name change:className change:full', this.render);\n            const init = this.init && this.init.bind(this);\n            init && init();\n        },\n        updateStatus() {\n            const {model} = this;\n            const status = model.get('status');\n            const parent = model.parent;\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            const config = this.config;\n            const updatedCls = `${ ppfx }four-color`;\n            const computedCls = `${ ppfx }color-warn`;\n            const labelEl = this.$el.children(`.${ pfx }label`);\n            const clearStyleEl = this.getClearEl();\n            const clearStyle = clearStyleEl ? clearStyleEl.style : {};\n            labelEl.removeClass(`${ updatedCls } ${ computedCls }`);\n            clearStyle.display = 'none';\n            switch (status) {\n            case 'updated':\n                !parent && labelEl.addClass(updatedCls);\n                if (config.clearProperties) {\n                    clearStyle.display = 'inline';\n                }\n                break;\n            case 'computed':\n                labelEl.addClass(computedCls);\n                break;\n            }\n        },\n        clear(ev) {\n            ev && ev.stopPropagation();\n            this.model.clearValue();\n            setTimeout(() => this.targetUpdated());\n        },\n        getClearEl() {\n            if (!this.clearEl) {\n                this.clearEl = this.el.querySelector(`[${ clearProp }]`);\n            }\n            return this.clearEl;\n        },\n        getTarget() {\n            return this.getTargetModel();\n        },\n        getTargets() {\n            const {targets} = this.propTarget;\n            return targets || [this.getTarget()];\n        },\n        getTargetModel() {\n            return this.propTarget && this.propTarget.model;\n        },\n        getHelperModel() {\n            return this.propTarget && this.propTarget.helper;\n        },\n        inputValueChanged(e) {\n            e && e.stopPropagation();\n            this.model.setValue(this.getInputValue(), 1, { fromInput: 1 });\n            this.elementUpdated();\n        },\n        elementUpdated() {\n            this.setStatus('updated');\n        },\n        setStatus(value) {\n            this.model.set('status', value);\n            const parent = this.model.parent;\n            parent && value == 'updated' && parent.set('status', value);\n        },\n        emitUpdateTarget: a.debounce(function () {\n            const em = this.config.em;\n            em && em.trigger('styleManager:update:target', this.getTarget());\n        }),\n        _getTargetData() {\n            const {model, config} = this;\n            const targetValue = this.getTargetValue({ ignoreDefault: 1 });\n            const defaultValue = model.getDefaultValue();\n            const computedValue = this.getComputedValue();\n            let value = '';\n            let status = '';\n            if (targetValue) {\n                value = targetValue;\n                if (config.highlightChanged) {\n                    status = 'updated';\n                }\n            } else if (computedValue && config.showComputed && computedValue != defaultValue) {\n                value = computedValue;\n                if (config.highlightComputed) {\n                    status = 'computed';\n                }\n            } else {\n                value = defaultValue;\n                status = '';\n            }\n            return {\n                value,\n                status,\n                targetValue,\n                defaultValue,\n                computedValue\n            };\n        },\n        targetUpdated(mod, val, opts = {}) {\n            this.emitUpdateTarget();\n            if (!this.checkVisibility()) {\n                return;\n            }\n            const config = this.config;\n            const em = config.em;\n            const {model} = this;\n            const property = model.get('property');\n            \n            //const {\n            //    status,\n            //    value,\n            //    ...targetData\n            //} = this._getTargetData();\n\n            const targetData = this._getTargetData()\n            this.setStatus(targetData.status);\n            model.setValue(targetData.value, 0, {\n                fromTarget: 1,\n                ...opts\n            });\n            if (em) {\n                const data = {\n                //    status,\n                //    value,\n                    ...targetData\n                };\n                em.trigger('styleManager:change', this, property, targetData.value, data);\n                em.trigger(`styleManager:change:${ property }`, this, targetData.value, data);\n                this._emitUpdate(data);\n            }\n        },\n        _emitUpdate(addData = {}) {\n            const {em, model} = this;\n            if (!em)\n                return;\n            const property = model.get('property');\n            const data = {\n                ...this._getEventData(),\n                ...addData\n            };\n            const {id} = data;\n            em.trigger('style:update', data);\n            em.trigger(`style:update:${ property }`, data);\n            property !== id && em.trigger(`style:update:${ id }`, data);\n        },\n        _getEventData() {\n            const {model} = this;\n            return {\n                propertyView: this,\n                targets: this.getTargets(),\n                value: model.getFullValue(),\n                property: model,\n                id: model.get('id'),\n                name: model.get('property')\n            };\n        },\n        checkVisibility() {\n            var result = 1;\n            if (this.config.hideNotStylable) {\n                if (!this.isTargetStylable() || !this.isComponentStylable()) {\n                    this.hide();\n                    result = 0;\n                } else {\n                    this.show();\n                }\n                if (this.sector) {\n                    this.sector.trigger('updateVisibility');\n                }\n            }\n            return result;\n        },\n        getTargetValue(opts = {}) {\n            let result;\n            const {model} = this;\n            const target = this.getTargetModel();\n            const customFetchValue = this.customValue;\n            if (!target) {\n                return result;\n            }\n            result = target.getStyle()[model.get('property')];\n            if (!result && !opts.ignoreDefault) {\n                result = model.getDefaultValue();\n            }\n            if (typeof customFetchValue == 'function' && !opts.ignoreCustomValue) {\n                let index = model.collection.indexOf(model);\n                let customValue = customFetchValue(this, index, result);\n                if (customValue) {\n                    result = customValue;\n                }\n            }\n            return result;\n        },\n        getComputedValue() {\n            const target = this.propTarget;\n            const computed = target.computed || {};\n            const computedDef = target.computedDefault || {};\n            const avoid = this.config.avoidComputed || [];\n            const property = this.model.get('property');\n            const notToSkip = avoid.indexOf(property) < 0;\n            const value = computed[property];\n            const valueDef = computedDef[b.camelCase(property)];\n            return computed && notToSkip && valueDef !== value && value || '';\n        },\n        getInputValue() {\n            const input = this.getInputEl();\n            return input ? input.value : '';\n        },\n        modelValueChanged(e, val, opt = {}) {\n            const model = this.model;\n            const value = model.getFullValue();\n            if (!opt.fromInput) {\n                this.setValue(value);\n            }\n            this.getTargets().forEach(target => this.__updateTarget(target, opt));\n        },\n        __updateTarget(target, opt = {}) {\n            const {model} = this;\n            const {em} = this.config;\n            const prop = model.get('property');\n            const value = model.getFullValue();\n            const onChange = this.onChange;\n            if (!target || !this.isTargetStylable(target) || !this.isComponentStylable()) {\n                return;\n            }\n            if (!opt.fromTarget) {\n                if (onChange && !opt.fromParent) {\n                    onChange(target, this, opt);\n                } else {\n                    this.updateTargetStyle(value, null, {\n                        ...opt,\n                        target\n                    });\n                }\n            }\n            const component = em && em.getSelected();\n            if (em && component) {\n                !opt.noEmit && em.trigger('component:update', component);\n                em.trigger('component:styleUpdate', component, prop);\n                em.trigger(`component:styleUpdate:${ prop }`, component);\n            }\n            this._emitUpdate();\n        },\n        updateTargetStyle(value, name = '', opts = {}) {\n            const property = name || this.model.get('property');\n            const target = opts.target || this.getTarget();\n            const style = target.getStyle();\n            if (value) {\n                style[property] = value;\n            } else {\n                delete style[property];\n            }\n            target.setStyle(style, opts);\n            const helper = this.getHelperModel();\n            helper && helper.setStyle(style, opts);\n        },\n        isTargetStylable(target) {\n            const trg = target || this.getTarget();\n            const model = this.model;\n            const id = model.get('id');\n            const property = model.get('property');\n            const toRequire = model.get('toRequire');\n            const unstylable = trg.get('unstylable');\n            const stylableReq = trg.get('stylable-require');\n            const requires = model.get('requires');\n            const requiresParent = model.get('requiresParent');\n            const sectors = this.sector ? this.sector.collection : null;\n            const selected = this.em ? this.em.getSelected() : null;\n            let stylable = trg.get('stylable');\n            if (a.isArray(stylable)) {\n                stylable = stylable.indexOf(property) >= 0;\n            }\n            if (a.isArray(unstylable)) {\n                stylable = unstylable.indexOf(property) < 0;\n            }\n            if (toRequire) {\n                stylable = !target || stylableReq && (stylableReq.indexOf(id) >= 0 || stylableReq.indexOf(property) >= 0);\n            }\n            if (sectors && requires) {\n                const properties = Object.keys(requires);\n                sectors.each(sector => {\n                    sector.get('properties').each(model => {\n                        if (a.includes(properties, model.id)) {\n                            const values = requires[model.id];\n                            stylable = stylable && a.includes(values, model.get('value'));\n                        }\n                    });\n                });\n            }\n            if (requiresParent) {\n                const parent = selected && selected.parent();\n                const parentEl = parent && parent.getEl();\n                if (parentEl) {\n                    const styles = window.getComputedStyle(parentEl);\n                    a.each(requiresParent, (values, property) => {\n                        stylable = stylable && styles[property] && a.includes(values, styles[property]);\n                    });\n                } else {\n                    stylable = false;\n                }\n            }\n            return stylable;\n        },\n        isComponentStylable() {\n            const em = this.em;\n            const component = em && em.getSelected();\n            if (!component) {\n                return true;\n            }\n            return this.isTargetStylable(component);\n        },\n        setRawValue(value) {\n            this.setValue(this.model.parseValue(value));\n        },\n        setValue(value) {\n            const model = this.model;\n            let val = a.isUndefined(value) ? model.getDefaultValue() : value;\n            const input = this.getInputEl();\n            input && (input.value = val);\n        },\n        getInputEl() {\n            if (!this.input) {\n                this.input = this.el.querySelector('input');\n            }\n            return this.input;\n        },\n        updateVisibility() {\n            this.el.style.display = this.model.get('visible') ? 'block' : 'none';\n        },\n        show() {\n            this.model.set('visible', 1);\n        },\n        hide() {\n            this.model.set('visible', 0);\n        },\n        cleanValue() {\n            this.setValue('');\n        },\n        clearCached() {\n            this.clearEl = null;\n            this.input = null;\n            this.$input = null;\n        },\n        render() {\n            this.clearCached();\n            const pfx = this.pfx;\n            const model = this.model;\n            const el = this.el;\n            const property = model.get('property');\n            const full = model.get('full');\n            const cls = model.get('className') || '';\n            const className = `${ pfx }property`;\n            el.innerHTML = this.template(model);\n            el.className = `${ className } ${ pfx }${ model.get('type') } ${ className }__${ property } ${ cls }`.trim();\n            el.className += full ? ` ${ className }--full` : '';\n            this.updateStatus();\n            const onRender = this.onRender && this.onRender.bind(this);\n            onRender && onRender();\n            this.setValue(model.get('value'), { targetUpdate: 1 });\n        }\n    });\n});"]}