{"version":3,"sources":["style_manager/view/PropertiesView.js"],"names":["define","Backbone","a","View","extend","[object Object]","o","this","config","pfx","stylePrefix","target","propTarget","onChange","onInputRender","customValue","properties","coll","collection","listenTo","addTo","render","model","opts","add","frag","appendTo","el","view","typeView","name","get","id","rendered","push","updateVisibility","appendAtIndex","at","$el","fragment","document","createDocumentFragment","each","empty","append","attr"],"mappings":";;;;;;;AAAAA,QACI,mBACA,mBACD,SAAUC,EAAUC,GACnB,aACA,OAAOD,EAASE,KAAKC,QACjBC,WAAWC,GACPC,KAAKC,OAASF,EAAEE,WAChBD,KAAKE,IAAMF,KAAKC,OAAOE,aAAe,GACtCH,KAAKI,OAASL,EAAEK,WAChBJ,KAAKK,WAAaN,EAAEM,eACpBL,KAAKM,SAAWP,EAAEO,SAClBN,KAAKO,cAAgBR,EAAEQ,kBACvBP,KAAKQ,YAAcT,EAAES,gBACrBR,KAAKS,cACL,MAAMC,EAAOV,KAAKW,WAClBX,KAAKY,SAASF,EAAM,MAAOV,KAAKa,OAChCb,KAAKY,SAASF,EAAM,QAASV,KAAKc,SAEtChB,MAAMiB,EAAOL,EAAMM,GACfhB,KAAKiB,IAAIF,EAAO,KAAMC,IAE1BlB,IAAIiB,EAAOG,EAAMF,MACb,MAAMG,EAAWD,GAAQlB,KAAKoB,GACxBC,EAAO,IAAIN,EAAMO,UACnBP,MAAAA,EACAQ,KAAMR,EAAMS,IAAI,QAChBC,GAAIzB,KAAKE,IAAMa,EAAMS,IAAI,YACzBpB,OAAQJ,KAAKI,OACbC,WAAYL,KAAKK,WACjBC,SAAUN,KAAKM,SACfC,cAAeP,KAAKO,cACpBN,OAAQD,KAAKC,SAEQ,aAArBc,EAAMS,IAAI,UACVH,EAAKb,YAAcR,KAAKQ,aAE5Ba,EAAKP,SACL,MAAMY,EAAWL,EAAKD,GACtBpB,KAAKS,WAAWkB,KAAKN,GACrBA,EAAKO,mBACLjC,EAAEkC,cAAcV,EAAUO,EAAUV,EAAKc,KAE7ChC,SACI,MAAMiC,IAACA,GAAO/B,KACdA,KAAKS,cACL,MAAMuB,EAAWC,SAASC,yBAK1B,OAJAlC,KAAKW,WAAWwB,KAAKpB,GAASf,KAAKiB,IAAIF,EAAOiB,IAC9CD,EAAIK,QACJL,EAAIM,OAAOL,GACXD,EAAIO,KAAK,WAAatC,KAAKE,iBACpBF","file":"../../../style_manager/view/PropertiesView.js","sourcesContent":["define([\n    'skylark-backbone',\n    '../../utils/dom'\n], function (Backbone, a) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize(o) {\n            this.config = o.config || {};\n            this.pfx = this.config.stylePrefix || '';\n            this.target = o.target || {};\n            this.propTarget = o.propTarget || {};\n            this.onChange = o.onChange;\n            this.onInputRender = o.onInputRender || {};\n            this.customValue = o.customValue || {};\n            this.properties = [];\n            const coll = this.collection;\n            this.listenTo(coll, 'add', this.addTo);\n            this.listenTo(coll, 'reset', this.render);\n        },\n        addTo(model, coll, opts) {\n            this.add(model, null, opts);\n        },\n        add(model, frag, opts = {}) {\n            const appendTo = frag || this.el;\n            const view = new model.typeView({\n                model,\n                name: model.get('name'),\n                id: this.pfx + model.get('property'),\n                target: this.target,\n                propTarget: this.propTarget,\n                onChange: this.onChange,\n                onInputRender: this.onInputRender,\n                config: this.config\n            });\n            if (model.get('type') != 'composite') {\n                view.customValue = this.customValue;\n            }\n            view.render();\n            const rendered = view.el;\n            this.properties.push(view);\n            view.updateVisibility();\n            a.appendAtIndex(appendTo, rendered, opts.at);\n        },\n        render() {\n            const {$el} = this;\n            this.properties = [];\n            const fragment = document.createDocumentFragment();\n            this.collection.each(model => this.add(model, fragment));\n            $el.empty();\n            $el.append(fragment);\n            $el.attr('class', `${ this.pfx }properties`);\n            return this;\n        }\n    });\n});"]}