{"version":3,"sources":["style_manager/view/SectorsView.js"],"names":["define","Backbone","a","b","c","SectorView","View","undefined","[object Object]","o","config","this","pfx","stylePrefix","ppfx","pStylePrefix","target","extend","Events","body","document","dummy","createElement","Date","getTime","appendChild","computedDefault","window","getComputedStyle","removeChild","propTarget","coll","collection","listenTo","addTo","render","targetUpdated","model","opts","addToCollection","targets","enable","forEach","trg","el","getEl","classList","em","pt","getSelectedAll","getSelected","mdToClear","toHTML","toggleStateCls","state","get","devicePreviewMode","componentFirst","getConfig","helper","isTaggableNode","stateStr","computed","getModelToStyle","style","cc","rules","getAll","helperRule","getClassRule","remove","add","setClassRule","set","setStyle","appendStateRule","getStyle","trigger","trgs","isArray","targetIsClass","stylable","models","isString","rule","filter","getFullString","selectors","selectorsAdd","push","fragmentEl","appendTo","rendered","id","name","properties","appendAtIndex","at","frag","createDocumentFragment","$el","empty","each","append","addClass"],"mappings":"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","file":"../../../style_manager/view/SectorsView.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins',\n    '../../utils/dom',\n    './SectorView'\n], function (Backbone, a, b, c, SectorView) {\n    'use strict';\n    const helperCls = 'hc-state';\n    return Backbone.View.undefined({\n        initialize(o = {}) {\n            const config = o.config || {};\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.target = o.target || {};\n            this.config = config;\n            const target = {};\n            a.extend(target, Backbone.Events);\n            const body = document.body;\n            const dummy = document.createElement(`el-${ new Date().getTime() }`);\n            body.appendChild(dummy);\n            target.computedDefault = { ...window.getComputedStyle(dummy) };\n            body.removeChild(dummy);\n            this.propTarget = target;\n            const coll = this.collection;\n            const events = 'component:toggled component:update:classes change:state change:device frame:resized';\n            this.listenTo(coll, 'add', this.addTo);\n            this.listenTo(coll, 'reset', this.render);\n            this.listenTo(this.target, events, this.targetUpdated);\n        },\n        addTo(model, coll, opts = {}) {\n            this.addToCollection(model, null, opts);\n        },\n        toggleStateCls(targets = [], enable) {\n            targets.forEach(trg => {\n                const el = trg.getEl();\n                el && el.classList[enable ? 'add' : 'remove'](helperCls);\n            });\n        },\n        targetUpdated(trg) {\n            const em = this.target;\n            const pt = this.propTarget;\n            const targets = em.getSelectedAll();\n            let model = em.getSelected();\n            const mdToClear = trg && !!trg.toHTML ? trg : model;\n            mdToClear && this.toggleStateCls([mdToClear]);\n            if (!model)\n                return;\n            const config = em.get('Config');\n            const state = !config.devicePreviewMode ? em.get('state') : '';\n            const {componentFirst} = em.get('SelectorManager').getConfig();\n            const el = model.getEl();\n            pt.helper = null;\n            pt.targets = null;\n            if (el && b.isTaggableNode(el)) {\n                const stateStr = state ? `:${ state }` : null;\n                pt.computed = window.getComputedStyle(el, stateStr);\n            }\n            const appendStateRule = (style = {}) => {\n                const cc = em.get('CssComposer');\n                const rules = cc.getAll();\n                let helperRule = cc.getClassRule(helperCls);\n                if (!helperRule) {\n                    helperRule = cc.setClassRule(helperCls);\n                } else {\n                    rules.remove(helperRule);\n                    rules.add(helperRule);\n                }\n                helperRule.set('important', 1);\n                helperRule.setStyle(style);\n                pt.helper = helperRule;\n            };\n            model = em.get('StyleManager').getModelToStyle(model);\n            if (state) {\n                appendStateRule(model.getStyle());\n                this.toggleStateCls(targets, 1);\n            }\n            pt.model = model;\n            if (componentFirst)\n                pt.targets = targets;\n            pt.trigger('update');\n        },\n        setTarget(target, opts = {}) {\n            const em = this.target;\n            const trgs = a.isArray(target) ? target : [target];\n            const {targetIsClass, stylable} = opts;\n            const models = [];\n            trgs.forEach(target => {\n                let model = target;\n                if (a.isString(target)) {\n                    let rule;\n                    const rules = em.get('CssComposer').getAll();\n                    if (targetIsClass) {\n                        rule = rules.filter(rule => rule.get('selectors').getFullString() === target)[0];\n                    }\n                    if (!rule) {\n                        rule = rules.filter(rule => rule.get('selectorsAdd') === target)[0];\n                    }\n                    if (!rule) {\n                        rule = rules.add({\n                            selectors: [],\n                            selectorsAdd: target\n                        });\n                    }\n                    stylable && rule.set({ stylable });\n                    model = rule;\n                }\n                models.push(model);\n            });\n            const pt = this.propTarget;\n            pt.targets = models;\n            pt.trigger('update');\n            return models;\n        },\n        addToCollection(model, fragmentEl, opts = {}) {\n            const {pfx, target, propTarget, config, el} = this;\n            const appendTo = fragmentEl || el;\n            const rendered = new SectorView({\n                model,\n                id: `${ pfx }${ model.get('id') }`,\n                name: model.get('name'),\n                properties: model.get('properties'),\n                target,\n                propTarget,\n                config\n            }).render().el;\n            c.appendAtIndex(appendTo, rendered, opts.at);\n            return rendered;\n        },\n        render() {\n            const frag = document.createDocumentFragment();\n            const $el = this.$el;\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            $el.empty();\n            this.collection.each(model => this.addToCollection(model, frag));\n            $el.append(frag);\n            $el.addClass(`${ pfx }sectors ${ ppfx }one-bg ${ ppfx }two-color`);\n            return this;\n        }\n    });\n});"]}