{"version":3,"sources":["style_manager/view/PropertyCompositeView.js"],"names":["define","Backbone","PropertyView","$","extend","[object Object]","pfx","this","args","model","get","prototype","inputValueChanged","apply","e","props","properties","forEach","propView","clear","arguments","length","$input","input","$props","each","prop","index","remove","console","warn","parent","propsView","PropertiesView","require","default","getPropsConfig","render","$el","find","append","opts","that","result","config","highlightComputed","collection","target","propTarget","el","view","set","getFullValue","customValue","property","mIndex","valueOnIndex","onChange","value","targetValue","getTargetValue","ignoreDefault","split","getSplitSeparator","ignoreCustomValue","clearCached"],"mappings":";;;;;;;AAAAA,QACI,mBACA,kBACD,SAAUC,EAAUC,GACnB,aACA,MAAMC,EAAIF,EAASE,EACnB,OAAOD,EAAaE,QAChBC,gBACI,MAAMC,EAAMC,KAAKD,IACjB,6BACSA,UAAcA,mCACdA,8CAIbD,qBAAqBG,GACZD,KAAKE,MAAMC,IAAI,aAChBR,EAAaS,UAAUC,kBAAkBC,MAAMN,KAAMC,IAG7DH,MAAMS,GACF,MAAMC,EAAQR,KAAKS,WACnBD,GAASA,EAAME,QAAQC,GAAYA,EAASC,SAC5CjB,EAAaS,UAAUQ,MAAMN,MAAMN,KAAMa,YAE7Cf,WACI,IAAII,EAAQF,KAAKE,MACbM,EAAQN,EAAMC,IAAI,kBAGtB,GADAH,KAAKS,cACDD,EAAMM,SACDd,KAAKe,SACNf,KAAKe,OAASnB,EAAE,mCAChBI,KAAKgB,MAAQhB,KAAKe,OAAOZ,IAAI,IAE5BH,KAAKQ,QACNR,KAAKQ,MAAQN,EAAMC,IAAI,gBAEtBH,KAAKiB,QAAQ,CACdjB,KAAKQ,MAAMU,KAAK,SAAUC,EAAMC,GACxBD,GAA4B,aAApBA,EAAKhB,IAAI,UACjBH,KAAKQ,MAAMa,OAAOF,GAClBG,QAAQC,KAAK,4CAEjBJ,EAAKK,OAAStB,GACfF,MACH,IACIyB,EAAY,IAAIC,EADCC,QAAQ,oBAAoBC,SACd5B,KAAK6B,kBACxC7B,KAAKiB,OAASQ,EAAUK,SAASC,IACjC/B,KAAKS,WAAagB,EAAUhB,WAC5BT,KAAK+B,IAAIC,SAAUhC,KAAKD,mBAAoBkC,OAAOjC,KAAKiB,UAIpEnB,eAAeoC,GACX,IAAIC,EAAOnC,KACX,MAAME,EAAQF,KAAKE,MACnB,IAAIkC,GACAC,WACOrC,KAAKqC,OACRC,kBAAmB,GAEvBC,WAAYvC,KAAKQ,MACjBgC,OAAQxC,KAAKwC,OACbC,WAAYzC,KAAKyC,WACjB3C,SAAS4C,EAAIC,EAAMT,GACfhC,EAAM0C,IAAI,QAAS1C,EAAM2C,eAAgBX,IAE7CY,YAAW,CAACC,EAAUC,IACXb,EAAKc,aAAaD,EAAQD,IAMzC,OAHI7C,EAAMC,IAAI,oBACHiC,EAAOc,SAEXd,GAEXtC,aAAasB,EAAOuB,GAChB,IAAIQ,EACJ,MAAMC,EAAcpD,KAAKqD,gBAAiBC,cAAe,IACzD,GAAIF,EAAa,CAEbD,EADeC,EAAYG,MAAMvD,KAAKE,MAAMsD,qBAC7BpC,QAEf+B,EAAQR,GAAQA,EAAKU,gBACjBI,kBAAmB,EACnBH,cAAe,IAGvB,OAAOH,GAEXrD,cACIH,EAAaS,UAAUsD,YAAYpD,MAAMN,KAAMa,WAC/Cb,KAAKe,OAAS,KACdf,KAAKQ,MAAQ,KACbR,KAAKiB,OAAS","file":"../../../style_manager/view/PropertyCompositeView.js","sourcesContent":["define([\n    'skylark-backbone',\n    './PropertyView'\n], function (Backbone, PropertyView) {\n    'use strict';\n    const $ = Backbone.$;\n    return PropertyView.extend({\n        templateInput() {\n            const pfx = this.pfx;\n            return `\n      <div class=\"${ pfx }field ${ pfx }composite\">\n        <span id=\"${ pfx }input-holder\"></span>\n      </div>\n    `;\n        },\n        inputValueChanged(...args) {\n            if (!this.model.get('detached')) {\n                PropertyView.prototype.inputValueChanged.apply(this, args);\n            }\n        },\n        clear(e) {\n            const props = this.properties;\n            props && props.forEach(propView => propView.clear());\n            PropertyView.prototype.clear.apply(this, arguments);\n        },\n        onRender() {\n            var model = this.model;\n            var props = model.get('properties') || [];\n            var self = this;\n            this.properties = [];\n            if (props.length) {\n                if (!this.$input) {\n                    this.$input = $('<input type=\"hidden\" value=\"0\">');\n                    this.input = this.$input.get(0);\n                }\n                if (!this.props) {\n                    this.props = model.get('properties');\n                }\n                if (!this.$props) {\n                    this.props.each(function (prop, index) {\n                        if (prop && prop.get('type') == 'composite') {\n                            this.props.remove(prop);\n                            console.warn('Nested composite types not yet allowed.');\n                        }\n                        prop.parent = model;\n                    }, this);\n                    var PropertiesView = require('./PropertiesView').default;\n                    var propsView = new PropertiesView(this.getPropsConfig());\n                    this.$props = propsView.render().$el;\n                    this.properties = propsView.properties;\n                    this.$el.find(`#${ this.pfx }input-holder`).append(this.$props);\n                }\n            }\n        },\n        getPropsConfig(opts) {\n            var that = this;\n            const model = this.model;\n            var result = {\n                config: {\n                    ...this.config,\n                    highlightComputed: 0\n                },\n                collection: this.props,\n                target: this.target,\n                propTarget: this.propTarget,\n                onChange(el, view, opts) {\n                    model.set('value', model.getFullValue(), opts);\n                },\n                customValue(property, mIndex) {\n                    return that.valueOnIndex(mIndex, property);\n                }\n            };\n            if (model.get('detached')) {\n                delete result.onChange;\n            }\n            return result;\n        },\n        valueOnIndex(index, view) {\n            let value;\n            const targetValue = this.getTargetValue({ ignoreDefault: 1 });\n            if (targetValue) {\n                const values = targetValue.split(this.model.getSplitSeparator());\n                value = values[index];\n            } else {\n                value = view && view.getTargetValue({\n                    ignoreCustomValue: 1,\n                    ignoreDefault: 1\n                });\n            }\n            return value;\n        },\n        clearCached() {\n            PropertyView.prototype.clearCached.apply(this, arguments);\n            this.$input = null;\n            this.props = null;\n            this.$props = null;\n        }\n    });\n});"]}