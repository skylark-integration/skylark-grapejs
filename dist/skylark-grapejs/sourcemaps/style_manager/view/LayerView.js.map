{"version":3,"sources":["style_manager/view/LayerView.js"],"names":["define","a","Backbone","PropertiesView","View","extend","events","click","click [data-close-layer]","mousedown [data-move-layer]","touchstart [data-move-layer]","[object Object]","model","pfx","ppfx","em","this","t","get","o","stackModel","config","stylePrefix","pStylePrefix","sorter","propsConfig","customPreview","onPreview","listenTo","remove","updateVisibility","updatePreview","view","set","droppable","draggable","$el","data","e","startSort","el","stopPropagation","collection","prototype","apply","arguments","contains","stackIndex","silent","trigger","value","detach","values","split","result","resultObj","each","prop","index","property","getFullValue","valueInt","parseInt","unit","replace","isNaN","push","join","previewEl","getPreviewEl","preview","style","isString","prvStr","val","setAttribute","propsWrapEl","querySelector","active","indexOf","wrapEl","getPropertiesWrapper","display","properties","target","customValue","propTarget","onChange","render","innerHTML","template","className","appendChild"],"mappings":"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","file":"../../../style_manager/view/LayerView.js","sourcesContent":["define([\n    'skylark-underscore',\n    'skylark-backbone',\n    './PropertiesView'\n], function (a, Backbone, PropertiesView) {\n    'use strict';\n    return Backbone.View.extend({\n        events: {\n            click: 'active',\n            'click [data-close-layer]': 'remove',\n            'mousedown [data-move-layer]': 'initSorter',\n            'touchstart [data-move-layer]': 'initSorter'\n        },\n        template(model) {\n            const {pfx, ppfx, em} = this;\n            const label = `${ em && em.t('styleManager.layer') } ${ model.get('index') }`;\n            return `\n      <div id=\"${ pfx }move\" class=\"${ ppfx }no-touch-actions\" data-move-layer>\n        <i class=\"fa fa-arrows\"></i>\n      </div>\n      <div id=\"${ pfx }label\">${ label }</div>\n      <div id=\"${ pfx }preview-box\">\n      \t<div id=\"${ pfx }preview\" data-preview></div>\n      </div>\n      <div id=\"${ pfx }close-layer\" class=\"${ pfx }btn-close\" data-close-layer>\n        &Cross;\n      </div>\n      <div id=\"${ pfx }inputs\" data-properties></div>\n      <div style=\"clear:both\"></div>\n    `;\n        },\n        initialize(o = {}) {\n            let model = this.model;\n            this.stackModel = o.stackModel;\n            this.config = o.config || {};\n            this.em = this.config.em;\n            this.pfx = this.config.stylePrefix || '';\n            this.ppfx = this.config.pStylePrefix || '';\n            this.sorter = o.sorter || null;\n            this.propsConfig = o.propsConfig || {};\n            this.customPreview = o.onPreview;\n            this.listenTo(model, 'destroy remove', this.remove);\n            this.listenTo(model, 'change:active', this.updateVisibility);\n            this.listenTo(model.get('properties'), 'change', this.updatePreview);\n            model.view = this;\n            model.set({\n                droppable: 0,\n                draggable: 1\n            });\n            this.$el.data('model', model);\n        },\n        initSorter(e) {\n            if (this.sorter)\n                this.sorter.startSort(this.el);\n        },\n        remove(e) {\n            if (e && e.stopPropagation)\n                e.stopPropagation();\n            const model = this.model;\n            const collection = model.collection;\n            const stackModel = this.stackModel;\n            Backbone.View.prototype.remove.apply(this, arguments);\n            if (collection.contains(model)) {\n                collection.remove(model);\n            }\n            if (stackModel && stackModel.set) {\n                stackModel.set({ stackIndex: null }, { silent: true });\n                stackModel.trigger('updateValue');\n            }\n        },\n        onPreview(value) {\n            const {stackModel} = this;\n            const detach = stackModel && stackModel.get('detached');\n            const values = value.split(' ');\n            const lim = 3;\n            const result = [];\n            const resultObj = {};\n            this.model.get('properties').each((prop, index) => {\n                const property = prop.get('property');\n                let value = detach ? prop.getFullValue() : values[index] || '';\n                if (value) {\n                    if (prop.get('type') == 'integer') {\n                        let valueInt = parseInt(value, 10);\n                        let unit = value.replace(valueInt, '');\n                        valueInt = !isNaN(valueInt) ? valueInt : 0;\n                        valueInt = valueInt > lim ? lim : valueInt;\n                        valueInt = valueInt < -lim ? -lim : valueInt;\n                        value = valueInt + unit;\n                    }\n                }\n                result.push(value);\n                resultObj[property] = value;\n            });\n            return detach ? resultObj : result.join(' ');\n        },\n        updatePreview() {\n            const stackModel = this.stackModel;\n            const customPreview = this.customPreview;\n            const previewEl = this.getPreviewEl();\n            const value = this.model.getFullValue();\n            const preview = customPreview ? customPreview(value) : this.onPreview(value);\n            if (preview && stackModel && previewEl) {\n                const {style} = previewEl;\n                if (a.isString(preview)) {\n                    style[stackModel.get('property')] = preview;\n                } else {\n                    let prvStr = [];\n                    a.each(preview, (val, prop) => prvStr.push(`${ prop }:${ val }`));\n                    previewEl.setAttribute('style', prvStr.join(';'));\n                }\n            }\n        },\n        getPropertiesWrapper() {\n            if (!this.propsWrapEl) {\n                this.propsWrapEl = this.el.querySelector('[data-properties]');\n            }\n            return this.propsWrapEl;\n        },\n        getPreviewEl() {\n            if (!this.previewEl) {\n                this.previewEl = this.el.querySelector('[data-preview]');\n            }\n            return this.previewEl;\n        },\n        active() {\n            const model = this.model;\n            const collection = model.collection;\n            collection.active(collection.indexOf(model));\n        },\n        updateVisibility() {\n            const pfx = this.pfx;\n            const wrapEl = this.getPropertiesWrapper();\n            const active = this.model.get('active');\n            wrapEl.style.display = active ? '' : 'none';\n            this.$el[active ? 'addClass' : 'removeClass'](`${ pfx }active`);\n        },\n        render() {\n            const propsConfig = this.propsConfig;\n            const {model, el, pfx} = this;\n            const preview = model.get('preview');\n            const properties = new PropertiesView({\n                collection: model.get('properties'),\n                config: this.config,\n                target: propsConfig.target,\n                customValue: propsConfig.customValue,\n                propTarget: propsConfig.propTarget,\n                onChange: propsConfig.onChange\n            }).render().el;\n            el.innerHTML = this.template(model);\n            el.className = `${ pfx }layer${ !preview ? ` ${ pfx }no-preview` : '' }`;\n            this.getPropertiesWrapper().appendChild(properties);\n            this.updateVisibility();\n            this.updatePreview();\n            return this;\n        }\n    });\n});"]}