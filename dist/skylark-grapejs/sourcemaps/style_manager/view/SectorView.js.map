{"version":3,"sources":["style_manager/view/SectorView.js"],"names":["define","Backbone","_","PropertiesView","View","extend","template","events","click [data-sector-title]","[object Object]","o","this","config","em","pfx","stylePrefix","target","propTarget","caretR","caretD","model","listenTo","updateOpen","updateVisibility","remove","show","get","each","prop","el","style","display","hide","$el","addClass","getPropertiesEl","$caret","removeClass","find","e","v","set","id","name","attributes","label","t","html","undefined","renderProperties","attr","objs","view","collection","append","render"],"mappings":";;;;;;;AAAAA,QACI,mBACA,qBACA,oBACD,SAAUC,EAAUC,EAAGC,GACtB,aACA,OAAOF,EAASG,KAAKC,QACjBC,SAAUJ,EAAEI,SAAS,gIAKrBC,QAAUC,4BAA6B,UACvCC,WAAWC,GACPC,KAAKC,OAASF,EAAEE,WAChBD,KAAKE,GAAKF,KAAKC,OAAOC,GACtBF,KAAKG,IAAMH,KAAKC,OAAOG,aAAe,GACtCJ,KAAKK,OAASN,EAAEM,WAChBL,KAAKM,WAAaP,EAAEO,eACpBN,KAAKO,OAAS,iBACdP,KAAKQ,OAAS,gBACd,MAAMC,EAAQT,KAAKS,MACnBT,KAAKU,SAASD,EAAO,cAAeT,KAAKW,YACzCX,KAAKU,SAASD,EAAO,mBAAoBT,KAAKY,kBAC9CZ,KAAKU,SAASD,EAAO,iBAAkBT,KAAKa,SAEhDf,mBACI,IAAIgB,EACJd,KAAKS,MAAMM,IAAI,cAAcC,KAAKC,IAC1BA,EAAKF,IAAI,aACTD,EAAO,KAGfd,KAAKkB,GAAGC,MAAMC,QAAUN,EAAO,QAAU,QAE7ChB,aACQE,KAAKS,MAAMM,IAAI,QACff,KAAKc,OAELd,KAAKqB,QAEbvB,OACIE,KAAKsB,IAAIC,SAASvB,KAAKG,IAAM,QAC7BH,KAAKwB,kBAAkBL,MAAMC,QAAU,GACvCpB,KAAKyB,OAAOC,YAAY1B,KAAKO,QAAQgB,SAASvB,KAAKQ,SAEvDV,OACIE,KAAKsB,IAAII,YAAY1B,KAAKG,IAAM,QAChCH,KAAKwB,kBAAkBL,MAAMC,QAAU,OACvCpB,KAAKyB,OAAOC,YAAY1B,KAAKQ,QAAQe,SAASvB,KAAKO,SAEvDT,kBACI,OAAOE,KAAKsB,IAAIK,SAAU3B,KAAKG,iBAAkBY,IAAI,IAEzDjB,OAAO8B,GACH,IAAIC,EAAI7B,KAAKS,MAAMM,IAAI,QAAU,EAAI,EACrCf,KAAKS,MAAMqB,IAAI,OAAQD,IAE3B/B,SACI,MAAMK,IAACA,EAAGM,MAAEA,EAAKP,GAAEA,EAAEoB,IAAEA,GAAOtB,MACxB+B,GAACA,EAAEC,KAAEA,GAAQvB,EAAMwB,WACnBC,EAAQhC,GAAMA,EAAGiC,0BAA2BJ,MAAUC,EAS5D,OARAV,EAAIc,KAAKpC,KAAKqC,WACVlC,IAAAA,EACA+B,MAAAA,KAEJlC,KAAKyB,OAASH,EAAIK,SAAUxB,UAC5BH,KAAKsC,mBACLhB,EAAIiB,KAAK,WAAapC,WAAeA,YAAgB4B,eACrD/B,KAAKW,aACEX,MAEXF,mBACI,IAAI0C,EAAOxC,KAAKS,MAAMM,IAAI,cAC1B,GAAIyB,EAAM,CACN,IAAIC,EAAO,IAAIjD,GACXkD,WAAYF,EACZnC,OAAQL,KAAKK,OACbC,WAAYN,KAAKM,WACjBL,OAAQD,KAAKC,SAEjBD,KAAKsB,IAAIqB,OAAOF,EAAKG,SAAS1B","file":"../../../style_manager/view/SectorView.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    './PropertiesView'\n], function (Backbone, _, PropertiesView) {\n    'use strict';\n    return Backbone.View.extend({\n        template: _.template(`\n  <div class=\"<%= pfx %>title\" data-sector-title>\n    <i id=\"<%= pfx %>caret\" class=\"fa\"></i>\n    <%= label %>\n  </div>`),\n        events: { 'click [data-sector-title]': 'toggle' },\n        initialize(o) {\n            this.config = o.config || {};\n            this.em = this.config.em;\n            this.pfx = this.config.stylePrefix || '';\n            this.target = o.target || {};\n            this.propTarget = o.propTarget || {};\n            this.caretR = 'fa-caret-right';\n            this.caretD = 'fa-caret-down';\n            const model = this.model;\n            this.listenTo(model, 'change:open', this.updateOpen);\n            this.listenTo(model, 'updateVisibility', this.updateVisibility);\n            this.listenTo(model, 'destroy remove', this.remove);\n        },\n        updateVisibility() {\n            var show;\n            this.model.get('properties').each(prop => {\n                if (prop.get('visible')) {\n                    show = 1;\n                }\n            });\n            this.el.style.display = show ? 'block' : 'none';\n        },\n        updateOpen() {\n            if (this.model.get('open'))\n                this.show();\n            else\n                this.hide();\n        },\n        show() {\n            this.$el.addClass(this.pfx + 'open');\n            this.getPropertiesEl().style.display = '';\n            this.$caret.removeClass(this.caretR).addClass(this.caretD);\n        },\n        hide() {\n            this.$el.removeClass(this.pfx + 'open');\n            this.getPropertiesEl().style.display = 'none';\n            this.$caret.removeClass(this.caretD).addClass(this.caretR);\n        },\n        getPropertiesEl() {\n            return this.$el.find(`.${ this.pfx }properties`).get(0);\n        },\n        toggle(e) {\n            var v = this.model.get('open') ? 0 : 1;\n            this.model.set('open', v);\n        },\n        render() {\n            const {pfx, model, em, $el} = this;\n            const {id, name} = model.attributes;\n            const label = em && em.t(`styleManager.sectors.${ id }`) || name;\n            $el.html(this.undefined({\n                pfx,\n                label\n            }));\n            this.$caret = $el.find(`#${ pfx }caret`);\n            this.renderProperties();\n            $el.attr('class', `${ pfx }sector ${ pfx }sector__${ id } no-select`);\n            this.updateOpen();\n            return this;\n        },\n        renderProperties() {\n            var objs = this.model.get('properties');\n            if (objs) {\n                var view = new PropertiesView({\n                    collection: objs,\n                    target: this.target,\n                    propTarget: this.propTarget,\n                    config: this.config\n                });\n                this.$el.append(view.render().el);\n            }\n        }\n    });\n});"]}