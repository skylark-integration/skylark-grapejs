{"version":3,"sources":["style_manager/view/PropertySelectView.js"],"names":["define","Backbone","PropertyView","$","extend","[object Object]","pfx","this","ppfx","args","prototype","initialize","apply","listenTo","model","updateOptions","input","onRender","options","getOptions","optionsStr","forEach","option","name","value","style","replace","styleAttr","inputH","el","querySelector","innerHTML","firstChild"],"mappings":";;;;;;;AAAAA,QACI,mBACA,kBACD,SAAUC,EAAUC,GACnB,aACUD,EAASE,EACnB,OAAOD,EAAaE,QAChBC,gBACI,MAAMC,EAAMC,KAAKD,IACXE,EAAOD,KAAKC,KAClB,6BACSA,UAAeA,gCACfF,+CACEE,uCACEA,0DAKjBH,cAAcI,GACVP,EAAaQ,UAAUC,WAAWC,MAAML,KAAME,GAC9CF,KAAKM,SAASN,KAAKO,MAAO,iBAAkBP,KAAKQ,gBAErDV,gBACIE,KAAKS,MAAQ,KACbT,KAAKU,YAETZ,WACI,IAAIC,EAAMC,KAAKD,IACf,MAAMY,EAAUX,KAAKO,MAAMK,aAC3B,IAAKZ,KAAKS,MAAO,CACb,IAAII,EAAa,GACjBF,EAAQG,QAAQC,IACZ,IAAIC,EAAOD,EAAOC,MAAQD,EAAOE,MAC7BC,EAAQH,EAAOG,MAAQH,EAAOG,MAAMC,QAAQ,KAAM,UAAY,GAC9DC,EAAYF,YAAmBA,KAAY,GAC3CD,EAAQF,EAAOE,MAAME,QAAQ,KAAM,UACvCN,qBAAiCI,MAAYG,KAAeJ,eAEhE,MAAMK,EAASrB,KAAKsB,GAAGC,kBAAmBxB,iBAC1CsB,EAAOG,qBAAwBX,aAC/Bb,KAAKS,MAAQY,EAAOI","file":"../../../style_manager/view/PropertySelectView.js","sourcesContent":["define([\n    'skylark-backbone',\n    './PropertyView'\n], function (Backbone, PropertyView) {\n    'use strict';\n    const $ = Backbone.$;\n    return PropertyView.extend({\n        templateInput() {\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            return `\n      <div class=\"${ ppfx }field ${ ppfx }select\">\n        <span id=\"${ pfx }input-holder\"></span>\n        <div class=\"${ ppfx }sel-arrow\">\n          <div class=\"${ ppfx }d-s-arrow\"></div>\n        </div>\n      </div>\n    `;\n        },\n        initialize(...args) {\n            PropertyView.prototype.initialize.apply(this, args);\n            this.listenTo(this.model, 'change:options', this.updateOptions);\n        },\n        updateOptions() {\n            this.input = null;\n            this.onRender();\n        },\n        onRender() {\n            var pfx = this.pfx;\n            const options = this.model.getOptions();\n            if (!this.input) {\n                let optionsStr = '';\n                options.forEach(option => {\n                    let name = option.name || option.value;\n                    let style = option.style ? option.style.replace(/\"/g, '&quot;') : '';\n                    let styleAttr = style ? `style=\"${ style }\"` : '';\n                    let value = option.value.replace(/\"/g, '&quot;');\n                    optionsStr += `<option value=\"${ value }\" ${ styleAttr }>${ name }</option>`;\n                });\n                const inputH = this.el.querySelector(`#${ pfx }input-holder`);\n                inputH.innerHTML = `<select>${ optionsStr }</select>`;\n                this.input = inputH.firstChild;\n            }\n        }\n    });\n});"]}