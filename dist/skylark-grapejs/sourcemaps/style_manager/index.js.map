{"version":3,"sources":["style_manager/index.js"],"names":["define","langx","_","defaults","Sectors","Properties","SectorsView","c","properties","sectors","SectView","name","getConfig","[object Object]","config","ppfx","pStylePrefix","this","em","stylePrefix","collection","target","add","elTo","appendTo","isElement","document","querySelector","appendChild","render","id","sector","opts","result","getSector","res","where","warn","_logNoSector","getSectors","remove","sectorId","property","prop","get","length","props","getProperties","getProperty","model","options","skipAdd","classes","getId","um","cssC","sm","smConf","state","devicePreviewMode","valid","getStyleable","hasClasses","useClasses","componentFirst","rule","stop","deviceW","getCurrentMedia","avoidInlineStyle","getIdRule","setIdRule","is","set","start","definition","addType","getType","getTypes","view","type","mixin","setTarget","getEmitter","propTarget","el","logWarning"],"mappings":";;;;;;;AAAAA,QACI,sBACA,qBACA,kBACA,kBACA,qBACA,sBACD,SAAUC,EAAMC,EAAGC,EAAUC,EAASC,EAAYC,GACjD,aACA,MAAO,KACH,IAAIC,KACJ,IAAIC,EACJ,IAAIC,EAASC,EACb,OACIC,KAAM,eACNC,UAAS,IACEL,EAEXM,KAAKC,GAED,MAAMC,GADNR,MAAQJ,KAAYW,IACLE,aAWf,OAVAC,KAAKC,GAAKX,EAAEW,GACRH,IACAR,EAAEY,YAAcJ,EAAOR,EAAEY,aAC7BX,EAAa,IAAIH,EACjBI,EAAU,IAAIL,KAAYG,GAC1BG,EAAW,IAAIJ,GACXc,WAAYX,EACZY,OAAQd,EAAEW,GACVJ,OAAQP,IAELU,MAEXJ,SACIJ,EAAQa,IAAIf,EAAEE,UAElBI,aACI,MAAMU,EAAON,KAAKL,YAAYY,SAC9B,GAAID,EAAM,EACKrB,EAAEuB,UAAUF,GAAQA,EAAOG,SAASC,cAAcJ,IAC1DK,YAAYX,KAAKY,YAG5BhB,UAAUiB,EAAIC,EAAQC,MAClB,IAAIC,EAAShB,KAAKiB,UAAUJ,GAK5B,OAJKG,IACDF,EAAOD,GAAKA,EACZG,EAASxB,EAAQa,IAAIS,EAAQC,IAE1BC,GAEXpB,UAAUiB,EAAIE,MACV,MAAMG,EAAM1B,EAAQ2B,OAAQN,GAAAA,IAAM,GAElC,OADCK,GAAOH,EAAKK,MAAQpB,KAAKqB,aAAaR,GAChCK,GAEXtB,aAAaiB,GACT,OAAOb,KAAKsB,aAAaC,OAAOvB,KAAKiB,UAAUJ,GAAMO,KAAM,MAE/DE,WAAU,IACC9B,EAEXI,YAAY4B,EAAUC,EAAUV,MAC5B,MAAMD,EAASd,KAAKiB,UAAUO,GAAYJ,KAAM,IAChD,IAAIM,EAAO,KAGX,OAFIZ,IACAY,EAAOZ,EAAOa,IAAI,cAActB,IAAIoB,EAAUV,IAC3CW,GAEX9B,YAAY4B,EAAU9B,GAClB,MAAMoB,EAASd,KAAKiB,UAAUO,GAAYJ,KAAM,IAChD,IAAIM,EAAO,KAKX,OAJIZ,IAEAY,EAAsB,IADtBA,EAAOZ,EAAOa,IAAI,cAAcR,OAAQM,SAAU/B,KACtCkC,OAAcF,EAAK,GAAKA,GAEjCA,GAEX9B,eAAe4B,EAAU9B,GACrB,MAAMmC,EAAQ7B,KAAK8B,cAAcN,GACjC,OAAOK,GAASA,EAAMN,OAAOvB,KAAK+B,YAAYP,EAAU9B,KAE5DE,cAAc4B,GACV,IAAIK,EAAQ,KACZ,MAAMf,EAASd,KAAKiB,UAAUO,GAAYJ,KAAM,IAGhD,OAFIN,IACAe,EAAQf,EAAOa,IAAI,eAChBE,GAEXjC,gBAAgBoC,EAAOC,MACnB,MAAMhC,EAAKX,EAAEW,IACPiC,QAACA,GAAWD,EACZE,EAAUH,EAAML,IAAI,WACpBd,EAAKmB,EAAMI,QACjB,GAAInC,EAAI,CACJ,MAAMJ,EAASI,EAAGN,YACZ0C,EAAKpC,EAAG0B,IAAI,eACZW,EAAOrC,EAAG0B,IAAI,eACdY,EAAKtC,EAAG0B,IAAI,mBACZa,EAASD,EAAKA,EAAG5C,eACjB8C,EAAS5C,EAAO6C,kBAAsC,GAAlBzC,EAAG0B,IAAI,SAC3CgB,EAAQR,EAAQS,eAChBC,EAAaF,EAAMf,OACnBkB,GAAcN,EAAOO,gBAAkBd,EAAQa,WAC/C/B,GAAS0B,MAAAA,GACf,IAAIO,EAEJ,GADAX,EAAGY,OACCJ,GAAcC,EAAY,CAC1B,MAAMI,EAAUjD,EAAGkD,mBACnBH,EAAOV,EAAKX,IAAIgB,EAAOF,EAAOS,KAChBhB,IACVc,EAAOV,EAAKjC,IAAIsC,EAAOF,EAAOS,SAE3BrD,EAAOuD,qBACdJ,EAAOV,EAAKe,UAAUxC,EAAIE,MAChBmB,IAAYc,EAAOV,EAAKgB,UAAUzC,KAAQE,IAChDiB,EAAMuB,GAAG,YACTP,EAAKQ,IAAI,UAAW,IAE5BR,IAAShB,EAAQgB,GACjBX,EAAGoB,QAEP,OAAOzB,GAEXpC,QAAQiB,EAAI6C,GACRnE,EAAWoE,QAAQ9C,EAAI6C,IAE3BE,QAAQ/C,GACGtB,EAAWqE,QAAQ/C,GAE9BgD,SAAQ,IACGtE,EAAWsE,WAEtBjE,WAAWiB,GAAImB,MAACA,KAAU8B,KAAEA,UACxB,MAAMC,EAAO/D,KAAK4D,QAAQ/C,GAC1B,GAAIkD,EACA,OAAO,IAAIA,EAAKD,KACZ9E,EAAMgF,OACFhC,MAAO,IAAI+B,EAAK/B,MAAMA,GACtBnC,OAAQP,GACVwE,KAIdG,UAAS,CAAC7D,EAAQW,IACPtB,EAASwE,UAAU7D,EAAQW,GAEtCmD,WAAU,IACCzE,EAAS0E,WAEpBvD,OAAM,IACKnB,EAASmB,SAASwD,GAE7BxE,aAAa4B,GACT,MAAMvB,GAACA,GAAMD,KACbC,GAAMA,EAAGoE,eAAgB7C","file":"../../style_manager/index.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    './config/config',\n    './model/Sectors',\n    './model/Properties',\n    './view/SectorsView'\n], function (langx,_, defaults, Sectors, Properties, SectorsView) {\n    'use strict';\n    return () => {\n        var c = {};\n        let properties;\n        var sectors, SectView;\n        return {\n            name: 'StyleManager',\n            getConfig() {\n                return c;\n            },\n            init(config) {\n                c = {...defaults,...config};\n                const ppfx = c.pStylePrefix;\n                this.em = c.em;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                properties = new Properties();\n                sectors = new Sectors([], c);\n                SectView = new SectorsView({\n                    collection: sectors,\n                    target: c.em,\n                    config: c\n                });\n                return this;\n            },\n            onLoad() {\n                sectors.add(c.sectors);\n            },\n            postRender() {\n                const elTo = this.getConfig().appendTo;\n                if (elTo) {\n                    const el = _.isElement(elTo) ? elTo : document.querySelector(elTo);\n                    el.appendChild(this.render());\n                }\n            },\n            addSector(id, sector, opts = {}) {\n                let result = this.getSector(id);\n                if (!result) {\n                    sector.id = id;\n                    result = sectors.add(sector, opts);\n                }\n                return result;\n            },\n            getSector(id, opts = {}) {\n                const res = sectors.where({ id })[0];\n                !res && opts.warn && this._logNoSector(id);\n                return res;\n            },\n            removeSector(id) {\n                return this.getSectors().remove(this.getSector(id, { warn: 1 }));\n            },\n            getSectors() {\n                return sectors;\n            },\n            addProperty(sectorId, property, opts = {}) {\n                const sector = this.getSector(sectorId, { warn: 1 });\n                let prop = null;\n                if (sector)\n                    prop = sector.get('properties').add(property, opts);\n                return prop;\n            },\n            getProperty(sectorId, name) {\n                const sector = this.getSector(sectorId, { warn: 1 });\n                let prop = null;\n                if (sector) {\n                    prop = sector.get('properties').where({ property: name });\n                    prop = prop.length == 1 ? prop[0] : prop;\n                }\n                return prop;\n            },\n            removeProperty(sectorId, name) {\n                const props = this.getProperties(sectorId);\n                return props && props.remove(this.getProperty(sectorId, name));\n            },\n            getProperties(sectorId) {\n                let props = null;\n                const sector = this.getSector(sectorId, { warn: 1 });\n                if (sector)\n                    props = sector.get('properties');\n                return props;\n            },\n            getModelToStyle(model, options = {}) {\n                const em = c.em;\n                const {skipAdd} = options;\n                const classes = model.get('classes');\n                const id = model.getId();\n                if (em) {\n                    const config = em.getConfig();\n                    const um = em.get('UndoManager');\n                    const cssC = em.get('CssComposer');\n                    const sm = em.get('SelectorManager');\n                    const smConf = sm ? sm.getConfig() : {};\n                    const state = !config.devicePreviewMode ? em.get('state') : '';\n                    const valid = classes.getStyleable();\n                    const hasClasses = valid.length;\n                    const useClasses = !smConf.componentFirst || options.useClasses;\n                    const opts = { state };\n                    let rule;\n                    um.stop();\n                    if (hasClasses && useClasses) {\n                        const deviceW = em.getCurrentMedia();\n                        rule = cssC.get(valid, state, deviceW);\n                        if (!rule && !skipAdd) {\n                            rule = cssC.add(valid, state, deviceW);\n                        }\n                    } else if (config.avoidInlineStyle) {\n                        rule = cssC.getIdRule(id, opts);\n                        !rule && !skipAdd && (rule = cssC.setIdRule(id, {}, opts));\n                        if (model.is('wrapper'))\n                            rule.set('wrapper', 1);\n                    }\n                    rule && (model = rule);\n                    um.start();\n                }\n                return model;\n            },\n            addType(id, definition) {\n                properties.addType(id, definition);\n            },\n            getType(id) {\n                return properties.getType(id);\n            },\n            getTypes() {\n                return properties.getTypes();\n            },\n            createType(id, {model = {}, view = {}} = {}) {\n                const type = this.getType(id);\n                if (type) {\n                    return new type.view(\n                        langx.mixin({\n                            model: new type.model(model),\n                            config: c,\n                        },view)\n                    );\n                }\n            },\n            setTarget(target, opts) {\n                return SectView.setTarget(target, opts);\n            },\n            getEmitter() {\n                return SectView.propTarget;\n            },\n            render() {\n                return SectView.render().el;\n            },\n            _logNoSector(sectorId) {\n                const {em} = this;\n                em && em.logWarning(`'${ sectorId }' sector not found`);\n            }\n        };\n    };\n});"]}