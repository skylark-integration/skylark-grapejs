{"version":3,"sources":["style_manager/model/Layer.js"],"names":["define","Backbone","Properties","Model","extend","defaults","index","value","values","active","preview","properties","[object Object]","prp","this","get","set","props","forEach","onPropAdd","listenTo","val","prop","trim","coll","collection","parent","property","at","result","each","getFullValue","push","join"],"mappings":";;;;;;;AAAAA,QACI,mBACA,gBACD,SAAUC,EAAUC,GACnB,aACA,OAAOD,EAASE,MAAMC,QAClBC,UACIC,MAAO,GACPC,MAAO,GACPC,UACAC,QAAQ,EACRC,SAAS,EACTC,eAEJC,aACI,MAAMC,EAAMC,KAAKC,IAAI,cACrB,IAAIR,EAAQO,KAAKC,IAAI,SACrBD,KAAKE,IAAI,aAAcH,aAAeX,EAAaW,EAAM,IAAIX,EAAWW,IACxE,MAAMI,EAAQH,KAAKC,IAAI,cAGvB,GAFAE,EAAMC,QAAQJ,KAAKK,UAAWL,MAC9BA,KAAKM,SAASH,EAAO,MAAOH,KAAKK,YAC5BZ,EAAO,CACR,IAAIc,EAAM,GACNb,EAASM,KAAKC,IAAI,UACtB,IAAK,IAAIO,KAAQd,EACba,GAAO,IAAMb,EAAOc,GAExBR,KAAKE,IAAI,QAASK,EAAIE,UAG9BX,UAAUU,GACN,MAAME,EAAOV,KAAKW,WAClBH,EAAKI,OAASF,GAAQA,EAAKG,UAE/Bf,cAAcN,GACV,OAAOQ,KAAKC,IAAI,cAAca,GAAGtB,IAErCM,iBAAiBe,GACb,IAAIE,EAAS,GAMb,OALAf,KAAKC,IAAI,cAAce,KAAKR,IACpBA,EAAKP,IAAI,aAAeY,IACxBE,EAASP,EAAKS,kBAGfF,GAEXjB,eACI,IAAIiB,KAEJ,OADAf,KAAKC,IAAI,cAAce,KAAKR,GAAQO,EAAOG,KAAKV,EAAKS,iBAC9CF,EAAOI,KAAK,KAAKV","file":"../../../style_manager/model/Layer.js","sourcesContent":["define([\n    'skylark-backbone',\n    './Properties'\n], function (Backbone, Properties) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            index: '',\n            value: '',\n            values: {},\n            active: false,\n            preview: false,\n            properties: []\n        },\n        initialize() {\n            const prp = this.get('properties');\n            var value = this.get('value');\n            this.set('properties', prp instanceof Properties ? prp : new Properties(prp));\n            const props = this.get('properties');\n            props.forEach(this.onPropAdd, this);\n            this.listenTo(props, 'add', this.onPropAdd);\n            if (!value) {\n                var val = '';\n                var values = this.get('values');\n                for (var prop in values) {\n                    val += ' ' + values[prop];\n                }\n                this.set('value', val.trim());\n            }\n        },\n        onPropAdd(prop) {\n            const coll = this.collection;\n            prop.parent = coll && coll.property;\n        },\n        getPropertyAt(index) {\n            return this.get('properties').at(index);\n        },\n        getPropertyValue(property) {\n            let result = '';\n            this.get('properties').each(prop => {\n                if (prop.get('property') == property) {\n                    result = prop.getFullValue();\n                }\n            });\n            return result;\n        },\n        getFullValue() {\n            let result = [];\n            this.get('properties').each(prop => result.push(prop.getFullValue()));\n            return result.join(' ').trim();\n        }\n    });\n});"]}