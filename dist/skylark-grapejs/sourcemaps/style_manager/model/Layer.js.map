{"version":3,"sources":["style_manager/model/Layer.js"],"names":["define","Backbone","Layer","Model","extend","defaults","index","value","values","active","preview","properties","[object Object]","prp","this","get","set","Properties","props","forEach","onPropAdd","listenTo","val","prop","trim","coll","collection","parent","property","at","result","each","getFullValue","push","join"],"mappings":";;;;;;;AAAAA,QACI,oBACD,SAAUC,GACT,aACA,IAAIC,EAAQD,EAASE,MAAMC,QACvBC,UACIC,MAAO,GACPC,MAAO,GACPC,UACAC,QAAQ,EACRC,SAAS,EACTC,eAEJC,aACI,MAAMC,EAAMC,KAAKC,IAAI,cACrB,IAAIR,EAAQO,KAAKC,IAAI,SACrBD,KAAKE,IAAI,aAAcH,aAAeX,EAAMe,WAAaJ,EAAM,IAAIX,EAAMe,WAAWJ,IACpF,MAAMK,EAAQJ,KAAKC,IAAI,cAGvB,GAFAG,EAAMC,QAAQL,KAAKM,UAAWN,MAC9BA,KAAKO,SAASH,EAAO,MAAOJ,KAAKM,YAC5Bb,EAAO,CACR,IAAIe,EAAM,GACNd,EAASM,KAAKC,IAAI,UACtB,IAAK,IAAIQ,KAAQf,EACbc,GAAO,IAAMd,EAAOe,GAExBT,KAAKE,IAAI,QAASM,EAAIE,UAG9BZ,UAAUW,GACN,MAAME,EAAOX,KAAKY,WAClBH,EAAKI,OAASF,GAAQA,EAAKG,UAE/BhB,cAAcN,GACV,OAAOQ,KAAKC,IAAI,cAAcc,GAAGvB,IAErCM,iBAAiBgB,GACb,IAAIE,EAAS,GAMb,OALAhB,KAAKC,IAAI,cAAcgB,KAAKR,IACpBA,EAAKR,IAAI,aAAea,IACxBE,EAASP,EAAKS,kBAGfF,GAEXlB,eACI,IAAIkB,KAEJ,OADAhB,KAAKC,IAAI,cAAcgB,KAAKR,GAAQO,EAAOG,KAAKV,EAAKS,iBAC9CF,EAAOI,KAAK,KAAKV,UAIhC,OAAOtB","file":"../../../style_manager/model/Layer.js","sourcesContent":["define([\n    'skylark-backbone'\n], function (Backbone) {\n    'use strict';\n    var Layer = Backbone.Model.extend({\n        defaults: {\n            index: '',\n            value: '',\n            values: {},\n            active: false,\n            preview: false,\n            properties: []\n        },\n        initialize() {\n            const prp = this.get('properties');\n            var value = this.get('value');\n            this.set('properties', prp instanceof Layer.Properties ? prp : new Layer.Properties(prp));\n            const props = this.get('properties');\n            props.forEach(this.onPropAdd, this);\n            this.listenTo(props, 'add', this.onPropAdd);\n            if (!value) {\n                var val = '';\n                var values = this.get('values');\n                for (var prop in values) {\n                    val += ' ' + values[prop];\n                }\n                this.set('value', val.trim());\n            }\n        },\n        onPropAdd(prop) {\n            const coll = this.collection;\n            prop.parent = coll && coll.property;\n        },\n        getPropertyAt(index) {\n            return this.get('properties').at(index);\n        },\n        getPropertyValue(property) {\n            let result = '';\n            this.get('properties').each(prop => {\n                if (prop.get('property') == property) {\n                    result = prop.getFullValue();\n                }\n            });\n            return result;\n        },\n        getFullValue() {\n            let result = [];\n            this.get('properties').each(prop => result.push(prop.getFullValue()));\n            return result.join(' ').trim();\n        }\n    });\n\n    return Layer;\n});"]}