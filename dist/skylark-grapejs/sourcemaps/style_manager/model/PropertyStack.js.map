{"version":3,"sources":["style_manager/model/PropertyStack.js"],"names":["define","langx","Property","Layers","extend","defaults","mixin","prototype","layers","layerSeparator","prepend","preview","[object Object]","props","opts","callParentInit","this","get","layersColl","property","properties","set","callInit","getLayers","filter","layer","getFullValue","styles","getLayersFromStyle","reset","clearValue","apply","arguments","target"],"mappings":";;;;;;;AAAAA,QACI,sBACA,sBACA,YACD,SAAUC,EAAMC,EAAUC,GACzB,aACA,OAAOD,EAASE,QACZC,SAAUJ,EAAMK,YACTJ,EAASK,UAAUF,UACtBG,UACAC,eAAgB,KAChBC,QAAS,EACTC,QAAS,IAEbC,WAAWC,KAAYC,MACnBZ,EAASa,eAAeb,EAAUc,KAAMH,EAAOC,GAC/C,MAAMN,EAASQ,KAAKC,IAAI,UAClBC,EAAa,IAAIf,EAAOK,GAC9BU,EAAWC,SAAWH,KACtBE,EAAWE,WAAaJ,KAAKC,IAAI,cACjCD,KAAKK,IAAI,SAAUH,GACnBhB,EAASoB,SAASN,KAAMH,EAAOC,IAEnCF,YACI,OAAOI,KAAKC,IAAI,WAEpBL,kBACI,OAAOI,KAAKO,YAAYC,OAAOC,GAASA,EAAMR,IAAI,WAAW,IAEjEL,eACI,OAAOI,KAAKC,IAAI,YAAc,GAAKD,KAAKC,IAAI,UAAUS,gBAE1Dd,kBAAkBe,MACd,MAAMnB,EAASQ,KAAKO,YAAYK,mBAAmBD,GACnD,OAAO,IAAIxB,EAAOK,GAAQkB,gBAE9Bd,aAEI,OADAI,KAAKO,YAAYM,QACV3B,EAASK,UAAUuB,WAAWC,MAAMf,KAAMgB,YAErDpB,oBAAoBqB","file":"../../../style_manager/model/PropertyStack.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    './PropertyComposite',\n    './Layers'\n], function (langx,Property, Layers) {\n    'use strict';\n    return Property.extend({\n        defaults: langx.mixin({},\n            ...Property.prototype.defaults,{\n            layers: [],\n            layerSeparator: ', ',\n            prepend: 0,\n            preview: 0\n        }),\n        initialize(props = {}, opts = {}) {\n            Property.callParentInit(Property, this, props, opts);\n            const layers = this.get('layers');\n            const layersColl = new Layers(layers);\n            layersColl.property = this;\n            layersColl.properties = this.get('properties');\n            this.set('layers', layersColl);\n            Property.callInit(this, props, opts);\n        },\n        getLayers() {\n            return this.get('layers');\n        },\n        getCurrentLayer() {\n            return this.getLayers().filter(layer => layer.get('active'))[0];\n        },\n        getFullValue() {\n            return this.get('detached') ? '' : this.get('layers').getFullValue();\n        },\n        getValueFromStyle(styles = {}) {\n            const layers = this.getLayers().getLayersFromStyle(styles);\n            return new Layers(layers).getFullValue();\n        },\n        clearValue() {\n            this.getLayers().reset();\n            return Property.prototype.clearValue.apply(this, arguments);\n        },\n        getLayersFromTarget(target) {\n            return;\n        }\n    });\n});"]}