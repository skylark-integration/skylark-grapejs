{"version":3,"sources":["style_manager/model/PropertyComposite.js"],"names":["define","langx","Property","PropertyComposite","extend","defaults","prototype","detached","properties","separator","[object Object]","props","opts","callParentInit","this","get","set","Properties","listenTo","updateValues","callInit","each","property","clearValue","apply","arguments","values","getFullValue","split","getSplitSeparator","i","len","length","RegExp","defaultProps","value","prop","index","getDefaultValue","trim","at"],"mappings":";;;;;;;AAAAA,QACI,sBACA,cACD,SACCC,EACAC,GAEA,aACA,IAAIC,EAAoBD,EAASE,QAC7BC,aACOH,EAASI,UAAUD,SACtBE,SAAU,EACVC,cACAC,UAAW,KAEfC,WAAWC,KAAYC,MACnBV,EAASW,eAAeX,EAAUY,KAAMH,EAAOC,GAC/C,MAAMJ,EAAaM,KAAKC,IAAI,kBAE5BD,KAAKE,IAAI,aAAc,IAAIb,EAAkBc,WAAWT,IACxDM,KAAKI,SAASJ,KAAM,eAAgBA,KAAKK,cACzCjB,EAASkB,SAASN,KAAMH,EAAOC,IAEnCF,WAAWE,MAEP,OADAE,KAAKC,IAAI,cAAcM,KAAKC,GAAYA,EAASC,cAC1CrB,EAASI,UAAUiB,WAAWC,MAAMV,KAAMW,YAErDf,eACI,MAAMgB,EAASZ,KAAKa,eAAeC,MAAMd,KAAKe,qBAC9Cf,KAAKC,IAAI,cAAcM,KAAK,CAACC,EAAUQ,KACnC,MAAMC,EAAML,EAAOM,OACLN,EAAOI,IAAMJ,EAAOI,EAAIC,GAAc,GAAPA,GAAYA,EAAM,EAAI,EAAI,OAG/ErB,oBACI,OAAO,IAAIuB,UAAWnB,KAAKC,IAAI,+BAEnCL,gBAAgBwB,GACZ,IAAIC,EAAQrB,KAAKC,IAAI,YACrB,GAAIoB,IAAUD,EACV,OAAOC,EAKX,OAHAA,EAAQ,GACWrB,KAAKC,IAAI,cACjBM,KAAK,CAACe,EAAMC,IAAUF,MAAaC,EAAKE,sBAC5CH,EAAMI,QAEjB7B,eACI,OAAII,KAAKC,IAAI,YACF,GAEJD,KAAKC,IAAI,cAAcY,gBAElCjB,cAAc2B,GACV,OAAOvB,KAAKC,IAAI,cAAcyB,GAAGH,MAIzC,OAAOlC","file":"../../../style_manager/model/PropertyComposite.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    './Property'\n], function (\n    langx,\n    Property\n) {\n    'use strict';\n    var PropertyComposite = Property.extend({\n        defaults: {\n            ...Property.prototype.defaults,\n            detached: 0,\n            properties: [],\n            separator: ' '\n        },\n        initialize(props = {}, opts = {}) {\n            Property.callParentInit(Property, this, props, opts);\n            const properties = this.get('properties') || [];\n            //const Properties = require('./Properties').default; // modified by lwf\n            this.set('properties', new PropertyComposite.Properties(properties));\n            this.listenTo(this, 'change:value', this.updateValues);\n            Property.callInit(this, props, opts);\n        },\n        clearValue(opts = {}) {\n            this.get('properties').each(property => property.clearValue());\n            return Property.prototype.clearValue.apply(this, arguments);\n        },\n        updateValues() {\n            const values = this.getFullValue().split(this.getSplitSeparator());\n            this.get('properties').each((property, i) => {\n                const len = values.length;\n                const value = values[i] || values[i % len + (len != 1 && len % 2 ? 1 : 0)];\n            });\n        },\n        getSplitSeparator() {\n            return new RegExp(`${ this.get('separator') }(?![^\\\\(]*\\\\))`);\n        },\n        getDefaultValue(defaultProps) {\n            let value = this.get('defaults');\n            if (value && !defaultProps) {\n                return value;\n            }\n            value = '';\n            const properties = this.get('properties');\n            properties.each((prop, index) => value += `${ prop.getDefaultValue() } `);\n            return value.trim();\n        },\n        getFullValue() {\n            if (this.get('detached')) {\n                return '';\n            }\n            return this.get('properties').getFullValue();\n        },\n        getPropertyAt(index) {\n            return this.get('properties').at(index);\n        }\n    });\n\n    return PropertyComposite;\n});"]}