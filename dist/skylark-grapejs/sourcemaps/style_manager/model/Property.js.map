{"version":3,"sources":["style_manager/model/Property.js"],"names":["define","langx","Backbone","a","b","Property","Model","extend","defaults","name","property","type","info","value","icon","functionName","status","visible","fixedValues","full","important","toRequire","requires","requiresParent","[object Object]","props","opts","id","this","get","set","replace","prop","capitalize","callInit","undefined","complete","parsed","parseValue","mixin","avoidStore","setValue","fromInput","result","imp","isString","indexOf","trim","args","valueStr","start","end","lastIndexOf","substring","push","String","prototype","apply","numeric","num","parseFloat","unit","values","separator","res","curr","acc","split","forEach","str","map","i","val","fn","def","getDefaultValue","isUndefined","hasValue","ctx","initialize","skipInit","context","init"],"mappings":";;;;;;;AAAAA,QACI,sBACA,mBACA,qBACA,sBACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,MAAMC,EAAWH,EAASI,MAAMC,QAC5BC,UACIC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNH,SAAU,GACVI,KAAM,GACNC,MAAO,GACPC,KAAM,GACNC,aAAc,GACdC,OAAQ,GACRC,SAAS,EACTC,aACI,UACA,WAEJC,KAAM,EACNC,UAAW,EACXC,UAAW,EACXC,SAAU,KACVC,eAAgB,MAEpBC,WAAWC,KAAYC,MACnB,MAAMC,EAAKC,KAAKC,IAAI,OAAS,GACvBpB,EAAOmB,KAAKC,IAAI,SAAW,IAChCD,KAAKC,IAAI,aAAeD,KAAKE,IAAI,YAAarB,GAAQkB,GAAII,QAAQ,KAAM,MACzE,MAAMC,EAAOJ,KAAKC,IAAI,aACrBD,KAAKC,IAAI,OAASD,KAAKE,IAAI,KAAME,IACjCvB,GAAQmB,KAAKE,IAAI,OAAQ1B,EAAE6B,WAAWD,GAAMD,QAAQ,KAAM,MAC3D1B,EAAS6B,SAASN,KAAMH,EAAOC,IAEnCF,SAEAA,WAAWE,MAKP,OAJAE,KAAKE,KACDjB,WAAOsB,EACPnB,OAAQ,IACTU,GACIE,MAEXJ,SAASX,EAAOuB,EAAW,EAAGV,MAC1B,MAAMW,EAAST,KAAKU,WAAWzB,GAC/Be,KAAKE,IAAIO,EAAQpC,EAAMsC,SAASb,GAC5Bc,YAAaJ,MAGrBZ,kBAAkBX,EAAOuB,EAAUV,MAC/BE,KAAKa,SAAS5B,EAAOuB,EAAUnC,EAAMsC,SAASb,GAC1CgB,UAAW,MAGnBlB,WAAWX,EAAOa,MACd,MAAMiB,GAAW9B,MAAAA,GACX+B,EAAM,aAKZ,GAJIzC,EAAE0C,SAAShC,KAAkC,IAAxBA,EAAMiC,QAAQF,KACnCD,EAAO9B,MAAQA,EAAMkB,QAAQa,EAAK,IAAIG,OACtCJ,EAAOvB,UAAY,IAElBQ,KAAKC,IAAI,kBAAoBH,EAAKU,SACnC,OAAOO,EAEX,MAAMK,KACN,IAAIC,KAAeN,EAAO9B,QACtBqC,EAAQD,EAASH,QAAQ,KAAO,EAChCK,EAAMF,EAASG,YAAY,KAC/B,MAAMrC,EAAekC,EAASI,UAAU,EAAGH,EAAQ,GAQnD,GAPInC,IACA4B,EAAO5B,aAAeA,GAC1BiC,EAAKM,KAAKJ,GACNC,GAAO,GACPH,EAAKM,KAAKH,GAEdR,EAAO9B,MAAQ0C,OAAOC,UAAUH,UAAUI,MAAMR,EAAUD,GACtDtB,EAAKgC,QAAS,CACd,MAAMC,EAAMC,WAAWjB,EAAO9B,OAC9B8B,EAAOkB,KAAOlB,EAAO9B,MAAMkB,QAAQ4B,EAAK,IACxChB,EAAO9B,MAAQ8C,EAEnB,OAAOhB,GAEXnB,YAAYsC,EAAQC,EAAY,KAC5B,MAAMC,KAGN,IAAIC,EAAO,GACPC,EAAM,EAgBV,OAfCJ,GAAU,IAAIK,MAAM,IAAIC,QAAQC,IAJtB,KAKHA,GACAH,IACAD,GAPG,KACA,KAOII,GAAaH,EAAM,GAC1BA,IACAD,GATG,KAUII,IAAQN,GAAoB,GAAPG,GAC5BF,EAAIV,KAAKW,GACTA,EAAO,IAEPA,GAAcI,IAGb,KAATJ,GAAeD,EAAIV,KAAKW,GACjBD,EAAIM,IAAIC,GAAKA,EAAExB,SAE1BvB,kBACI,OAAOI,KAAKC,IAAI,aAEpBL,aAAagD,GACT,MAAMC,EAAK7C,KAAKC,IAAI,gBACd6C,EAAM9C,KAAK+C,kBACjB,IAAI9D,EAAQV,EAAEyE,YAAYJ,GAAO5C,KAAKC,IAAI,SAAW2C,EACrD,MAAMK,GAAY1E,EAAEyE,YAAY/D,IAAoB,KAAVA,EAC1C,OAAIA,GAAS6D,GAAO7D,IAAU6D,EACnBA,GAEPD,GAAMI,IACNhE,KAAY4D,KAAQ5D,MAEpBgE,GAAYjD,KAAKC,IAAI,eACrBhB,KAAYA,gBAETA,GAAS,OAGpBW,eAAed,EAAUoE,EAAKrD,EAAOC,MACjChB,EAAS8C,UAAUuB,WAAWtB,MAAMqB,GAChCrD,EACAxB,EAAMsC,SAASb,GACXsD,SAAU,OAItBxD,SAASyD,EAASxD,EAAOC,OACpBA,EAAKsD,UAAYC,EAAQC,KAAKzD,EAAOC,MAG9C,OAAOrB","file":"../../../style_manager/model/Property.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins'\n], function (\n    langx,\n    Backbone, \n    a, \n    b\n) {\n    'use strict';\n    const Property = Backbone.Model.extend({\n        defaults: {\n            name: '',\n            property: '',\n            type: '',\n            defaults: '',\n            info: '',\n            value: '',\n            icon: '',\n            functionName: '',\n            status: '',\n            visible: true,\n            fixedValues: [\n                'initial',\n                'inherit'\n            ],\n            full: 0,\n            important: 0,\n            toRequire: 0,\n            requires: null,\n            requiresParent: null\n        },\n        initialize(props = {}, opts = {}) {\n            const id = this.get('id') || '';\n            const name = this.get('name') || '';\n            !this.get('property') && this.set('property', (name || id).replace(/ /g, '-'));\n            const prop = this.get('property');\n            !this.get('id') && this.set('id', prop);\n            !name && this.set('name', b.capitalize(prop).replace(/-/g, ' '));\n            Property.callInit(this, props, opts);\n        },\n        init() {\n        },\n        clearValue(opts = {}) {\n            this.set({\n                value: undefined,\n                status: ''\n            }, opts);\n            return this;\n        },\n        setValue(value, complete = 1, opts = {}) {\n            const parsed = this.parseValue(value);\n            this.set(parsed, langx.mixin({},opts,{\n                avoidStore: !complete\n            }));\n        },\n        setValueFromInput(value, complete, opts = {}) {\n            this.setValue(value, complete, langx.mixin({},opts,{\n                fromInput: 1\n            }));\n        },\n        parseValue(value, opts = {}) {\n            const result = { value };\n            const imp = '!important';\n            if (a.isString(value) && value.indexOf(imp) !== -1) {\n                result.value = value.replace(imp, '').trim();\n                result.important = 1;\n            }\n            if (!this.get('functionName') && !opts.complete) {\n                return result;\n            }\n            const args = [];\n            let valueStr = `${ result.value }`;\n            let start = valueStr.indexOf('(') + 1;\n            let end = valueStr.lastIndexOf(')');\n            const functionName = valueStr.substring(0, start - 1);\n            if (functionName)\n                result.functionName = functionName;\n            args.push(start);\n            if (end >= 0) {\n                args.push(end);\n            }\n            result.value = String.prototype.substring.apply(valueStr, args);\n            if (opts.numeric) {\n                const num = parseFloat(result.value);\n                result.unit = result.value.replace(num, '');\n                result.value = num;\n            }\n            return result;\n        },\n        splitValues(values, separator = ',') {\n            const res = [];\n            const op = '(';\n            const cl = ')';\n            let curr = '';\n            let acc = 0;\n            (values || '').split('').forEach(str => {\n                if (str == op) {\n                    acc++;\n                    curr = curr + op;\n                } else if (str == cl && acc > 0) {\n                    acc--;\n                    curr = curr + cl;\n                } else if (str === separator && acc == 0) {\n                    res.push(curr);\n                    curr = '';\n                } else {\n                    curr = curr + str;\n                }\n            });\n            curr !== '' && res.push(curr);\n            return res.map(i => i.trim());\n        },\n        getDefaultValue() {\n            return this.get('defaults');\n        },\n        getFullValue(val) {\n            const fn = this.get('functionName');\n            const def = this.getDefaultValue();\n            let value = a.isUndefined(val) ? this.get('value') : val;\n            const hasValue = !a.isUndefined(value) && value !== '';\n            if (value && def && value === def) {\n                return def;\n            }\n            if (fn && hasValue) {\n                value = `${ fn }(${ value })`;\n            }\n            if (hasValue && this.get('important')) {\n                value = `${ value } !important`;\n            }\n            return value || '';\n        }\n    }, {\n        callParentInit(property, ctx, props, opts = {}) {\n            property.prototype.initialize.apply(ctx, [\n                props,\n                langx.mixin({},opts,{\n                    skipInit: 1\n                })\n            ]);\n        },\n        callInit(context, props, opts = {}) {\n            !opts.skipInit && context.init(props, opts);\n        }\n    });\n    return Property;\n});"]}