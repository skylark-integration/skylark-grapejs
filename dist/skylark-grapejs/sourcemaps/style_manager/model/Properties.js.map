{"version":3,"sources":["style_manager/model/Properties.js"],"names":["define","langx","Backbone","TypeableCollection","Property","PropertyStack","PropertyStackView","PropertyComposite","PropertyCompositeView","PropertyFileView","PropertyColorView","PropertySelect","PropertySelectView","PropertyRadio","PropertyRadioView","PropertySlider","PropertySliderView","PropertyInteger","PropertyIntegerView","PropertyView","Collection","extend","types","id","model","view","[object Object]","value","type","isType","collection","this","clone","reset","map","cloned","typeView","properties","split","forEach","i","property","at","push","mixin","attributes","result","each","getFullValue","trim"],"mappings":";;;;;;;AAAAA,QACI,sBACA,mBACA,iDACA,aACA,kBACA,8BACA,sBACA,kCACA,6BACA,8BACA,mBACA,+BACA,kBACA,8BACA,mBACA,+BACA,oBACA,gCACA,0BACD,SAAUC,EAAMC,EAAUC,EAAoBC,EAAUC,EAAeC,EAAmBC,EAAmBC,EAAuBC,EAAkBC,EAAmBC,EAAgBC,EAAoBC,EAAeC,EAAmBC,EAAgBC,EAAoBC,EAAiBC,EAAqBC,GACxT,aACA,OAAOjB,EAASkB,WAAWC,OAAOlB,GAAoBkB,QAClDC,QAEQC,GAAI,QACJC,MAAOnB,EACPoB,KAAMnB,EACNoB,OAAOC,GACH,GAAIA,GAAuB,SAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,YACJC,MAAOjB,EACPkB,KAAMjB,EACNkB,OAAOC,GACH,GAAIA,GAAuB,aAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,OACJC,MAAOpB,EACPqB,KAAMhB,EACNiB,OAAOC,GACH,GAAIA,GAAuB,QAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,QACJC,MAAOpB,EACPqB,KAAMf,EACNgB,OAAOC,GACH,GAAIA,GAAuB,SAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,SACJC,MAAOb,EACPc,KAAMb,EACNc,OAAOC,GACH,GAAIA,GAAuB,UAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,QACJC,MAAOX,EACPY,KAAMX,EACNY,OAAOC,GACH,GAAIA,GAAuB,SAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,SACJC,MAAOT,EACPU,KAAMT,EACNU,OAAOC,GACH,GAAIA,GAAuB,UAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,UACJC,MAAOP,EACPQ,KAAMP,EACNQ,OAAOC,GACH,GAAIA,GAAuB,WAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,OACJC,MAAOpB,EACPqB,KAAMN,EACNU,OAAOF,IACHA,EAAMC,KAAO,OACND,KAInBD,YACI,MAAMI,EAAaC,KAAKC,QAMxB,OALAF,EAAWG,MAAMH,EAAWI,IAAIV,IAC5B,MAAMW,EAASX,EAAMQ,QAErB,OADAG,EAAOC,SAAWZ,EAAMY,SACjBD,KAEJL,GAEXJ,WAAWC,GACP,MAAMU,KAQN,OAPeV,EAAMW,MAAM,KACpBC,QAAQ,CAACZ,EAAOa,KACnB,MAAMC,EAAWV,KAAKW,GAAGF,GACpBC,GAELJ,EAAWM,KAAK1C,EAAM2C,SAASH,EAASI,YAAalB,MAAAA,OAElDU,GAEXX,eACI,IAAIoB,EAAS,GAEb,OADAf,KAAKgB,KAAKvB,GAASsB,MAActB,EAAMwB,mBAChCF,EAAOG","file":"../../../style_manager/model/Properties.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    '../../domain_abstract/model/TypeableCollection',\n    './Property',\n    './PropertyStack',\n    './../view/PropertyStackView',\n    './PropertyComposite',\n    './../view/PropertyCompositeView',\n    './../view/PropertyFileView',\n    './../view/PropertyColorView',\n    './PropertySelect',\n    './../view/PropertySelectView',\n    './PropertyRadio',\n    './../view/PropertyRadioView',\n    './PropertySlider',\n    './../view/PropertySliderView',\n    './PropertyInteger',\n    './../view/PropertyIntegerView',\n    './../view/PropertyView'\n], function (langx,Backbone, TypeableCollection, Property, PropertyStack, PropertyStackView, PropertyComposite, PropertyCompositeView, PropertyFileView, PropertyColorView, PropertySelect, PropertySelectView, PropertyRadio, PropertyRadioView, PropertySlider, PropertySliderView, PropertyInteger, PropertyIntegerView, PropertyView) {\n    'use strict';\n    return Backbone.Collection.extend(TypeableCollection).extend({\n        types: [\n            {\n                id: 'stack',\n                model: PropertyStack,\n                view: PropertyStackView,\n                isType(value) {\n                    if (value && value.type == 'stack') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'composite',\n                model: PropertyComposite,\n                view: PropertyCompositeView,\n                isType(value) {\n                    if (value && value.type == 'composite') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'file',\n                model: Property,\n                view: PropertyFileView,\n                isType(value) {\n                    if (value && value.type == 'file') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'color',\n                model: Property,\n                view: PropertyColorView,\n                isType(value) {\n                    if (value && value.type == 'color') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'select',\n                model: PropertySelect,\n                view: PropertySelectView,\n                isType(value) {\n                    if (value && value.type == 'select') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'radio',\n                model: PropertyRadio,\n                view: PropertyRadioView,\n                isType(value) {\n                    if (value && value.type == 'radio') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'slider',\n                model: PropertySlider,\n                view: PropertySliderView,\n                isType(value) {\n                    if (value && value.type == 'slider') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'integer',\n                model: PropertyInteger,\n                view: PropertyIntegerView,\n                isType(value) {\n                    if (value && value.type == 'integer') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'base',\n                model: Property,\n                view: PropertyView,\n                isType(value) {\n                    value.type = 'base';\n                    return value;\n                }\n            }\n        ],\n        deepClone() {\n            const collection = this.clone();\n            collection.reset(collection.map(model => {\n                const cloned = model.clone();\n                cloned.typeView = model.typeView;\n                return cloned;\n            }));\n            return collection;\n        },\n        parseValue(value) {\n            const properties = [];\n            const values = value.split(' ');\n            values.forEach((value, i) => {\n                const property = this.at(i);\n                if (!property)\n                    return;\n                properties.push(langx.mixin({},property.attributes,{ value }));\n            });\n            return properties;\n        },\n        getFullValue() {\n            let result = '';\n            this.each(model => result += `${ model.getFullValue() } `);\n            return result.trim();\n        }\n    });\n});"]}