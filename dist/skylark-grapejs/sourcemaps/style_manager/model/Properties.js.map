{"version":3,"sources":["style_manager/model/Properties.js"],"names":["define","langx","Backbone","TypeableCollection","Property","PropertyStack","PropertyStackView","PropertyComposite","PropertyCompositeView","PropertyFileView","PropertyColorView","PropertySelect","PropertySelectView","PropertyRadio","PropertyRadioView","PropertySlider","PropertySliderView","PropertyInteger","PropertyIntegerView","PropertyView","Layer","Properties","Collection","extend","types","id","model","view","[object Object]","value","type","isType","collection","this","clone","reset","map","cloned","typeView","properties","split","forEach","i","property","at","push","mixin","attributes","result","each","getFullValue","trim"],"mappings":";;;;;;;AAAAA,QACI,sBACA,mBACA,iDACA,aACA,kBACA,8BACA,sBACA,kCACA,6BACA,8BACA,mBACA,+BACA,kBACA,8BACA,mBACA,+BACA,oBACA,gCACA,yBACA,WACD,SACCC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAanB,EAASoB,WAAWC,OAAOpB,GAAoBoB,QAC5DC,QAEQC,GAAI,QACJC,MAAOrB,EACPsB,KAAMrB,EACNsB,OAAOC,GACH,GAAIA,GAAuB,SAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,YACJC,MAAOnB,EACPoB,KAAMnB,EACNoB,OAAOC,GACH,GAAIA,GAAuB,aAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,OACJC,MAAOtB,EACPuB,KAAMlB,EACNmB,OAAOC,GACH,GAAIA,GAAuB,QAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,QACJC,MAAOtB,EACPuB,KAAMjB,EACNkB,OAAOC,GACH,GAAIA,GAAuB,SAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,SACJC,MAAOf,EACPgB,KAAMf,EACNgB,OAAOC,GACH,GAAIA,GAAuB,UAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,QACJC,MAAOb,EACPc,KAAMb,EACNc,OAAOC,GACH,GAAIA,GAAuB,SAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,SACJC,MAAOX,EACPY,KAAMX,EACNY,OAAOC,GACH,GAAIA,GAAuB,UAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,UACJC,MAAOT,EACPU,KAAMT,EACNU,OAAOC,GACH,GAAIA,GAAuB,WAAdA,EAAMC,KACf,OAAOD,KAKfJ,GAAI,OACJC,MAAOtB,EACPuB,KAAMR,EACNY,OAAOF,IACHA,EAAMC,KAAO,OACND,KAInBD,YACI,MAAMI,EAAaC,KAAKC,QAMxB,OALAF,EAAWG,MAAMH,EAAWI,IAAIV,IAC5B,MAAMW,EAASX,EAAMQ,QAErB,OADAG,EAAOC,SAAWZ,EAAMY,SACjBD,KAEJL,GAEXJ,WAAWC,GACP,MAAMU,KAQN,OAPeV,EAAMW,MAAM,KACpBC,QAAQ,CAACZ,EAAOa,KACnB,MAAMC,EAAWV,KAAKW,GAAGF,GACpBC,GAELJ,EAAWM,KAAK5C,EAAM6C,SAASH,EAASI,YAAalB,MAAAA,OAElDU,GAEXX,eACI,IAAIoB,EAAS,GAEb,OADAf,KAAKgB,KAAKvB,GAASsB,MAActB,EAAMwB,mBAChCF,EAAOG,UAStB,OALA5C,EAAkBc,WAAaA,EAE/BD,EAAMC,WAAaA,EAGZA","file":"../../../style_manager/model/Properties.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    '../../domain_abstract/model/TypeableCollection',\n    './Property',\n    './PropertyStack',\n    './../view/PropertyStackView',\n    './PropertyComposite',\n    './../view/PropertyCompositeView',\n    './../view/PropertyFileView',\n    './../view/PropertyColorView',\n    './PropertySelect',\n    './../view/PropertySelectView',\n    './PropertyRadio',\n    './../view/PropertyRadioView',\n    './PropertySlider',\n    './../view/PropertySliderView',\n    './PropertyInteger',\n    './../view/PropertyIntegerView',\n    './../view/PropertyView',\n    \"./Layer\"\n], function (\n    langx,\n    Backbone, \n    TypeableCollection, \n    Property, \n    PropertyStack, \n    PropertyStackView, \n    PropertyComposite, \n    PropertyCompositeView, \n    PropertyFileView, \n    PropertyColorView, \n    PropertySelect, \n    PropertySelectView, \n    PropertyRadio, \n    PropertyRadioView, \n    PropertySlider, \n    PropertySliderView, \n    PropertyInteger, \n    PropertyIntegerView, \n    PropertyView,\n    Layer\n) {\n    'use strict';\n    var Properties = Backbone.Collection.extend(TypeableCollection).extend({\n        types: [\n            {\n                id: 'stack',\n                model: PropertyStack,\n                view: PropertyStackView,\n                isType(value) {\n                    if (value && value.type == 'stack') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'composite',\n                model: PropertyComposite,\n                view: PropertyCompositeView,\n                isType(value) {\n                    if (value && value.type == 'composite') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'file',\n                model: Property,\n                view: PropertyFileView,\n                isType(value) {\n                    if (value && value.type == 'file') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'color',\n                model: Property,\n                view: PropertyColorView,\n                isType(value) {\n                    if (value && value.type == 'color') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'select',\n                model: PropertySelect,\n                view: PropertySelectView,\n                isType(value) {\n                    if (value && value.type == 'select') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'radio',\n                model: PropertyRadio,\n                view: PropertyRadioView,\n                isType(value) {\n                    if (value && value.type == 'radio') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'slider',\n                model: PropertySlider,\n                view: PropertySliderView,\n                isType(value) {\n                    if (value && value.type == 'slider') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'integer',\n                model: PropertyInteger,\n                view: PropertyIntegerView,\n                isType(value) {\n                    if (value && value.type == 'integer') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'base',\n                model: Property,\n                view: PropertyView,\n                isType(value) {\n                    value.type = 'base';\n                    return value;\n                }\n            }\n        ],\n        deepClone() {\n            const collection = this.clone();\n            collection.reset(collection.map(model => {\n                const cloned = model.clone();\n                cloned.typeView = model.typeView;\n                return cloned;\n            }));\n            return collection;\n        },\n        parseValue(value) {\n            const properties = [];\n            const values = value.split(' ');\n            values.forEach((value, i) => {\n                const property = this.at(i);\n                if (!property)\n                    return;\n                properties.push(langx.mixin({},property.attributes,{ value }));\n            });\n            return properties;\n        },\n        getFullValue() {\n            let result = '';\n            this.each(model => result += `${ model.getFullValue() } `);\n            return result.trim();\n        }\n    });\n\n    PropertyComposite.Properties = Properties;\n\n    Layer.Properties = Properties;\n\n\n    return Properties;\n});"]}