{"version":3,"sources":["style_manager/model/Sector.js"],"names":["define","Backbone","a","Properties","PropertyFactory","Model","undefined","defaults","id","name","open","buildProps","extendBuilded","properties","[object Object]","opts","o","builded","this","buildProperties","get","props","set","replace","toLowerCase","extendProperties","propsModel","sector","moProps","ex","pLen","length","mProps","ext","isolated","i","len","mProp","found","j","prop","property","mPProps","extend","push","filter","buildP","propFactory","build"],"mappings":";;;;;;;AAAAA,QACI,mBACA,qBACA,eACA,qBACD,SAAUC,EAAUC,EAAGC,EAAYC,GAClC,aACA,OAAOH,EAASI,MAAMC,WAClBC,UACIC,GAAI,GACJC,KAAM,GACNC,MAAM,EACNC,WAAY,GACZC,cAAe,EACfC,eAEJC,WAAWC,GACP,MAAMC,EAAID,MACJE,EAAUC,KAAKC,gBAAgBH,EAAEL,YACjCF,EAAOS,KAAKE,IAAI,SAAW,GACjC,IAAIC,MACHH,KAAKE,IAAI,OAASF,KAAKI,IAAI,KAAMb,EAAKc,QAAQ,KAAM,KAAKC,eAItDH,EAHCJ,EAGOC,KAAKO,iBAAiBR,GAFtBC,KAAKE,IAAI,cAGrB,MAAMM,EAAa,IAAIvB,EAAWkB,GAClCK,EAAWC,OAAST,KACpBA,KAAKI,IAAI,aAAcI,IAE3BZ,iBAAiBO,EAAOO,EAASC,GAK7B,IAJA,IAAIC,EAAOT,EAAMU,OACbC,EAASJ,GAAWV,KAAKE,IAAI,cAC7Ba,EAAMf,KAAKE,IAAI,iBACfc,KACKC,EAAI,EAAGC,EAAMJ,EAAOD,OAAQI,EAAIC,EAAKD,IAAK,CAG/C,IAFA,IAAIE,EAAQL,EAAOG,GACfG,EAAQ,EACHC,EAAI,EAAGA,EAAIT,EAAMS,IAAK,CAC3B,IAAIC,EAAOnB,EAAMkB,GACjB,GAAIF,EAAMI,UAAYD,EAAKC,UAAYJ,EAAM7B,IAAMgC,EAAKC,cAAxD,CACI,IAAIC,EAAUL,EAAMxB,WAChB6B,GAAWA,EAAQX,SACnBM,EAAMxB,WAAaK,KAAKO,iBAAiBe,EAAK3B,eAAkB6B,EAAS,IAE7ErB,EAAMkB,GAAKN,EAAM/B,EAAEyC,OAAOH,EAAMH,GAASA,EACzCH,EAASK,GAAKlB,EAAMkB,GACpBD,EAAQ,GAIXA,IACDjB,EAAMuB,KAAKP,GACXH,EAASU,KAAKP,IAGtB,OAAOR,EAAKK,EAASW,OAAOV,GAAKA,GAAKd,GAE1CP,gBAAgBO,GACZ,IACIyB,EAASzB,MACb,GAAKyB,EAAOf,OAKZ,OAHKb,KAAK6B,cACN7B,KAAK6B,YAAc,IAAI3C,GACvBc,KAAK6B,YAAYC,MAAMF","file":"../../../style_manager/model/Sector.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    './Properties',\n    './PropertyFactory'\n], function (Backbone, a, Properties, PropertyFactory) {\n    'use strict';\n    return Backbone.Model.undefined({\n        defaults: {\n            id: '',\n            name: '',\n            open: true,\n            buildProps: '',\n            extendBuilded: 1,\n            properties: []\n        },\n        initialize(opts) {\n            const o = opts || {};\n            const builded = this.buildProperties(o.buildProps);\n            const name = this.get('name') || '';\n            let props = [];\n            !this.get('id') && this.set('id', name.replace(/ /g, '_').toLowerCase());\n            if (!builded)\n                props = this.get('properties');\n            else\n                props = this.extendProperties(builded);\n            const propsModel = new Properties(props);\n            propsModel.sector = this;\n            this.set('properties', propsModel);\n        },\n        extendProperties(props, moProps, ex) {\n            var pLen = props.length;\n            var mProps = moProps || this.get('properties');\n            var ext = this.get('extendBuilded');\n            var isolated = [];\n            for (var i = 0, len = mProps.length; i < len; i++) {\n                var mProp = mProps[i];\n                var found = 0;\n                for (var j = 0; j < pLen; j++) {\n                    var prop = props[j];\n                    if (mProp.property == prop.property || mProp.id == prop.property) {\n                        var mPProps = mProp.properties;\n                        if (mPProps && mPProps.length) {\n                            mProp.properties = this.extendProperties(prop.properties || [], mPProps, 1);\n                        }\n                        props[j] = ext ? a.extend(prop, mProp) : mProp;\n                        isolated[j] = props[j];\n                        found = 1;\n                        continue;\n                    }\n                }\n                if (!found) {\n                    props.push(mProp);\n                    isolated.push(mProp);\n                }\n            }\n            return ex ? isolated.filter(i => i) : props;\n        },\n        buildProperties(props) {\n            var r;\n            var buildP = props || [];\n            if (!buildP.length)\n                return;\n            if (!this.propFactory)\n                this.propFactory = new PropertyFactory();\n            r = this.propFactory.build(buildP);\n            return r;\n        }\n    });\n});"]}