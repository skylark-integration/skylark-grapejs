{"version":3,"sources":["style_manager/model/PropertyInteger.js"],"names":["define","langx","a","Property","InputNumber","extend","defaults","prototype","units","unit","step","min","max","[object Object]","props","opts","callParentInit","this","get","input","model","length","set","callInit","value","undefined","val","parsed","parseValue","apply","arguments","validateInputValue","deepCheck","isUndefined","getFullValue"],"mappings":";;;;;;;AAAAA,QACI,sBACA,qBACA,aACA,wCACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,OAAOD,EAASE,QACZC,aACOH,EAASI,UAAUD,SACtBE,SACAC,KAAM,GACNC,KAAM,EACNC,IAAK,GACLC,IAAK,IAETC,WAAWC,KAAYC,MACnBZ,EAASa,eAAeb,EAAUc,KAAMH,EAAOC,GAC/C,MAAMN,EAAOQ,KAAKC,IAAI,QAChBV,EAAQS,KAAKC,IAAI,SACvBD,KAAKE,MAAQ,IAAIf,GAAcgB,MAAOH,OAClCT,EAAMa,SAAWZ,GACjBQ,KAAKK,IAAI,OAAQd,EAAM,IAE3BL,EAASoB,SAASN,KAAMH,EAAOC,IAEnCF,WAAWE,MAKP,OAJAE,KAAKK,KACDE,WAAOC,EACPhB,UAAMgB,GACPV,GACIE,MAEXJ,WAAWa,GACP,MAAMC,EAASxB,EAASI,UAAUqB,WAAWC,MAAMZ,KAAMa,YACnDN,MAACA,EAAKf,KAAEA,GAAQQ,KAAKE,MAAMY,mBAAmBJ,EAAOH,OAASQ,UAAW,IAG/E,OAFAL,EAAOH,MAAQA,EACfG,EAAOlB,KAAOA,EACPkB,GAEXd,eACI,IAAIW,EAAQP,KAAKC,IAAI,SACjBT,EAAOQ,KAAKC,IAAI,QAIpB,OADAM,KAFAA,EAAStB,EAAE+B,YAAYT,GAAiB,GAARA,IAChCf,GAAQP,EAAE+B,YAAYxB,IAASe,EAAQf,EAAO,KAEvCN,EAASI,UAAU2B,aAAaL,MAAMZ,MAAOO","file":"../../../style_manager/model/PropertyInteger.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    './Property',\n    '../../domain_abstract/ui/InputNumber'\n], function (\n    langx,\n    a, \n    Property, \n    InputNumber\n) {\n    'use strict';\n    return Property.extend({\n        defaults: {\n            ...Property.prototype.defaults,\n            units: [],\n            unit: '',\n            step: 1,\n            min: '',\n            max: ''\n        },\n        initialize(props = {}, opts = {}) {\n            Property.callParentInit(Property, this, props, opts);\n            const unit = this.get('unit');\n            const units = this.get('units');\n            this.input = new InputNumber({ model: this });\n            if (units.length && !unit) {\n                this.set('unit', units[0]);\n            }\n            Property.callInit(this, props, opts);\n        },\n        clearValue(opts = {}) {\n            this.set({\n                value: undefined,\n                unit: undefined\n            }, opts);\n            return this;\n        },\n        parseValue(val) {\n            const parsed = Property.prototype.parseValue.apply(this, arguments);\n            const {value, unit} = this.input.validateInputValue(parsed.value, { deepCheck: 1 });\n            parsed.value = value;\n            parsed.unit = unit;\n            return parsed;\n        },\n        getFullValue() {\n            let value = this.get('value');\n            let unit = this.get('unit');\n            value = !a.isUndefined(value) ? value : '';\n            unit = !a.isUndefined(unit) && value ? unit : '';\n            value = `${ value }${ unit }`;\n            return Property.prototype.getFullValue.apply(this, [value]);\n        }\n    });\n});"]}