{"version":3,"sources":["style_manager/model/Layers.js"],"names":["define","a","Backbone","Layer","Collection","extend","model","[object Object]","this","idx","on","onAdd","onReset","c","opts","noIncrement","set","active","indexOf","property","get","value","layers","replace","match","cleaned","split","getSeparator","forEach","layerValue","push","properties","parseValue","styleObj","pluck","each","propModel","style","i","trim","layer","propertyObj","attributes","layerProprs","map","prop","propertyName","index","at","result","getFullValue","join","defValue","getPropertyValue","isUndefined"],"mappings":";;;;;;;AAAAA,QACI,qBACA,mBACA,WACD,SAAUC,EAAGC,EAAUC,GACtB,aACA,OAAOD,EAASE,WAAWC,QACvBC,MAAOH,EACPI,aACIC,KAAKC,IAAM,EACXD,KAAKE,GAAG,MAAOF,KAAKG,OACpBH,KAAKE,GAAG,QAASF,KAAKI,UAE1BL,MAAMD,EAAOO,EAAGC,GACPA,EAAKC,aACNT,EAAMU,IAAI,QAASR,KAAKC,OAC5BK,EAAKG,QAAUT,KAAKS,OAAOT,KAAKU,QAAQZ,KAE5CC,UACIC,KAAKC,IAAM,GAEfF,eACI,MAAMY,SAACA,GAAYX,KACnB,OAAOW,EAAWA,EAASC,IAAI,kBAAoB,MAEvDb,mBAAmBc,GACf,MAAMC,KASN,OARAD,EAAME,QAAQ,mBAAoBC,IAC9B,IAAIC,EAAUD,EAAMD,QAAQ,QAAS,KACrCF,EAAQA,EAAME,QAAQC,EAAOC,MAEbJ,EAAQA,EAAMK,MAAMlB,KAAKmB,oBACjCC,QAAQC,IAChBP,EAAOQ,MAAOC,WAAYvB,KAAKuB,WAAWC,WAAWH,OAElDP,GAEXf,mBAAmB0B,GACf,MAAMX,KACAS,EAAavB,KAAKuB,WACNA,EAAWG,MAAM,YA2BnC,OA1BAH,EAAWI,KAAKC,IACZ,MAAMC,EAAQJ,EAASG,EAAUhB,IAAI,cACtBiB,EAAQA,EAAMX,MAAM,UAC5BE,QAAQ,CAACP,EAAOiB,KACnBjB,EAAQe,EAAUJ,WAAWX,EAAMkB,QAAQlB,MAC3C,MAAMmB,EAAQlB,EAAOgB,GACfG,MACCL,EAAUM,eACRrB,MAAAA,IAELmB,EACAA,EAAMT,WAAWD,KAAKW,GAEtBnB,EAAOgB,IAAOP,YAAaU,QAIvCnB,EAAOM,QAAQY,IACX,MAAMG,EAAcH,EAAMT,WAAWa,IAAIC,GAAQA,EAAK1B,UACtDY,EAAWI,KAAKC,IACZ,MAAMU,EAAeV,EAAUhB,IAAI,YAC/BuB,EAAYzB,QAAQ4B,GAAgB,GACpCN,EAAMT,WAAWD,SAAUM,EAAUM,iBAI1CpB,GAEXf,OAAOwC,GACHvC,KAAK2B,KAAKK,GAASA,EAAMxB,IAAI,SAAU,IACvC,MAAMwB,EAAQhC,KAAKwC,GAAGD,GACtBP,GAASA,EAAMxB,IAAI,SAAU,IAEjCT,eACI,IAAI0C,KAEJ,OADAzC,KAAK2B,KAAKK,GAASS,EAAOnB,KAAKU,EAAMU,iBAC9BD,EAAOE,KAAK3C,KAAKmB,iBAE5BpB,kBAAkBY,EAAUiC,GACxB,MAAMH,KAKN,OAJAzC,KAAK2B,KAAKK,IACN,MAAMnB,EAAQmB,EAAMa,iBAAiBlC,GACrCE,EAAQ4B,EAAOnB,KAAKT,IAAUpB,EAAEqD,YAAYF,IAAaH,EAAOnB,KAAKsB,KAElEH,EAAOE,KAAK","file":"../../../style_manager/model/Layers.js","sourcesContent":["define([\n    'skylark-underscore',\n    'skylark-backbone',\n    './Layer'\n], function (a, Backbone, Layer) {\n    'use strict';\n    return Backbone.Collection.extend({\n        model: Layer,\n        initialize() {\n            this.idx = 1;\n            this.on('add', this.onAdd);\n            this.on('reset', this.onReset);\n        },\n        onAdd(model, c, opts) {\n            if (!opts.noIncrement)\n                model.set('index', this.idx++);\n            opts.active && this.active(this.indexOf(model));\n        },\n        onReset() {\n            this.idx = 1;\n        },\n        getSeparator() {\n            const {property} = this;\n            return property ? property.get('layerSeparator') : ', ';\n        },\n        getLayersFromValue(value) {\n            const layers = [];\n            value.replace(/\\(([\\w\\s,.]*)\\)/g, match => {\n                var cleaned = match.replace(/,\\s*/g, ',');\n                value = value.replace(match, cleaned);\n            });\n            const layerValues = value ? value.split(this.getSeparator()) : [];\n            layerValues.forEach(layerValue => {\n                layers.push({ properties: this.properties.parseValue(layerValue) });\n            });\n            return layers;\n        },\n        getLayersFromStyle(styleObj) {\n            const layers = [];\n            const properties = this.properties;\n            const propNames = properties.pluck('property');\n            properties.each(propModel => {\n                const style = styleObj[propModel.get('property')];\n                const values = style ? style.split(', ') : [];\n                values.forEach((value, i) => {\n                    value = propModel.parseValue(value.trim()).value;\n                    const layer = layers[i];\n                    const propertyObj = {\n                        ...propModel.attributes,\n                        ...{ value }\n                    };\n                    if (layer) {\n                        layer.properties.push(propertyObj);\n                    } else {\n                        layers[i] = { properties: [propertyObj] };\n                    }\n                });\n            });\n            layers.forEach(layer => {\n                const layerProprs = layer.properties.map(prop => prop.property);\n                properties.each(propModel => {\n                    const propertyName = propModel.get('property');\n                    if (layerProprs.indexOf(propertyName) < 0) {\n                        layer.properties.push({ ...propModel.attributes });\n                    }\n                });\n            });\n            return layers;\n        },\n        active(index) {\n            this.each(layer => layer.set('active', 0));\n            const layer = this.at(index);\n            layer && layer.set('active', 1);\n        },\n        getFullValue() {\n            let result = [];\n            this.each(layer => result.push(layer.getFullValue()));\n            return result.join(this.getSeparator());\n        },\n        getPropertyValues(property, defValue) {\n            const result = [];\n            this.each(layer => {\n                const value = layer.getPropertyValue(property);\n                value ? result.push(value) : !a.isUndefined(defValue) && result.push(defValue);\n            });\n            return result.join(', ');\n        }\n    });\n});"]}