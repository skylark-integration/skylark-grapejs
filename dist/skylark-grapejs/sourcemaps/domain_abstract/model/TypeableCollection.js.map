{"version":3,"sources":["domain_abstract/model/TypeableCollection.js"],"names":["define","a","Backbone","Model","View","types","[object Object]","models","opts","_this","this","model","attrs","options","type","baseType","getBaseType","getType","view","typeFound","recognizeType","attributes","typeView","init","bind","value","getTypes","i","length","isType","id","definition","ModelInst","ViewInst","isFunction","extend","unshift"],"mappings":";;;;;;;AAAAA,QACI,qBACA,oBACD,SAAUC,EAAGC,GACZ,aACA,MAAMC,EAAQD,EAASC,MACjBC,EAAOF,EAASE,KACtB,OACIC,SACAC,WAAWC,EAAQC,GACf,IAAIC,EAAQC,KACZA,KAAKC,MAAQ,SAASC,KAAYC,MAC9B,IAAIV,EAAOC,EAAMU,EACjB,GAAIF,GAASA,EAAME,KAAM,CACrB,MAAMC,EAAWN,EAAMO,cAEvBb,GADAW,EAAOL,EAAMQ,QAAQL,EAAME,OACZA,EAAKH,MAAQI,EAASJ,MACrCP,EAAOU,EAAOA,EAAKI,KAAOH,EAASG,SAChC,CACH,MAAMC,EAAYV,EAAMW,cAAcR,GAEtCT,GADAW,EAAOK,EAAUL,MACJH,MACbP,EAAOU,EAAKI,KACZN,EAAQO,EAAUE,WAEtB,MAAMV,EAAQ,IAAIR,EAAMS,EAAOC,GAE/B,OADAF,EAAMW,SAAWlB,EACVO,GAEX,MAAMY,EAAOd,EAAMc,MAAQd,EAAMc,KAAKC,KAAKf,GAC3Cc,GAAQA,KAEZjB,cAAcmB,GACV,MAAMpB,EAAQK,KAAKgB,WACnB,IAAK,IAAIC,EAAI,EAAGA,EAAItB,EAAMuB,OAAQD,IAAK,CACnC,MAAMb,EAAOT,EAAMsB,GACnB,IAAIR,EAAYL,EAAKe,OAAOJ,GAE5B,GADAN,EAAgC,kBAAbA,GAA0BA,GAAcL,KAAMA,EAAKgB,IAAOX,EAEzE,OACIL,KAAAA,EACAO,WAAYF,GAIxB,OACIL,KAAMJ,KAAKM,cACXK,WAAYI,IAGpBnB,cACI,MAAMD,EAAQK,KAAKgB,WACnB,OAAOrB,EAAMA,EAAMuB,OAAS,IAEhCtB,WACI,OAAOI,KAAKL,OAEhBC,QAAQwB,GACJ,MAAMzB,EAAQK,KAAKgB,WACnB,IAAK,IAAIC,EAAI,EAAGA,EAAItB,EAAMuB,OAAQD,IAAK,CACnC,MAAMb,EAAOT,EAAMsB,GACnB,GAAIb,EAAKgB,KAAOA,EACZ,OAAOhB,IAInBR,QAAQwB,EAAIC,GACR,MAAMjB,EAAOJ,KAAKO,QAAQa,GACpBf,EAAWL,KAAKM,cAChBgB,EAAYlB,EAAOA,EAAKH,MAAQI,EAASJ,MACzCsB,EAAWnB,EAAOA,EAAKI,KAAOH,EAASG,KAC7C,IAAIP,MAACA,EAAKO,KAAEA,EAAIW,OAAEA,GAAUE,EAC5BpB,EAAQA,aAAiBR,GAASF,EAAEiC,WAAWvB,GAASA,EAAQqB,EAAUG,OAAOxB,OACjFO,EAAOA,aAAgBd,GAAQH,EAAEiC,WAAWhB,GAAQA,EAAOe,EAASE,OAAOjB,OACvEJ,GACAA,EAAKH,MAAQA,EACbG,EAAKI,KAAOA,EACZJ,EAAKe,OAASA,GAAUf,EAAKe,SAE7BE,EAAWD,GAAKA,EAChBC,EAAWpB,MAAQA,EACnBoB,EAAWb,KAAOA,EAClBa,EAAWF,OAASA,GAAU,SAAUJ,GACpC,GAAIA,GAASA,EAAMX,MAAQgB,EACvB,OAAO,GAGfpB,KAAKgB,WAAWU,QAAQL","file":"../../../domain_abstract/model/TypeableCollection.js","sourcesContent":["define([\n    'skylark-underscore',\n    'skylark-backbone'\n], function (a, Backbone) {\n    'use strict';\n    const Model = Backbone.Model;\n    const View = Backbone.View;\n    return {\n        types: [],\n        initialize(models, opts) {\n            var _this = this;\n            this.model = function(attrs = {}, options = {}) { // modified by lwf\n                let Model, View, type;\n                if (attrs && attrs.type) {\n                    const baseType = _this.getBaseType();\n                    type = _this.getType(attrs.type);\n                    Model = type ? type.model : baseType.model;\n                    View = type ? type.view : baseType.view;\n                } else {\n                    const typeFound = _this.recognizeType(attrs);\n                    type = typeFound.type;\n                    Model = type.model;\n                    View = type.view;\n                    attrs = typeFound.attributes;\n                }\n                const model = new Model(attrs, options);\n                model.typeView = View;\n                return model;\n            };\n            const init = _this.init && _this.init.bind(_this);\n            init && init();\n        },\n        recognizeType(value) {\n            const types = this.getTypes();\n            for (let i = 0; i < types.length; i++) {\n                const type = types[i];\n                let typeFound = type.isType(value);\n                typeFound = typeof typeFound == 'boolean' && typeFound ? { type: type.id } : typeFound;\n                if (typeFound) {\n                    return {\n                        type,\n                        attributes: typeFound\n                    };\n                }\n            }\n            return {\n                type: this.getBaseType(),\n                attributes: value\n            };\n        },\n        getBaseType() {\n            const types = this.getTypes();\n            return types[types.length - 1];\n        },\n        getTypes() {\n            return this.types;\n        },\n        getType(id) {\n            const types = this.getTypes();\n            for (let i = 0; i < types.length; i++) {\n                const type = types[i];\n                if (type.id === id) {\n                    return type;\n                }\n            }\n        },\n        addType(id, definition) {\n            const type = this.getType(id);\n            const baseType = this.getBaseType();\n            const ModelInst = type ? type.model : baseType.model;\n            const ViewInst = type ? type.view : baseType.view;\n            let {model, view, isType} = definition;\n            model = model instanceof Model || a.isFunction(model) ? model : ModelInst.extend(model || {});\n            view = view instanceof View || a.isFunction(view) ? view : ViewInst.extend(view || {});\n            if (type) {\n                type.model = model;\n                type.view = view;\n                type.isType = isType || type.isType;\n            } else {\n                definition.id = id;\n                definition.model = model;\n                definition.view = view;\n                definition.isType = isType || function (value) {\n                    if (value && value.type == id) {\n                        return true;\n                    }\n                };\n                this.getTypes().unshift(definition);\n            }\n        }\n    };\n});"]}