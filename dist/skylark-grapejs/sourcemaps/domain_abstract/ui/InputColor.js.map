{"version":3,"sources":["domain_abstract/ui/InputColor.js"],"names":["define","Backbone","a","ColorPicker","Input","$","extend","[object Object]","ppfx","this","holderClass","val","opts","def","model","get","value","isUndefined","inputEl","getInputEl","colorEl","getColorEl","valueClr","style","backgroundColor","fromTarget","spectrum","noneColor","self","cpStyle","elToAppend","em","config","el","colorPickerConfig","getConfig","getColor","color","getAlpha","toHexString","toRgbString","replace","previousColor","changed","$el","find","append","containerClassName","appendTo","maxSelectionSize","showPalette","showAlpha","chooseText","cancelText","palette","cl","setValueFromInput","prototype","render","call"],"mappings":";;;;;;;AAAAA,QACI,mBACA,qBACA,0BACA,WACD,SAAUC,EAAUC,EAAGC,EAAaC,GACnC,aACA,MAAMC,EAAIJ,EAASI,EAEnB,OADAF,EAAYE,GACLD,EAAME,QACTC,WACI,MAAMC,EAAOC,KAAKD,KAClB,6BACSC,KAAKC,4CACLF,wCACEA,0DACEA,2DAKjBD,aACI,MAAMC,EAAOC,KAAKD,KAClB,SAAWA,UAAeA,gBAE9BD,cACI,SAAWE,KAAKD,oBAEpBD,SAASI,EAAKC,MACV,MACMC,EADQJ,KAAKK,MACDC,IAAI,YAChBC,EAASd,EAAEe,YAAYN,GAAcT,EAAEe,YAAYJ,GAAa,GAANA,EAA5BF,EAC9BO,EAAUT,KAAKU,aACfC,EAAUX,KAAKY,aACfC,EAAoB,QAATN,EAAkBA,EAAQ,GAC3CE,EAAQF,MAAQA,EAChBI,EAAQL,IAAI,GAAGQ,MAAMC,gBAAkBF,EACnCV,EAAKa,aACLL,EAAQM,SAAS,MAAOJ,GACxBb,KAAKkB,UAAqB,QAATX,IAGzBT,aACI,IAAKE,KAAKW,QAAS,CACf,MAAMQ,EAAOnB,KACPD,EAAOC,KAAKD,KAClB,IAAIM,EAAQL,KAAKK,MACbM,EAAUf,iBAAkBI,KAAKD,kCACjCqB,EAAUT,EAAQL,IAAI,GAAGQ,MACzBO,EAAarB,KAAKsB,IAAMtB,KAAKsB,GAAGC,OAASvB,KAAKsB,GAAGC,OAAOC,GAAK,GAC7DC,EAAoBzB,KAAKsB,IAAMtB,KAAKsB,GAAGI,WAAa1B,KAAKsB,GAAGI,UAAU,mBAC1E,MAAMC,EAAWC,IAEb,OAD6B,GAApBA,EAAMC,WAAkBD,EAAME,cAAgBF,EAAMG,eACnDC,QAAQ,KAAM,KAE5B,IACIC,EADAC,EAAU,EAEdlC,KAAKmC,IAAIC,KAAK,mBAAmBC,OAAO1B,GACxCA,EAAQM,UACJqB,sBAAwBvC,WAAgBA,aACxCwC,SAAUlB,GAAc,OACxBmB,iBAAkB,EAClBC,aAAa,EACbC,WAAW,EACXC,WAAY,KACZC,WAAY,IACZC,cACGpB,EACH3B,KAAK8B,GACD,MAAMkB,EAAKnB,EAASC,GACpBR,EAAQL,gBAAkB+B,EAC1BzC,EAAM0C,kBAAkBD,EAAI,IAEhChD,OAAO8B,GACHM,EAAU,EACV,MAAMY,EAAKnB,EAASC,GACpBR,EAAQL,gBAAkB+B,EAC1BzC,EAAM0C,kBAAkB,EAAG,GAC3B1C,EAAM0C,kBAAkBD,GACxB3B,EAAKD,UAAY,GAErBpB,KAAK8B,GACDM,EAAU,EACVD,EAAgBN,EAASC,IAE7B9B,KAAK8B,IACIM,GAAWD,IACRd,EAAKD,YACLe,EAAgB,IAEpBb,EAAQL,gBAAkBkB,EAC1BtB,EAAQM,SAAS,MAAOgB,GACxB5B,EAAM0C,kBAAkBd,EAAe,OAInDjC,KAAKW,QAAUA,EAEnB,OAAOX,KAAKW,SAEhBb,SAGI,OAFAH,EAAMqD,UAAUC,OAAOC,KAAKlD,MAC5BA,KAAKY,aACEZ","file":"../../../domain_abstract/ui/InputColor.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/ColorPicker',\n    './Input'\n], function (Backbone, a, ColorPicker, Input) {\n    'use strict';\n    const $ = Backbone.$;\n    ColorPicker($);\n    return Input.extend({\n        template() {\n            const ppfx = this.ppfx;\n            return `\n      <div class=\"${ this.holderClass() }\"></div>\n      <div class=\"${ ppfx }field-colorp\">\n        <div class=\"${ ppfx }field-colorp-c\" data-colorp-c>\n          <div class=\"${ ppfx }checker-bg\"></div>\n        </div>\n      </div>\n    `;\n        },\n        inputClass() {\n            const ppfx = this.ppfx;\n            return `${ ppfx }field ${ ppfx }field-color`;\n        },\n        holderClass() {\n            return `${ this.ppfx }input-holder`;\n        },\n        setValue(val, opts = {}) {\n            const model = this.model;\n            const def = model.get('defaults');\n            const value = !a.isUndefined(val) ? val : !a.isUndefined(def) ? def : '';\n            const inputEl = this.getInputEl();\n            const colorEl = this.getColorEl();\n            const valueClr = value != 'none' ? value : '';\n            inputEl.value = value;\n            colorEl.get(0).style.backgroundColor = valueClr;\n            if (opts.fromTarget) {\n                colorEl.spectrum('set', valueClr);\n                this.noneColor = value == 'none';\n            }\n        },\n        getColorEl() {\n            if (!this.colorEl) {\n                const self = this;\n                const ppfx = this.ppfx;\n                var model = this.model;\n                var colorEl = $(`<div class=\"${ this.ppfx }field-color-picker\"></div>`);\n                var cpStyle = colorEl.get(0).style;\n                var elToAppend = this.em && this.em.config ? this.em.config.el : '';\n                var colorPickerConfig = this.em && this.em.getConfig && this.em.getConfig('colorPicker') || {};\n                const getColor = color => {\n                    let cl = color.getAlpha() == 1 ? color.toHexString() : color.toRgbString();\n                    return cl.replace(/ /g, '');\n                };\n                let changed = 0;\n                let previousColor;\n                this.$el.find(`[data-colorp-c]`).append(colorEl);\n                colorEl.spectrum({\n                    containerClassName: `${ ppfx }one-bg ${ ppfx }two-color`,\n                    appendTo: elToAppend || 'body',\n                    maxSelectionSize: 8,\n                    showPalette: true,\n                    showAlpha: true,\n                    chooseText: 'Ok',\n                    cancelText: '\\u2A2F',\n                    palette: [],\n                    ...colorPickerConfig,\n                    move(color) {\n                        const cl = getColor(color);\n                        cpStyle.backgroundColor = cl;\n                        model.setValueFromInput(cl, 0);\n                    },\n                    change(color) {\n                        changed = 1;\n                        const cl = getColor(color);\n                        cpStyle.backgroundColor = cl;\n                        model.setValueFromInput(0, 0);\n                        model.setValueFromInput(cl);\n                        self.noneColor = 0;\n                    },\n                    show(color) {\n                        changed = 0;\n                        previousColor = getColor(color);\n                    },\n                    hide(color) {\n                        if (!changed && previousColor) {\n                            if (self.noneColor) {\n                                previousColor = '';\n                            }\n                            cpStyle.backgroundColor = previousColor;\n                            colorEl.spectrum('set', previousColor);\n                            model.setValueFromInput(previousColor, 0);\n                        }\n                    }\n                });\n                this.colorEl = colorEl;\n            }\n            return this.colorEl;\n        },\n        render() {\n            Input.prototype.render.call(this);\n            this.getColorEl();\n            return this;\n        }\n    });\n});"]}