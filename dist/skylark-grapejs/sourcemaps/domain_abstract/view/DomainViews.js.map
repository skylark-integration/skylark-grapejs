{"version":3,"sources":["domain_abstract/view/DomainViews.js"],"names":["define","a","Backbone","View","extend","itemView","itemsView","itemType","autoAdd","[object Object]","opts","config","this","listenTo","collection","addTo","init","model","add","type","ns","em","warn","logWarning","fragment","reuseView","frag","typeField","get","view","includes","itemViewNotFound","rendered","render","el","appendChild","$el","append","document","createDocumentFragment","empty","length","each","onRender"],"mappings":";;;;;;;AAAAA,QACI,qBACA,oBACD,SAAUC,EAAGC,GACZ,aACA,OAAOA,EAASC,KAAKC,QACjBC,SAAU,GACVC,UAAW,GACXC,SAAU,OACVC,QAAS,EACTC,WAAWC,KAAWC,GAClBC,KAAKD,OAASA,GAAUD,EAAKC,WAC7BC,KAAKJ,SAAWI,KAAKC,SAASD,KAAKE,WAAY,MAAOF,KAAKG,OAC3DH,KAAKI,QAETP,SAEAA,MAAMQ,GACFL,KAAKM,IAAID,IAEbR,iBAAiBU,GACb,MAAMR,OAACA,EAAMS,GAAEA,GAAMR,MACfS,GAACA,GAAMV,EACPW,KAAWF,MAAUA,OAAW,MAAQD,oBAC9CE,GAAMA,EAAGE,WAAWD,IAExBb,IAAIQ,EAAOO,GACP,MAAMb,OAACA,EAAMc,UAAEA,EAASnB,UAAEA,MAAkBM,KAyB5C,IAAIc,EAAOF,GAAY,KACnBnB,EAAWO,KAAKP,SAChBsB,EAAYV,EAAMW,IAAIhB,KAAKL,UAC/B,IAAIsB,EACAvB,EAAUqB,GACVtB,EAAWC,EAAUqB,IACdA,GAAcrB,EAAUqB,IAAe1B,EAAE6B,UA7BhD,SACA,WACA,QACA,OACA,iBACA,QACA,OACA,SACA,QACA,QACA,SACA,WACA,QACA,QACA,QACA,SACA,SACA,MACA,OACA,OACA,MACA,QAQqEH,IACrEf,KAAKmB,iBAAiBJ,GAU1B,IAAIK,GAPAH,EADAZ,EAAMY,MAAQJ,EACPR,EAAMY,KAEN,IAAIxB,GACPY,MAAAA,EACAN,OAAAA,GACDA,IAEasB,SAASC,GACzBR,EACAA,EAAKS,YAAYH,GAEjBpB,KAAKwB,IAAIC,OAAOL,IAExBvB,SACI,IAAIiB,EAAOY,SAASC,yBAQpB,OAPA3B,KAAKwB,IAAII,QACL5B,KAAKE,WAAW2B,QAChB7B,KAAKE,WAAW4B,KAAK,SAAUzB,GAC3BL,KAAKM,IAAID,EAAOS,IACjBd,MACPA,KAAKwB,IAAIC,OAAOX,GAChBd,KAAK+B,WACE/B,MAEXH","file":"../../../domain_abstract/view/DomainViews.js","sourcesContent":["define([\n    'skylark-underscore',\n    'skylark-backbone'\n], function (a, Backbone) {\n    'use strict';\n    return Backbone.View.extend({\n        itemView: '',\n        itemsView: '',\n        itemType: 'type',\n        autoAdd: 0,\n        initialize(opts = {}, config) {\n            this.config = config || opts.config || {};\n            this.autoAdd && this.listenTo(this.collection, 'add', this.addTo);\n            this.init();\n        },\n        init() {\n        },\n        addTo(model) {\n            this.add(model);\n        },\n        itemViewNotFound(type) {\n            const {config, ns} = this;\n            const {em} = config;\n            const warn = `${ ns ? `[${ ns }]: ` : '' }'${ type }' type not found`;\n            em && em.logWarning(warn);\n        },\n        add(model, fragment) {\n            const {config, reuseView, itemsView = {}} = this;\n            const inputTypes = [\n                'button',\n                'checkbox',\n                'color',\n                'date',\n                'datetime-local',\n                'email',\n                'file',\n                'hidden',\n                'image',\n                'month',\n                'number',\n                'password',\n                'radio',\n                'range',\n                'reset',\n                'search',\n                'submit',\n                'tel',\n                'text',\n                'time',\n                'url',\n                'week'\n            ];\n            var frag = fragment || null;\n            var itemView = this.itemView;\n            var typeField = model.get(this.itemType);\n            let view;\n            if (itemsView[typeField]) {\n                itemView = itemsView[typeField];\n            } else if (typeField && !itemsView[typeField] && !a.includes(inputTypes, typeField)) {\n                this.itemViewNotFound(typeField);\n            }\n            if (model.view && reuseView) {\n                view = model.view;\n            } else {\n                view = new itemView({\n                    model,\n                    config\n                }, config);\n            }\n            var rendered = view.render().el;\n            if (frag)\n                frag.appendChild(rendered);\n            else\n                this.$el.append(rendered);\n        },\n        render() {\n            var frag = document.createDocumentFragment();\n            this.$el.empty();\n            if (this.collection.length)\n                this.collection.each(function (model) {\n                    this.add(model, frag);\n                }, this);\n            this.$el.append(frag);\n            this.onRender();\n            return this;\n        },\n        onRender() {\n        }\n    });\n});"]}