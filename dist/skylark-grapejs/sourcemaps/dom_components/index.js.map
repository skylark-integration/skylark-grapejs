{"version":3,"sources":["dom_components/index.js"],"names":["define","Backbone","_","defaults","Component","Components","ComponentView","ComponentsView","ComponentTableCell","ComponentTableCellView","ComponentTableRow","ComponentTableRowView","ComponentTable","ComponentTableView","ComponentTableHead","ComponentTableHeadView","ComponentTableBody","ComponentTableBodyView","ComponentTableFoot","ComponentTableFootView","ComponentMap","ComponentMapView","ComponentLink","ComponentLinkView","ComponentLabel","ComponentLabelView","ComponentVideo","ComponentVideoView","ComponentImage","ComponentImageView","ComponentScript","ComponentScriptView","ComponentSvg","ComponentSvgIn","ComponentSvgView","ComponentComment","ComponentCommentView","ComponentTextNode","ComponentTextNodeView","ComponentText","ComponentTextView","ComponentWrapper","c","em","component","componentView","componentTypes","id","model","view","componentsById","name","getConfig","[object Object]","keys","smc","stm","storeHtml","push","storeComponents","config","this","components","ppfx","pStylePrefix","stylePrefix","modal","get","am","compTypes","on","componentHovered","selected","listenTo","sel","opts","selectAdd","selectRemove","wrapper","wrapperName","type","constructor","Object","domc","set","attributes","setComponents","handleChanges","getWrapper","avoidStore","value","comps","um","handleUpdates","bind","handleChangesColl","handleRemoves","add","forEach","els","stopListening","each","coll","Collection","data","result","getCacheLoad","html","isObject","isArray","JSON","parse","err","logError","isObj","length","clear","getComponents","noStore","obj","storageKey","indexOf","getHtml","toStore","storeWrapper","stringify","store","getComponent","render","el","map","i","remove","addComponent","methods","isComponent","extend","extendView","extendFn","extendFnView","compType","getType","extendType","extendViewType","typeToExtend","modelToExt","viewToExt","getExtendedObj","fns","target","srcToExt","reduce","res","next","fn","parentFn","prototype","args","langx","mixin","unshift","event","trigger","df","it","index","splice","getTypes","status","state","previous","isEmpty"],"mappings":"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","file":"../../dom_components/index.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    './config/config',\n    './model/Component',\n    './model/Components',\n    './view/ComponentView',\n    './view/ComponentsView',\n    './model/ComponentTableCell',\n    './view/ComponentTableCellView',\n    './model/ComponentTableRow',\n    './view/ComponentTableRowView',\n    './model/ComponentTable',\n    './view/ComponentTableView',\n    './model/ComponentTableHead',\n    './view/ComponentTableHeadView',\n    './model/ComponentTableBody',\n    './view/ComponentTableBodyView',\n    './model/ComponentTableFoot',\n    './view/ComponentTableFootView',\n    './model/ComponentMap',\n    './view/ComponentMapView',\n    './model/ComponentLink',\n    './view/ComponentLinkView',\n    './model/ComponentLabel',\n    './view/ComponentLabelView',\n    './model/ComponentVideo',\n    './view/ComponentVideoView',\n    './model/ComponentImage',\n    './view/ComponentImageView',\n    './model/ComponentScript',\n    './view/ComponentScriptView',\n    './model/ComponentSvg',\n    './model/ComponentSvgIn',\n    './view/ComponentSvgView',\n    './model/ComponentComment',\n    './view/ComponentCommentView',\n    './model/ComponentTextNode',\n    './view/ComponentTextNodeView',\n    './model/ComponentText',\n    './view/ComponentTextView',\n    './model/ComponentWrapper'\n], function (Backbone, _, defaults, Component, Components, ComponentView, ComponentsView, ComponentTableCell, ComponentTableCellView, ComponentTableRow, ComponentTableRowView, ComponentTable, ComponentTableView, ComponentTableHead, ComponentTableHeadView, ComponentTableBody, ComponentTableBodyView, ComponentTableFoot, ComponentTableFootView, ComponentMap, ComponentMapView, ComponentLink, ComponentLinkView, ComponentLabel, ComponentLabelView, ComponentVideo, ComponentVideoView, ComponentImage, ComponentImageView, ComponentScript, ComponentScriptView, ComponentSvg, ComponentSvgIn, ComponentSvgView, ComponentComment, ComponentCommentView, ComponentTextNode, ComponentTextNodeView, ComponentText, ComponentTextView, ComponentWrapper) {\n    'use strict';\n    return () => {\n        var c = {};\n        let em;\n        const componentsById = {};\n        var component, componentView;\n        var componentTypes = [\n            {\n                id: 'cell',\n                model: ComponentTableCell,\n                view: ComponentTableCellView\n            },\n            {\n                id: 'row',\n                model: ComponentTableRow,\n                view: ComponentTableRowView\n            },\n            {\n                id: 'table',\n                model: ComponentTable,\n                view: ComponentTableView\n            },\n            {\n                id: 'thead',\n                model: ComponentTableHead,\n                view: ComponentTableHeadView\n            },\n            {\n                id: 'tbody',\n                model: ComponentTableBody,\n                view: ComponentTableBodyView\n            },\n            {\n                id: 'tfoot',\n                model: ComponentTableFoot,\n                view: ComponentTableFootView\n            },\n            {\n                id: 'map',\n                model: ComponentMap,\n                view: ComponentMapView\n            },\n            {\n                id: 'link',\n                model: ComponentLink,\n                view: ComponentLinkView\n            },\n            {\n                id: 'label',\n                model: ComponentLabel,\n                view: ComponentLabelView\n            },\n            {\n                id: 'video',\n                model: ComponentVideo,\n                view: ComponentVideoView\n            },\n            {\n                id: 'image',\n                model: ComponentImage,\n                view: ComponentImageView\n            },\n            {\n                id: 'script',\n                model: ComponentScript,\n                view: ComponentScriptView\n            },\n            {\n                id: 'svg-in',\n                model: ComponentSvgIn,\n                view: ComponentSvgView\n            },\n            {\n                id: 'svg',\n                model: ComponentSvg,\n                view: ComponentSvgView\n            },\n            {\n                id: 'comment',\n                model: ComponentComment,\n                view: ComponentCommentView\n            },\n            {\n                id: 'textnode',\n                model: ComponentTextNode,\n                view: ComponentTextNodeView\n            },\n            {\n                id: 'text',\n                model: ComponentText,\n                view: ComponentTextView\n            },\n            {\n                id: 'wrapper',\n                model: ComponentWrapper,\n                view: ComponentView\n            },\n            {\n                id: 'default',\n                model: Component,\n                view: ComponentView\n            }\n        ];\n        return {\n            Component,\n            Components,\n            ComponentsView,\n            componentTypes,\n            componentsById,\n            name: 'DomComponents',\n            getConfig() {\n                return c;\n            },\n            storageKey() {\n                var keys = [];\n                var smc = c.stm && c.stm.getConfig() || {};\n                if (smc.storeHtml)\n                    keys.push('html');\n                if (smc.storeComponents)\n                    keys.push('components');\n                return keys;\n            },\n            init(config) {\n                c = config || {};\n                em = c.em;\n                this.em = em;\n                if (em) {\n                    c.components = em.config.components || c.components;\n                }\n                for (var name in defaults) {\n                    if (!(name in c))\n                        c[name] = defaults[name];\n                }\n                var ppfx = c.pStylePrefix;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                if (em) {\n                    c.modal = em.get('Modal') || '';\n                    c.am = em.get('AssetManager') || '';\n                    em.get('Parser').compTypes = componentTypes;\n                    em.on('change:componentHovered', this.componentHovered, this);\n                    const selected = em.get('selected');\n                    em.listenTo(selected, 'add', (sel, c, opts) => this.selectAdd(sel, opts));\n                    em.listenTo(selected, 'remove', (sel, c, opts) => this.selectRemove(sel, opts));\n                }\n                let components = c.components;\n                let wrapper = { ...c.wrapper };\n                wrapper['custom-name'] = c.wrapperName;\n                wrapper.wrapper = 1;\n                wrapper.type = 'wrapper';\n                if (components && components.constructor === Object && components.wrapper) {\n                    wrapper = { ...components };\n                    components = components.components || [];\n                    wrapper.components = [];\n                    if (em) {\n                        em.config.components = components;\n                        c.components = components;\n                    }\n                }\n                component = new Component(wrapper, {\n                    em,\n                    config: c,\n                    componentTypes,\n                    domc: this\n                });\n                component.set({ attributes: { id: 'wrapper' } });\n                componentView = new ComponentView({\n                    model: component,\n                    config: c,\n                    componentTypes\n                });\n                return this;\n            },\n            onLoad() {\n                this.setComponents(c.components);\n            },\n            postLoad(em) {\n                this.handleChanges(this.getWrapper(), null, { avoidStore: 1 });\n            },\n            handleChanges(model, value, opts = {}) {\n                const comps = model.components();\n                const um = em.get('UndoManager');\n                const handleUpdates = em.handleUpdates.bind(em);\n                const handleChanges = this.handleChanges.bind(this);\n                const handleChangesColl = this.handleChangesColl.bind(this);\n                const handleRemoves = this.handleRemoves.bind(this);\n                um && um.add(model);\n                um && comps && um.add(comps);\n                const evn = 'change:style change:content change:attributes change:src';\n                [\n                    [\n                        model,\n                        evn,\n                        handleUpdates\n                    ],\n                    [\n                        model,\n                        'change:components',\n                        handleChangesColl\n                    ],\n                    [\n                        comps,\n                        'add',\n                        handleChanges\n                    ],\n                    [\n                        comps,\n                        'remove',\n                        handleRemoves\n                    ],\n                    [\n                        model.get('classes'),\n                        'add remove',\n                        handleUpdates\n                    ]\n                ].forEach(els => {\n                    em.stopListening(els[0], els[1], els[2]);\n                    em.listenTo(els[0], els[1], els[2]);\n                });\n                !opts.avoidStore && handleUpdates('', '', opts);\n                comps.each(model => this.handleChanges(model, value, opts));\n            },\n            handleChangesColl(model, coll) {\n                const um = em.get('UndoManager');\n                if (um && coll instanceof Backbone.Collection) {\n                    const handleChanges = this.handleChanges.bind(this);\n                    const handleRemoves = this.handleRemoves.bind(this);\n                    um.add(coll);\n                    [\n                        [\n                            coll,\n                            'add',\n                            handleChanges\n                        ],\n                        [\n                            coll,\n                            'remove',\n                            handleRemoves\n                        ]\n                    ].forEach(els => {\n                        em.stopListening(els[0], els[1], els[2]);\n                        em.listenTo(els[0], els[1], els[2]);\n                    });\n                }\n            },\n            handleRemoves(model, value, opts = {}) {\n                !opts.avoidStore && em.handleUpdates(model, value, opts);\n            },\n            load(data = '') {\n                const {em} = this;\n                let result = '';\n                if (!data && c.stm) {\n                    data = c.em.getCacheLoad();\n                }\n                const {components, html} = data;\n                if (components) {\n                    if (_.isObject(components) || _.isArray(components)) {\n                        result = components;\n                    } else {\n                        try {\n                            result = JSON.parse(components);\n                        } catch (err) {\n                            em && em.logError(err);\n                        }\n                    }\n                } else if (html) {\n                    result = html;\n                }\n                const isObj = result && result.constructor === Object;\n                if (result && result.length || isObj) {\n                    this.clear();\n                    if (isObj) {\n                        this.getWrapper().set(result);\n                    } else {\n                        this.getComponents().add(result);\n                    }\n                }\n                return result;\n            },\n            store(noStore) {\n                if (!c.stm) {\n                    return;\n                }\n                var obj = {};\n                var keys = this.storageKey();\n                if (keys.indexOf('html') >= 0) {\n                    obj.html = c.em.getHtml();\n                }\n                if (keys.indexOf('components') >= 0) {\n                    const {em} = this;\n                    const storeWrap = c.storeWrapper;\n                    const toStore = storeWrap ? this.getWrapper() : this.getComponents();\n                    obj.components = JSON.stringify(toStore);\n                }\n                if (!noStore) {\n                    c.stm.store(obj);\n                }\n                return obj;\n            },\n            getComponent() {\n                return component;\n            },\n            getWrapper() {\n                return this.getComponent();\n            },\n            getComponents() {\n                return this.getWrapper().get('components');\n            },\n            addComponent(component) {\n                return this.getComponents().add(component);\n            },\n            render() {\n                return componentView.render().el;\n            },\n            clear() {\n                this.getComponents().map(i => i).forEach(i => i.remove());\n                return this;\n            },\n            setComponents(components) {\n                this.clear().addComponent(components);\n            },\n            addType(type, methods) {\n                const {em} = this;\n                const {model = {}, view = {}, isComponent, extend, extendView, extendFn = [], extendFnView = []} = methods;\n                const compType = this.getType(type);\n                const extendType = this.getType(extend);\n                const extendViewType = this.getType(extendView);\n                const typeToExtend = extendType ? extendType : compType ? compType : this.getType('default');\n                const modelToExt = typeToExtend.model;\n                const viewToExt = extendViewType ? extendViewType.view : typeToExtend.view;\n                const getExtendedObj = (fns, target, srcToExt) => fns.reduce((res, next) => {\n                    const fn = target[next];\n                    const parentFn = srcToExt.prototype[next];\n                    if (fn && parentFn) {\n                        res[next] = function (...args) {\n                            parentFn.bind(this)(...args);\n                            fn.bind(this)(...args);\n                        };\n                    }\n                    return res;\n                }, {});\n                if (typeof model === 'object') {\n                    methods.model = modelToExt.extend({\n                        ...model,\n                        ...getExtendedObj(extendFn, model, modelToExt),\n                        defaults: langx.mixin({},\n                            modelToExt.prototype.defaults,\n                            _.result(model, 'defaults') \n                        )\n                    }, { isComponent: compType && !extendType && !isComponent ? modelToExt.isComponent : isComponent || (() => 0) });\n                }\n                if (typeof view === 'object') {\n                    methods.view = viewToExt.extend(langx.mixin({},\n                        view,\n                        getExtendedObj(extendFnView, view, viewToExt)\n                    ));\n                }\n                if (compType) {\n                    compType.model = methods.model;\n                    compType.view = methods.view;\n                } else {\n                    methods.id = type;\n                    componentTypes.unshift(methods);\n                }\n                const event = `component:type:${ compType ? 'update' : 'add' }`;\n                em && em.trigger(event, compType || methods);\n                return this;\n            },\n            getType(type) {\n                var df = componentTypes;\n                for (var it = 0; it < df.length; it++) {\n                    var dfId = df[it].id;\n                    if (dfId == type) {\n                        return df[it];\n                    }\n                }\n                return;\n            },\n            removeType(id) {\n                const df = componentTypes;\n                const type = this.getType(id);\n                if (!type)\n                    return;\n                const index = df.indexOf(type);\n                df.splice(index, 1);\n                return type;\n            },\n            getTypes() {\n                return componentTypes;\n            },\n            selectAdd(component, opts = {}) {\n                if (component) {\n                    component.set({ status: 'selected' });\n                    [\n                        'component:selected',\n                        'component:toggled'\n                    ].forEach(event => this.em.trigger(event, component, opts));\n                }\n            },\n            selectRemove(component, opts = {}) {\n                if (component) {\n                    const {em} = this;\n                    component.set({\n                        status: '',\n                        state: ''\n                    });\n                    [\n                        'component:deselected',\n                        'component:toggled'\n                    ].forEach(event => this.em.trigger(event, component, opts));\n                }\n            },\n            componentHovered() {\n                const em = c.em;\n                const model = em.get('componentHovered');\n                const previous = em.previous('componentHovered');\n                const state = 'hovered';\n                previous && previous.get('status') == state && previous.set({\n                    status: '',\n                    state: ''\n                });\n                model && _.isEmpty(model.get('status')) && model.set('status', state);\n            }\n        };\n    };\n});"]}