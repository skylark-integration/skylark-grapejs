{"version":3,"sources":["dom_components/model/Components.js"],"names":["define","langx","Backbone","_","Component","Components","Collection","extend","[object Object]","models","opt","this","listenTo","onAdd","config","em","model","attrs","options","df","get","componentTypes","domc","it","length","id","type","logWarning","value","cssc","parsed","parseHtml","checkId","html","css","componentsById","temporary","addCollection","mixin","isString","parseString","isArray","forEach","item","index","isMult","filter","i","map","processDef","prototype","add","apply","mdl","cid","ccid","processor","modelPr","each","val","key","$$typeof","props","parser","parserHtml","includes","comps","children","res","splitPropsFromAttr","attributes","components","getType","tagName","c","opts","style","getStyle","avoidInline","getConfig","isEmpty","name","setClassRule","setStyle","addClass"],"mappings":"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","file":"../../../dom_components/model/Components.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    'skylark-underscore'\n], function (langx,Backbone, _) {\n    'use strict';\n    let Component;\n    var Components =  Backbone.Collection.extend({\n        initialize(models, opt = {}) {\n            this.opt = opt;\n            this.listenTo(this, 'add', this.onAdd);\n            this.config = opt.config;\n            this.em = opt.em;\n            const {em} = this;\n            this.model = function(attrs, options) { // modified by lwf\n                var model;\n                const df = opt.em.get('DomComponents').componentTypes;\n                options.em = opt.em;\n                options.config = opt.config;\n                options.componentTypes = df;\n                options.domc = opt.domc;\n                for (var it = 0; it < df.length; it++) {\n                    var dfId = df[it].id;\n                    if (dfId == attrs.type) {\n                        model = df[it].model;\n                        break;\n                    }\n                }\n                if (!model) {\n                    model = df[df.length - 1].model;\n                    em && attrs.type && em.logWarning(`Component type '${ attrs.type }' not found`, {\n                        attrs,\n                        options\n                    });\n                }\n                return new model(attrs, options);\n            };\n        },\n        parseString(value, opt = {}) {\n            const {em} = this;\n            const {domc} = this.opt;\n            const cssc = em.get('CssComposer');\n            const parsed = em.get('Parser').parseHtml(value);\n            if (!Component)\n                Component =  Components.Component; //require('./Component').default; // modified by lwf\n            Component.checkId(parsed.html, parsed.css, domc.componentsById);\n            if (parsed.css && cssc && !opt.temporary) {\n                cssc.addCollection(parsed.css, langx.mixin({},opt,{\n                    extend: 1\n                }));\n            }\n            return parsed.html;\n        },\n        add(models, opt = {}) {\n            if (_.isString(models)) {\n                models = this.parseString(models, opt);\n            } else if (_.isArray(models)) {\n                models.forEach((item, index) => {\n                    if (_.isString(item)) {\n                        models[index] = this.parseString(item, opt);\n                    }\n                });\n            }\n            const isMult = _.isArray(models);\n            models = (isMult ? models : [models]).filter(i => i).map(model => this.processDef(model));\n            models = isMult ? models : models[0];\n            return Backbone.Collection.prototype.add.apply(this, [\n                models,\n                opt\n            ]);\n        },\n        processDef(mdl) {\n            if (mdl.cid && mdl.ccid)\n                return mdl;\n            const {em, config = {}} = this;\n            const {processor} = config;\n            let model = mdl;\n            if (processor) {\n                model = { ...model };\n                const modelPr = processor(model);\n                if (modelPr) {\n                    _.each(model, (val, key) => delete model[key]);\n                    _.extend(model, modelPr);\n                }\n            }\n            if (model.$$typeof && typeof model.props == 'object') {\n                model = { ...model };\n                model.props = { ...model.props };\n                const domc = em.get('DomComponents');\n                const parser = em.get('Parser');\n                const {parserHtml} = parser;\n                _.each(model, (value, key) => {\n                    if (!_.includes([\n                            'props',\n                            'type'\n                        ], key))\n                        delete model[key];\n                });\n                const {props} = model;\n                const comps = props.children;\n                delete props.children;\n                delete model.props;\n                const res = parserHtml.splitPropsFromAttr(props);\n                model.attributes = res.attrs;\n                if (comps) {\n                    model.components = comps;\n                }\n                if (!model.type) {\n                    model.type = 'textnode';\n                } else if (!domc.getType(model.type)) {\n                    model.tagName = model.type;\n                    delete model.type;\n                }\n                _.extend(model, res.props);\n            }\n            return model;\n        },\n        onAdd(model, c, opts = {}) {\n            const em = this.em;\n            const style = model.getStyle();\n            const avoidInline = em && em.getConfig('avoidInlineStyle');\n            if (!_.isEmpty(style) && !avoidInline && em && em.get && em.getConfig('forceClass') && !opts.temporary) {\n                const name = model.cid;\n                const rule = em.get('CssComposer').setClassRule(name, style);\n                model.setStyle({});\n                model.addClass(name);\n            }\n        }\n    });\n\n    return Components;\n});"]}