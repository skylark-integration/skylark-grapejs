{"version":3,"sources":["dom_components/view/ComponentView.js"],"names":["define","Backbone","a","Components","ComponentsView","Selectors","b","c","View","extend","[object Object]","this","getClasses","model","get","opt","config","em","modelOpt","$el","el","draggableComponents","opts","pfx","stylePrefix","ppfx","pStylePrefix","attr","classe","class","listenTo","updateStyle","renderAttributes","updateHighlight","updateStatus","reset","updateContent","handleChange","onActive","onDisable","data","setViewEl","view","_getFrame","views","push","initClasses","initComponents","avoidRender","events","dragstart","delegateEvents","temporary","init","_clbObj","editor","getEditor","prototype","remove","apply","arguments","frameM","components","forEach","comp","getView","splice","indexOf","removed","event","preventDefault","stopPropagation","run","target","classes","stopListening","updateClasses","length","importClasses","childrenView","comps","toListen","renderChildren","chgArr","keys","changed","emitUpdate","prop","clm","undefined","m","add","status","selectedCls","selectedParentCls","freezedCls","hoveredCls","toRemove","removeClass","join","actualCls","getAttribute","cls","avoidHover","trim","setAttribute","hl","getConfig","removeAttribute","id","getId","style","getStyle","isEmpty","setStyle","styleToString","str","pluck","name","value","removeAttr","attrs","highlightable","textable","type","_innertext","attributes","defaultAttr","data-gjs-type","draggable","data-highlightable","contenteditable","data-gjs-textable","each","nodeName","getAttributes","key","getChildrenContainer","innerHTML","e","getCanvasView","updateScript","container","getChildrenSelector","querySelector","getTemplate","rect","gtop","gleft","assignRect","offsetParent","offsetTop","offsetLeft","top","left","bottom","offsetHeight","right","offsetWidth","elDoc","ownerDocument","body","frameElement","defaultView","getOffsetRect","frame","scrollTop","scrollLeft","scrollBottom","isInViewport","force","behavior","scrollTo","scrollIntoView","block","_ensureElement","_setData","replaceWith","render","collection","frameView","componentTypes","childNodes","Array","slice","call","i","len","appendChild","shift","updateAttributes","postRender","onRender","trigger"],"mappings":"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","file":"../../../dom_components/view/ComponentView.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    '../model/Components',\n    './ComponentsView',\n    '../../selector_manager/model/Selectors',\n    '../../utils/dom',\n    '../../utils/mixins'\n], function (Backbone, a, Components, ComponentsView, Selectors, b, c) {\n    'use strict';\n    return Backbone.View.extend({\n        className() {\n            return this.getClasses();\n        },\n        tagName() {\n            return this.model.get('tagName');\n        },\n        initialize(opt = {}) {\n            const model = this.model;\n            const config = opt.config || {};\n            const em = config.em;\n            const modelOpt = model.opt || {};\n            const {$el, el} = this;\n            const {draggableComponents} = config;\n            this.opts = opt;\n            this.modelOpt = modelOpt;\n            this.config = config;\n            this.em = em || '';\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.attr = model.get('attributes');\n            this.classe = this.attr.class || [];\n            this.listenTo(model, 'change:style', this.updateStyle);\n            this.listenTo(model, 'change:attributes change:_innertext', this.renderAttributes);\n            this.listenTo(model, 'change:highlightable', this.updateHighlight);\n            this.listenTo(model, 'change:status', this.updateStatus);\n            this.listenTo(model, 'change:script', this.reset);\n            this.listenTo(model, 'change:content', this.updateContent);\n            this.listenTo(model, 'change', this.handleChange);\n            this.listenTo(model, 'active', this.onActive);\n            this.listenTo(model, 'disable', this.onDisable);\n            $el.data('model', model);\n            c.setViewEl(el, this);\n            model.view = this;\n            this._getFrame() && model.views.push(this);\n            this.initClasses();\n            this.initComponents({ avoidRender: 1 });\n            this.events = {\n                ...this.events,\n                ...draggableComponents && { dragstart: 'handleDragStart' }\n            };\n            this.delegateEvents();\n            !modelOpt.temporary && this.init(this._clbObj());\n        },\n        _clbObj() {\n            const {em, model, el} = this;\n            return {\n                editor: em && em.getEditor(),\n                model,\n                el\n            };\n        },\n        init() {\n        },\n        removed() {\n        },\n        onActive() {\n        },\n        onDisable() {\n        },\n        remove() {\n            Backbone.View.prototype.remove.apply(this, arguments);\n            const {model} = this;\n            const frame = this._getFrame() || {};\n            const frameM = frame.model;\n            model.components().forEach(comp => {\n                const view = comp.getView(frameM);\n                view && view.remove();\n            });\n            const {views} = model;\n            views.splice(views.indexOf(this), 1);\n            this.removed(this._clbObj());\n            return this;\n        },\n        handleDragStart(event) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.em.get('Commands').run('tlb-move', {\n                target: this.model,\n                event\n            });\n        },\n        initClasses() {\n            const {model} = this;\n            const event = 'change:classes';\n            const classes = model.get('classes');\n            if (classes instanceof Selectors) {\n                this.stopListening(model, event, this.initClasses);\n                this.listenTo(model, event, this.initClasses);\n                this.listenTo(classes, 'add remove change', this.updateClasses);\n                classes.length && this.importClasses();\n            }\n        },\n        initComponents(opts = {}) {\n            const {model, $el, childrenView} = this;\n            const event = 'change:components';\n            const comps = model.get('components');\n            const toListen = [\n                model,\n                event,\n                this.initComponents\n            ];\n            if (comps instanceof Components) {\n                $el.data('collection', comps);\n                childrenView && childrenView.remove();\n                this.stopListening(...toListen);\n                !opts.avoidRender && this.renderChildren();\n                this.listenTo(...toListen);\n            }\n        },\n        handleChange() {\n            const {model} = this;\n            const chgArr = a.keys(model.changed);\n            if (chgArr.length === 1 && chgArr[0] === 'status')\n                return;\n            model.emitUpdate();\n            for (let prop in model.changed) {\n                model.emitUpdate(prop);\n            }\n        },\n        importClasses() {\n            var clm = this.config.em.get('SelectorManager');\n            if (clm) {\n                this.model.get('classes').undefined(m => {\n                    clm.add(m.get('name'));\n                });\n            }\n        },\n        updateStatus(opts = {}) {\n            const em = this.em;\n            const el = this.el;\n            const status = this.model.get('status');\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            const selectedCls = `${ ppfx }selected`;\n            const selectedParentCls = `${ selectedCls }-parent`;\n            const freezedCls = `${ ppfx }freezed`;\n            const hoveredCls = `${ ppfx }hovered`;\n            const toRemove = [\n                selectedCls,\n                selectedParentCls,\n                freezedCls,\n                hoveredCls\n            ];\n            this.$el.removeClass(toRemove.join(' '));\n            var actualCls = el.getAttribute('class') || '';\n            var cls = '';\n            switch (status) {\n            case 'selected':\n                cls = `${ actualCls } ${ selectedCls }`;\n                break;\n            case 'selected-parent':\n                cls = `${ actualCls } ${ selectedParentCls }`;\n                break;\n            case 'freezed':\n                cls = `${ actualCls } ${ freezedCls }`;\n                break;\n            case 'freezed-selected':\n                cls = `${ actualCls } ${ freezedCls } ${ selectedCls }`;\n                break;\n            case 'hovered':\n                cls = !opts.avoidHover ? `${ actualCls } ${ hoveredCls }` : '';\n                break;\n            }\n            cls = cls.trim();\n            cls && el.setAttribute('class', cls);\n        },\n        updateHighlight() {\n            const hl = this.model.get('highlightable');\n            this.setAttribute('data-highlightable', hl ? 1 : '');\n        },\n        updateStyle() {\n            const {model, em, el} = this;\n            if (em && em.getConfig('avoidInlineStyle')) {\n                if (model.get('_innertext')) {\n                    el.removeAttribute('id');\n                } else {\n                    el.id = model.getId();\n                }\n                const style = model.getStyle();\n                !a.isEmpty(style) && model.setStyle(style);\n            } else {\n                this.setAttribute('style', model.styleToString());\n            }\n        },\n        updateClasses() {\n            const str = this.model.get('classes').pluck('name').join(' ');\n            this.setAttribute('class', str);\n            this.updateStatus();\n        },\n        setAttribute(name, value) {\n            const el = this.$el;\n            value ? el.attr(name, value) : el.removeAttr(name);\n        },\n        getClasses() {\n            return this.model.getClasses().join(' ');\n        },\n        updateAttributes() {\n            const attrs = [];\n            const {model, $el, el, config} = this;\n            const {highlightable, textable, type, _innertext} = model.attributes;\n            const {draggableComponents} = config;\n            const defaultAttr = {\n                'data-gjs-type': type || 'default',\n                ...draggableComponents && !_innertext ? { draggable: true } : {},\n                ...highlightable ? { 'data-highlightable': 1 } : {},\n                ...textable ? {\n                    contenteditable: 'false',\n                    'data-gjs-textable': 'true'\n                } : {}\n            };\n            a.each(el.attributes, attr => attrs.push(attr.nodeName));\n            attrs.forEach(attr => $el.removeAttr(attr));\n            const attr = {\n                ...defaultAttr,\n                ...model.getAttributes()\n            };\n            a.keys(attr).forEach(key => attr[key] === false && delete attr[key]);\n            $el.attr(attr);\n            this.updateStyle();\n        },\n        updateContent() {\n            this.getChildrenContainer().innerHTML = this.model.get('content');\n        },\n        prevDef(e) {\n            e.preventDefault();\n        },\n        updateScript() {\n            const {model, em} = this;\n            if (!model.get('script'))\n                return;\n            em && em.get('Canvas').getCanvasView().updateScript(this);\n        },\n        getChildrenContainer() {\n            var container = this.el;\n            if (typeof this.getChildrenSelector == 'function') {\n                container = this.el.querySelector(this.getChildrenSelector());\n            } else if (typeof this.getTemplate == 'function') {\n            }\n            return container;\n        },\n        getOffsetRect() {\n            const rect = {};\n            const target = this.el;\n            let gtop = 0;\n            let gleft = 0;\n            const assignRect = el => {\n                const {offsetParent} = el;\n                if (offsetParent) {\n                    gtop += offsetParent.offsetTop;\n                    gleft += offsetParent.offsetLeft;\n                    assignRect(offsetParent);\n                } else {\n                    rect.top = target.offsetTop + gtop;\n                    rect.left = target.offsetLeft + gleft;\n                    rect.bottom = rect.top + target.offsetHeight;\n                    rect.right = rect.left + target.offsetWidth;\n                }\n            };\n            assignRect(target);\n            return rect;\n        },\n        isInViewport({rect} = {}) {\n            const {el} = this;\n            const elDoc = el.ownerDocument;\n            const {body} = elDoc;\n            const {frameElement} = elDoc.defaultView;\n            const {top, left} = rect || this.getOffsetRect();\n            const frame = this._getFrame().getOffsetRect();\n            return top >= frame.scrollTop && left >= frame.scrollLeft && top <= frame.scrollBottom && left <= frameElement.offsetWidth + body.scrollLeft;\n        },\n        scrollIntoView(opts = {}) {\n            const rect = this.getOffsetRect();\n            const isInViewport = this.isInViewport({ rect });\n            if (!isInViewport || opts.force) {\n                const {el} = this;\n                if (opts.behavior !== 'smooth') {\n                    el.ownerDocument.defaultView.scrollTo(0, rect.top);\n                } else {\n                    el.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'nearest',\n                        ...opts\n                    });\n                }\n            }\n        },\n        reset() {\n            const {el} = this;\n            this.el = '';\n            this._ensureElement();\n            this._setData();\n            b.replaceWith(el, this.el);\n            this.render();\n        },\n        _setData() {\n            const {model} = this;\n            const collection = model.components();\n            const view = this;\n            this.$el.data({\n                model,\n                collection,\n                view\n            });\n        },\n        _getFrame() {\n            return this.config.frameView;\n        },\n        renderChildren() {\n            this.updateContent();\n            const container = this.getChildrenContainer();\n            const view = new ComponentsView({\n                collection: this.model.get('components'),\n                config: this.config,\n                componentTypes: this.opts.componentTypes\n            });\n            view.render(container);\n            this.childrenView = view;\n            const childNodes = Array.prototype.slice.call(view.el.childNodes);\n            for (var i = 0, len = childNodes.length; i < len; i++) {\n                container.appendChild(childNodes.shift());\n            }\n        },\n        renderAttributes() {\n            this.updateAttributes();\n            this.updateClasses();\n        },\n        render() {\n            this.renderAttributes();\n            if (this.modelOpt.temporary)\n                return this;\n            this.renderChildren();\n            this.updateScript();\n            this.postRender();\n            return this;\n        },\n        postRender() {\n            const {em, model, modelOpt} = this;\n            if (!modelOpt.temporary) {\n                this.onRender(this._clbObj());\n                em && em.trigger('component:mount', model);\n            }\n        },\n        onRender() {\n        }\n    });\n});"]}