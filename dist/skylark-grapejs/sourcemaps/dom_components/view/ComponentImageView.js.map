{"version":3,"sources":["dom_components/view/ComponentImageView.js"],"names":["define","a","ComponentView","extend","tagName","events","dblclick","click","error","dragstart","[object Object]","o","model","this","prototype","initialize","apply","arguments","listenTo","updateSrc","classEmpty","ppfx","config","modal","am","fetchFile","modelOpt","temporary","file","get","em","FileUploader","uploadFile","dataTransfer","files","res","obj","data","src","isString","set","$el","getSrcResult","srcExists","isDefaultSrc","addAttributes","ev","stopPropagation","opts","editor","runCommand","target","types","accept","Modal","close","AssetManager","setTarget","fallback","el","noDrag","preventDefault","renderAttributes","cls","attr","trim","postRender"],"mappings":";;;;;;;AAAAA,QACI,qBACA,mBACD,SAAUC,EAAGC,GACZ,aACA,OAAOA,EAAcC,QACjBC,QAAS,MACTC,QACIC,SAAU,WACVC,MAAO,aACPC,MAAO,UACPC,UAAW,UAEfC,WAAWC,GACP,MAAMC,EAAQC,KAAKD,MACnBV,EAAcY,UAAUC,WAAWC,MAAMH,KAAMI,WAC/CJ,KAAKK,SAASN,EAAO,aAAcC,KAAKM,WACxCN,KAAKO,cAAiBP,KAAKQ,gBAC3B,MAAMC,EAAST,KAAKS,OACpBA,EAAOC,QAAUV,KAAKU,MAAQD,EAAOC,OACrCD,EAAOE,KAAOX,KAAKW,GAAKF,EAAOE,IAC/BX,KAAKY,aAETf,YACI,GAAIG,KAAKa,SAASC,UACd,OACJ,MAAMf,EAAQC,KAAKD,MACbgB,EAAOhB,EAAMiB,IAAI,QACvB,GAAID,EAAM,CACKf,KAAKiB,GAAGD,IAAI,gBAAgBE,eACpCC,YAAaC,cAAgBC,OAAQN,KAAWO,IAC/C,MAAMC,EAAMD,GAAOA,EAAIE,MAAQF,EAAIE,KAAK,GAClCC,EAAMF,IAAQnC,EAAEsC,SAASH,GAAOA,EAAMA,EAAIE,KAChDA,GAAO1B,EAAM4B,KAAMF,IAAAA,MAEvB1B,EAAM4B,IAAI,OAAQ,MAG1B9B,YACI,MAAME,MAACA,EAAKQ,WAAEA,EAAUqB,IAAEA,GAAO5B,KAC3ByB,EAAM1B,EAAM8B,eACZC,EAAYL,IAAQ1B,EAAMgC,eAChChC,EAAMiC,eAAgBP,IAAAA,IACtBG,EAAIE,EAAY,cAAgB,YAAYvB,IAEhDV,SAASoC,GACLA,GAAMA,EAAGC,kBACT,IAAIjB,EAAKjB,KAAKmC,KAAK1B,OAAOQ,GACtBmB,EAASnB,EAAKA,EAAGD,IAAI,UAAY,GACjCoB,GAAUpC,KAAKD,MAAMiB,IAAI,aACzBoB,EAAOC,WAAW,eACdC,OAAQtC,KAAKD,MACbwC,OAAQ,SACRC,OAAQ,UACR3C,WACIuC,EAAOK,MAAMC,QACbN,EAAOO,aAAaC,UAAU,UAK9C/C,UACI,MAAMgD,EAAW7C,KAAKD,MAAM8B,cAAegB,SAAU,IACjDA,IACA7C,KAAK8C,GAAGrB,IAAMoB,IAEtBE,OAAOd,IACHA,EAAGe,kBACI,GAEXnD,SACIG,KAAKiD,mBACLjD,KAAKM,YACL,MAAMsB,IAACA,EAAG7B,MAAEA,GAASC,KACfkD,EAAMtB,EAAIuB,KAAK,UAAY,GAGjC,OAFCpD,EAAMiB,IAAI,QAAUY,EAAIuB,KAAK,WAAaD,KAASlD,KAAKO,aAAc6C,QACvEpD,KAAKqD,aACErD","file":"../../../dom_components/view/ComponentImageView.js","sourcesContent":["define([\n    'skylark-underscore',\n    './ComponentView'\n], function (a, ComponentView) {\n    'use strict';\n    return ComponentView.extend({\n        tagName: 'img',\n        events: {\n            dblclick: 'onActive',\n            click: 'initResize',\n            error: 'onError',\n            dragstart: 'noDrag'\n        },\n        initialize(o) {\n            const model = this.model;\n            ComponentView.prototype.initialize.apply(this, arguments);\n            this.listenTo(model, 'change:src', this.updateSrc);\n            this.classEmpty = `${ this.ppfx }plh-image`;\n            const config = this.config;\n            config.modal && (this.modal = config.modal);\n            config.am && (this.am = config.am);\n            this.fetchFile();\n        },\n        fetchFile() {\n            if (this.modelOpt.temporary)\n                return;\n            const model = this.model;\n            const file = model.get('file');\n            if (file) {\n                const fu = this.em.get('AssetManager').FileUploader();\n                fu.uploadFile({ dataTransfer: { files: [file] } }, res => {\n                    const obj = res && res.data && res.data[0];\n                    const src = obj && (a.isString(obj) ? obj : obj.src);\n                    src && model.set({ src });\n                });\n                model.set('file', '');\n            }\n        },\n        updateSrc() {\n            const {model, classEmpty, $el} = this;\n            const src = model.getSrcResult();\n            const srcExists = src && !model.isDefaultSrc();\n            model.addAttributes({ src });\n            $el[srcExists ? 'removeClass' : 'addClass'](classEmpty);\n        },\n        onActive(ev) {\n            ev && ev.stopPropagation();\n            var em = this.opts.config.em;\n            var editor = em ? em.get('Editor') : '';\n            if (editor && this.model.get('editable')) {\n                editor.runCommand('open-assets', {\n                    target: this.model,\n                    types: ['image'],\n                    accept: 'image/*',\n                    onSelect() {\n                        editor.Modal.close();\n                        editor.AssetManager.setTarget(null);\n                    }\n                });\n            }\n        },\n        onError() {\n            const fallback = this.model.getSrcResult({ fallback: 1 });\n            if (fallback)\n                this.el.src = fallback;\n        },\n        noDrag(ev) {\n            ev.preventDefault();\n            return false;\n        },\n        render() {\n            this.renderAttributes();\n            this.updateSrc();\n            const {$el, model} = this;\n            const cls = $el.attr('class') || '';\n            !model.get('src') && $el.attr('class', `${ cls } ${ this.classEmpty }`.trim());\n            this.postRender();\n            return this;\n        }\n    });\n});"]}