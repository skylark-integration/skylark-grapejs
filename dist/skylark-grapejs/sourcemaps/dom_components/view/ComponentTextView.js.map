{"version":3,"sources":["dom_components/view/ComponentTextView.js"],"names":["define","mixins","ComponentView","compProt","prototype","extend","events","dblclick","input","[object Object]","o","initialize","apply","this","arguments","disableEditing","bind","model","em","listenTo","onActive","updateContentText","syncContent","rte","get","m","v","opts","fromDisable","e","rteEnabled","stopPropagation","activeRte","enable","err","logError","toggleEvents","editable","disable","content","getContent","getChildrenContainer","innerHTML","force","comps","components","contentOpt","length","reset","set","customRte","clean","textable","selectable","some","type","is","_innertext","hoverable","removable","draggable","highlightable","copyable","toolbar","each","silent","trigger","add","method","setEditing","elDocs","el","ownerDocument","document","off","$el","disablePropagation","config","draggableComponents","parentNode","tagName"],"mappings":"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","file":"../../../dom_components/view/ComponentTextView.js","sourcesContent":["define([\n    '../../utils/mixins',\n    './ComponentView'\n], function (mixins, ComponentView) {\n    'use strict';\n    const compProt = ComponentView.prototype;\n    return ComponentView.extend({\n        events: {\n            dblclick: 'onActive',\n            input: 'onInput'\n        },\n        initialize(o) {\n            compProt.initialize.apply(this, arguments);\n            this.disableEditing = this.disableEditing.bind(this);\n            const model = this.model;\n            const em = this.em;\n            this.listenTo(model, 'focus', this.onActive);\n            this.listenTo(model, 'change:content', this.updateContentText);\n            this.listenTo(model, 'sync:content', this.syncContent);\n            this.rte = em && em.get('RichTextEditor');\n        },\n        updateContentText(m, v, opts = {}) {\n            !opts.fromDisable && this.disableEditing();\n        },\n        onActive(e) {\n            if (this.rteEnabled || !this.model.get('editable')) {\n                return;\n            }\n            e && e.stopPropagation && e.stopPropagation();\n            const {rte, em} = this;\n            if (rte) {\n                try {\n                    this.activeRte = rte.enable(this, this.activeRte);\n                } catch (err) {\n                    em.logError(err);\n                }\n            }\n            this.toggleEvents(1);\n        },\n        onDisable() {\n            this.disableEditing();\n        },\n        disableEditing() {\n            const {model, rte, activeRte, em} = this;\n            const editable = model.get('editable');\n            if (rte && editable) {\n                try {\n                    rte.disable(this, activeRte);\n                } catch (err) {\n                    em.logError(err);\n                }\n                this.syncContent();\n            }\n            this.toggleEvents();\n        },\n        getContent() {\n            const {rte} = this;\n            const {activeRte} = rte || {};\n            let content = '';\n            if (activeRte && typeof activeRte.getContent === 'function') {\n                content = activeRte.getContent();\n            } else {\n                content = this.getChildrenContainer().innerHTML;\n            }\n            return content;\n        },\n        syncContent(opts = {}) {\n            const {model, rte, rteEnabled} = this;\n            if (!rteEnabled && !opts.force)\n                return;\n            const content = this.getContent();\n            const comps = model.components();\n            const contentOpt = {\n                fromDisable: 1,\n                ...opts\n            };\n            comps.length && comps.reset(null, opts);\n            model.set('content', '', contentOpt);\n            if (rte.customRte) {\n                model.set('content', content, contentOpt);\n            } else {\n                const clean = model => {\n                    const textable = !!model.get('textable');\n                    const selectable = ![\n                        'text',\n                        'default',\n                        ''\n                    ].some(type => model.is(type)) || textable;\n                    model.set({\n                        _innertext: !selectable,\n                        editable: selectable && model.get('editable'),\n                        selectable: selectable,\n                        hoverable: selectable,\n                        removable: textable,\n                        draggable: textable,\n                        highlightable: 0,\n                        copyable: textable,\n                        ...!textable && { toolbar: '' }\n                    }, opts);\n                    model.get('components').each(model => clean(model));\n                };\n                !opts.silent && model.trigger('change:content', model, '', contentOpt);\n                comps.add(content, opts);\n                comps.each(model => clean(model));\n                comps.trigger('resetNavigator');\n            }\n        },\n        onInput() {\n            const {em} = this;\n            em && em.trigger('component:update', this.model);\n        },\n        disablePropagation(e) {\n            e.stopPropagation();\n        },\n        toggleEvents(enable) {\n            const {em} = this;\n\n            const method = enable ? 'on' : 'off';\n            em.setEditing(enable);\n            this.rteEnabled = !!enable;\n            var elDocs = [\n                this.el.ownerDocument,\n                document\n            ];\n            mixins.off(elDocs, 'mousedown', this.disableEditing);\n            mixins[method](elDocs, 'mousedown', this.disableEditing);\n            em[method]('toolbar:run:before', this.disableEditing);\n            this.$el.off('mousedown', this.disablePropagation);\n            this.$el[method]('mousedown', this.disablePropagation);\n            if (this.config.draggableComponents) {\n                let {el} = this;\n                while (el) {\n                    el.draggable = enable ? !1 : !0;\n                    el = el.parentNode;\n                    el && el.tagName == 'BODY' && (el = 0);\n                }\n            }\n        }\n    });\n});"]}