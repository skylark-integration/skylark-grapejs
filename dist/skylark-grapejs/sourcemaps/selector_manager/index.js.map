{"version":3,"sources":["selector_manager/index.js"],"names":["define","langx","_","b","defaults","Selector","Selectors","ClassTagsView","isId","str","isString","isClass","config","selectors","c","name","getConfig","[object Object]","conf","em","mxinin","ppfx","pStylePrefix","this","stylePrefix","selectorTags","collection","on","model","trigger","previousAttributes","changedAttributes","m","value","elTo","appendTo","isElement","document","querySelector","appendChild","render","opts","targets","Array","undefined","res","get","setTarget","filter","i","map","sel","isComponent","isRule","getSelectorsString","componentChanged","setState","opt","clone","isObject","substr","type","TYPE_ID","label","escapeName","cname","selector","where","add","getSelector","TYPE_CLASS","isArray","item","addSelector","classes","added","trim","split","forEach","push","result","indexOf","getAll","el"],"mappings":"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","file":"../../selector_manager/index.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    '../../utils/mixins',\n    './config/config',\n    './model/Selector',\n    './model/Selectors',\n    './view/ClassTagsView'\n], function (langx,_, b, defaults, Selector, Selectors, ClassTagsView) {\n    'use strict';\n    const isId = str => _.isString(str) && str[0] == '#';\n    const isClass = str => _.isString(str) && str[0] == '.';\n    return config => {\n        var c = config || {};\n        var selectors;\n        return {\n            Selector,\n            Selectors,\n            name: 'SelectorManager',\n            getConfig() {\n                return c;\n            },\n            init(conf = {}) {\n                c = langx.mxinin({},defaults,conf);\n                const em = c.em;\n                const ppfx = c.pStylePrefix;\n                this.em = em;\n                if (ppfx) {\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                }\n                this.selectorTags = new ClassTagsView({\n                    collection: new Selectors([], {\n                        em,\n                        config: c\n                    }),\n                    config: c\n                });\n                selectors = new Selectors(c.selectors);\n                selectors.on('add', model => em.trigger('selector:add', model));\n                selectors.on('remove', model => em.trigger('selector:remove', model));\n                selectors.on('change', model => em.trigger('selector:update', model, model.previousAttributes(), model.changedAttributes()));\n                em.on('change:state', (m, value) => em.trigger('selector:state', value));\n                return this;\n            },\n            postRender() {\n                const elTo = this.getConfig().appendTo;\n                if (elTo) {\n                    const el = _.isElement(elTo) ? elTo : document.querySelector(elTo);\n                    el.appendChild(this.render([]));\n                }\n            },\n            select(value, opts = {}) {\n                const targets = Array.undefined(value) ? value : [value];\n                const toSelect = this.em.get('StyleManager').setTarget(targets, opts);\n                const res = toSelect.filter(i => i).map(sel => b.isComponent(sel) ? sel : b.isRule(sel) && !sel.get('selectorsAdd') ? sel : sel.getSelectorsString());\n                this.selectorTags.componentChanged({ targets: res });\n                return this;\n            },\n            setState(value) {\n                this.em.setState(value);\n                return this;\n            },\n            getState() {\n                return this.em.setState();\n            },\n            addSelector(name, opt = {}) {\n                let opts = langx.clone(opt);\n                if (_.isObject(name)) {\n                    opts = name;\n                } else {\n                    opts.name = name;\n                }\n                if (isId(opts.name)) {\n                    opts.name = opts.name.substr(1);\n                    opts.type = Selector.TYPE_ID;\n                } else if (isClass(opts.name)) {\n                    opts.name = opts.name.substr(1);\n                }\n                if (opts.label && !opts.name) {\n                    opts.name = this.escapeName(opts.label);\n                }\n                const cname = opts.name;\n                const selector = cname ? this.get(cname, opts.type) : selectors.where(opts)[0];\n                if (!selector) {\n                    return selectors.add(opts, { config: c });\n                }\n                return selector;\n            },\n            getSelector(name, type = Selector.TYPE_CLASS) {\n                if (isId(name)) {\n                    name = name.substr(1);\n                    type = Selector.TYPE_ID;\n                } else if (isClass(name)) {\n                    name = name.substr(1);\n                }\n                return selectors.where({\n                    name,\n                    type\n                })[0];\n            },\n            add(name, opts = {}) {\n                if (_.isArray(name)) {\n                    return name.map(item => this.addSelector(item, opts));\n                } else {\n                    return this.addSelector(name, opts);\n                }\n            },\n            addClass(classes) {\n                const added = [];\n                if (_.isString(classes)) {\n                    classes = classes.trim().split(' ');\n                }\n                classes.forEach(name => added.push(this.addSelector(name)));\n                return added;\n            },\n            get(name, type) {\n                if (_.isArray(name)) {\n                    const result = [];\n                    const selectors = name.map(item => this.getSelector(item)).filter(item => item);\n                    selectors.forEach(item => result.indexOf(item) < 0 && result.push(item));\n                    return result;\n                } else {\n                    return this.getSelector(name, type);\n                }\n            },\n            getAll() {\n                return selectors;\n            },\n            escapeName(name) {\n                const {escapeName} = c;\n                return escapeName ? escapeName(name) : Selector.escapeName(name);\n            },\n            render(selectors) {\n                if (selectors) {\n                    this.selectorTags = new ClassTagsView({\n                        collection: new Selectors(selectors),\n                        config: c\n                    });\n                    return this.selectorTags.render().el;\n                } else\n                    return this.selectorTags.render().el;\n            }\n        };\n    };\n});"]}