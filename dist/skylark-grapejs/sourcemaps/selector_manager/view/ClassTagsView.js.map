{"version":3,"sources":["selector_manager/view/ClassTagsView.js"],"names":["define","a","Backbone","ClassTagView","View","extend","template","labelInfo","labelStates","labelHead","iconSync","iconAdd","pfx","ppfx","events","change [data-states]","click [data-add]","focusout [data-input]","keyup [data-input]","click [data-sync-style]","[object Object]","o","this","config","stylePrefix","pStylePrefix","className","stateInputId","stateInputC","states","em","emitter","getStyleEmitter","coll","collection","target","listenTo","componentChanged","__handleStateChange","checkSync","addNew","renderClasses","tagRemoved","delegateEvents","getTarget","cssC","get","selectors","getCommonSelectors","opts","noDisabled","state","mediaText","getCurrentMedia","ruleComponents","rule","add","style","getTargets","forEach","ruleComponent","getIdRule","getId","getStyle","setStyle","push","addStyle","trigger","component","sm","getEmitter","model","updateStateVis","result","name","t","label","join","addToClasses","$addBtn","css","display","$input","show","focus","hide","val","e","keyCode","addNewTag","endNewTag","getState","statesEl","getStates","debounce","targets","updateSelection","trgs","isArray","length","validSelectors","reset","map","tr","getSelectors","getValid","filter","i","_commonSelectors","args","item","indexOf","slice","reduce","acc","$btnSyncEl","hasStyle","componentFirst","isEmpty","getSelected","getSelectedAll","avoidInline","getConfig","getStatesC","updateSelector","elSel","el","querySelector","__getName","innerHTML","checkStates","selectedName","isString","getStyleable","idRes","getName","getFullString","ev","value","set","trim","fragmentEl","fragment","classes","getClasses","rendered","render","appendChild","append","frag","document","createDocumentFragment","empty","each","$el","find","$states","$statesC","tmpOpts","html","renderRes","$classes","getStateOptions","attr"],"mappings":"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","file":"../../../selector_manager/view/ClassTagsView.js","sourcesContent":["define([\n    'skylark-underscore',\n    'skylark-backbone',\n    './ClassTagView'\n], function (a, Backbone, ClassTagView) {\n    'use strict';\n    return Backbone.View.extend({\n        template({labelInfo, labelStates, labelHead, iconSync, iconAdd, pfx, ppfx}) {\n            return `\n    <div id=\"${ pfx }up\" class=\"${ pfx }header\">\n      <div id=\"${ pfx }label\" class=\"${ pfx }header-label\">${ labelHead }</div>\n      <div id=\"${ pfx }status-c\" class=\"${ pfx }header-status\">\n        <span id=\"${ pfx }input-c\" data-states-c>\n          <div class=\"${ ppfx }field ${ ppfx }select\">\n            <span id=\"${ ppfx }input-holder\">\n              <select id=\"${ pfx }states\" data-states>\n                <option value=\"\">${ labelStates }</option>\n              </select>\n            </span>\n            <div class=\"${ ppfx }sel-arrow\">\n              <div class=\"${ ppfx }d-s-arrow\"></div>\n            </div>\n          </div>\n        </span>\n      </div>\n    </div>\n    <div id=\"${ pfx }tags-field\" class=\"${ ppfx }field\">\n      <div id=\"${ pfx }tags-c\" data-selectors></div>\n      <input id=\"${ pfx }new\" data-input/>\n      <span id=\"${ pfx }add-tag\" class=\"${ pfx }tags-btn ${ pfx }tags-btn__add\" data-add>\n        ${ iconAdd }\n      </span>\n      <span class=\"${ pfx }tags-btn ${ pfx }tags-btn__sync\" style=\"display: none\" data-sync-style>\n        ${ iconSync }\n      </span>\n    </div>\n    <div class=\"${ pfx }sels-info\">\n      <div class=\"${ pfx }label-sel\">${ labelInfo }:</div>\n      <div class=\"${ pfx }sels\" data-selected></div>\n      <div style=\"clear:both\"></div>\n    </div>`;\n        },\n        events: {\n            'change [data-states]': 'stateChanged',\n            'click [data-add]': 'startNewTag',\n            'focusout [data-input]': 'endNewTag',\n            'keyup [data-input]': 'onInputKeyUp',\n            'click [data-sync-style]': 'syncStyle'\n        },\n        initialize(o = {}) {\n            this.config = o.config || {};\n            this.pfx = this.config.stylePrefix || '';\n            this.ppfx = this.config.pStylePrefix || '';\n            this.className = this.pfx + 'tags';\n            this.stateInputId = this.pfx + 'states';\n            this.stateInputC = this.pfx + 'input-c';\n            this.states = this.config.states || [];\n            const {em} = this.config;\n            const emitter = this.getStyleEmitter();\n            const coll = this.collection;\n            this.target = this.config.em;\n            this.em = em;\n            const toList = 'component:toggled component:update:classes';\n            const toListCls = 'component:update:classes change:state';\n            this.listenTo(em, toList, this.componentChanged);\n            this.listenTo(emitter, 'styleManager:update', this.componentChanged);\n            this.listenTo(em, toListCls, this.__handleStateChange);\n            this.listenTo(em, 'styleable:change change:device', this.checkSync);\n            this.listenTo(coll, 'add', this.addNew);\n            this.listenTo(coll, 'reset', this.renderClasses);\n            this.listenTo(coll, 'remove', this.tagRemoved);\n            this.delegateEvents();\n        },\n        syncStyle() {\n            const {em} = this;\n            const target = this.getTarget();\n            const cssC = em.get('CssComposer');\n            const opts = { noDisabled: 1 };\n            const selectors = this.getCommonSelectors({ opts });\n            const state = em.get('state');\n            const mediaText = em.getCurrentMedia();\n            const ruleComponents = [];\n            const rule = cssC.get(selectors, state, mediaText) || cssC.add(selectors, state, mediaText);\n            let style;\n            this.getTargets().forEach(target => {\n                const ruleComponent = cssC.getIdRule(target.getId(), {\n                    state,\n                    mediaText\n                });\n                style = ruleComponent.getStyle();\n                ruleComponent.setStyle({});\n                ruleComponents.push(ruleComponent);\n            });\n            style && rule.addStyle(style);\n            em.trigger('component:toggled');\n            em.trigger('component:sync-style', {\n                component: target,\n                selectors,\n                mediaText,\n                rule,\n                ruleComponents,\n                state\n            });\n        },\n        getStyleEmitter() {\n            const {em} = this;\n            const sm = em && em.get('StyleManager');\n            const emitter = sm && sm.getEmitter();\n            return emitter || {};\n        },\n        tagRemoved(model) {\n            this.updateStateVis();\n        },\n        getStateOptions() {\n            const {states, em} = this;\n            let result = [];\n            states.forEach(state => result.push(`<option value=\"${ state.name }\">${ em.t(`selectorManager.states.${ state.name }`) || state.label || state.name }</option>`));\n            return result.join('');\n        },\n        addNew(model) {\n            this.addToClasses(model);\n        },\n        startNewTag() {\n            this.$addBtn.css({ display: 'none' });\n            this.$input.show().focus();\n        },\n        endNewTag() {\n            this.$addBtn.css({ display: '' });\n            this.$input.hide().val('');\n        },\n        onInputKeyUp(e) {\n            if (e.keyCode === 13)\n                this.addNewTag(this.$input.val());\n            else if (e.keyCode === 27)\n                this.endNewTag();\n        },\n        checkStates() {\n            const state = this.em.getState();\n            const statesEl = this.getStates();\n            statesEl && statesEl.val(state);\n        },\n        componentChanged: a.debounce(function ({targets} = {}) {\n            this.updateSelection(targets);\n        }),\n        updateSelection(targets) {\n            let trgs = targets || this.getTargets();\n            trgs = a.isArray(trgs) ? trgs : [trgs];\n            let selectors = [];\n            if (trgs && trgs.length) {\n                selectors = this.getCommonSelectors({ targets: trgs });\n                this.checkSync({ validSelectors: selectors });\n            }\n            this.collection.reset(selectors);\n            this.updateStateVis(trgs);\n            return selectors;\n        },\n        getCommonSelectors({targets, opts = {}} = {}) {\n            const trgs = targets || this.getTargets();\n            const selectors = trgs.map(tr => tr.getSelectors && tr.getSelectors().getValid(opts)).filter(i => i);\n            return this._commonSelectors(...selectors);\n        },\n        _commonSelectors(...args) {\n            if (!args.length)\n                return [];\n            if (args.length === 1)\n                return args[0];\n            if (args.length === 2)\n                return args[0].filter(item => args[1].indexOf(item) >= 0);\n            return args.slice(1).reduce((acc, item) => this._commonSelectors(acc, item), args[0]);\n        },\n        checkSync: a.debounce(function () {\n            const {$btnSyncEl, config, collection} = this;\n            const target = this.getTarget();\n            let hasStyle;\n            if (target && config.componentFirst && collection.length) {\n                const style = target.getStyle();\n                hasStyle = !a.isEmpty(style);\n            }\n            $btnSyncEl && $btnSyncEl[hasStyle ? 'show' : 'hide']();\n        }),\n        getTarget() {\n            return this.target.getSelected();\n        },\n        getTargets() {\n            return this.target.getSelectedAll();\n        },\n        updateStateVis(target) {\n            const em = this.em;\n            const avoidInline = em && em.getConfig('avoidInlineStyle');\n            const display = this.collection.length || avoidInline ? '' : 'none';\n            this.getStatesC().css('display', display);\n            this.updateSelector(target);\n        },\n        __handleStateChange() {\n            this.updateSelector(this.getTargets());\n        },\n        updateSelector(targets) {\n            const elSel = this.el.querySelector('[data-selected]');\n            const result = [];\n            let trgs = targets || this.getTargets();\n            trgs = a.isArray(trgs) ? trgs : [trgs];\n            trgs.forEach(target => result.push(this.__getName(target)));\n            elSel && (elSel.innerHTML = result.join(', '));\n            this.checkStates();\n        },\n        __getName(target) {\n            const {pfx, config, em} = this;\n            const {selectedName, componentFirst} = config;\n            let result;\n            if (a.isString(target)) {\n                result = `<span class=\"${ pfx }sel-gen\">${ target }</span>`;\n            } else {\n                if (!target || !target.get)\n                    return;\n                const selectors = target.getSelectors().getStyleable();\n                const state = em.get('state');\n                const idRes = target.getId ? `<span class=\"${ pfx }sel-cmp\">${ target.getName() }</span><span class=\"${ pfx }sel-id\">#${ target.getId() }</span>` : '';\n                result = this.collection.getFullString(selectors);\n                result = result ? `<span class=\"${ pfx }sel-rule\">${ result }</span>` : target.get('selectorsAdd') || idRes;\n                result = componentFirst && idRes ? idRes : result;\n                result += state ? `<span class=\"${ pfx }sel-state\">:${ state }</span>` : '';\n                result = selectedName ? selectedName({\n                    result,\n                    state,\n                    target\n                }) : result;\n            }\n            return result && `<span class=\"${ pfx }sel\">${ result }</span>`;\n        },\n        stateChanged(ev) {\n            const {em} = this;\n            const {value} = ev.target;\n            em.set('state', value);\n        },\n        addNewTag(label) {\n            const {em} = this;\n            if (!label.trim())\n                return;\n            if (em) {\n                const sm = em.get('SelectorManager');\n                const model = sm.add({ label });\n                this.getTargets().forEach(target => {\n                    target.getSelectors().add(model);\n                    this.collection.add(model);\n                    this.updateStateVis();\n                });\n            }\n            this.endNewTag();\n        },\n        addToClasses(model, fragmentEl = null) {\n            const fragment = fragmentEl;\n            const classes = this.getClasses();\n            const rendered = new ClassTagView({\n                model,\n                config: this.config,\n                coll: this.collection\n            }).render().el;\n            fragment ? fragment.appendChild(rendered) : classes.append(rendered);\n            return rendered;\n        },\n        renderClasses() {\n            const frag = document.createDocumentFragment();\n            const classes = this.getClasses();\n            classes.empty();\n            this.collection.each(model => this.addToClasses(model, frag));\n            classes.append(frag);\n        },\n        getClasses() {\n            return this.$el.find('[data-selectors]');\n        },\n        getStates() {\n            if (!this.$states) {\n                const el = this.$el.find('[data-states]');\n                this.$states = el[0] && el;\n            }\n            return this.$states;\n        },\n        getStatesC() {\n            if (!this.$statesC)\n                this.$statesC = this.$el.find('#' + this.stateInputC);\n            return this.$statesC;\n        },\n        render() {\n            const {em, pfx, ppfx, config, $el, el} = this;\n            const {render, iconSync, iconAdd} = config;\n            const tmpOpts = {\n                iconSync,\n                iconAdd,\n                labelHead: em.t('selectorManager.label'),\n                labelStates: em.t('selectorManager.emptyState'),\n                labelInfo: em.t('selectorManager.selected'),\n                ppfx,\n                pfx,\n                el\n            };\n            $el.html(this.template(tmpOpts));\n            const renderRes = render && render(tmpOpts);\n            renderRes && renderRes !== el && $el.empty().append(renderRes);\n            this.$input = $el.find('[data-input]');\n            this.$addBtn = $el.find('[data-add]');\n            this.$classes = $el.find('#' + pfx + 'tags-c');\n            this.$btnSyncEl = $el.find('[data-sync-style]');\n            this.$input.hide();\n            const statesEl = this.getStates();\n            statesEl && statesEl.append(this.getStateOptions());\n            this.renderClasses();\n            $el.attr('class', `${ this.className } ${ ppfx }one-bg ${ ppfx }two-color`);\n            return this;\n        }\n    });\n});"]}