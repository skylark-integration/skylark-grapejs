{"version":3,"sources":["selector_manager/view/ClassTagView.js"],"names":["define","Backbone","View","extend","[object Object]","pfx","model","config","this","get","iconTagRemove","events","click [data-tag-remove]","click [data-tag-status]","dblclick [data-tag-name]","focusout [data-tag-name]","o","coll","stylePrefix","ppfx","pStylePrefix","em","listenTo","updateStatus","inputEl","el","querySelector","getInputEl","focus","setEditing","label","textContent","sm","name","escapeName","innerText","set","getSelectedAll","forEach","sel","getSelectors","remove","$el","iconTagOn","iconTagOff","$chk","find","html","removeClass","addClass","template","attr"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAqB,SAAUC,GACnC,aAEA,OAAOA,EAASC,KAAKC,QACjBC,WACI,MAAMC,IAACA,EAAGC,MAAEA,EAAKC,OAAEA,GAAUC,KAE7B,2BACOH,qBAAyBA,yDACzBA,6BAHOC,EAAMG,IAAI,UAAY,8BAI7BJ,kBAAsBA,yCAC9BE,EAAOG,sCAIVC,QACIC,0BAA2B,YAC3BC,0BAA2B,eAC3BC,2BAA4B,eAC5BC,2BAA4B,cAEhCX,WAAWY,GACP,MAAMT,EAASS,EAAET,WACjBC,KAAKD,OAASA,EACdC,KAAKS,KAAOD,EAAEC,MAAQ,KACtBT,KAAKH,IAAME,EAAOW,aAAe,GACjCV,KAAKW,KAAOZ,EAAOa,cAAgB,GACnCZ,KAAKa,GAAKd,EAAOc,GACjBb,KAAKc,SAASd,KAAKF,MAAO,gBAAiBE,KAAKe,eAEpDnB,aAII,OAHKI,KAAKgB,UACNhB,KAAKgB,QAAUhB,KAAKiB,GAAGC,cAAc,oBAElClB,KAAKgB,SAEhBpB,eACI,MAAMiB,GAACA,GAAMb,KACPgB,EAAUhB,KAAKmB,aACrBH,EAAiB,iBAAI,EACrBA,EAAQI,QACRP,GAAMA,EAAGQ,WAAW,IAExBzB,aACI,MAAME,EAAQE,KAAKF,MACbkB,EAAUhB,KAAKmB,aACfG,EAAQN,EAAQO,YAChBV,EAAKb,KAAKa,GACVW,EAAKX,GAAMA,EAAGZ,IAAI,mBAGxB,GAFAe,EAAiB,iBAAI,EACrBH,GAAMA,EAAGQ,WAAW,GAChBG,EAAI,CACJ,MAAMC,EAAOD,EAAGE,WAAWJ,GACvBE,EAAGvB,IAAIwB,GACPT,EAAQW,UAAY7B,EAAMG,IAAI,SAE9BH,EAAM8B,KACFH,KAAAA,EACAH,MAAAA,MAKhB1B,eACI,MAAME,MAACA,GAASE,KAChBF,EAAM8B,IAAI,UAAW9B,EAAMG,IAAI,YAEnCL,YACI,MAAMiB,GAACA,EAAEf,MAAEA,GAASE,MACJa,GAAMA,EAAGgB,kBACjBC,QAAQC,KACXjC,EAAMG,IAAI,cAAgB8B,GAAOA,EAAIC,eAAeC,OAAOnC,MAGpEF,eACI,MAAME,MAACA,EAAKoC,IAAEA,EAAGnC,OAAEA,GAAUC,MACvBmC,UAACA,EAASC,WAAEA,GAAcrC,EAC1BsC,EAAOH,EAAII,KAAK,qBAClBxC,EAAMG,IAAI,WACVoC,EAAKE,KAAKJ,GACVD,EAAIM,YAAY,YAEhBH,EAAKE,KAAKH,GACVF,EAAIO,SAAS,YAGrB7C,SACI,MAAMC,EAAMG,KAAKH,IACXc,EAAOX,KAAKW,KAIlB,OAHAX,KAAKkC,IAAIK,KAAKvC,KAAK0C,YACnB1C,KAAKkC,IAAIS,KAAK,WAAa9C,QAAYc,aACvCX,KAAKe,eACEf","file":"../../../selector_manager/view/ClassTagView.js","sourcesContent":["define(['skylark-backbone'], function (Backbone) {\n    'use strict';\n    const inputProp = 'contentEditable';\n    return Backbone.View.extend({\n        template() {\n            const {pfx, model, config} = this;\n            const label = model.get('label') || '';\n            return `\n      <span id=\"${ pfx }checkbox\" class=\"${ pfx }tag-status\" data-tag-status></span>\n      <span id=\"${ pfx }tag-label\" data-tag-name>${ label }</span>\n      <span id=\"${ pfx }close\" class=\"${ pfx }tag-close\" data-tag-remove>\n        ${ config.iconTagRemove }\n      </span>\n    `;\n        },\n        events: {\n            'click [data-tag-remove]': 'removeTag',\n            'click [data-tag-status]': 'changeStatus',\n            'dblclick [data-tag-name]': 'startEditTag',\n            'focusout [data-tag-name]': 'endEditTag'\n        },\n        initialize(o) {\n            const config = o.config || {};\n            this.config = config;\n            this.coll = o.coll || null;\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.em = config.em;\n            this.listenTo(this.model, 'change:active', this.updateStatus);\n        },\n        getInputEl() {\n            if (!this.inputEl) {\n                this.inputEl = this.el.querySelector('[data-tag-name]');\n            }\n            return this.inputEl;\n        },\n        startEditTag() {\n            const {em} = this;\n            const inputEl = this.getInputEl();\n            inputEl[inputProp] = true;\n            inputEl.focus();\n            em && em.setEditing(1);\n        },\n        endEditTag() {\n            const model = this.model;\n            const inputEl = this.getInputEl();\n            const label = inputEl.textContent;\n            const em = this.em;\n            const sm = em && em.get('SelectorManager');\n            inputEl[inputProp] = false;\n            em && em.setEditing(0);\n            if (sm) {\n                const name = sm.escapeName(label);\n                if (sm.get(name)) {\n                    inputEl.innerText = model.get('label');\n                } else {\n                    model.set({\n                        name,\n                        label\n                    });\n                }\n            }\n        },\n        changeStatus() {\n            const {model} = this;\n            model.set('active', !model.get('active'));\n        },\n        removeTag() {\n            const {em, model} = this;\n            const targets = em && em.getSelectedAll();\n            targets.forEach(sel => {\n                !model.get('protected') && sel && sel.getSelectors().remove(model);\n            });\n        },\n        updateStatus() {\n            const {model, $el, config} = this;\n            const {iconTagOn, iconTagOff} = config;\n            const $chk = $el.find('[data-tag-status]');\n            if (model.get('active')) {\n                $chk.html(iconTagOn);\n                $el.removeClass('opac50');\n            } else {\n                $chk.html(iconTagOff);\n                $el.addClass('opac50');\n            }\n        },\n        render() {\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            this.$el.html(this.template());\n            this.$el.attr('class', `${ pfx }tag ${ ppfx }three-bg`);\n            this.updateStatus();\n            return this;\n        }\n    });\n});"]}