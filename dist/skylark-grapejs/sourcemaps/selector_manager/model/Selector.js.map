{"version":3,"sources":["selector_manager/model/Selector.js"],"names":["define","Backbone","Selector","Model","extend","idAttribute","defaults","name","label","type","active","private","protected","[object Object]","props","opts","config","this","get","set","namePreEsc","escapeName","nameEsc","escape","init","TYPE_CLASS","TYPE_ID","trim","replace"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAqB,SAAUC,GACnC,aACA,MAEMC,EAAWD,EAASE,MAAMC,QAC5BC,YAAa,OACbC,UACIC,KAAM,GACNC,MAAO,GACPC,KAPW,EAQXC,QAAQ,EACRC,SAAS,EACTC,WAAW,GAEfC,WAAWC,EAAOC,MACd,MAAMC,OACFA,MACAD,EACER,EAAOU,KAAKC,IAAI,QAChBV,EAAQS,KAAKC,IAAI,SAClBX,EAEOC,GACRS,KAAKE,IAAI,QAASZ,GAFlBU,KAAKE,IAAI,OAAQX,GAIrB,MAAMY,EAAaH,KAAKC,IAAI,SACtBG,WAACA,GAAcL,EACfM,EAAUD,EAAaA,EAAWD,GAAclB,EAASmB,WAAWD,GAC1EH,KAAKE,IAAI,OAAQG,IAErBT,YAAYE,MACR,MAAMQ,OAACA,GAAUR,EACXR,EAAOU,KAAKC,IAAI,QACtB,IAAIM,EAAO,GACX,OAAQP,KAAKC,IAAI,SACjB,KAjCW,EAkCPM,EAAO,IACP,MACJ,KAnCQ,EAoCJA,EAAO,IAGX,OAAOA,GAAQD,EAASA,EAAOhB,GAAQA,MAG3CkB,WA3Ce,EA4CfC,QA3CY,EA4CZL,WAAWd,MACIA,IAAQoB,OAAOC,QAAQ,sBAAuB,OAGjE,OAAO1B","file":"../../../selector_manager/model/Selector.js","sourcesContent":["define(['skylark-backbone'], function (Backbone) {\n    'use strict';\n    const TYPE_CLASS = 1;\n    const TYPE_ID = 2;\n    const Selector = Backbone.Model.extend({\n        idAttribute: 'name',\n        defaults: {\n            name: '',\n            label: '',\n            type: TYPE_CLASS,\n            active: true,\n            private: false,\n            protected: false\n        },\n        initialize(props, opts = {}) {\n            const {\n                config = {}\n            } = opts;\n            const name = this.get('name');\n            const label = this.get('label');\n            if (!name) {\n                this.set('name', label);\n            } else if (!label) {\n                this.set('label', name);\n            }\n            const namePreEsc = this.get('name');\n            const {escapeName} = config;\n            const nameEsc = escapeName ? escapeName(namePreEsc) : Selector.escapeName(namePreEsc);\n            this.set('name', nameEsc);\n        },\n        getFullName(opts = {}) {\n            const {escape} = opts;\n            const name = this.get('name');\n            let init = '';\n            switch (this.get('type')) {\n            case TYPE_CLASS:\n                init = '.';\n                break;\n            case TYPE_ID:\n                init = '#';\n                break;\n            }\n            return init + (escape ? escape(name) : name);\n        }\n    }, {\n        TYPE_CLASS,\n        TYPE_ID,\n        escapeName(name) {\n            return `${ name }`.trim().replace(/([^a-z0-9\\w-\\:]+)/gi, '-');\n        }\n    });\n    return Selector;\n});"]}