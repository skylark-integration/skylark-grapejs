{"version":3,"sources":["block_manager/index.js"],"names":["define","a","defaults","Blocks","BlockCategories","BlocksView","blocks","blocksVisible","blocksView","c","categories","name","[object Object]","config","em","collection","listenTo","model","add","trigger","remove","coll","reset","models","this","getConfig","getAll","length","elTo","appendTo","isElement","document","querySelector","appendChild","render","id","opts","obj","get","getAllVisible","getCategories","getContainer","el","toRender","external","rendered","updateConfig"],"mappings":";;;;;;;AAAAA,QACI,qBACA,kBACA,iBACA,qBACA,qBACD,SAAUC,EAAGC,EAAUC,EAAQC,EAAiBC,GAC/C,aACA,MAAO,KACH,IACIC,EAAQC,EAAeC,EADvBC,KAEAC,KACJ,OACIC,KAAM,eACNC,KAAKC,GAED,MAAMC,GADNL,EAAII,OACSC,GACb,IAAK,IAAIH,KAAQT,EACPS,KAAQF,IACVA,EAAEE,GAAQT,EAASS,IAqB3B,OAlBAL,EAAS,IAAIH,MACbI,EAAgB,IAAIJ,MACpBO,EAAa,IAAIN,EACjBI,EAAa,IAAIH,GACbU,WAAYR,EACZG,WAAAA,GACDD,GACHH,EAAOU,SAASV,EAAQ,MAAOW,IAC3BV,EAAcW,IAAID,GAClBH,GAAMA,EAAGK,QAAQ,YAAaF,KAElCX,EAAOU,SAASV,EAAQ,SAAUW,IAC9BV,EAAca,OAAOH,GACrBH,GAAMA,EAAGK,QAAQ,eAAgBF,KAErCX,EAAOU,SAASV,EAAQ,QAASe,IAC7Bd,EAAce,MAAMD,EAAKE,UAEtBC,MAEXC,UAAS,IACEhB,EAEXG,SACI,MAAMN,EAASkB,KAAKE,UACnBpB,EAAOqB,QAAUrB,EAAOgB,MAAMb,EAAEH,SAErCM,aACI,MAAMgB,EAAOJ,KAAKC,YAAYI,SAC9B,GAAID,EAAM,EACK3B,EAAE6B,UAAUF,GAAQA,EAAOG,SAASC,cAAcJ,IAC1DK,YAAYT,KAAKU,YAG5BtB,IAAIuB,EAAIC,GACJ,IAAIC,EAAMD,MAEV,OADAC,EAAIF,GAAKA,EACF7B,EAAOY,IAAImB,IAEtBC,IAAIH,GACO7B,EAAOgC,IAAIH,GAEtBT,OAAM,IACKpB,EAEXiC,cAAa,IACFhC,EAEXa,OAAOe,GACI7B,EAAOc,OAAOe,GAEzBK,cAAa,IACF9B,EAEX+B,aAAY,IACDjC,EAAWkC,GAEtB9B,OAAON,EAAQ8B,MACX,MAAMO,EAAWrC,GAAUkB,KAAKE,SAASH,OACzC,OAAIa,EAAKQ,SACE,IAAIvC,GACPU,WAAY,IAAIZ,EAAOwC,GACvBjC,WAAAA,OAEGD,KACA2B,IACJF,SAASQ,IAEXlC,EAAWqC,WACZrC,EAAW0B,SACX1B,EAAWqC,SAAW,GAE1BrC,EAAWsC,aAAaV,GACxB5B,EAAWO,WAAWO,MAAMqB,GACrBnB,KAAKiB","file":"../../block_manager/index.js","sourcesContent":["define([\n    'skylark-underscore',\n    './config/config',\n    './model/Blocks',\n    './model/Categories',\n    './view/BlocksView'\n], function (a, defaults, Blocks, BlockCategories, BlocksView) {\n    'use strict';\n    return () => {\n        var c = {};\n        var blocks, blocksVisible, blocksView;\n        var categories = [];\n        return {\n            name: 'BlockManager',\n            init(config) {\n                c = config || {};\n                const em = c.em;\n                for (let name in defaults) {\n                    if (!(name in c)) {\n                        c[name] = defaults[name];\n                    }\n                }\n                blocks = new Blocks([]);\n                blocksVisible = new Blocks([]);\n                categories = new BlockCategories();\n                blocksView = new BlocksView({\n                    collection: blocksVisible,\n                    categories\n                }, c);\n                blocks.listenTo(blocks, 'add', model => {\n                    blocksVisible.add(model);\n                    em && em.trigger('block:add', model);\n                });\n                blocks.listenTo(blocks, 'remove', model => {\n                    blocksVisible.remove(model);\n                    em && em.trigger('block:remove', model);\n                });\n                blocks.listenTo(blocks, 'reset', coll => {\n                    blocksVisible.reset(coll.models);\n                });\n                return this;\n            },\n            getConfig() {\n                return c;\n            },\n            onLoad() {\n                const blocks = this.getAll();\n                !blocks.length && blocks.reset(c.blocks);\n            },\n            postRender() {\n                const elTo = this.getConfig().appendTo;\n                if (elTo) {\n                    const el = a.isElement(elTo) ? elTo : document.querySelector(elTo);\n                    el.appendChild(this.render());\n                }\n            },\n            add(id, opts) {\n                var obj = opts || {};\n                obj.id = id;\n                return blocks.add(obj);\n            },\n            get(id) {\n                return blocks.get(id);\n            },\n            getAll() {\n                return blocks;\n            },\n            getAllVisible() {\n                return blocksVisible;\n            },\n            remove(id) {\n                return blocks.remove(id);\n            },\n            getCategories() {\n                return categories;\n            },\n            getContainer() {\n                return blocksView.el;\n            },\n            render(blocks, opts = {}) {\n                const toRender = blocks || this.getAll().models;\n                if (opts.external) {\n                    return new BlocksView({\n                        collection: new Blocks(toRender),\n                        categories\n                    }, {\n                        ...c,\n                        ...opts\n                    }).render().el;\n                }\n                if (!blocksView.rendered) {\n                    blocksView.render();\n                    blocksView.rendered = 1;\n                }\n                blocksView.updateConfig(opts);\n                blocksView.collection.reset(toRender);\n                return this.getContainer();\n            }\n        };\n    };\n});"]}