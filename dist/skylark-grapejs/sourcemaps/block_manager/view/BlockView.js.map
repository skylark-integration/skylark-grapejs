{"version":3,"sources":["block_manager/view/BlockView.js"],"names":["define","Backbone","_","mixins","View","extend","events","click","mousedown","dragstart","drag","dragend","[object Object]","o","config","model","this","em","endDrag","bind","ppfx","pStylePrefix","listenTo","remove","render","appendOnClick","sorter","getSorter","content","get","selected","getSelected","target","valid","setDropContent","validTarget","getEl","parent","wrapper","getWrapper","result","append","setSelected","scroll","e","button","el","draggable","refreshCanvas","setDragHelper","startSort","on","document","ev","data","isObject","JSON","stringify","set","dataTransfer","setData","trigger","oldKey","oldActive","onAll","resetId","dragResult","dragContent","off","moved","endMove","className","label","t","id","media","innerHTML","title","textContent","trim","hasDnd","setAttribute","prefix"],"mappings":"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","file":"../../../block_manager/view/BlockView.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins'\n], function (Backbone, _, mixins) {\n    'use strict';\n    return Backbone.View.extend({\n        events: {\n            click: 'handleClick',\n            mousedown: 'startDrag',\n            dragstart: 'handleDragStart',\n            drag: 'handleDrag',\n            dragend: 'handleDragEnd'\n        },\n        initialize(o, config = {}) {\n            const {model} = this;\n            this.em = config.em;\n            this.config = config;\n            this.endDrag = this.endDrag.bind(this);\n            this.ppfx = config.pStylePrefix || '';\n            this.listenTo(model, 'destroy remove', this.remove);\n            this.listenTo(model, 'change', this.render);\n        },\n        handleClick() {\n            const {config, model, em} = this;\n            if (!config.appendOnClick)\n                return;\n            const sorter = config.getSorter();\n            const content = model.get('content');\n            const selected = em.getSelected();\n            sorter.setDropContent(content);\n            let target, valid;\n            if (selected) {\n                valid = sorter.validTarget(selected.getEl(), content);\n                if (valid.valid) {\n                    target = selected;\n                } else {\n                    const parent = selected.parent();\n                    valid = sorter.validTarget(parent.getEl(), content);\n                    if (valid.valid)\n                        target = parent;\n                }\n            }\n            if (!target) {\n                const wrapper = em.getWrapper();\n                valid = sorter.validTarget(wrapper.getEl(), content);\n                if (valid.valid)\n                    target = wrapper;\n            }\n            const result = target && target.append(content)[0];\n            result && em.setSelected(result, { scroll: 1 });\n        },\n        startDrag(e) {\n            const {config, em} = this;\n            if (e.button !== 0 || !config.getSorter || this.el.draggable)\n                return;\n            em.refreshCanvas();\n            const sorter = config.getSorter();\n            sorter.setDragHelper(this.el, e);\n            sorter.setDropContent(this.model.get('content'));\n            sorter.startSort(this.el);\n            mixins.on(document, 'mouseup', this.endDrag);\n        },\n        handleDragStart(ev) {\n            const {em, model} = this;\n            const content = model.get('content');\n            const isObj = _.isObject(content);\n            const data = isObj ? JSON.stringify(content) : content;\n            em.set('dragResult');\n            ev.dataTransfer.setData('text', data);\n            em.set('dragContent', content);\n            em.trigger('block:drag:start', model, ev);\n        },\n        handleDrag(ev) {\n            this.em.trigger('block:drag', this.model, ev);\n        },\n        handleDragEnd() {\n            const {em, model} = this;\n            const result = em.get('dragResult');\n            if (result) {\n                const oldKey = 'activeOnRender';\n                const oldActive = result.get && result.get(oldKey);\n                if (model.get('activate') || oldActive) {\n                    result.trigger('active');\n                    result.set(oldKey, 0);\n                }\n                if (model.get('select')) {\n                    em.setSelected(result);\n                }\n                if (model.get('resetId')) {\n                    result.onAll(model => model.resetId());\n                }\n            }\n            em.set({\n                dragResult: null,\n                dragContent: null\n            });\n            em.trigger('block:drag:stop', result, model);\n        },\n        endDrag(e) {\n            mixins.off(document, 'mouseup', this.endDrag);\n            const sorter = this.config.getSorter();\n            sorter.moved = 0;\n            sorter.endMove();\n        },\n        render() {\n            const {em, el, ppfx, model} = this;\n            const className = `${ ppfx }block`;\n            const label = em && em.t(`blockManager.labels.${ model.id }`) || model.get('label');\n            const render = model.get('render');\n            const media = model.get('media');\n            el.className += ` ${ className } ${ ppfx }one-bg ${ ppfx }four-color-h`;\n            el.innerHTML = `\n      ${ media ? `<div class=\"${ className }__media\">${ media }</div>` : '' }\n      <div class=\"${ className }-label\">${ label }</div>\n    `;\n            el.title = el.textContent.trim();\n            mixins.hasDnd(em) && el.setAttribute('draggable', true);\n            const result = render && render({\n                el,\n                model,\n                className,\n                prefix: ppfx\n            });\n            if (result)\n                el.innerHTML = result;\n            return this;\n        }\n    });\n});"]}