{"version":3,"sources":["block_manager/view/CategoryView.js"],"names":["define","_","Backbone","View","extend","template","events","[object Object]","o","config","this","pfx","pStylePrefix","em","caretR","caretD","iconClass","activeClass","className","listenTo","model","updateVisibility","delegateEvents","get","open","close","el","getIconEl","getBlocksEl","style","display","set","iconEl","querySelector","blocksEl","appendChild","$el","label","t","id","innerHTML","undefined","css","order"],"mappings":";;;;;;;AAAAA,QACI,qBACA,oBACD,SAAUC,EAAGC,GACZ,aACA,OAAOA,EAASC,KAAKC,QACjBC,SAAUJ,EAAEI,SAAS,yJAOrBC,UACAC,WAAWC,KAAQC,MACfC,KAAKD,OAASA,EACd,MAAME,EAAMF,EAAOG,cAAgB,GACnCF,KAAKG,GAAKJ,EAAOI,GACjBH,KAAKC,IAAMA,EACXD,KAAKI,OAAS,oBACdJ,KAAKK,OAAS,mBACdL,KAAKM,aAAgBL,cACrBD,KAAKO,eAAkBN,QACvBD,KAAKQ,aAAgBP,kBACrBD,KAAKJ,iBAAkBK,UAAe,SACtCD,KAAKS,SAAST,KAAKU,MAAO,cAAeV,KAAKW,kBAC9CX,KAAKY,kBAETf,mBACQG,KAAKU,MAAMG,IAAI,QACfb,KAAKc,OAELd,KAAKe,SAEblB,OACIG,KAAKgB,GAAGR,aAAgBR,KAAKQ,aAAeR,KAAKO,cACjDP,KAAKiB,YAAYT,aAAgBR,KAAKM,aAAeN,KAAKK,SAC1DL,KAAKkB,cAAcC,MAAMC,QAAU,IAEvCvB,QACIG,KAAKgB,GAAGR,UAAYR,KAAKQ,UACzBR,KAAKiB,YAAYT,aAAgBR,KAAKM,aAAeN,KAAKI,SAC1DJ,KAAKkB,cAAcC,MAAMC,QAAU,QAEvCvB,SACI,IAAIa,EAAQV,KAAKU,MACjBA,EAAMW,IAAI,QAASX,EAAMG,IAAI,UAEjChB,YAII,OAHKG,KAAKsB,SACNtB,KAAKsB,OAAStB,KAAKgB,GAAGO,cAAc,IAAMvB,KAAKM,YAE5CN,KAAKsB,QAEhBzB,cAII,OAHKG,KAAKwB,WACNxB,KAAKwB,SAAWxB,KAAKgB,GAAGO,cAAc,IAAMvB,KAAKC,IAAM,aAEpDD,KAAKwB,UAEhB3B,OAAOmB,GACHhB,KAAKkB,cAAcO,YAAYT,IAEnCnB,SACI,MAAMM,GAACA,EAAEa,GAAEA,EAAEU,IAAEA,EAAGhB,MAAEA,GAASV,KACvB2B,EAAQxB,EAAGyB,6BAA8BlB,EAAMmB,OAAUnB,EAAMG,IAAI,SAQzE,OAPAG,EAAGc,UAAY9B,KAAK+B,WAChB9B,IAAKD,KAAKC,IACV0B,MAAAA,IAEJX,EAAGR,UAAYR,KAAKQ,UACpBkB,EAAIM,KAAMC,MAAOvB,EAAMG,IAAI,WAC3Bb,KAAKW,mBACEX","file":"../../../block_manager/view/CategoryView.js","sourcesContent":["define([\n    'skylark-underscore',\n    'skylark-backbone'\n], function (_, Backbone) {\n    'use strict';\n    return Backbone.View.extend({\n        template: _.template(`\n  <div class=\"<%= pfx %>title\">\n    <i class=\"<%= pfx %>caret-icon\"></i>\n    <%= label %>\n  </div>\n  <div class=\"<%= pfx %>blocks-c\"></div>\n  `),\n        events: {},\n        initialize(o = {}, config = {}) {\n            this.config = config;\n            const pfx = config.pStylePrefix || '';\n            this.em = config.em;\n            this.pfx = pfx;\n            this.caretR = 'fa fa-caret-right';\n            this.caretD = 'fa fa-caret-down';\n            this.iconClass = `${ pfx }caret-icon`;\n            this.activeClass = `${ pfx }open`;\n            this.className = `${ pfx }block-category`;\n            this.events[`click .${ pfx }title`] = 'toggle';\n            this.listenTo(this.model, 'change:open', this.updateVisibility);\n            this.delegateEvents();\n        },\n        updateVisibility() {\n            if (this.model.get('open'))\n                this.open();\n            else\n                this.close();\n        },\n        open() {\n            this.el.className = `${ this.className } ${ this.activeClass }`;\n            this.getIconEl().className = `${ this.iconClass } ${ this.caretD }`;\n            this.getBlocksEl().style.display = '';\n        },\n        close() {\n            this.el.className = this.className;\n            this.getIconEl().className = `${ this.iconClass } ${ this.caretR }`;\n            this.getBlocksEl().style.display = 'none';\n        },\n        toggle() {\n            var model = this.model;\n            model.set('open', !model.get('open'));\n        },\n        getIconEl() {\n            if (!this.iconEl) {\n                this.iconEl = this.el.querySelector('.' + this.iconClass);\n            }\n            return this.iconEl;\n        },\n        getBlocksEl() {\n            if (!this.blocksEl) {\n                this.blocksEl = this.el.querySelector('.' + this.pfx + 'blocks-c');\n            }\n            return this.blocksEl;\n        },\n        append(el) {\n            this.getBlocksEl().appendChild(el);\n        },\n        render() {\n            const {em, el, $el, model} = this;\n            const label = em.t(`blockManager.categories.${ model.id }`) || model.get('label');\n            el.innerHTML = this.undefined({\n                pfx: this.pfx,\n                label\n            });\n            el.className = this.className;\n            $el.css({ order: model.get('order') });\n            this.updateVisibility();\n            return this;\n        }\n    });\n});"]}