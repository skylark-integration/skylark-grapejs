{"version":3,"sources":["block_manager/view/BlocksView.js"],"names":["define","Backbone","_","BlockView","CategoryView","View","extend","[object Object]","opts","config","bindAll","this","categories","renderedCategories","ppfx","pStylePrefix","noCatClass","blockContClass","catsClass","coll","collection","listenTo","addTo","render","em","tac","grabbingCls","getSorter","canvas","get","sorter","utils","Sorter","container","getBody","placer","getPlacerEl","containerSel","itemSel","pfx","onStart","onDrag","onEndMove","onDrop","onMove","document","getFrameEl","contentDocument","direction","wmargin","nested","canvasRelative","e","stopDefault","trigger","model","runDefault","set","add","fragment","frag","rendered","attributes","el","category","ignoreCategories","isString","id","label","isObject","catModel","catId","catView","getCategoriesEl","appendChild","append","catsEl","querySelector","blocksEl","blocks","getBlocksEl","createDocumentFragment","innerHTML","each","cls","$el","addClass"],"mappings":"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","file":"../../../block_manager/view/BlocksView.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore',\n    './BlockView',\n    './CategoryView'\n], function (Backbone, _, BlockView, CategoryView) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize(opts, config) {\n            _.bindAll(this, 'getSorter', 'onDrag', 'onDrop');\n            this.config = config || {};\n            this.categories = opts.categories || '';\n            this.renderedCategories = [];\n            var ppfx = this.config.pStylePrefix || '';\n            this.ppfx = ppfx;\n            this.noCatClass = `${ ppfx }blocks-no-cat`;\n            this.blockContClass = `${ ppfx }blocks-c`;\n            this.catsClass = `${ ppfx }block-categories`;\n            const coll = this.collection;\n            this.listenTo(coll, 'add', this.addTo);\n            this.listenTo(coll, 'reset', this.render);\n            this.em = this.config.em;\n            this.tac = 'test-tac';\n            this.grabbingCls = this.ppfx + 'grabbing';\n            if (this.em) {\n                this.config.getSorter = this.getSorter;\n                this.canvas = this.em.get('Canvas');\n            }\n        },\n        updateConfig(opts = {}) {\n            this.config = {\n                ...this.config,\n                ...opts\n            };\n        },\n        getSorter() {\n            if (!this.em)\n                return;\n            if (!this.sorter) {\n                var utils = this.em.get('Utils');\n                var canvas = this.canvas;\n                this.sorter = new utils.Sorter({\n                    container: canvas.getBody(),\n                    placer: canvas.getPlacerEl(),\n                    containerSel: '*',\n                    itemSel: '*',\n                    pfx: this.ppfx,\n                    onStart: this.onDrag,\n                    onEndMove: this.onDrop,\n                    onMove: this.onMove,\n                    document: canvas.getFrameEl().contentDocument,\n                    direction: 'a',\n                    wmargin: 1,\n                    nested: 1,\n                    em: this.em,\n                    canvasRelative: 1\n                });\n            }\n            return this.sorter;\n        },\n        onDrag(e) {\n            this.em.stopDefault();\n            this.em.trigger('block:drag:start', e);\n        },\n        onMove(e) {\n            this.em.trigger('block:drag:move', e);\n        },\n        onDrop(model) {\n            const em = this.em;\n            em.runDefault();\n            if (model && model.get) {\n                if (model.get('activeOnRender')) {\n                    model.trigger('active');\n                    model.set('activeOnRender', 0);\n                }\n                em.trigger('block:drag:stop', model);\n            }\n        },\n        addTo(model) {\n            this.add(model);\n        },\n        add(model, fragment) {\n            const {config} = this;\n            var frag = fragment || null;\n            var view = new BlockView({\n                model,\n                attributes: model.get('attributes')\n            }, config);\n            var rendered = view.render().el;\n            var category = model.get('category');\n            if (category && this.categories && !config.ignoreCategories) {\n                if (_.isString(category)) {\n                    category = {\n                        id: category,\n                        label: category\n                    };\n                } else if (_.isObject(category) && !category.id) {\n                    category.id = category.label;\n                }\n                var catModel = this.categories.add(category);\n                var catId = catModel.get('id');\n                var catView = this.renderedCategories[catId];\n                var categories = this.getCategoriesEl();\n                model.set('category', catModel);\n                if (!catView && categories) {\n                    catView = new CategoryView({ model: catModel }, this.config).render();\n                    this.renderedCategories[catId] = catView;\n                    categories.appendChild(catView.el);\n                }\n                catView && catView.append(rendered);\n                return;\n            }\n            if (frag)\n                frag.appendChild(rendered);\n            else\n                this.append(rendered);\n        },\n        getCategoriesEl() {\n            if (!this.catsEl) {\n                this.catsEl = this.el.querySelector(`.${ this.catsClass }`);\n            }\n            return this.catsEl;\n        },\n        getBlocksEl() {\n            if (!this.blocksEl) {\n                this.blocksEl = this.el.querySelector(`.${ this.noCatClass } .${ this.blockContClass }`);\n            }\n            return this.blocksEl;\n        },\n        append(el) {\n            let blocks = this.getBlocksEl();\n            blocks && blocks.appendChild(el);\n        },\n        render() {\n            const ppfx = this.ppfx;\n            const frag = document.createDocumentFragment();\n            this.catsEl = null;\n            this.blocksEl = null;\n            this.renderedCategories = [];\n            this.el.innerHTML = `\n      <div class=\"${ this.catsClass }\"></div>\n      <div class=\"${ this.noCatClass }\">\n        <div class=\"${ this.blockContClass }\"></div>\n      </div>\n    `;\n            this.collection.each(model => this.add(model, frag));\n            this.append(frag);\n            const cls = `${ this.blockContClass }s ${ ppfx }one-bg ${ ppfx }two-color`;\n            this.$el.addClass(cls);\n            return this;\n        }\n    });\n});"]}