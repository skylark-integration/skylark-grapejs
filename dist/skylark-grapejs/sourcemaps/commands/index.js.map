{"version":3,"sources":["commands/index.js"],"names":["define","a","CommandAbstract","defaults","b","ViewCanvasClear","ViewCanvasMove","ViewComponentDelete","ViewComponentDrag","ViewComponentEnter","ViewComponentExit","ViewComponentNext","ViewComponentPrev","ViewComponentStyleClear","ViewCopyComponent","ViewDeleteComponent","ViewExportTemplate","ViewFullscreen","ViewMoveComponent","ViewOpenLayers","ViewOpenStyleManager","ViewOpenTraitManager","ViewOpenBlocks","ViewOpenAssets","ViewPasteComponent","ViewPreview","ViewResize","ViewSelectComponent","ViewSelectPosition","ViewShowOffset","ViewSwitchVisibility","em","c","commands","defaultCommands","active","commandsDef","name","[object Object]","config","ppfx","pStylePrefix","stylePrefix","k","obj","id","this","add","run","ed","runCommand","sender","opts","dragger","getModel","event","target","sel","getSelected","selAll","getSelectedAll","nativeDrag","type","defComOptions","preserveSelected","mode","get","hideTlb","stopDefault","altMode","includes","forEach","trigger","logWarning","setTimeout","onStart","data","eventDrag","onDrag","onEnd","e","runDefault","set","select","emitUpdate","cancelled","guidesInfo","dataTransfer","setDragImage","view","el","cmdMove","Commands","onEndMoveFromModel","initSorterFromModels","UndoManager","undo","redo","item","oldCmd","cmd","cmdName","on","args","model","loadDefaultCommands","isFunction","stop","noStop","initialize","extend","command","cmdObj","constructor","prototype","filter","has","getAll","options","stopCommand","getActive","hasOwnProperty","result","editor","isActive","force","strict","callRun","abort","callStop","create"],"mappings":";;;;;;;AAAAA,QACI,qBACA,yBACA,kBACA,oCAEA,qBACA,oBAEA,yBACA,uBACA,wBACA,uBACA,uBACA,uBACA,6BAEA,uBACA,yBAEA,wBAEA,oBAEA,uBAEA,oBACA,0BACA,0BACA,oBACA,oBAEA,wBACA,iBAEA,gBAEA,yBACA,wBAEA,oBACA,2BACD,SACCC,EACAC,EACAC,EACAC,EAEAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EAEAC,EAEAC,EAEAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EAEAC,EAEAC,EACAC,EAEAC,EACAC,GAEA,aACA,MAAO,KACH,IAAIC,EACAC,KACJ,MAAMC,KACAC,KACAC,KACAC,IAEE,UACA,UACA,UACAX,IAGA,SACA,SACA,SACAC,IAGA,aACA,aACA,aACAT,IAGA,OACA,gBACA,GACAH,IAGA,QACA,iBACA,GACAU,IAGA,cACA,aACA,GACAlB,IAGA,eACA,cACA,GACAD,IAGA,YACA,iBACA,kBACAW,IAGA,cACA,aACA,cACAG,IAGA,cACA,mBACA,UACAC,IAGA,cACA,mBACA,UACAC,IAGA,cACA,aACA,cACAC,IAGA,cACA,aACA,cACAC,IAGA,mBACA,kBACA,cACAI,IAGA,oBACA,mBACA,gBACAG,IAGA,mBACA,aACA,cACAD,IAGA,iBACA,gBACA,YACAX,IAGA,iBACA,gBACA,GACAP,IAGA,iBACA,gBACA,GACAC,IAGA,kBACA,iBACA,GACAH,IAGA,iBACA,gBACA,gBACAC,IAGA,mBACA,kBACA,GACAH,IAGA,wBACA,sBACA,GACAM,IAGA,iBACA,gBACA,GACAL,IAaR,OACIN,gBAAAA,EACAmC,KAAM,WACNC,KAAKC,MACDP,MACO7B,KACAoC,GAEPR,EAAKC,EAAED,GACP,MAAMS,EAAOR,EAAES,aACXD,IACAR,EAAEU,YAAcF,EAAOR,EAAEU,aAC7B,IAAK,IAAIC,KAAKX,EAAE7B,SAAU,CACtB,MAAMyC,EAAMZ,EAAE7B,SAASwC,GACnBC,EAAIC,IACJC,K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","file":"../../commands/index.js","sourcesContent":["define([\n    'skylark-underscore',\n    './view/CommandAbstract',\n    './config/config',\n    '../dom_components/model/Component',\n\n    './view/CanvasClear',\n    './view/CanvasMove',\n\n    './view/ComponentDelete',\n    './view/ComponentDrag',\n    './view/ComponentEnter',\n    './view/ComponentExit',\n    './view/ComponentNext',\n    './view/ComponentPrev',\n    './view/ComponentStyleClear',\n\n    './view/CopyComponent',\n    './view/DeleteComponent',\n  \n    './view/ExportTemplate',\n\n    './view/Fullscreen',\n\n    './view/MoveComponent',\n\n    './view/OpenLayers',\n    './view/OpenStyleManager',\n    './view/OpenTraitManager',\n    './view/OpenBlocks',\n    './view/OpenAssets',\n \n    './view/PasteComponent',\n    './view/Preview',\n\n    './view/Resize',\n\n    './view/SelectComponent',\n    './view/SelectPosition',\n\n    './view/ShowOffset',\n    './view/SwitchVisibility'\n], function (\n    a, \n    CommandAbstract, \n    defaults, \n    b,\n\n    ViewCanvasClear,\n    ViewCanvasMove,\n\n    ViewComponentDelete,\n    ViewComponentDrag,\n    ViewComponentEnter,\n    ViewComponentExit,\n    ViewComponentNext,\n    ViewComponentPrev,\n    ViewComponentStyleClear,\n\n    ViewCopyComponent,\n    ViewDeleteComponent,\n  \n    ViewExportTemplate,\n\n    ViewFullscreen,\n\n    ViewMoveComponent,\n\n    ViewOpenLayers,\n    ViewOpenStyleManager,\n    ViewOpenTraitManager,\n    ViewOpenBlocks,\n    ViewOpenAssets,\n \n    ViewPasteComponent,\n    ViewPreview,\n\n    ViewResize,\n\n    ViewSelectComponent,\n    ViewSelectPosition,\n\n    ViewShowOffset,\n    ViewSwitchVisibility  \n) {\n    'use strict';\n    return () => {\n        let em;\n        let c = {};\n        const commands = {};\n        const defaultCommands = {};\n        const active = {};\n        const commandsDef = [\n            [\n                'preview',\n                'Preview',\n                'preview',\n                ViewPreview\n            ],\n            [\n                'resize',\n                'Resize',\n                'resize',\n                ViewResize\n            ],\n            [\n                'fullscreen',\n                'Fullscreen',\n                'fullscreen',\n                ViewFullscreen\n            ],\n            [\n                'copy',\n                'CopyComponent',\n                '',\n                ViewCopyComponent\n            ],\n            [\n                'paste',\n                'PasteComponent',\n                '',\n                ViewPasteComponent\n            ],\n            [\n                'canvas-move',\n                'CanvasMove',\n                '',\n                ViewCanvasMove\n            ],\n            [\n                'canvas-clear',\n                'CanvasClear',\n                '',\n                ViewCanvasClear\n            ],\n            [\n                'open-code',\n                'ExportTemplate',\n                'export-template',\n                ViewExportTemplate\n            ],\n            [\n                'open-layers',\n                'OpenLayers',\n                'open-layers',\n                ViewOpenLayers\n            ],\n            [\n                'open-styles',\n                'OpenStyleManager',\n                'open-sm',\n                ViewOpenStyleManager\n            ],\n            [\n                'open-traits',\n                'OpenTraitManager',\n                'open-tm',\n                ViewOpenTraitManager\n            ],\n            [\n                'open-blocks',\n                'OpenBlocks',\n                'open-blocks',\n                ViewOpenBlocks\n            ],\n            [\n                'open-assets',\n                'OpenAssets',\n                'open-assets',\n                ViewOpenAssets\n            ],\n            [\n                'component-select',\n                'SelectComponent',\n                'select-comp',\n                ViewSelectComponent\n            ],\n            [\n                'component-outline',\n                'SwitchVisibility',\n                'sw-visibility',\n                ViewSwitchVisibility\n            ],\n            [\n                'component-offset',\n                'ShowOffset',\n                'show-offset',\n                ViewShowOffset\n            ],\n            [\n                'component-move',\n                'MoveComponent',\n                'move-comp',\n                ViewMoveComponent\n            ],\n            [\n                'component-next',\n                'ComponentNext',\n                '',\n                ViewComponentNext\n            ],\n            [\n                'component-prev',\n                'ComponentPrev',\n                '',\n                ViewComponentPrev\n            ],\n            [\n                'component-enter',\n                'ComponentEnter',\n                '',\n                ViewComponentEnter\n            ],\n            [\n                'component-exit',\n                'ComponentExit',\n                'select-parent',\n                ViewComponentExit\n            ],\n            [\n                'component-delete',\n                'ComponentDelete',\n                '',\n                ViewComponentDelete\n            ],\n            [\n                'component-style-clear',\n                'ComponentStyleClear',\n                '',\n                ViewComponentStyleClear\n            ],\n            [\n                'component-drag',\n                'ComponentDrag',\n                '',\n                ViewComponentDrag\n            ]\n        ];\n        const add = function (id, obj) {\n            if (a.isFunction(obj))\n                obj = { run: obj };\n            if (!obj.stop)\n                obj.noStop = 1;\n            delete obj.initialize;\n            obj.id = id;\n            commands[id] = CommandAbstract.extend(obj);\n            return this;\n        };\n        return {\n            CommandAbstract,\n            name: 'Commands',\n            init(config = {}) {\n                c = {\n                    ...defaults,\n                    ...config\n                };\n                em = c.em;\n                const ppfx = c.pStylePrefix;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                for (let k in c.defaults) {\n                    const obj = c.defaults[k];\n                    if (obj.id)\n                        this.add(obj.id, obj);\n                }\n                defaultCommands['tlb-delete'] = {\n                    run(ed) {\n                        return ed.runCommand('core:component-delete');\n                    }\n                };\n                defaultCommands['tlb-clone'] = {\n                    run(ed) {\n                        ed.runCommand('core:copy');\n                        ed.runCommand('core:paste');\n                    }\n                };\n                defaultCommands['tlb-move'] = {\n                    run(ed, sender, opts = {}) {\n                        let dragger;\n                        const em = ed.getModel();\n                        const event = opts && opts.event;\n                        const {target} = opts;\n                        const sel = target || ed.getSelected();\n                        const selAll = target ? [target] : [...ed.getSelectedAll()];\n                        const nativeDrag = event && event.type == 'dragstart';\n                        const defComOptions = { preserveSelected: 1 };\n                        const modes = [\n                            'absolute',\n                            'translate'\n                        ];\n                        const mode = sel.get('dmode') || em.get('dmode');\n                        const hideTlb = () => em.stopDefault(defComOptions);\n                        const altMode = a.includes(modes, mode);\n                        selAll.forEach(sel => sel.trigger('disable'));\n                        if (!sel || !sel.get('draggable')) {\n                            return em.logWarning('The element is not draggable');\n                        }\n                        nativeDrag ? setTimeout(hideTlb, 0) : hideTlb();\n                        const onStart = data => {\n                            em.trigger(`${ b.eventDrag }:start`, data);\n                        };\n                        const onDrag = data => {\n                            em.trigger(b.eventDrag, data);\n                        };\n                        const onEnd = (e, opts, data) => {\n                            em.runDefault(defComOptions);\n                            selAll.forEach(sel => sel.set('status', 'selected'));\n                            ed.select(selAll);\n                            sel.emitUpdate();\n                            em.trigger(`${ b.eventDrag }:end`, data);\n                            (altMode || data.cancelled) && em.set('_cmpDrag', 1);\n                        };\n                        if (altMode) {\n                            dragger = ed.runCommand('core:component-drag', {\n                                guidesInfo: 1,\n                                mode,\n                                target: sel,\n                                onStart,\n                                onDrag,\n                                onEnd,\n                                event\n                            });\n                        } else {\n                            if (nativeDrag) {\n                                event.dataTransfer.setDragImage(sel.view.el, 0, 0);\n                            }\n                            const cmdMove = ed.Commands.get('move-comp');\n                            cmdMove.onStart = onStart;\n                            cmdMove.onDrag = onDrag;\n                            cmdMove.onEndMoveFromModel = onEnd;\n                            cmdMove.initSorterFromModels(selAll);\n                        }\n                        selAll.forEach(sel => sel.set('status', 'freezed-selected'));\n                    }\n                };\n                defaultCommands['core:undo'] = e => e.UndoManager.undo();\n                defaultCommands['core:redo'] = e => e.UndoManager.redo();\n                commandsDef.forEach(item => {\n                    const oldCmd = item[2];\n                    const cmd = item[3]; //require(`./view/${ item[1] }`).default; // modified by lwf\n                    const cmdName = `core:${ item[0] }`;\n                    defaultCommands[cmdName] = cmd;\n                    if (oldCmd) {\n                        defaultCommands[oldCmd] = cmd;\n                        [\n                            'run',\n                            'stop'\n                        ].forEach(name => {\n                            em.on(`${ name }:${ oldCmd }`, (...args) => em.trigger(`${ name }:${ cmdName }`, ...args));\n                        });\n                    }\n                });\n                if (c.em)\n                    c.model = c.em.get('Canvas');\n                this.loadDefaultCommands();\n                return this;\n            },\n            add,\n            get(id) {\n                let el = commands[id];\n                if (a.isFunction(el)) {\n                    el = new el(c);\n                    commands[id] = el;\n                } else if (!el) {\n                    em.logWarning(`'${ id }' command not found`);\n                }\n                return el;\n            },\n            extend(id, cmd = {}) {\n                const command = this.get(id);\n                if (command) {\n                    const cmdObj = {\n                        ...command.constructor.prototype,\n                        ...cmd\n                    };\n                    this.add(id, cmdObj);\n                    const oldCmd = commandsDef.filter(cmd => `core:${ cmd[0] }` === id && cmd[2])[0];\n                    oldCmd && this.add(oldCmd[2], cmdObj);\n                }\n                return this;\n            },\n            has(id) {\n                return !!commands[id];\n            },\n            getAll() {\n                return commands;\n            },\n            run(id, options = {}) {\n                return this.runCommand(this.get(id), options);\n            },\n            stop(id, options = {}) {\n                return this.stopCommand(this.get(id), options);\n            },\n            isActive(id) {\n                return this.getActive().hasOwnProperty(id);\n            },\n            getActive() {\n                return active;\n            },\n            loadDefaultCommands() {\n                for (var id in defaultCommands) {\n                    this.add(id, defaultCommands[id]);\n                }\n                return this;\n            },\n            runCommand(command, options = {}) {\n                let result;\n                if (command && command.run) {\n                    const id = command.id;\n                    const editor = em.get('Editor');\n                    if (!this.isActive(id) || options.force || !c.strict) {\n                        result = command.callRun(editor, options);\n                        if (id && command.stop && !command.noStop && !options.abort) {\n                            active[id] = result;\n                        }\n                    }\n                }\n                return result;\n            },\n            stopCommand(command, options = {}) {\n                let result;\n                if (command && command.run) {\n                    const id = command.id;\n                    const editor = em.get('Editor');\n                    if (this.isActive(id) || options.force || !c.strict) {\n                        if (id)\n                            delete active[id];\n                        result = command.callStop(editor, options);\n                    }\n                }\n                return result;\n            },\n            create(command) {\n                if (!command.stop)\n                    command.noStop = 1;\n                const cmd = CommandAbstract.extend(command);\n                return new cmd(c);\n            }\n        };\n    };\n});"]}