{"version":3,"sources":["commands/view/Preview.js"],"names":["define","a","[object Object]","editor","this","panels","Panels","getPanels","val","elP","Canvas","getBody","querySelectorAll","ppfx","each","item","style","pointerEvents","sender","stopCommand","getModel","stopDefault","canvas","getElement","editorEl","getEl","pfx","Config","stylePrefix","helper","document","createElement","className","appendChild","onclick","display","tglPointers","forEach","panel","set","canvasS","width","height","top","left","padding","margin","refresh","swVisibilityButton","getButton","get","runCommand","runDefault","setAttribute"],"mappings":";;;;;;;AAAAA,QAAQ,sBAAuB,SAAUC,GACrC,aACA,OACIC,UAAUC,GAIN,OAHKC,KAAKC,SACND,KAAKC,OAASF,EAAOG,OAAOC,aAEzBH,KAAKC,QAEhBH,YAAYC,EAAQK,GAChB,MACMC,EADON,EAAOO,OAAOC,UACVC,qBAAsBR,KAAKS,kBAC5CZ,EAAEa,KAAKL,EAAKM,GAAQA,EAAKC,MAAMC,cAAgBT,EAAM,GAAK,QAE9DN,IAAIC,EAAQe,GACRd,KAAKc,OAASA,EACdf,EAAOgB,YAAY,iBACnBhB,EAAOiB,WAAWC,cAClB,MAAMhB,EAASD,KAAKG,UAAUJ,GACxBmB,EAASnB,EAAOO,OAAOa,aACvBC,EAAWrB,EAAOsB,QAClBC,EAAMvB,EAAOwB,OAAOC,YAC1B,IAAKxB,KAAKyB,OAAQ,CACd,MAAMA,EAASC,SAASC,cAAc,QACtCF,EAAOG,aAAgBN,2BACvBF,EAASS,YAAYJ,GACrBA,EAAOK,QAAU,KAAM9B,KAAKe,eAC5Bf,KAAKyB,OAASA,EAElBzB,KAAKyB,OAAOb,MAAMmB,QAAU,eAC5B/B,KAAKgC,YAAYjC,GACjBE,EAAOgC,QAAQC,GAASA,EAAMC,IAAI,WAAW,IAC7C,MAAMC,EAAUlB,EAAON,MACvBwB,EAAQC,MAAQ,OAChBD,EAAQE,OAAS,OACjBF,EAAQG,IAAM,IACdH,EAAQI,KAAO,IACfJ,EAAQK,QAAU,IAClBL,EAAQM,OAAS,IACjB3C,EAAO4C,WAEX7C,KAAKC,GACD,MAAMe,OACFA,MACAd,KACJc,EAAOqB,KAAOrB,EAAOqB,IAAI,SAAU,GACnC,MAAMlC,EAASD,KAAKG,UAAUJ,GACxB6C,EAAqB7C,EAAOG,OAAO2C,UAAU,UAAW,iBAC1DD,GAAsBA,EAAmBE,IAAI,WAC7C/C,EAAOgD,WAAW,iBAEtBhD,EAAOiB,WAAWgC,aAClB/C,EAAOgC,QAAQC,GAASA,EAAMC,IAAI,WAAW,IAC9BpC,EAAOO,OAAOa,aACtB8B,aAAa,QAAS,IACzBjD,KAAKyB,SACLzB,KAAKyB,OAAOb,MAAMmB,QAAU,QAEhChC,EAAO4C,UACP3C,KAAKgC,YAAYjC,EAAQ","file":"../../../commands/view/Preview.js","sourcesContent":["define(['skylark-underscore'], function (a) {\n    'use strict';\n    return {\n        getPanels(editor) {\n            if (!this.panels) {\n                this.panels = editor.Panels.getPanels();\n            }\n            return this.panels;\n        },\n        tglPointers(editor, val) {\n            const body = editor.Canvas.getBody();\n            const elP = body.querySelectorAll(`.${ this.ppfx }no-pointer`);\n            a.each(elP, item => item.style.pointerEvents = val ? '' : 'all');\n        },\n        run(editor, sender) {\n            this.sender = sender;\n            editor.stopCommand('sw-visibility');\n            editor.getModel().stopDefault();\n            const panels = this.getPanels(editor);\n            const canvas = editor.Canvas.getElement();\n            const editorEl = editor.getEl();\n            const pfx = editor.Config.stylePrefix;\n            if (!this.helper) {\n                const helper = document.createElement('span');\n                helper.className = `${ pfx }off-prv fa fa-eye-slash`;\n                editorEl.appendChild(helper);\n                helper.onclick = () => this.stopCommand();\n                this.helper = helper;\n            }\n            this.helper.style.display = 'inline-block';\n            this.tglPointers(editor);\n            panels.forEach(panel => panel.set('visible', false));\n            const canvasS = canvas.style;\n            canvasS.width = '100%';\n            canvasS.height = '100%';\n            canvasS.top = '0';\n            canvasS.left = '0';\n            canvasS.padding = '0';\n            canvasS.margin = '0';\n            editor.refresh();\n        },\n        stop(editor) {\n            const {\n                sender = {}\n            } = this;\n            sender.set && sender.set('active', 0);\n            const panels = this.getPanels(editor);\n            const swVisibilityButton = editor.Panels.getButton('options', 'sw-visibility');\n            if (swVisibilityButton && swVisibilityButton.get('active')) {\n                editor.runCommand('sw-visibility');\n            }\n            editor.getModel().runDefault();\n            panels.forEach(panel => panel.set('visible', true));\n            const canvas = editor.Canvas.getElement();\n            canvas.setAttribute('style', '');\n            if (this.helper) {\n                this.helper.style.display = 'none';\n            }\n            editor.refresh();\n            this.tglPointers(editor, 1);\n        }\n    };\n});"]}