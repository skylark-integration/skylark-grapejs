{"version":3,"sources":["commands/view/CanvasMove.js"],"names":["define","_","mixins","Dragger","[object Object]","ed","bindAll","this","editor","canvasModel","canvas","getCanvasView","model","toggleMove","disableDragger","ev","getKeyChar","stopCommand","id","toggleDragger","enable","em","dragger","methodCls","getCanvas","classList","ppfx","getPosition","x","get","y","set","trigger","start","stop","methodEv","classes","push","forEach","cls","document","onKeyUp","enableDragger"],"mappings":";;;;;;;AAAAA,QACI,qBACA,qBACA,uBACD,SAAUC,EAAGC,EAAQC,GACpB,aACA,OACIC,IAAIC,GACAJ,EAAEK,QAAQC,KAAM,UAAW,gBAAiB,kBAC5CA,KAAKC,OAASH,EACdE,KAAKE,YAAcF,KAAKG,OAAOC,gBAAgBC,MAC/CL,KAAKM,WAAW,IAEpBT,KAAKC,GACDE,KAAKM,aACLN,KAAKO,kBAETV,QAAQW,GAC0B,MAA1Bb,EAAOc,WAAWD,IAClBR,KAAKC,OAAOS,YAAYV,KAAKW,KAGrCd,cAAcW,GACVR,KAAKY,cAAc,EAAGJ,IAE1BX,eAAeW,GACXR,KAAKY,cAAc,EAAGJ,IAE1BX,cAAcgB,EAAQL,GAClB,MAAMN,YAACA,EAAWY,GAAEA,GAAMd,KAC1B,IAAIe,QAACA,GAAWf,KAChB,MAAMgB,EAAYH,EAAS,MAAQ,SACnCb,KAAKiB,YAAYC,UAAUF,MAAehB,KAAKmB,oBAC1CJ,IACDA,EAAU,IAAInB,GACVwB,YAAW,MAEHC,EAAGnB,EAAYoB,IAAI,KACnBC,EAAGrB,EAAYoB,IAAI,OAG3BzB,aAAYwB,EAACA,EAACE,EAAEA,IACZrB,EAAYsB,KACRH,EAAAA,EACAE,EAAAA,KAGR1B,QAAQW,EAAIO,GACRD,EAAGW,QAAQ,oBAAqBV,IAEpClB,OAAOW,EAAIO,GACPD,EAAGW,QAAQ,cAAeV,IAE9BlB,MAAMW,EAAIO,GACND,EAAGW,QAAQ,kBAAmBV,MAGtCf,KAAKe,QAAUA,GAEnBF,EAASE,EAAQW,MAAMlB,GAAMO,EAAQY,QAEzC9B,WAAWgB,GACP,MAAMM,KAACA,GAAQnB,KACTgB,EAAYH,EAAS,MAAQ,SAC7Be,EAAWf,EAAS,KAAO,MAE3BV,EAASH,KAAKiB,YACdY,MAAeV,cACpBN,GAAUgB,EAAQC,QAASX,iBAC5BU,EAAQE,QAAQC,GAAO7B,EAAOe,UAAUF,GAAWgB,IACnDrC,EAAOiC,GAAUK,SAAU,QAASjC,KAAKkC,SACzCvC,EAAOiC,GAAUzB,EAAQ,YAAaH,KAAKmC,eAC3CxC,EAAOiC,GAAUK,SAAU,UAAWjC,KAAKO","file":"../../../commands/view/CanvasMove.js","sourcesContent":["define([\n    'skylark-underscore',\n    '../../utils/mixins',\n    '../../utils/Dragger'\n], function (_, mixins, Dragger) {\n    'use strict';\n    return {\n        run(ed) {\n            _.bindAll(this, 'onKeyUp', 'enableDragger', 'disableDragger');\n            this.editor = ed;\n            this.canvasModel = this.canvas.getCanvasView().model;\n            this.toggleMove(1);\n        },\n        stop(ed) {\n            this.toggleMove();\n            this.disableDragger();\n        },\n        onKeyUp(ev) {\n            if (mixins.getKeyChar(ev) === ' ') {\n                this.editor.stopCommand(this.id);\n            }\n        },\n        enableDragger(ev) {\n            this.toggleDragger(1, ev);\n        },\n        disableDragger(ev) {\n            this.toggleDragger(0, ev);\n        },\n        toggleDragger(enable, ev) {\n            const {canvasModel, em} = this;\n            let {dragger} = this;\n            const methodCls = enable ? 'add' : 'remove';\n            this.getCanvas().classList[methodCls](`${ this.ppfx }is__grabbing`);\n            if (!dragger) {\n                dragger = new Dragger({\n                    getPosition() {\n                        return {\n                            x: canvasModel.get('x'),\n                            y: canvasModel.get('y')\n                        };\n                    },\n                    setPosition({x, y}) {\n                        canvasModel.set({\n                            x,\n                            y\n                        });\n                    },\n                    onStart(ev, dragger) {\n                        em.trigger('canvas:move:start', dragger);\n                    },\n                    onDrag(ev, dragger) {\n                        em.trigger('canvas:move', dragger);\n                    },\n                    onEnd(ev, dragger) {\n                        em.trigger('canvas:move:end', dragger);\n                    }\n                });\n                this.dragger = dragger;\n            }\n            enable ? dragger.start(ev) : dragger.stop();\n        },\n        toggleMove(enable) {\n            const {ppfx} = this;\n            const methodCls = enable ? 'add' : 'remove';\n            const methodEv = enable ? 'on' : 'off';\n\n            const canvas = this.getCanvas();\n            const classes = [`${ ppfx }is__grab`];\n            !enable && classes.push(`${ ppfx }is__grabbing`);\n            classes.forEach(cls => canvas.classList[methodCls](cls));\n            mixins[methodEv](document, 'keyup', this.onKeyUp);\n            mixins[methodEv](canvas, 'mousedown', this.enableDragger);\n            mixins[methodEv](document, 'mouseup', this.disableDragger);\n        }\n    };\n});"]}