{"version":3,"sources":["commands/view/CommandAbstract.js"],"names":["define","Backbone","$","View","extend","[object Object]","o","this","config","editorModel","em","pfx","stylePrefix","ppfx","pStylePrefix","hoverClass","badgeClass","plhClass","freezClass","canvas","get","setElement","getCanvas","$canvas","$el","canvasTool","getCanvasTools","init","e","getElement","getBody","getWrapperEl","getToolsEl","el","rect","getBoundingClientRect","top","ownerDocument","body","scrollTop","left","scrollLeft","editor","options","id","trigger","abort","sender","result","run","stop"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAqB,SAAUC,GACnC,aACUA,EAASC,EACnB,OAAOD,EAASE,KAAKC,QACjBC,WAAWC,GACPC,KAAKC,OAASF,MACdC,KAAKE,YAAcF,KAAKG,GAAKH,KAAKC,OAAOE,OACzCH,KAAKI,IAAMJ,KAAKC,OAAOI,YACvBL,KAAKM,KAAON,KAAKC,OAAOM,aACxBP,KAAKQ,WAAaR,KAAKI,IAAM,QAC7BJ,KAAKS,WAAaT,KAAKI,IAAM,QAC7BJ,KAAKU,SAAWV,KAAKI,IAAM,cAC3BJ,KAAKW,WAAaX,KAAKM,KAAO,UAC9BN,KAAKY,OAASZ,KAAKG,GAAGU,KAAOb,KAAKG,GAAGU,IAAI,UACrCb,KAAKG,GAAGU,KACRb,KAAKc,WAAWd,KAAKe,aACrBf,KAAKY,SACLZ,KAAKgB,QAAUhB,KAAKiB,IACpBjB,KAAKkB,WAAalB,KAAKmB,kBAE3BnB,KAAKoB,KAAKpB,KAAKC,SAEnBH,cAAcuB,KAEdvB,YACI,OAAOE,KAAKY,OAAOU,cAEvBxB,gBACI,OAAOE,KAAKY,OAAOW,WAEvBzB,mBACI,OAAOE,KAAKY,OAAOY,gBAEvB1B,iBACI,OAAOE,KAAKY,OAAOa,cAEvB3B,OAAO4B,GACH,IAAIC,EAAOD,EAAGE,wBACd,OACIC,IAAKF,EAAKE,IAAMH,EAAGI,cAAcC,KAAKC,UACtCC,KAAMN,EAAKM,KAAOP,EAAGI,cAAcC,KAAKG,aAGhDpC,KAAKC,KAELD,QAAQqC,EAAQC,MACZ,MAAMC,EAAKrC,KAAKqC,GAEhB,GADAF,EAAOG,eAAgBD,WAAcD,GACjCA,GAAWA,EAAQG,MAEnB,YADAJ,EAAOG,iBAAkBD,IAAOD,GAGpC,MAAMI,EAASJ,EAAQI,QAAUL,EAC3BM,EAASzC,KAAK0C,IAAIP,EAAQK,EAAQJ,GAGxC,OAFAD,EAAOG,eAAgBD,IAAOI,EAAQL,GACtCD,EAAOG,QAAQ,MAAOD,EAAII,EAAQL,GAC3BK,GAEX3C,SAASqC,EAAQC,MACb,MAAMC,EAAKrC,KAAKqC,GACVG,EAASJ,EAAQI,QAAUL,EACjCA,EAAOG,gBAAiBD,WAAcD,GACtC,MAAMK,EAASzC,KAAK2C,KAAKR,EAAQK,EAAQJ,GAGzC,OAFAD,EAAOG,gBAAiBD,IAAOI,EAAQL,GACvCD,EAAOG,QAAQ,OAAQD,EAAII,EAAQL,GAC5BK,GAEX3C,cACIE,KAAKG,GAAGU,IAAI,YAAY8B,KAAK3C,KAAKqC,KAEtCvC,IAAIK,EAAIqC,KAER1C,KAAKK,EAAIqC","file":"../../../commands/view/CommandAbstract.js","sourcesContent":["define(['skylark-backbone'], function (Backbone) {\n    'use strict';\n    const $ = Backbone.$;\n    return Backbone.View.extend({\n        initialize(o) {\n            this.config = o || {};\n            this.editorModel = this.em = this.config.em || {};\n            this.pfx = this.config.stylePrefix;\n            this.ppfx = this.config.pStylePrefix;\n            this.hoverClass = this.pfx + 'hover';\n            this.badgeClass = this.pfx + 'badge';\n            this.plhClass = this.pfx + 'placeholder';\n            this.freezClass = this.ppfx + 'freezed';\n            this.canvas = this.em.get && this.em.get('Canvas');\n            if (this.em.get)\n                this.setElement(this.getCanvas());\n            if (this.canvas) {\n                this.$canvas = this.$el;\n                this.canvasTool = this.getCanvasTools();\n            }\n            this.init(this.config);\n        },\n        onFrameScroll(e) {\n        },\n        getCanvas() {\n            return this.canvas.getElement();\n        },\n        getCanvasBody() {\n            return this.canvas.getBody();\n        },\n        getCanvasWrapper() {\n            return this.canvas.getWrapperEl();\n        },\n        getCanvasTools() {\n            return this.canvas.getToolsEl();\n        },\n        offset(el) {\n            var rect = el.getBoundingClientRect();\n            return {\n                top: rect.top + el.ownerDocument.body.scrollTop,\n                left: rect.left + el.ownerDocument.body.scrollLeft\n            };\n        },\n        init(o) {\n        },\n        callRun(editor, options = {}) {\n            const id = this.id;\n            editor.trigger(`run:${ id }:before`, options);\n            if (options && options.abort) {\n                editor.trigger(`abort:${ id }`, options);\n                return;\n            }\n            const sender = options.sender || editor;\n            const result = this.run(editor, sender, options);\n            editor.trigger(`run:${ id }`, result, options);\n            editor.trigger('run', id, result, options);\n            return result;\n        },\n        callStop(editor, options = {}) {\n            const id = this.id;\n            const sender = options.sender || editor;\n            editor.trigger(`stop:${ id }:before`, options);\n            const result = this.stop(editor, sender, options);\n            editor.trigger(`stop:${ id }`, result, options);\n            editor.trigger('stop', id, result, options);\n            return result;\n        },\n        stopCommand() {\n            this.em.get('Commands').stop(this.id);\n        },\n        run(em, sender) {\n        },\n        stop(em, sender) {\n        }\n    });\n});"]}