{"version":3,"sources":["commands/view/Fullscreen.js"],"names":["define","a","[object Object]","d","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","el","pfx","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","console","warn","this","isEnabled","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","e","ev","stop","sender","removeEventListener","fsChanged","editor","opts","target","targetEl","isElement","querySelector","enable","getContainer","bind","addEventListener","trigger","set","disable"],"mappings":";;;;;;;AAAAA,QAAQ,sBAAuB,SAAUC,GACrC,aACA,OACIC,YACI,IAAIC,EAAIC,SACR,OAAID,EAAEE,mBAAqBF,EAAEG,yBAA2BH,EAAEI,qBAC/C,EAEA,GAEfL,OAAOM,GACH,IAAIC,EAAM,GAaV,OAZID,EAAGE,kBACHF,EAAGE,oBACEF,EAAGG,yBACRF,EAAM,SACND,EAAGG,2BACIH,EAAGI,sBACVH,EAAM,MACND,EAAGI,wBACIJ,EAAGK,oBACVL,EAAGK,sBAEHC,QAAQC,KAAK,4BACVN,GAEXP,UACI,MAAMC,EAAIC,SACNY,KAAKC,cACDd,EAAEe,eACFf,EAAEe,iBACGf,EAAEgB,qBACPhB,EAAEgB,uBACGhB,EAAEiB,oBACPjB,EAAEiB,sBACGjB,EAAEkB,kBACPlB,EAAEkB,qBAGdnB,UAAUO,EAAKa,GACHlB,SAAR,IACImB,GAAMd,GAAO,IAAM,mBAClBO,KAAKC,cACND,KAAKQ,KAAK,KAAMR,KAAKS,QACrBrB,SAASsB,oBAAoBH,EAAIP,KAAKW,aAG9CzB,IAAI0B,EAAQH,EAAQI,MAChBb,KAAKS,OAASA,EACd,MAAMK,OAACA,GAAUD,EACXE,EAAW9B,EAAE+B,UAAUF,GAAUA,EAAS1B,SAAS6B,cAAcH,GACjErB,EAAMO,KAAKkB,OAAOH,GAAYH,EAAOO,gBAC3CnB,KAAKW,UAAYX,KAAKW,UAAUS,KAAKpB,KAAMP,GAC3CL,SAASiC,iBAAiB5B,EAAM,mBAAoBO,KAAKW,WACzDC,EAAOU,QAAQ,wBAEnBpC,KAAK0B,EAAQH,GACLA,GAAUA,EAAOc,KACjBd,EAAOc,IAAI,UAAU,GACzBvB,KAAKwB,UACDZ,GACAA,EAAOU,QAAQ","file":"../../../commands/view/Fullscreen.js","sourcesContent":["define(['skylark-underscore'], function (a) {\n    'use strict';\n    return {\n        isEnabled() {\n            var d = document;\n            if (d.fullscreenElement || d.webkitFullscreenElement || d.mozFullScreenElement)\n                return 1;\n            else\n                return 0;\n        },\n        enable(el) {\n            var pfx = '';\n            if (el.requestFullscreen)\n                el.requestFullscreen();\n            else if (el.webkitRequestFullscreen) {\n                pfx = 'webkit';\n                el.webkitRequestFullscreen();\n            } else if (el.mozRequestFullScreen) {\n                pfx = 'moz';\n                el.mozRequestFullScreen();\n            } else if (el.msRequestFullscreen)\n                el.msRequestFullscreen();\n            else\n                console.warn('Fullscreen not supported');\n            return pfx;\n        },\n        disable() {\n            const d = document;\n            if (this.isEnabled()) {\n                if (d.exitFullscreen)\n                    d.exitFullscreen();\n                else if (d.webkitExitFullscreen)\n                    d.webkitExitFullscreen();\n                else if (d.mozCancelFullScreen)\n                    d.mozCancelFullScreen();\n                else if (d.msExitFullscreen)\n                    d.msExitFullscreen();\n            }\n        },\n        fsChanged(pfx, e) {\n            var d = document;\n            var ev = (pfx || '') + 'fullscreenchange';\n            if (!this.isEnabled()) {\n                this.stop(null, this.sender);\n                document.removeEventListener(ev, this.fsChanged);\n            }\n        },\n        run(editor, sender, opts = {}) {\n            this.sender = sender;\n            const {target} = opts;\n            const targetEl = a.isElement(target) ? target : document.querySelector(target);\n            const pfx = this.enable(targetEl || editor.getContainer());\n            this.fsChanged = this.fsChanged.bind(this, pfx);\n            document.addEventListener(pfx + 'fullscreenchange', this.fsChanged);\n            editor.trigger('change:canvasOffset');\n        },\n        stop(editor, sender) {\n            if (sender && sender.set)\n                sender.set('active', false);\n            this.disable();\n            if (editor)\n                editor.trigger('change:canvasOffset');\n        }\n    };\n});"]}