{"version":3,"sources":["parser/model/ParserCss.js"],"names":["define","a","BrowserCssParser","b","config","[object Object]","str","result","parserCss","em","editor","get","forEach","node","concat","this","checkNode","selectors","style","isString","nodes","selsParsed","parseSelector","classSets","selectorsAdd","add","join","opts","atRule","mediaText","params","length","classSet","push","createNode"],"mappings":";;;;;;;AAAAA,QACI,qBACA,qBACA,sBACD,SAAUC,EAAGC,EAAkBC,GAC9B,aACA,MAAO,CAACC,SACJC,MAAMC,GACF,IAAIC,KACJ,MAAMC,UAACA,EAASC,GAAEA,MAAWL,EACvBM,EAASD,GAAMA,EAAGE,KAAOF,EAAGE,IAAI,UAGtC,OAFcH,EAAYA,EAAUF,EAAKI,GAAUR,EAAiBI,IAC9DM,QAAQC,GAAQN,EAASA,EAAOO,OAAOC,KAAKC,UAAUH,KACrDN,GAEXF,UAAUQ,GACN,MAAMI,UAACA,EAASC,MAAEA,GAASL,EAC3B,GAAIZ,EAAEkB,SAASF,GAAY,CACvB,MAAMG,KACAC,EAAalB,EAAEmB,cAAcL,GAC7BM,EAAYF,EAAWd,OACvBiB,EAAeH,EAAWI,IAAIC,KAAK,MACnCC,GACFC,OAAQf,EAAKe,OACbC,UAAWhB,EAAKiB,QASpB,GAPIP,EAAUQ,OACVR,EAAUX,QAAQoB,IACdZ,EAAMa,KAAK9B,EAAE+B,WAAWF,EAAUd,EAAOS,MAG7CP,EAAMa,KAAK9B,EAAE+B,cAAehB,EAAOS,IAEnCH,EAAc,CACGJ,EAAMA,EAAMW,OAAS,GAC7BP,aAAeA,EAE5BX,EAAOO,EAEX,OAAOP","file":"../../../parser/model/ParserCss.js","sourcesContent":["define([\n    'skylark-underscore',\n    './BrowserParserCss',\n    './BrowserParserCss'\n], function (a, BrowserCssParser, b) {\n    'use strict';\n    return (config = {}) => ({\n        parse(str) {\n            let result = [];\n            const {parserCss, em = {}} = config;\n            const editor = em && em.get && em.get('Editor');\n            const nodes = parserCss ? parserCss(str, editor) : BrowserCssParser(str);\n            nodes.forEach(node => result = result.concat(this.checkNode(node)));\n            return result;\n        },\n        checkNode(node) {\n            const {selectors, style} = node;\n            if (a.isString(selectors)) {\n                const nodes = [];\n                const selsParsed = b.parseSelector(selectors);\n                const classSets = selsParsed.result;\n                const selectorsAdd = selsParsed.add.join(', ');\n                const opts = {\n                    atRule: node.atRule,\n                    mediaText: node.params\n                };\n                if (classSets.length) {\n                    classSets.forEach(classSet => {\n                        nodes.push(b.createNode(classSet, style, opts));\n                    });\n                } else {\n                    nodes.push(b.createNode([], style, opts));\n                }\n                if (selectorsAdd) {\n                    const lastNode = nodes[nodes.length - 1];\n                    lastNode.selectorsAdd = selectorsAdd;\n                }\n                node = nodes;\n            }\n            return node;\n        }\n    });\n});"]}