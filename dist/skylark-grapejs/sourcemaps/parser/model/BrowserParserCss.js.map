{"version":3,"sources":["parser/model/BrowserParserCss.js"],"names":["define","_","atRules","4","5","6","7","11","12","13","14","15","atRuleKeys","keys","singleAtRules","singleAtRulesNames","parseSelector","str","add","result","sels","split","i","len","length","sel","trim","test","cls","filter","Boolean","push","parseStyle","node","stl","style","propName","propValue","getPropertyValue","important","getPropertyPriority","parseCondition","conditionText","media","mediaText","name","selectorText","createNode","selectors","opts","selLen","lastClass","stateArr","state","atRule","selectorsAdd","indexOf","singleAtRule","atRuleType","splice","parseNode","el","nodes","cssRules","type","toString","condition","keyText","isSingleAtRule","subRules","s","lens","subRule","concat","selsParsed","selsAdd","lastRule","k","len3","model","selsAddStr","join","parser","document","createElement","innerHTML","head","appendChild","sheet","removeChild"],"mappings":"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","file":"../../../parser/model/BrowserParserCss.js","sourcesContent":["define(['skylark-underscore'], function (_) {\n    'use strict';\n    const atRules = {\n        4: 'media',\n        5: 'font-face',\n        6: 'page',\n        7: 'keyframes',\n        11: 'counter-style',\n        12: 'supports',\n        13: 'document',\n        14: 'font-feature-values',\n        15: 'viewport'\n    };\n    const atRuleKeys = _.keys(atRules);\n    const singleAtRules = [\n        '5',\n        '6',\n        '11',\n        '15'\n    ];\n    const singleAtRulesNames = [\n        'font-face',\n        'page',\n        'counter-style',\n        'viewport'\n    ];\n    const parseSelector = (str = '') => {\n        const add = [];\n        const result = [];\n        const sels = str.split(',');\n        for (var i = 0, len = sels.length; i < len; i++) {\n            var sel = sels[i].trim();\n            if (/^(\\.{1}[\\w\\-]+)+(:{1,2}[\\w\\-()]+)?$/gi.test(sel) || /^(#{1}[\\w\\-]+){1}(:{1,2}[\\w\\-()]+)?$/gi.test(sel)) {\n                var cls = sel.split('.').filter(Boolean);\n                result.push(cls);\n            } else {\n                add.push(sel);\n            }\n        }\n        return {\n            result,\n            add\n        };\n    };\n    const parseStyle = node => {\n        const stl = node.style;\n        const style = {};\n        for (var i = 0, len = stl.length; i < len; i++) {\n            const propName = stl[i];\n            const propValue = stl.getPropertyValue(propName);\n            const important = stl.getPropertyPriority(propName);\n            style[propName] = `${ propValue }${ important ? ` !${ important }` : '' }`;\n        }\n        return style;\n    };\n    const parseCondition = node => {\n        const condition = node.conditionText || node.media && node.media.mediaText || node.name || node.selectorText || '';\n        return condition.trim();\n    };\n    const createNode = (selectors, style = {}, opts = {}) => {\n        const node = {};\n        const selLen = selectors.length;\n        const lastClass = selectors[selLen - 1];\n        const stateArr = lastClass ? lastClass.split(/:(.+)/) : [];\n        const state = stateArr[1];\n        const {atRule, selectorsAdd, mediaText} = opts;\n        const singleAtRule = singleAtRulesNames.indexOf(atRule) >= 0;\n        singleAtRule && (node.singleAtRule = 1);\n        atRule && (node.atRuleType = atRule);\n        selectorsAdd && (node.selectorsAdd = selectorsAdd);\n        mediaText && (node.mediaText = mediaText);\n        if (state) {\n            selectors[selLen - 1] = stateArr[0];\n            node.state = state;\n            stateArr.splice(stateArr.length - 1, 1);\n        }\n        node.selectors = selectors;\n        node.style = style;\n        return node;\n    };\n    const parseNode = el => {\n        var result = [];\n        var nodes = el.cssRules || [];\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            const node = nodes[i];\n            const type = node.type.toString();\n            let singleAtRule = 0;\n            let atRuleType = '';\n            let condition = '';\n            let sels = node.selectorText || node.keyText;\n            const isSingleAtRule = singleAtRules.indexOf(type) >= 0;\n            if (isSingleAtRule) {\n                singleAtRule = 1;\n                atRuleType = atRules[type];\n                condition = parseCondition(node);\n            } else if (atRuleKeys.indexOf(type) >= 0) {\n                var subRules = parseNode(node);\n                condition = parseCondition(node);\n                for (var s = 0, lens = subRules.length; s < lens; s++) {\n                    var subRule = subRules[s];\n                    condition && (subRule.mediaText = condition);\n                    subRule.atRuleType = atRules[type];\n                }\n                result = result.concat(subRules);\n            }\n            if (!sels && !isSingleAtRule)\n                continue;\n            const style = parseStyle(node);\n            const selsParsed = parseSelector(sels);\n            const selsAdd = selsParsed.add;\n            sels = selsParsed.result;\n            let lastRule;\n            for (var k = 0, len3 = sels.length; k < len3; k++) {\n                const model = createNode(sels[k], style, { atRule: atRules[type] });\n                result.push(model);\n                lastRule = model;\n            }\n            if (selsAdd.length) {\n                var selsAddStr = selsAdd.join(', ');\n                if (lastRule) {\n                    lastRule.selectorsAdd = selsAddStr;\n                } else {\n                    const model = {\n                        selectors: [],\n                        selectorsAdd: selsAddStr,\n                        style\n                    };\n                    singleAtRule && (model.singleAtRule = singleAtRule);\n                    atRuleType && (model.atRuleType = atRuleType);\n                    condition && (model.mediaText = condition);\n                    result.push(model);\n                }\n            }\n        }\n        return result;\n    };\n    var parser =  str => {\n        const el = document.createElement('style');\n        el.innerHTML = str;\n        document.head.appendChild(el);\n        const sheet = el.sheet;\n        document.head.removeChild(el);\n        return parseNode(sheet);\n    };\n\n\n    parser.parseSelector = parseSelector;\n    parser.parseStyle = parseStyle;\n    parser.parseCondition = parseCondition;\n    parser.createNode = createNode;\n    parser.parseNode = parseNode;\n\n    return parser;\n});"]}