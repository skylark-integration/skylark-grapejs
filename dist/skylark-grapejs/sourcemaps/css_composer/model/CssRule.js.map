{"version":3,"sources":["css_composer/model/CssRule.js"],"names":["define","a","Backbone","Styleable","Selectors","CSS","window","Model","extend","defaults","selectors","selectorsAdd","style","mediaText","state","stylable","atRuleType","singleAtRule","important","[object Object]","c","opt","this","config","em","sm","get","slct","undefined","selector","push","add","set","type","condition","typeStr","opts","result","wrapper","addSelector","selOpts","escape","str","getConfig","getFullString","stateStr","skipState","skipAdd","join","selectorsToString","styleToString","atRule","getAtRule","block","getDeclaration","args","obj","prototype","toJSON","apply","forEach","value","key","isEmpty","width","ruleProps","st","wd","Array","models","a1","map","model","a2","length","i","re","j"],"mappings":"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","file":"../../../css_composer/model/CssRule.js","sourcesContent":["define([\n    'skylark-underscore',\n    'skylark-backbone',\n    '../../domain_abstract/model/Styleable',\n    '../../selector_manager/model/Selectors'\n], function (a, Backbone, Styleable, Selectors) {\n    'use strict';\n    const {CSS} = window;\n    return Backbone.Model.extend(Styleable).extend({\n        defaults: {\n            selectors: {},\n            selectorsAdd: '',\n            style: {},\n            mediaText: '',\n            state: '',\n            stylable: true,\n            atRuleType: '',\n            singleAtRule: 0,\n            important: 0\n        },\n        initialize(c, opt = {}) {\n            this.config = c || {};\n            const em = opt.em;\n            let selectors = this.config.selectors || [];\n            this.em = em;\n            if (em) {\n                const sm = em.get('SelectorManager');\n                const slct = [];\n                selectors.undefined(selector => {\n                    slct.push(sm.add(selector));\n                });\n                selectors = slct;\n            }\n            this.set('selectors', new Selectors(selectors));\n        },\n        getAtRule() {\n            const type = this.get('atRuleType');\n            const condition = this.get('mediaText');\n            const typeStr = type ? `@${ type }` : condition ? '@media' : '';\n            return typeStr + (condition && typeStr ? ` ${ condition }` : '');\n        },\n        selectorsToString(opts = {}) {\n            const result = [];\n            const {em} = this;\n            const state = this.get('state');\n            const wrapper = this.get('wrapper');\n            const addSelector = this.get('selectorsAdd');\n            const isBody = wrapper && em && em.getConfig('wrapperIsBody');\n            const selOpts = { escape: str => CSS && CSS.escape ? CSS.escape(str) : str };\n            const selectors = isBody ? 'body' : this.get('selectors').getFullString(0, selOpts);\n            const stateStr = state && !opts.skipState ? `:${ state }` : '';\n            selectors && result.push(`${ selectors }${ stateStr }`);\n            addSelector && !opts.skipAdd && result.push(addSelector);\n            return result.join(', ');\n        },\n        getDeclaration(opts = {}) {\n            let result = '';\n            const selectors = this.selectorsToString();\n            const style = this.styleToString(opts);\n            const singleAtRule = this.get('singleAtRule');\n            if ((selectors || singleAtRule) && style) {\n                result = singleAtRule ? style : `${ selectors }{${ style }}`;\n            }\n            return result;\n        },\n        toCSS(opts = {}) {\n            let result = '';\n            const atRule = this.getAtRule();\n            const block = this.getDeclaration(opts);\n            block && (result = block);\n            if (atRule && result) {\n                result = `${ atRule }{${ result }}`;\n            }\n            return result;\n        },\n        toJSON(...args) {\n            const obj = Backbone.Model.prototype.toJSON.apply(this, args);\n            if (this.em.getConfig('avoidDefaults')) {\n                const defaults = this.defaults;\n                a.forEach(defaults, (value, key) => {\n                    if (obj[key] === value) {\n                        delete obj[key];\n                    }\n                });\n                if (a.isEmpty(obj.selectors))\n                    delete obj.selectors;\n                if (a.isEmpty(obj.style))\n                    delete obj.style;\n            }\n            return obj;\n        },\n        compare(selectors, state, width, ruleProps = {}) {\n            var st = state || '';\n            var wd = width || '';\n            var selectorsAdd = ruleProps.selectorsAdd || '';\n            var atRuleType = ruleProps.atRuleType || '';\n            var cId = 'cid';\n            if (!(selectors instanceof Array) && !selectors.models)\n                selectors = [selectors];\n            var a1 = a.map(selectors.models || selectors, model => model.get('name'));\n            var a2 = a.map(this.get('selectors').models, model => model.get('name'));\n            var f = false;\n            if (a1.length !== a2.length)\n                return f;\n            for (var i = 0; i < a1.length; i++) {\n                var re = 0;\n                for (var j = 0; j < a2.length; j++) {\n                    if (a1[i] === a2[j])\n                        re = 1;\n                }\n                if (re === 0)\n                    return f;\n            }\n            if (this.get('state') !== st || this.get('mediaText') !== wd || this.get('selectorsAdd') !== selectorsAdd || this.get('atRuleType') !== atRuleType) {\n                return f;\n            }\n            return true;\n        }\n    });\n});"]}