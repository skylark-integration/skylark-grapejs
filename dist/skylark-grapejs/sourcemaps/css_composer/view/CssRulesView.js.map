{"version":3,"sources":["css_composer/view/CssRulesView.js"],"names":["define","Backbone","CssRuleView","CssGroupRuleView","$","getBlockId","pfx","order","parseFloat","View","extend","[object Object]","o","config","this","atRules","em","stylePrefix","className","coll","collection","listenTo","addTo","render","model","addToCollection","fragmentEl","renderStarted","fragment","opts","rendered","view","get","atRule","getAtRule","atRuleEl","styleEl","document","createElement","createTextNode","appendChild","appendData","el","textContent","clsName","mediaText","defaultBlockId","blockId","getMediaWidth","container","contRules","querySelector","e","replace","getConfig","$el","frag","createDocumentFragment","empty","prs","getAll","pluck","every","pr","unshift","forEach","appendTo","each","append","attr"],"mappings":";;;;;;;AAAAA,QACI,mBACA,gBACA,sBACD,SAAUC,EAAUC,EAAaC,GAChC,aACA,MAAMC,EAAIH,EAASG,EACbC,EAAa,CAACC,EAAKC,OAAcD,IAAQC,MAAaC,WAAWD,KAAY,KACnF,OAAON,EAASQ,KAAKC,QACjBC,WAAWC,GACP,MAAMC,EAASD,EAAEC,WACjBC,KAAKC,WACLD,KAAKD,OAASA,EACdC,KAAKE,GAAKH,EAAOG,GACjBF,KAAKR,IAAMO,EAAOI,aAAe,GACjCH,KAAKI,UAAYJ,KAAKR,IAAM,QAC5B,MAAMa,EAAOL,KAAKM,WAClBN,KAAKO,SAASF,EAAM,MAAOL,KAAKQ,OAChCR,KAAKO,SAASF,EAAM,QAASL,KAAKS,SAEtCZ,MAAMa,GACFV,KAAKW,gBAAgBD,IAEzBb,gBAAgBa,EAAOE,GACnB,IAAKZ,KAAKa,cACN,OAEJ,MAAMC,EAAWF,GAAc,MACzBb,OAACA,GAAUC,KACXe,GACFL,MAAAA,EACAX,OAAAA,GAEJ,IAAIiB,EAAUC,EACd,GAAgC,cAA5BP,EAAMQ,IAAI,cAA+B,CACzC,MAAMC,EAAST,EAAMU,YACrB,IAAIC,EAAWrB,KAAKC,QAAQkB,GAC5B,IAAKE,EAAU,CACX,MAAMC,EAAUC,SAASC,cAAc,SACvCH,EAAWE,SAASE,eAAe,IACnCH,EAAQI,YAAYH,SAASE,kBAAmBN,OAChDG,EAAQI,YAAYL,GACpBC,EAAQI,YAAYH,SAASE,eAAe,MAC5CzB,KAAKC,QAAQkB,GAAUE,EACvBL,EAAWM,EAEfL,EAAO,IAAI5B,EAAiB0B,GAC5BM,EAASM,WAAWV,EAAKR,SAASmB,GAAGC,kBAGrCb,GADAC,EAAO,IAAI7B,EAAY2B,IACPN,SAASmB,GAE7B,MAAME,EAAU9B,KAAKI,UACf2B,EAAYrB,EAAMQ,IAAI,aACtBc,EAAiBzC,EAAWuC,GAClC,IAAIG,EAAUD,EAId,GAHID,IACAE,EAAU1C,EAAWuC,EAAS9B,KAAKkC,cAAcH,KAEjDf,EAAU,CACV,MAAMmB,EAAYrB,GAAYd,KAAK4B,GACnC,IAAIQ,EACJ,IACIA,EAAYD,EAAUE,kBAAmBJ,KAC3C,MAAOK,IAEJF,IACDA,EAAYD,EAAUE,kBAAmBL,MAE7CI,EAAUV,YAAYV,GAE1B,OAAOA,GAEXnB,cAAckC,GACV,OAAOA,GAAaA,EAAUQ,YAAavC,KAAKE,GAAGsC,UAAU,sBAAwB,IAAID,QAAQ,IAAK,KAE1G1C,SACIG,KAAKa,cAAgB,EACrBb,KAAKC,WACL,MAAMC,GAACA,EAAEuC,IAAEA,EAAGrC,UAAEA,EAASE,WAAEA,GAAcN,KACnC0C,EAAOnB,SAASoB,yBACtBF,EAAIG,QACJ,MAAMC,EAAM3C,EAAGgB,IAAI,iBAAiB4B,SAASC,MAAM,YAMnD,OALAF,EAAIG,MAAMC,GAAMA,IAAOJ,EAAIK,QAAQ,GACnCL,EAAIM,QAAQF,GAAM3D,cAAeC,EAAWa,EAAW6C,cAAgBG,SAASV,IAChFpC,EAAW+C,KAAK3C,GAASV,KAAKW,gBAAgBD,EAAOgC,IACrDD,EAAIa,OAAOZ,GACXD,EAAIc,KAAK,QAASnD,GACXJ","file":"../../../css_composer/view/CssRulesView.js","sourcesContent":["define([\n    'skylark-backbone',\n    './CssRuleView',\n    './CssGroupRuleView'\n], function (Backbone, CssRuleView, CssGroupRuleView) {\n    'use strict';\n    const $ = Backbone.$;\n    const getBlockId = (pfx, order) => `${ pfx }${ order ? `-${ parseFloat(order) }` : '' }`;\n    return Backbone.View.extend({\n        initialize(o) {\n            const config = o.config || {};\n            this.atRules = {};\n            this.config = config;\n            this.em = config.em;\n            this.pfx = config.stylePrefix || '';\n            this.className = this.pfx + 'rules';\n            const coll = this.collection;\n            this.listenTo(coll, 'add', this.addTo);\n            this.listenTo(coll, 'reset', this.render);\n        },\n        addTo(model) {\n            this.addToCollection(model);\n        },\n        addToCollection(model, fragmentEl) {\n            if (!this.renderStarted) {\n                return;\n            }\n            const fragment = fragmentEl || null;\n            const {config} = this;\n            const opts = {\n                model,\n                config\n            };\n            let rendered, view;\n            if (model.get('atRuleType') === 'keyframes') {\n                const atRule = model.getAtRule();\n                let atRuleEl = this.atRules[atRule];\n                if (!atRuleEl) {\n                    const styleEl = document.createElement('style');\n                    atRuleEl = document.createTextNode('');\n                    styleEl.appendChild(document.createTextNode(`${ atRule }{`));\n                    styleEl.appendChild(atRuleEl);\n                    styleEl.appendChild(document.createTextNode(`}`));\n                    this.atRules[atRule] = atRuleEl;\n                    rendered = styleEl;\n                }\n                view = new CssGroupRuleView(opts);\n                atRuleEl.appendData(view.render().el.textContent);\n            } else {\n                view = new CssRuleView(opts);\n                rendered = view.render().el;\n            }\n            const clsName = this.className;\n            const mediaText = model.get('mediaText');\n            const defaultBlockId = getBlockId(clsName);\n            let blockId = defaultBlockId;\n            if (mediaText) {\n                blockId = getBlockId(clsName, this.getMediaWidth(mediaText));\n            }\n            if (rendered) {\n                const container = fragment || this.el;\n                let contRules;\n                try {\n                    contRules = container.querySelector(`#${ blockId }`);\n                } catch (e) {\n                }\n                if (!contRules) {\n                    contRules = container.querySelector(`#${ defaultBlockId }`);\n                }\n                contRules.appendChild(rendered);\n            }\n            return rendered;\n        },\n        getMediaWidth(mediaText) {\n            return mediaText && mediaText.replace(`(${ this.em.getConfig('mediaCondition') }: `, '').replace(')', '');\n        },\n        render() {\n            this.renderStarted = 1;\n            this.atRules = {};\n            const {em, $el, className, collection} = this;\n            const frag = document.createDocumentFragment();\n            $el.empty();\n            const prs = em.get('DeviceManager').getAll().pluck('priority');\n            prs.every(pr => pr) && prs.unshift(0);\n            prs.forEach(pr => $(`<div id=\"${ getBlockId(className, pr) }\"></div>`).appendTo(frag));\n            collection.each(model => this.addToCollection(model, frag));\n            $el.append(frag);\n            $el.attr('class', className);\n            return this;\n        }\n    });\n});"]}