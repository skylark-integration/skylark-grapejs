{"version":3,"sources":["css_composer/index.js"],"names":["define","a","defaults","CssRule","CssRules","CssRulesView","Selectors","Selector","em","rules","rulesView","c","name","getConfig","[object Object]","keys","smc","stm","storeCss","push","storeStyles","config","ppfx","pStylePrefix","stylePrefix","elStyle","style","collection","this","add","ev","getAll","um","get","stopListening","handleChange","listenTo","each","rule","avoidStore","model","opts","handleUpdates","bind","data","d","getCacheLoad","obj","styles","JSON","parse","err","css","parseCss","isArray","length","reset","noStore","storageKey","indexOf","getCss","stringify","store","selectors","state","width","s","w","opt","singleAtRule","mediaText","ruleProps","m","compare","result","Array","i","l","sm","console","warn","sl","sels","newSels","j","le","selec","modelExists","updateStyle","avoidUpdateStyle","styleUpdate","extend","set","atRuleType","atRuleParams","node","parserCss","checkNode","selectorsAdd","selector","atRule","setStyle","media","getCurrentMedia","type","TYPE_ID","TYPE_CLASS","render","el"],"mappings":"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","file":"../../css_composer/index.js","sourcesContent":["define([\n    'skylark-underscore',\n    './config/config',\n    './model/CssRule',\n    './model/CssRules',\n    './view/CssRulesView',\n    '../selector_manager/model/Selectors',\n    '../selector_manager/model/Selector'\n], function (a, defaults, CssRule, CssRules, CssRulesView, Selectors, Selector) {\n    'use strict';\n    return () => {\n        let em;\n        var c = {};\n        var rules, rulesView;\n        return {\n            Selectors,\n            name: 'CssComposer',\n            getConfig() {\n                return c;\n            },\n            storageKey() {\n                var keys = [];\n                var smc = c.stm && c.stm.getConfig() || {};\n                if (smc.storeCss)\n                    keys.push('css');\n                if (smc.storeStyles)\n                    keys.push('styles');\n                return keys;\n            },\n            init(config) {\n                c = config || {};\n                for (var name in defaults) {\n                    if (!(name in c))\n                        c[name] = defaults[name];\n                }\n                var ppfx = c.pStylePrefix;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                var elStyle = c.em && c.em.config.style || '';\n                c.rules = elStyle || c.rules;\n                em = c.em;\n                rules = new CssRules([], c);\n                rulesView = new CssRulesView({\n                    collection: rules,\n                    config: c\n                });\n                return this;\n            },\n            onLoad() {\n                rules.add(c.rules);\n            },\n            postLoad(em) {\n                const ev = 'add remove';\n                const rules = this.getAll();\n                const um = em.get('UndoManager');\n                um && um.add(rules);\n                em.stopListening(rules, ev, this.handleChange);\n                em.listenTo(rules, ev, this.handleChange);\n                rules.each(rule => this.handleChange(rule, { avoidStore: 1 }));\n            },\n            handleChange(model, opts = {}) {\n                const ev = 'change:style';\n                const um = em.get('UndoManager');\n                um && um.add(model);\n                const handleUpdates = em.handleUpdates.bind(em);\n                em.stopListening(model, ev, handleUpdates);\n                em.listenTo(model, ev, handleUpdates);\n                !opts.avoidStore && handleUpdates('', '', opts);\n            },\n            load(data) {\n                var d = data || '';\n                if (!d && c.stm) {\n                    d = c.em.getCacheLoad();\n                }\n                var obj = d.styles || '';\n                if (d.styles) {\n                    try {\n                        obj = JSON.parse(d.styles);\n                    } catch (err) {\n                    }\n                } else if (d.css) {\n                    obj = c.em.get('Parser').parseCss(d.css);\n                }\n                if (a.isArray(obj)) {\n                    obj.length && rules.reset(obj);\n                } else if (obj) {\n                    rules.reset(obj);\n                }\n                return obj;\n            },\n            store(noStore) {\n                if (!c.stm)\n                    return;\n                var obj = {};\n                var keys = this.storageKey();\n                if (keys.indexOf('css') >= 0)\n                    obj.css = c.em.getCss();\n                if (keys.indexOf('styles') >= 0)\n                    obj.styles = JSON.stringify(rules);\n                if (!noStore)\n                    c.stm.store(obj);\n                return obj;\n            },\n            add(selectors, state, width, opts = {}) {\n                var s = state || '';\n                var w = width || '';\n                var opt = { ...opts };\n                var rule = this.get(selectors, s, w, opt);\n                if (rule && rule.config && !rule.config.singleAtRule) {\n                    return rule;\n                } else {\n                    opt.state = s;\n                    opt.mediaText = w;\n                    opt.selectors = '';\n                    rule = new CssRule(opt, c);\n                    rule.get('selectors').add(selectors);\n                    rules.add(rule);\n                    return rule;\n                }\n            },\n            get(selectors, state, width, ruleProps) {\n                var rule = null;\n                rules.each(m => {\n                    if (rule)\n                        return;\n                    if (m.compare(selectors, state, width, ruleProps))\n                        rule = m;\n                });\n                return rule;\n            },\n            getAll() {\n                return rules;\n            },\n            clear() {\n                this.getAll().reset();\n                return this;\n            },\n            addCollection(data, opts = {}) {\n                var result = [];\n                var d = data instanceof Array ? data : [data];\n                for (var i = 0, l = d.length; i < l; i++) {\n                    var rule = d[i] || {};\n                    if (!rule.selectors)\n                        continue;\n                    var sm = c.em && c.em.get('SelectorManager');\n                    if (!sm)\n                        console.warn('Selector Manager not found');\n                    var sl = rule.selectors;\n                    var sels = sl instanceof Array ? sl : [sl];\n                    var newSels = [];\n                    for (var j = 0, le = sels.length; j < le; j++) {\n                        var selec = sm.add(sels[j]);\n                        newSels.push(selec);\n                    }\n                    var modelExists = this.get(newSels, rule.state, rule.mediaText, rule);\n                    var model = this.add(newSels, rule.state, rule.mediaText, rule);\n                    var updateStyle = !modelExists || !opts.avoidUpdateStyle;\n                    const style = rule.style || {};\n                    if (updateStyle) {\n                        let styleUpdate = opts.extend ? {\n                            ...model.get('style'),\n                            ...style\n                        } : style;\n                        model.set('style', styleUpdate);\n                    }\n                    result.push(model);\n                }\n                return result;\n            },\n            setRule(selectors, style, opts = {}) {\n                const {atRuleType, atRuleParams} = opts;\n                const node = em.get('Parser').parserCss.checkNode({\n                    selectors,\n                    style\n                })[0];\n                const {state, selectorsAdd} = node;\n                const sm = em.get('SelectorManager');\n                const selector = sm.add(node.selectors);\n                const rule = this.add(selector, state, atRuleParams, {\n                    selectorsAdd,\n                    atRule: atRuleType\n                });\n                rule.setStyle(style, opts);\n                return rule;\n            },\n            getRule(selectors, opts = {}) {\n                const sm = em.get('SelectorManager');\n                const node = em.get('Parser').parserCss.checkNode({ selectors })[0];\n                const selector = sm.get(node.selectors);\n                const {state, selectorsAdd} = node;\n                const {atRuleType, atRuleParams} = opts;\n                return selector && this.get(selector, state, atRuleParams, {\n                    selectorsAdd,\n                    atRule: atRuleType\n                });\n            },\n            setIdRule(name, style = {}, opts = {}) {\n                const state = opts.state || '';\n                const media = opts.mediaText || em.getCurrentMedia();\n                const sm = em.get('SelectorManager');\n                const selector = sm.add({\n                    name,\n                    type: Selector.TYPE_ID\n                });\n                const rule = this.add(selector, state, media);\n                rule.setStyle(style, opts);\n                return rule;\n            },\n            getIdRule(name, opts = {}) {\n                const state = opts.state || '';\n                const media = opts.mediaText || em.getCurrentMedia();\n                const selector = em.get('SelectorManager').get(name, Selector.TYPE_ID);\n                return selector && this.get(selector, state, media);\n            },\n            setClassRule(name, style = {}, opts = {}) {\n                const state = opts.state || '';\n                const media = opts.mediaText || em.getCurrentMedia();\n                const sm = em.get('SelectorManager');\n                const selector = sm.add({\n                    name,\n                    type: Selector.TYPE_CLASS\n                });\n                const rule = this.add(selector, state, media);\n                rule.setStyle(style, opts);\n                return rule;\n            },\n            getClassRule(name, opts = {}) {\n                const state = opts.state || '';\n                const media = opts.mediaText || em.getCurrentMedia();\n                const selector = em.get('SelectorManager').get(name, Selector.TYPE_CLASS);\n                return selector && this.get(selector, state, media);\n            },\n            render() {\n                return rulesView.render().el;\n            }\n        };\n    };\n});"]}