{"version":3,"sources":["code_manager/model/CodeMirrorEditor.js"],"names":["define","a","Backbone","CodeMirror","Model","extend","defaults","input","label","codeName","theme","readOnly","lineNumbers","[object Object]","el","bindAll","this","editor","fromTextArea","dragDrop","lineWrapping","mode","get","attributes","element","on","onChange","trigger","getEditor","refresh","focus","ed","getValue","v","opts","setValue","autoFormatRange","commands","selectAll","getCursor","goDocStart","noRefresh","setTimeout"],"mappings":";;;;;;;AAAAA,QACI,qBACA,mBACA,qBACA,8CACA,kCACA,eACD,SAAUC,EAAGC,EAAUC,GACtB,aACA,OAAOD,EAASE,MAAMC,QAClBC,UACIC,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,MAAO,YACPC,UAAU,EACVC,aAAa,GAEjBC,KAAKC,GAUD,OATAb,EAAEc,QAAQC,KAAM,YAChBA,KAAKC,OAASd,EAAWe,aAAaJ,GAClCK,UAAU,EACVC,cAAc,EACdC,KAAML,KAAKM,IAAI,eACZN,KAAKO,aAEZP,KAAKQ,QAAUV,EACfE,KAAKC,OAAOQ,GAAG,SAAUT,KAAKU,UACvBV,MAEXH,WACIG,KAAKW,QAAQ,SAAUX,OAE3BH,YACI,OAAOG,KAAKC,QAEhBJ,aACI,OAAOG,KAAKQ,SAEhBX,WAAWC,GAEP,OADAE,KAAKQ,QAAUV,EACRE,MAEXH,UAEI,OADAG,KAAKY,YAAYC,UACVb,MAEXH,QAEI,OADAG,KAAKY,YAAYE,QACVd,MAEXH,aACI,MAAMkB,EAAKf,KAAKY,YAChB,OAAOG,GAAMA,EAAGC,YAEpBnB,WAAWoB,EAAGC,MACV,MAAMjB,OAACA,GAAUD,KACZC,IAELA,EAAOkB,SAASF,GACZhB,EAAOmB,kBACPjC,EAAWkC,SAASC,UAAUrB,GAC9BA,EAAOmB,gBAAgBnB,EAAOsB,WAAU,GAAOtB,EAAOsB,WAAU,IAChEpC,EAAWkC,SAASG,WAAWvB,KAElCiB,EAAKO,WAAaC,WAAW,IAAM1B,KAAKa","file":"../../../code_manager/model/CodeMirrorEditor.js","sourcesContent":["define([\n    'skylark-underscore',\n    'skylark-backbone',\n    'skylark-codemirror',\n    'skylark-codemirror/mode/htmlmixed/htmlmixed',\n    'skylark-codemirror/mode/css/css',\n    './formating'\n], function (a, Backbone, CodeMirror) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            input: '',\n            label: '',\n            codeName: '',\n            theme: 'hopscotch',\n            readOnly: true,\n            lineNumbers: true\n        },\n        init(el) {\n            a.bindAll(this, 'onChange');\n            this.editor = CodeMirror.fromTextArea(el, {\n                dragDrop: false,\n                lineWrapping: true,\n                mode: this.get('codeName'),\n                ...this.attributes\n            });\n            this.element = el;\n            this.editor.on('change', this.onChange);\n            return this;\n        },\n        onChange() {\n            this.trigger('update', this);\n        },\n        getEditor() {\n            return this.editor;\n        },\n        getElement() {\n            return this.element;\n        },\n        setElement(el) {\n            this.element = el;\n            return this;\n        },\n        refresh() {\n            this.getEditor().refresh();\n            return this;\n        },\n        focus() {\n            this.getEditor().focus();\n            return this;\n        },\n        getContent() {\n            const ed = this.getEditor();\n            return ed && ed.getValue();\n        },\n        setContent(v, opts = {}) {\n            const {editor} = this;\n            if (!editor)\n                return;\n            editor.setValue(v);\n            if (editor.autoFormatRange) {\n                CodeMirror.commands.selectAll(editor);\n                editor.autoFormatRange(editor.getCursor(true), editor.getCursor(false));\n                CodeMirror.commands.goDocStart(editor);\n            }\n            !opts.noRefresh && setTimeout(() => this.refresh());\n        }\n    });\n});"]}