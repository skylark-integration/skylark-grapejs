{"version":3,"sources":["code_manager/model/CssGenerator.js"],"names":["define","Backbone","a","maxValue","Number","MAX_VALUE","Model","extend","[object Object]","this","compCls","ids","model","opts","code","em","avoidInline","getConfig","style","styleToString","classes","get","wrapperIsBody","isWrapper","push","getId","each","getFullName","selector","components","buildFromModel","cssc","clearStyles","isUndefined","rules","getAll","atRules","dump","rule","atRule","getAtRule","mRules","buildFromRule","sortMediaObject","forEach","item","rulesStr","key","value","ruleStr","remove","result","selectorStrNoAdd","selectorsToString","skipAdd","selectorsAdd","singleAtRule","found","name","indexOf","keepUnusedStyles","block","getDeclaration","mediaQuery","length","exec","parseFloat","items","itemsArr","sort","b","isMobFirst","every","mquery","left","right","getQueryLength"],"mappings":"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","file":"../../../code_manager/model/CssGenerator.js","sourcesContent":["define([\n    'skylark-backbone',\n    'skylark-underscore'\n], function (Backbone, a) {\n    'use strict';\n    const maxValue = Number.MAX_VALUE;\n    return Backbone.Model.extend({\n        initialize() {\n            this.compCls = [];\n            this.ids = [];\n        },\n        buildFromModel(model, opts = {}) {\n            let code = '';\n            const em = this.em;\n            const avoidInline = em && em.getConfig('avoidInlineStyle');\n            const style = model.styleToString();\n            const classes = model.get('classes');\n            const wrapperIsBody = opts.wrapperIsBody;\n            const isWrapper = model.get('wrapper');\n            this.ids.push(`#${ model.getId() }`);\n            classes.each(model => this.compCls.push(model.getFullName()));\n            if (!avoidInline && style) {\n                let selector = `#${ model.getId() }`;\n                selector = wrapperIsBody && isWrapper ? 'body' : selector;\n                code = `${ selector }{${ style }}`;\n            }\n            const components = model.components();\n            components.each(model => code += this.buildFromModel(model, opts));\n            return code;\n        },\n        build(model, opts = {}) {\n            const cssc = opts.cssc;\n            const em = opts.em || '';\n            this.em = em;\n            this.compCls = [];\n            this.ids = [];\n            var code = this.buildFromModel(model, opts);\n            const clearStyles = a.isUndefined(opts.clearStyles) && em ? em.getConfig('clearStyles') : opts.clearStyles;\n            if (cssc) {\n                const rules = cssc.getAll();\n                const atRules = {};\n                const dump = [];\n                rules.each(rule => {\n                    const atRule = rule.getAtRule();\n                    if (atRule) {\n                        const mRules = atRules[atRule];\n                        if (mRules) {\n                            mRules.push(rule);\n                        } else {\n                            atRules[atRule] = [rule];\n                        }\n                        return;\n                    }\n                    code += this.buildFromRule(rule, dump, opts);\n                });\n                this.sortMediaObject(atRules).forEach(item => {\n                    let rulesStr = '';\n                    const atRule = item.key;\n                    const mRules = item.value;\n                    mRules.forEach(rule => {\n                        const ruleStr = this.buildFromRule(rule, dump, opts);\n                        if (rule.get('singleAtRule')) {\n                            code += `${ atRule }{${ ruleStr }}`;\n                        } else {\n                            rulesStr += ruleStr;\n                        }\n                    });\n                    if (rulesStr) {\n                        code += `${ atRule }{${ rulesStr }}`;\n                    }\n                });\n                em && clearStyles && rules.remove(dump);\n            }\n            return code;\n        },\n        buildFromRule(rule, dump, opts = {}) {\n            let result = '';\n            const selectorStrNoAdd = rule.selectorsToString({ skipAdd: 1 });\n            const selectorsAdd = rule.get('selectorsAdd');\n            const singleAtRule = rule.get('singleAtRule');\n            let found;\n            rule.get('selectors').each(selector => {\n                const name = selector.getFullName();\n                if (this.compCls.indexOf(name) >= 0 || this.ids.indexOf(name) >= 0 || opts.keepUnusedStyles) {\n                    found = 1;\n                }\n            });\n            if (selectorStrNoAdd && found || selectorsAdd || singleAtRule) {\n                const block = rule.getDeclaration();\n                block && (result += block);\n            } else {\n                dump.push(rule);\n            }\n            return result;\n        },\n        getQueryLength(mediaQuery) {\n            const length = /(-?\\d*\\.?\\d+)\\w{0,}/.exec(mediaQuery);\n            if (!length)\n                return maxValue;\n            return parseFloat(length[1]);\n        },\n        sortMediaObject(items = {}) {\n            const itemsArr = [];\n            a.each(items, (value, key) => itemsArr.push({\n                key,\n                value\n            }));\n            return itemsArr.sort((a, b) => {\n                const isMobFirst = [\n                    a.key,\n                    b.key\n                ].every(mquery => mquery.indexOf('min-width') !== -1);\n                const left = isMobFirst ? a.key : b.key;\n                const right = isMobFirst ? b.key : a.key;\n                return this.getQueryLength(left) - this.getQueryLength(right);\n            });\n        }\n    });\n});"]}