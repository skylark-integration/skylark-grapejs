{"version":3,"sources":["editor/index.js"],"names":["define","langx","$","defaults","EditorModel","EditorView","config","c","mixin","pStylePrefix","stylePrefix","em","editorView","model","editor","I18n","get","DomComponents","LayerManager","CssComposer","StorageManager","AssetManager","BlockManager","TraitManager","SelectorManager","CodeManager","Commands","Keymaps","Modal","Panels","StyleManager","Canvas","UndoManager","DeviceManager","RichTextEditor","Parser","Utils","Config","[object Object]","init","this","on","clear","forEach","module","postRender","getConfig","prop","getHtml","opts","getCss","getJs","getComponents","getWrapper","components","setComponents","append","getStyle","getAll","style","setStyle","getSelected","getSelectedAll","selected","getModelToStyle","el","setSelected","addSelected","removeSelected","toggleSelected","name","set","getDevice","runCommand","id","options","run","stopCommand","stop","store","clb","load","getContainer","getDirtyCount","refreshCanvas","obj","customRte","parser","parserCss","value","setDragMode","msg","log","t","args","event","callback","once","off","trigger","apply","arguments","destroy","destroyAll","getEl","getModel","render"],"mappings":"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","file":"../../editor/index.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    'skylark-jquery',\n    './config/config',\n    './model/Editor',\n    './view/EditorView'\n], function (langx,$, defaults, EditorModel, EditorView) {\n    'use strict';\n    return (config = {}) => {\n\n        const c = langx.mixin(\n            {},\n            defaults,\n            config\n        );\n\n        c.pStylePrefix = c.stylePrefix;\n\n        var em = new EditorModel(c);\n\n        var editorView = new EditorView({\n            model: em,\n            config: c\n        });\n        \n        return {\n            $,\n            editor: em,\n            I18n: em.get('I18n'),\n            DomComponents: em.get('DomComponents'),\n            LayerManager: em.get('LayerManager'),\n            CssComposer: em.get('CssComposer'),\n            StorageManager: em.get('StorageManager'),\n            AssetManager: em.get('AssetManager'),\n            BlockManager: em.get('BlockManager'),\n            TraitManager: em.get('TraitManager'),\n            SelectorManager: em.get('SelectorManager'),\n            CodeManager: em.get('CodeManager'),\n            Commands: em.get('Commands'),\n            Keymaps: em.get('Keymaps'),\n            Modal: em.get('Modal'),\n            Panels: em.get('Panels'),\n            StyleManager: em.get('StyleManager'),\n            Canvas: em.get('Canvas'),\n            UndoManager: em.get('UndoManager'),\n            DeviceManager: em.get('DeviceManager'),\n            RichTextEditor: em.get('RichTextEditor'),\n            Parser: em.get('Parser'),\n            Utils: em.get('Utils'),\n            Config: em.get('Config'),\n            init() {\n                em.init(this);\n                em.on('loaded', () => {\n                    this.UndoManager.clear();\n                    em.get('modules').forEach(module => {\n                        module.postRender && module.postRender(editorView);\n                    });\n                });\n                return this;\n            },\n            getConfig(prop) {\n                return em.getConfig(prop);\n            },\n            getHtml(opts) {\n                return em.getHtml(opts);\n            },\n            getCss(opts) {\n                return em.getCss(opts);\n            },\n            getJs() {\n                return em.getJs();\n            },\n            getComponents() {\n                return em.get('DomComponents').getComponents();\n            },\n            getWrapper() {\n                return em.get('DomComponents').getWrapper();\n            },\n            setComponents(components) {\n                em.setComponents(components);\n                return this;\n            },\n            addComponents(components, opts) {\n                return this.getWrapper().append(components, opts);\n            },\n            getStyle() {\n                return em.get('CssComposer').getAll();\n            },\n            setStyle(style) {\n                em.setStyle(style);\n                return this;\n            },\n            getSelected() {\n                return em.getSelected();\n            },\n            getSelectedAll() {\n                return em.getSelectedAll();\n            },\n            getSelectedToStyle() {\n                let selected = em.getSelected();\n                if (selected) {\n                    return this.StyleManager.getModelToStyle(selected);\n                }\n            },\n            select(el, opts) {\n                em.setSelected(el, opts);\n                return this;\n            },\n            selectAdd(el) {\n                em.addSelected(el);\n                return this;\n            },\n            selectRemove(el) {\n                em.removeSelected(el);\n                return this;\n            },\n            selectToggle(el) {\n                em.toggleSelected(el);\n                return this;\n            },\n            setDevice(name) {\n                em.set('device', name);\n                return this;\n            },\n            getDevice() {\n                return em.get('device');\n            },\n            runCommand(id, options = {}) {\n                return em.get('Commands').run(id, options);\n            },\n            stopCommand(id, options = {}) {\n                return em.get('Commands').stop(id, options);\n            },\n            store(clb) {\n                return em.store(clb);\n            },\n            load(clb) {\n                return em.load(clb);\n            },\n            getContainer() {\n                return c.el;\n            },\n            getDirtyCount() {\n                return em.getDirtyCount();\n            },\n            refresh() {\n                em.refreshCanvas();\n            },\n            setCustomRte(obj) {\n                this.RichTextEditor.customRte = obj;\n            },\n            setCustomParserCss(parser) {\n                this.Parser.getConfig().parserCss = parser;\n                return this;\n            },\n            setDragMode(value) {\n                em.setDragMode(value);\n                return this;\n            },\n            log(msg, opts = {}) {\n                em.log(msg, opts);\n                return this;\n            },\n            t(...args) {\n                return em.t(...args);\n            },\n            on(event, callback) {\n                em.on(event, callback);\n                return this;\n            },\n            once(event, callback) {\n                em.once(event, callback);\n                return this;\n            },\n            off(event, callback) {\n                em.off(event, callback);\n                return this;\n            },\n            trigger(event) {\n                em.trigger.apply(em, arguments);\n                return this;\n            },\n            destroy() {\n                return em.destroyAll();\n            },\n            getEl() {\n                return editorView.el;\n            },\n            getModel() {\n                return em;\n            },\n            render() {\n                editorView.render();\n                return editorView.el;\n            }\n        };\n    };\n});"]}