/**
 * skylark-grapejs - A version of garpejs that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-grapejs/
 * @license MIT
 */
define(["skylark-backbone","skylark-underscore"],function(t,e){"use strict";t.$;return t.View.extend({tagName(){return this.model.get("tagName")},events:{click:"clicked"},initialize(t){var e=this.model.get("className");this.config=t.config||{},this.em=this.config.em||{};const s=this.config.stylePrefix||"",i=this.config.pStylePrefix||"";this.pfx=s,this.ppfx=this.config.pStylePrefix||"",this.id=s+this.model.get("id"),this.activeCls=`${s}active ${i}four-color`,this.disableCls=`${i}disabled`,this.btnsVisCls=`${s}visible`,this.className=s+"btn"+(e?" "+e:""),this.listenTo(this.model,"change",this.render),this.listenTo(this.model,"change:active updateActive",this.updateActive),this.listenTo(this.model,"checkActive",this.checkActive),this.listenTo(this.model,"change:bntsVis",this.updateBtnsVis),this.listenTo(this.model,"change:attributes",this.updateAttributes),this.listenTo(this.model,"change:className",this.updateClassName),this.listenTo(this.model,"change:disable",this.updateDisable),this.em&&this.em.get&&(this.commands=this.em.get("Commands"))},updateClassName(){const{model:t,pfx:e}=this,s=t.get("className"),i=t.get("attributes").class,a=`${i||""} ${e}btn ${s||""}`;this.$el.attr("class",a.trim())},updateAttributes(){const{em:t,model:e,$el:s}=this,i=e.get("attributes")||{},a=t&&t.t&&t.t(`panels.buttons.titles.${e.id}`);s.attr(i),a&&s.attr({title:a}),this.updateClassName()},updateBtnsVis(){this.$buttons&&(this.model.get("bntsVis")?this.$buttons.addClass(this.btnsVisCls):this.$buttons.removeClass(this.btnsVisCls))},updateActive(t={}){const{model:s,commands:i,$el:a,activeCls:l}=this,{fromCollection:c}=t,o=s.get("context"),n=s.get("options"),h=s.get("command");let d={};i&&e.isString(h)?d=i.get(h)||{}:e.isFunction(h)?d=i.create({run:h}):null!==h&&e.isObject(h)&&(d=i.create(h)),s.get("active")?(!c&&s.collection.deactivateAll(o,s),s.set("active",!0,{silent:!0}).trigger("checkActive"),i.runCommand(d,{...n,sender:s}),d.noStop&&s.set("active",!1)):(a.removeClass(l),i.stopCommand(d,{...n,sender:s,force:1}))},updateDisable(){const{disableCls:t,model:e}=this,s=e.get("disable");this.$el[s?"addClass":"removeClass"](t)},checkActive(){const{model:t,$el:e,activeCls:s}=this;t.get("active")?e.addClass(s):e.removeClass(s)},clicked(t){this.model.get("bntsVis")||this.model.get("disable")||this.toggleActive()},toggleActive(){const{model:t}=this,{active:e,togglable:s}=t.attributes;if(!e||s){t.set("active",!e);this.em.get("Commands").get("select-comp");e?t.get("runDefaultCommand")&&this.em.runDefault():t.get("stopDefaultCommand")&&this.em.stopDefault()}},render(){const t=this.model.get("label"),{$el:e}=this;return e.empty(),this.updateAttributes(),t&&e.append(t),this.checkActive(),this.updateDisable(),this}})});
//# sourceMappingURL=../../sourcemaps/panels/view/ButtonView.js.map
