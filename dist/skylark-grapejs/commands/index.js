/**
 * skylark-grapejs - A version of garpejs that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-grapejs/
 * @license MIT
 */
define(["skylark-underscore","./view/CommandAbstract","./config/config","../dom_components/model/Component","./view/CanvasClear","./view/CanvasMove","./view/ComponentDelete","./view/ComponentDrag","./view/ComponentEnter","./view/ComponentExit","./view/ComponentNext","./view/ComponentPrev","./view/ComponentStyleClear","./view/CopyComponent","./view/DeleteComponent","./view/ExportTemplate","./view/Fullscreen","./view/MoveComponent","./view/OpenLayers","./view/OpenStyleManager","./view/OpenTraitManager","./view/OpenBlocks","./view/OpenAssets","./view/PasteComponent","./view/Preview","./view/Resize","./view/SelectComponent","./view/SelectPosition","./view/ShowOffset","./view/SwitchVisibility"],function(e,t,n,o,r,s,i,a,l,c,m,p,d,v,g,u,C,f,w,h,y,S,D,b,x,E,M,O,A,P){"use strict";return()=>{let g,O={};const $={},T={},k={},z=[["preview","Preview","preview",x],["resize","Resize","resize",E],["fullscreen","Fullscreen","fullscreen",C],["copy","CopyComponent","",v],["paste","PasteComponent","",b],["canvas-move","CanvasMove","",s],["canvas-clear","CanvasClear","",r],["open-code","ExportTemplate","export-template",u],["open-layers","OpenLayers","open-layers",w],["open-styles","OpenStyleManager","open-sm",h],["open-traits","OpenTraitManager","open-tm",y],["open-blocks","OpenBlocks","open-blocks",S],["open-assets","OpenAssets","open-assets",D],["component-select","SelectComponent","select-comp",M],["component-outline","SwitchVisibility","sw-visibility",P],["component-offset","ShowOffset","show-offset",A],["component-move","MoveComponent","move-comp",f],["component-next","ComponentNext","",m],["component-prev","ComponentPrev","",p],["component-enter","ComponentEnter","",l],["component-exit","ComponentExit","select-parent",c],["component-delete","ComponentDelete","",i],["component-style-clear","ComponentStyleClear","",d],["component-drag","ComponentDrag","",a]];return{CommandAbstract:t,name:"Commands",init(t={}){O={...n,...t},g=O.em;const r=O.pStylePrefix;r&&(O.stylePrefix=r+O.stylePrefix);for(let e in O.defaults){const t=O.defaults[e];t.id&&this.add(t.id,t)}return T["tlb-delete"]={run:e=>e.runCommand("core:component-delete")},T["tlb-clone"]={run(e){e.runCommand("core:copy"),e.runCommand("core:paste")}},T["tlb-move"]={run(t,n,r={}){let s;const i=t.getModel(),a=r&&r.event,{target:l}=r,c=l||t.getSelected(),m=l?[l]:[...t.getSelectedAll()],p=a&&"dragstart"==a.type,d={preserveSelected:1},v=c.get("dmode")||i.get("dmode"),g=()=>i.stopDefault(d),u=e.includes(["absolute","translate"],v);if(m.forEach(e=>e.trigger("disable")),!c||!c.get("draggable"))return i.logWarning("The element is not draggable");p?setTimeout(g,0):g();const C=e=>{i.trigger(`${o.eventDrag}:start`,e)},f=e=>{i.trigger(o.eventDrag,e)},w=(e,n,r)=>{i.runDefault(d),m.forEach(e=>e.set("status","selected")),t.select(m),c.emitUpdate(),i.trigger(`${o.eventDrag}:end`,r),(u||r.cancelled)&&i.set("_cmpDrag",1)};if(u)s=t.runCommand("core:component-drag",{guidesInfo:1,mode:v,target:c,onStart:C,onDrag:f,onEnd:w,event:a});else{p&&a.dataTransfer.setDragImage(c.view.el,0,0);const e=t.Commands.get("move-comp");e.onStart=C,e.onDrag=f,e.onEndMoveFromModel=w,e.initSorterFromModels(m)}m.forEach(e=>e.set("status","freezed-selected"))}},T["core:undo"]=(e=>e.UndoManager.undo()),T["core:redo"]=(e=>e.UndoManager.redo()),z.forEach(e=>{const t=e[2],n=e[3],o=`core:${e[0]}`;T[o]=n,t&&(T[t]=n,["run","stop"].forEach(e=>{g.on(`${e}:${t}`,(...t)=>g.trigger(`${e}:${o}`,...t))}))}),O.em&&(O.model=O.em.get("Canvas")),this.loadDefaultCommands(),this},add:function(n,o){return e.isFunction(o)&&(o={run:o}),o.stop||(o.noStop=1),delete o.initialize,o.id=n,$[n]=t.extend(o),this},get(t){let n=$[t];return e.isFunction(n)?(n=new n(O),$[t]=n):n||g.logWarning(`'${t}' command not found`),n},extend(e,t={}){const n=this.get(e);if(n){const o={...n.constructor.prototype,...t};this.add(e,o);const r=z.filter(t=>`core:${t[0]}`===e&&t[2])[0];r&&this.add(r[2],o)}return this},has:e=>!!$[e],getAll:()=>$,run(e,t={}){return this.runCommand(this.get(e),t)},stop(e,t={}){return this.stopCommand(this.get(e),t)},isActive(e){return this.getActive().hasOwnProperty(e)},getActive:()=>k,loadDefaultCommands(){for(var e in T)this.add(e,T[e]);return this},runCommand(e,t={}){let n;if(e&&e.run){const o=e.id,r=g.get("Editor");this.isActive(o)&&!t.force&&O.strict||(n=e.callRun(r,t),o&&e.stop&&!e.noStop&&!t.abort&&(k[o]=n))}return n},stopCommand(e,t={}){let n;if(e&&e.run){const o=e.id,r=g.get("Editor");(this.isActive(o)||t.force||!O.strict)&&(o&&delete k[o],n=e.callStop(r,t))}return n},create:e=>(e.stop||(e.noStop=1),new(t.extend(e))(O))}}});
//# sourceMappingURL=../sourcemaps/commands/index.js.map
