/**
 * skylark-grapejs - A version of garpejs that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-grapejs/
 * @license MIT
 */
define(["skylark-underscore","skylark-backbone","../../utils/fetch"],function(e,t,o){"use strict";return t.View.extend({template:e.template('\n  <form>\n    <div id="<%= pfx %>title"><%= title %></div>\n    <input type="file" id="<%= uploadId %>" name="file" accept="*/*" <%= disabled ? \'disabled\' : \'\' %> <%= multiUpload ? \'multiple\' : \'\' %>/>\n    <div style="clear:both;"></div>\n  </form>\n  '),events:{},initialize(e={}){this.options=e;const t=e.config||{};this.config=t,this.em=this.config.em,this.pfx=t.stylePrefix||"",this.ppfx=t.pStylePrefix||"",this.target=this.options.globalCollection||{},this.uploadId=this.pfx+"uploadFile",this.disabled=void 0!==t.disableUpload?t.disableUpload:!t.upload&&!t.embedAsBase64,this.multiUpload=void 0===t.multiUpload||t.multiUpload,this.events["change #"+this.uploadId]="uploadFile";let o=t.uploadFile;o?this.uploadFile=o.bind(this):!t.upload&&t.embedAsBase64&&(this.uploadFile=this.constructor.embedAsBase64),this.delegateEvents()},onUploadStart(){const e=this.config.em;e&&e.trigger("asset:upload:start")},onUploadEnd(e){const{$el:t,config:o}=this,s=o.em;s&&s.trigger("asset:upload:end",e);const a=t.find("input");a&&a.val("")},onUploadError(e){const t=this.config.em;console.error(e),this.onUploadEnd(e),t&&t.trigger("asset:upload:error",e)},onUploadResponse(e,t){const o=this.config.em,s=this.config,a=this.target;let i;try{i="string"==typeof e?JSON.parse(e):e}catch(t){i=e}o&&o.trigger("asset:upload:response",i),s.autoAdd&&a&&a.add(i.data,{at:0}),this.onUploadEnd(e),t&&t(i)},uploadFile(e,t){const s=e.dataTransfer?e.dataTransfer.files:e.target.files,{config:a}=this,{beforeUpload:i}=a;if(!1===(i&&i(s)))return;const n=new FormData,{params:d,customFetch:l}=a;for(let e in d)n.append(e,d[e]);if(this.multiUpload)for(let e=0;e<s.length;e++)n.append(`${a.uploadName}[]`,s[e]);else s.length&&n.append(a.uploadName,s[0]);this.target;const r=a.upload,p=a.headers;if(void 0===p["X-Requested-With"]&&(p["X-Requested-With"]="XMLHttpRequest"),r){this.onUploadStart();const e={method:"post",credentials:a.credentials||"include",headers:p,body:n};return(l?l(r,e):o(r,e).then(e=>1==(e.status/200|0)?e.text():e.text().then(e=>Promise.reject(e)))).then(e=>this.onUploadResponse(e,t)).catch(e=>this.onUploadError(e))}},initDrop(){var e=this;if(!this.uploadForm&&(this.uploadForm=this.$el.find("form").get(0),"draggable"in this.uploadForm)){this.uploadFile;this.uploadForm.ondragover=function(){return this.className=e.pfx+"hover",!1},this.uploadForm.ondragleave=function(){return this.className="",!1},this.uploadForm.ondrop=function(t){this.className="",t.preventDefault(),e.uploadFile(t)}}},initDropzone(e){let t=0;const o=this.config,s=e.model,a=e.el,i=s.get("Editor"),n=(s.get("Config").el,s.get("Canvas").getBody()),d=this.ppfx,l=`${d}dropzone-active`,r=`${d}dropzone`,p=()=>{a.className=a.className.replace(l,"").trim(),t=0},h=()=>(t||(a.className+=` ${l}`,t=1),!1),c=()=>(p(),!1),u=e=>{if(p(),e.preventDefault(),e.stopPropagation(),this.uploadFile(e),o.openAssetsOnDrop&&i){const e=i.getSelected();i.runCommand("open-assets",{target:e,onSelect(){i.Modal.close(),i.AssetManager.setTarget(null)}})}return!1};e.$el.append(`<div class="${r}">${o.dropzoneContent}</div>`),p(),"draggable"in a&&[a,n].forEach(e=>{e.ondragover=h,e.ondragleave=c,e.ondrop=u})},render(){const{$el:e,pfx:t,em:o}=this;return e.html(this.undefined({title:o&&o.t("assetManager.uploadTitle"),uploadId:this.uploadId,disabled:this.disabled,multiUpload:this.multiUpload,pfx:t})),this.initDrop(),e.attr("class",t+"file-uploader"),this}},{embedAsBase64:function(e,t){const o=e.dataTransfer?e.dataTransfer.files:e.target.files,s={data:[]};if(!FileReader)return void this.onUploadError(new Error("Unsupported platform, FileReader is not defined"));const a=[],i=/^(.+)\/(.+)$/;for(const e of o){const t=new Promise((t,o)=>{const s=new FileReader;s.addEventListener("load",a=>{let n;const d=e.name,l=i.exec(e.type);if("image"===(n=l?l[1]:e.type)){const e={src:s.result,name:d,type:n,height:0,width:0},a=new Image;a.addEventListener("error",e=>{o(e)}),a.addEventListener("load",()=>{e.height=a.height,e.width=a.width,t(e)}),a.src=e.src}else t(n?{src:s.result,name:d,type:n}:s.result)}),s.addEventListener("error",e=>{o(e)}),s.addEventListener("abort",e=>{o("Aborted")}),s.readAsDataURL(e)});a.push(t)}Promise.all(a).then(e=>{s.data=e,this.onUploadResponse(s,t)},e=>{this.onUploadError(e)})}})});
//# sourceMappingURL=../../sourcemaps/asset_manager/view/FileUploader.js.map
