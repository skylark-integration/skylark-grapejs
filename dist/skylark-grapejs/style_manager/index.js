/**
 * skylark-grapejs - A version of garpejs that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-grapejs/
 * @license MIT
 */
define(["skylark-langx/langx","skylark-underscore","./config/config","./model/Sectors","./model/Properties","./view/SectorsView"],function(e,t,r,o,n,s){"use strict";return()=>{var i={};let g;var l,d;return{name:"StyleManager",getConfig:()=>i,init(e){const t=(i={...r,...e}).pStylePrefix;return this.em=i.em,t&&(i.stylePrefix=t+i.stylePrefix),g=new n,l=new o([],i),d=new s({collection:l,target:i.em,config:i}),this},onLoad(){l.add(i.sectors)},postRender(){const e=this.getConfig().appendTo;if(e){(t.isElement(e)?e:document.querySelector(e)).appendChild(this.render())}},addSector(e,t,r={}){let o=this.getSector(e);return o||(t.id=e,o=l.add(t,r)),o},getSector(e,t={}){const r=l.where({id:e})[0];return!r&&t.warn&&this._logNoSector(e),r},removeSector(e){return this.getSectors().remove(this.getSector(e,{warn:1}))},getSectors:()=>l,addProperty(e,t,r={}){const o=this.getSector(e,{warn:1});let n=null;return o&&(n=o.get("properties").add(t,r)),n},getProperty(e,t){const r=this.getSector(e,{warn:1});let o=null;return r&&(o=1==(o=r.get("properties").where({property:t})).length?o[0]:o),o},removeProperty(e,t){const r=this.getProperties(e);return r&&r.remove(this.getProperty(e,t))},getProperties(e){let t=null;const r=this.getSector(e,{warn:1});return r&&(t=r.get("properties")),t},getModelToStyle(e,t={}){const r=i.em,{skipAdd:o}=t,n=e.get("classes"),s=e.getId();if(r){const i=r.getConfig(),g=r.get("UndoManager"),l=r.get("CssComposer"),d=r.get("SelectorManager"),a=d?d.getConfig():{},c=i.devicePreviewMode?"":r.get("state"),p=n.getStyleable(),u=p.length,y=!a.componentFirst||t.useClasses,m={state:c};let S;if(g.stop(),u&&y){const e=r.getCurrentMedia();(S=l.get(p,c,e))||o||(S=l.add(p,c,e))}else i.avoidInlineStyle&&(!(S=l.getIdRule(s,m))&&!o&&(S=l.setIdRule(s,{},m)),e.is("wrapper")&&S.set("wrapper",1));S&&(e=S),g.start()}return e},addType(e,t){g.addType(e,t)},getType:e=>g.getType(e),getTypes:()=>g.getTypes(),createType(t,{model:r={},view:o={}}={}){const n=this.getType(t);if(n)return new n.view(e.mixin({model:new n.model(r),config:i},o))},setTarget:(e,t)=>d.setTarget(e,t),getEmitter:()=>d.propTarget,render:()=>d.render().el,_logNoSector(e){const{em:t}=this;t&&t.logWarning(`'${e}' sector not found`)}}}});
//# sourceMappingURL=../sourcemaps/style_manager/index.js.map
