{"version":3,"sources":["skylark-grapejs.js"],"names":[],"mappingsfile":"../skylark-grapejs.js","sourcesContent":["define('skylark-grapejs/editor/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: 'gjs-',\n        components: '',\n        style: '',\n        fromElement: 0,\n        noticeOnUnload: true,\n        showOffsets: false,\n        showOffsetsSelected: false,\n        forceClass: true,\n        height: '900px',\n        width: '100%',\n        log: [\n            'warning',\n            'error'\n        ],\n        baseCss: `\n    * {\n      box-sizing: border-box;\n    }\n    html, body, [data-gjs-type=wrapper] {\n      min-height: 100%;\n    }\n    body {\n      margin: 0;\n      height: 100%;\n      background-color: #fff\n    }\n    [data-gjs-type=wrapper] {\n      overflow: auto;\n      overflow-x: hidden;\n    }\n\n    * ::-webkit-scrollbar-track {\n      background: rgba(0, 0, 0, 0.1)\n    }\n\n    * ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.2)\n    }\n\n    * ::-webkit-scrollbar {\n      width: 10px\n    }\n  `,\n        protectedCss: '* { box-sizing: border-box; } body {margin: 0;}',\n        canvasCss: '',\n        defaultCommand: 'select-comp',\n        showToolbar: 1,\n        allowScripts: 0,\n        showDevices: 1,\n        devicePreviewMode: 0,\n        mediaCondition: 'max-width',\n        tagVarStart: '{[ ',\n        tagVarEnd: ' ]}',\n        keepEmptyTextNodes: 0,\n        jsInHtml: true,\n        nativeDnD: 1,\n        multipleSelection: 1,\n        exportWrapper: 0,\n        wrapperIsBody: 1,\n        avoidInlineStyle: 1,\n        avoidDefaults: 1,\n        clearStyles: 0,\n        dragMode: 0,\n        cssIcons: 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css',\n        el: '',\n        i18n: {},\n        undoManager: {},\n        assetManager: {},\n        canvas: {},\n        layers: {},\n        storageManager: {},\n        richTextEditor: {},\n        domComponents: {},\n        modal: {},\n        codeManager: {},\n        panels: {},\n        commands: {},\n        cssComposer: {},\n        selectorManager: {},\n        deviceManager: {\n            devices: [\n                {\n                    id: 'desktop',\n                    name: 'Desktop',\n                    width: ''\n                },\n                {\n                    id: 'tablet',\n                    name: 'Tablet',\n                    width: '768px',\n                    widthMedia: '992px'\n                },\n                {\n                    id: 'mobileLandscape',\n                    name: 'Mobile landscape',\n                    width: '568px',\n                    widthMedia: '768px'\n                },\n                {\n                    id: 'mobilePortrait',\n                    name: 'Mobile portrait',\n                    width: '320px',\n                    widthMedia: '480px'\n                }\n            ]\n        },\n        styleManager: {\n            sectors: [\n                {\n                    name: 'General',\n                    open: false,\n                    buildProps: [\n                        'float',\n                        'display',\n                        'position',\n                        'top',\n                        'right',\n                        'left',\n                        'bottom'\n                    ]\n                },\n                {\n                    name: 'Flex',\n                    open: false,\n                    buildProps: [\n                        'flex-direction',\n                        'flex-wrap',\n                        'justify-content',\n                        'align-items',\n                        'align-content',\n                        'order',\n                        'flex-basis',\n                        'flex-grow',\n                        'flex-shrink',\n                        'align-self'\n                    ]\n                },\n                {\n                    name: 'Dimension',\n                    open: false,\n                    buildProps: [\n                        'width',\n                        'height',\n                        'max-width',\n                        'min-height',\n                        'margin',\n                        'padding'\n                    ]\n                },\n                {\n                    name: 'Typography',\n                    open: false,\n                    buildProps: [\n                        'font-family',\n                        'font-size',\n                        'font-weight',\n                        'letter-spacing',\n                        'color',\n                        'line-height',\n                        'text-align',\n                        'text-shadow'\n                    ],\n                    properties: [{\n                            property: 'text-align',\n                            list: [\n                                {\n                                    value: 'left',\n                                    className: 'fa fa-align-left'\n                                },\n                                {\n                                    value: 'center',\n                                    className: 'fa fa-align-center'\n                                },\n                                {\n                                    value: 'right',\n                                    className: 'fa fa-align-right'\n                                },\n                                {\n                                    value: 'justify',\n                                    className: 'fa fa-align-justify'\n                                }\n                            ]\n                        }]\n                },\n                {\n                    name: 'Decorations',\n                    open: false,\n                    buildProps: [\n                        'border-radius-c',\n                        'background-color',\n                        'border-radius',\n                        'border',\n                        'box-shadow',\n                        'background'\n                    ]\n                },\n                {\n                    name: 'Extra',\n                    open: false,\n                    buildProps: [\n                        'transition',\n                        'perspective',\n                        'transform'\n                    ]\n                }\n            ]\n        },\n        blockManager: {},\n        traitManager: {},\n        textViewCode: 'Code',\n        keepUnusedStyles: 0,\n        multiFrames: 0\n    };\n});\ndefine('skylark-grapejs/utils/extender',['skylark-underscore'], function (_) {\n    'use strict';\n    return ({$}) => {\n        return;//modified by lwf\n        if ($ && $.prototype.constructor.name !== 'jQuery') {\n            const fn = $.fn;\n            fn.hide = function () {\n                return this.css('display', 'none');\n            };\n            fn.show = function () {\n                return this.css('display', 'block');\n            };\n            fn.focus = function () {\n                const el = this.get(0);\n                el && el.focus();\n                return this;\n            };\n            fn.bind = function (ev, h) {\n                return this.on(ev, h);\n            };\n            fn.unbind = function (ev, h) {\n                if (_.isObject(ev)) {\n                    for (let name in ev) {\n                        ev.hasOwnProperty(name) && this.off(name, ev[name]);\n                    }\n                    return this;\n                } else {\n                    return this.off(ev, h);\n                }\n            };\n            fn.click = function (h) {\n                return h ? this.on('click', h) : this.trigger('click');\n            };\n            fn.change = function (h) {\n                return h ? this.on('change', h) : this.trigger('change');\n            };\n            fn.keydown = function (h) {\n                return h ? this.on('keydown', h) : this.trigger('keydown');\n            };\n            fn.delegate = function (selector, events, data, handler) {\n                if (!handler) {\n                    handler = data;\n                }\n                return this.on(events, selector, function (e) {\n                    e.data = data;\n                    handler(e);\n                });\n            };\n            fn.scrollLeft = function () {\n                let el = this.get(0);\n                el = el.nodeType == 9 ? el.defaultView : el;\n                let win = el instanceof Window ? el : null;\n                return win ? win.pageXOffset : el.scrollLeft || 0;\n            };\n            fn.scrollTop = function () {\n                let el = this.get(0);\n                el = el.nodeType == 9 ? el.defaultView : el;\n                let win = el instanceof Window ? el : null;\n                return win ? win.pageYOffset : el.scrollTop || 0;\n            };\n            const offset = $.prototype.offset;\n            fn.offset = function (coords) {\n                let top, left;\n                if (coords) {\n                    top = coords.top;\n                    left = coords.left;\n                }\n                if (typeof top != 'undefined') {\n                    this.css('top', `${ top }px`);\n                }\n                if (typeof left != 'undefined') {\n                    this.css('left', `${ left }px`);\n                }\n                return offset.call(this);\n            };\n            $.map = function (items, clb) {\n                const ar = [];\n                for (var i = 0; i < items.length; i++) {\n                    ar.push(clb(items[i], i));\n                }\n                return ar;\n            };\n            const indexOf = Array.prototype.indexOf;\n            $.inArray = function (val, arr, i) {\n                return arr == null ? -1 : indexOf.call(arr, val, i);\n            };\n            $.Event = function (src, props) {\n                if (!(this instanceof $.Event)) {\n                    return new $.Event(src, props);\n                }\n                this.type = src;\n                this.isDefaultPrevented = () => false;\n            };\n        }\n    };\n});\ndefine('skylark-grapejs/utils/mixins',['skylark-underscore'], function (_) {\n    'use strict';\n    const elProt = window.Element.prototype;\n    const matches = elProt.matches || elProt.webkitMatchesSelector || elProt.mozMatchesSelector || elProt.msMatchesSelector;\n    const appendStyles = (styles, opts = {}) => {\n        const stls = _.isArray(styles) ? [...styles] : [styles];\n        if (stls.length) {\n            const href = stls.shift();\n            if (href && (!opts.unique || !document.querySelector(`link[href=\"${ href }\"]`))) {\n                const {head} = document;\n                const link = document.createElement('link');\n                link.href = href;\n                link.rel = 'stylesheet';\n                if (opts.prepand) {\n                    head.insertBefore(link, head.firstChild);\n                } else {\n                    head.appendChild(link);\n                }\n            }\n            appendStyles(stls);\n        }\n    };\n    const shallowDiff = (objOrig, objNew) => {\n        const result = {};\n        const keysNew = _.keys(objNew);\n        for (let prop in objOrig) {\n            if (objOrig.hasOwnProperty(prop)) {\n                const origValue = objOrig[prop];\n                const newValue = objNew[prop];\n                if (keysNew.indexOf(prop) >= 0) {\n                    if (origValue !== newValue) {\n                        result[prop] = newValue;\n                    }\n                } else {\n                    result[prop] = null;\n                }\n            }\n        }\n        for (let prop in objNew) {\n            if (objNew.hasOwnProperty(prop)) {\n                if (_.isUndefined(objOrig[prop])) {\n                    result[prop] = objNew[prop];\n                }\n            }\n        }\n        return result;\n    };\n    const on = (el, ev, fn) => {\n        ev = ev.split(/\\s+/);\n        el = el instanceof Array ? el : [el];\n        for (let i = 0; i < ev.length; ++i) {\n            el.forEach(elem => elem.addEventListener(ev[i], fn));\n        }\n    };\n    const off = (el, ev, fn) => {\n        ev = ev.split(/\\s+/);\n        el = el instanceof Array ? el : [el];\n        for (let i = 0; i < ev.length; ++i) {\n            el.forEach(elem => elem.removeEventListener(ev[i], fn));\n        }\n    };\n    const getUnitFromValue = value => {\n        return value.replace(parseFloat(value), '');\n    };\n    const upFirst = value => value[0].toUpperCase() + value.toLowerCase().slice(1);\n    const camelCase = value => {\n        const values = value.split('-').filter(String);\n        return values[0].toLowerCase() + values.slice(1).map(upFirst);\n    };\n    const normalizeFloat = (value, step = 1, valueDef = 0) => {\n        let stepDecimals = 0;\n        if (isNaN(value))\n            return valueDef;\n        value = parseFloat(value);\n        if (Math.floor(value) !== value) {\n            const side = step.toString().split('.')[1];\n            stepDecimals = side ? side.length : 0;\n        }\n        return stepDecimals ? parseFloat(value.toFixed(stepDecimals)) : value;\n    };\n    const hasDnd = em => {\n        return 'draggable' in document.createElement('i') && (em ? em.get('Config').nativeDnD : 1);\n    };\n    const getElement = el => {\n        if (_.isElement(el) || isTextNode(el)) {\n            return el;\n        } else if (el && el.getEl) {\n            return el.getEl();\n        }\n    };\n    const isTextNode = el => el && el.nodeType === 3;\n    const isCommentNode = el => el && el.nodeType === 8;\n    const isTaggableNode = el => el && !isTextNode(el) && !isCommentNode(el);\n    const getModel = (el, $) => {\n        let model = el;\n        _.isElement(el) && (model = $(el).data('model'));\n        return model;\n    };\n    const getElRect = el => {\n        const def = {\n            top: 0,\n            left: 0,\n            width: 0,\n            height: 0\n        };\n        if (!el)\n            return def;\n        let rectText;\n        if (isTextNode(el)) {\n            const range = document.createRange();\n            range.selectNode(el);\n            rectText = range.getBoundingClientRect();\n            range.detach();\n        }\n        return rectText || (el.getBoundingClientRect ? el.getBoundingClientRect() : def);\n    };\n    const getPointerEvent = ev => ev.touches && ev.touches[0] ? ev.touches[0] : ev;\n    const getKeyCode = ev => ev.which || ev.keyCode;\n    const getKeyChar = ev => String.fromCharCode(getKeyCode(ev));\n    const isEscKey = ev => getKeyCode(ev) === 27;\n    const capitalize = str => str && str.charAt(0).toUpperCase() + str.substring(1);\n    const isComponent = obj => obj && obj.toHTML;\n    const isRule = obj => obj && obj.toCSS;\n    const getViewEl = el => el.__gjsv;\n    const setViewEl = (el, view) => {\n        el.__gjsv = view;\n    };\n    return {\n        isCommentNode: isCommentNode,\n        isTaggableNode: isTaggableNode,\n        on,\n        off,\n        hasDnd,\n        upFirst,\n        matches,\n        getModel,\n        getElRect,\n        camelCase,\n        isTextNode,\n        getKeyCode,\n        getKeyChar,\n        isEscKey,\n        getElement,\n        shallowDiff,\n        normalizeFloat,\n        getPointerEvent,\n        getUnitFromValue,\n        capitalize,\n        getViewEl,\n        setViewEl,\n        appendStyles,\n        isComponent,\n        isRule\n    };\n});\ndefine('skylark-grapejs/utils/Dragger',[\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    './mixins'\n], function (langx,_, mixins) {\n    'use strict';\n    const resetPos = () => ({\n        x: 0,\n        y: 0\n    });\n    return class Dragger {\n        constructor(opts = {}) {\n            this.opts = {\n                container: null,\n                onStart: null,\n                onDrag: null,\n                onEnd: null,\n                setPosition: null,\n                getPosition: null,\n                guidesStatic: null,\n                guidesTarget: null,\n                snapOffset: 5,\n                doc: 0,\n                scale: 1\n            };\n            _.bindAll(this, 'drag', 'stop', 'keyHandle', 'handleScroll');\n            this.setOptions(opts);\n            this.delta = resetPos();\n            return this;\n        }\n        setOptions(opts = {}) {\n            this.opts = langx.mixin({},this.opts,opts);\n        }\n        toggleDrag(enable) {\n            const docs = this.getDocumentEl();\n            const container = this.getContainerEl();\n            const win = this.getWindowEl();\n            const method = enable ? 'on' : 'off';\n\n            mixins[method](container, 'mousemove dragover', this.drag);\n            mixins[method](docs, 'mouseup dragend touchend', this.stop);\n            mixins[method](docs, 'keydown', this.keyHandle);\n            mixins[method](win, 'scroll', this.handleScroll);\n        }\n        handleScroll() {\n            const {lastScroll, delta} = this;\n            const actualScroll = this.getScrollInfo();\n            const scrollDiff = {\n                x: actualScroll.x - lastScroll.x,\n                y: actualScroll.y - lastScroll.y\n            };\n            this.move(delta.x + scrollDiff.x, delta.y + scrollDiff.y);\n            this.lastScrollDiff = scrollDiff;\n        }\n        start(ev) {\n            const {opts} = this;\n            const {onStart} = opts;\n            this.toggleDrag(1);\n            this.startPointer = this.getPointerPos(ev);\n            this.guidesStatic = _.result(opts, 'guidesStatic') || [];\n            this.guidesTarget = _.result(opts, 'guidesTarget') || [];\n            _.isFunction(onStart) && onStart(ev, this);\n            this.startPosition = this.getStartPosition();\n            this.lastScrollDiff = resetPos();\n            this.globScrollDiff = resetPos();\n            this.drag(ev);\n        }\n        drag(ev) {\n            const {opts, lastScrollDiff, globScrollDiff} = this;\n            const {onDrag} = opts;\n            const {startPointer} = this;\n            const currentPos = this.getPointerPos(ev);\n            const glDiff = {\n                x: globScrollDiff.x + lastScrollDiff.x,\n                y: globScrollDiff.y + lastScrollDiff.y\n            };\n            this.globScrollDiff = glDiff;\n            const delta = {\n                x: currentPos.x - startPointer.x + glDiff.x,\n                y: currentPos.y - startPointer.y + glDiff.y\n            };\n            this.lastScrollDiff = resetPos();\n            let {lockedAxis} = this;\n            if (ev.shiftKey) {\n                lockedAxis = !lockedAxis && this.detectAxisLock(delta.x, delta.y);\n            } else {\n                lockedAxis = null;\n            }\n            if (lockedAxis === 'x') {\n                delta.x = startPointer.x;\n            } else if (lockedAxis === 'y') {\n                delta.y = startPointer.y;\n            }\n            const moveDelta = delta => {\n                [\n                    'x',\n                    'y'\n                ].forEach(co => delta[co] = delta[co] * _.result(opts, 'scale'));\n                this.delta = delta;\n                this.move(delta.x, delta.y);\n                _.isFunction(onDrag) && onDrag(ev, this);\n            };\n            const deltaPre = langx.clone(delta);\n            this.currentPointer = currentPos;\n            this.lockedAxis = lockedAxis;\n            this.lastScroll = this.getScrollInfo();\n            moveDelta(delta);\n            if (this.guidesTarget.length) {\n                const {newDelta, trgX, trgY} = this.snapGuides(deltaPre);\n                (trgX || trgY) && moveDelta(newDelta);\n            }\n            ev.which === 0 && this.stop(ev);\n        }\n        snapGuides(delta) {\n            const newDelta = delta;\n            let {trgX, trgY} = this;\n            this.guidesTarget.forEach(trg => {\n                if (trg.x && this.trgX || trg.y && this.trgY)\n                    return;\n                trg.active = 0;\n                this.guidesStatic.forEach(stat => {\n                    if (trg.y && stat.x || trg.x && stat.y)\n                        return;\n                    const isY = trg.y && stat.y;\n                    const axs = isY ? 'y' : 'x';\n                    const trgPoint = trg[axs];\n                    const statPoint = stat[axs];\n                    const deltaPoint = delta[axs];\n                    const trgGuide = isY ? trgY : trgX;\n                    if (this.isPointIn(trgPoint, statPoint)) {\n                        if (_.isUndefined(trgGuide)) {\n                            const trgValue = deltaPoint - (trgPoint - statPoint);\n                            this.setGuideLock(trg, trgValue);\n                        }\n                    }\n                });\n            });\n            trgX = this.trgX;\n            trgY = this.trgY;\n            [\n                'x',\n                'y'\n            ].forEach(co => {\n                const axis = co.toUpperCase();\n                let trg = this[`trg${ axis }`];\n                if (trg && !this.isPointIn(delta[co], trg.lock)) {\n                    this.setGuideLock(trg, null);\n                    trg = null;\n                }\n                if (trg && !_.isUndefined(trg.lock)) {\n                    newDelta[co] = trg.lock;\n                }\n            });\n            return {\n                newDelta,\n                trgX: this.trgX,\n                trgY: this.trgY\n            };\n        }\n        isPointIn(src, trg, {offset} = {}) {\n            const ofst = offset || this.opts.snapOffset;\n            return src >= trg && src <= trg + ofst || src <= trg && src >= trg - ofst;\n        }\n        setGuideLock(guide, value) {\n            const axis = !_.isUndefined(guide.x) ? 'X' : 'Y';\n            const trgName = `trg${ axis }`;\n            if (value !== null) {\n                guide.active = 1;\n                guide.lock = value;\n                this[trgName] = guide;\n            } else {\n                delete guide.active;\n                delete guide.lock;\n                delete this[trgName];\n            }\n            return guide;\n        }\n        stop(ev, opts = {}) {\n            const {delta} = this;\n            const cancelled = opts.cancel;\n            const x = cancelled ? 0 : delta.x;\n            const y = cancelled ? 0 : delta.y;\n            this.toggleDrag();\n            this.lockedAxis = null;\n            this.move(x, y, 1);\n            const {onEnd} = this.opts;\n            _.isFunction(onEnd) && onEnd(ev, this, { cancelled });\n        }\n        keyHandle(ev) {\n            if (mixins.isEscKey(ev)) {\n                this.stop(ev, { cancel: 1 });\n            }\n        }\n        move(x, y, end) {\n            const {el, opts} = this;\n            const pos = this.startPosition;\n            if (!pos)\n                return;\n            const {setPosition} = opts;\n            const xPos = pos.x + x;\n            const yPos = pos.y + y;\n            this.position = {\n                x: xPos,\n                y: yPos,\n                end\n            };\n            _.isFunction(setPosition) && setPosition(this.position);\n            if (el) {\n                el.style.left = `${ xPos }px`;\n                el.style.top = `${ yPos }px`;\n            }\n        }\n        getContainerEl() {\n            const {container} = this.opts;\n            return container ? [container] : this.getDocumentEl();\n        }\n        getWindowEl() {\n            const cont = this.getContainerEl();\n            return cont.map(item => {\n                const doc = item.ownerDocument || item;\n                return doc.defaultView || doc.parentWindow;\n            });\n        }\n        getDocumentEl(el) {\n            const {doc} = this.opts;\n            el = el || this.el;\n            if (!this.docs) {\n                const docs = [document];\n                el && docs.push(el.ownerDocument);\n                doc && docs.push(doc);\n                this.docs = docs;\n            }\n            return this.docs;\n        }\n        getPointerPos(ev) {\n            const getPos = this.opts.getPointerPosition;\n            const pEv = mixins.getPointerEvent(ev);\n            return getPos ? getPos(ev) : {\n                x: pEv.clientX,\n                y: pEv.clientY\n            };\n        }\n        getStartPosition() {\n            const {el, opts} = this;\n            const getPos = opts.getPosition;\n            let result = resetPos();\n            if (_.isFunction(getPos)) {\n                result = getPos();\n            } else if (el) {\n                result = {\n                    x: parseFloat(el.style.left),\n                    y: parseFloat(el.style.top)\n                };\n            }\n            return result;\n        }\n        getScrollInfo() {\n            const {doc} = this.opts;\n            const body = doc && doc.body;\n            return {\n                y: body ? body.scrollTop : 0,\n                x: body ? body.scrollLeft : 0\n            };\n        }\n        detectAxisLock(x, y) {\n            const relX = x;\n            const relY = y;\n            const absX = Math.abs(relX);\n            const absY = Math.abs(relY);\n            if (relY >= absX || relY <= -absX) {\n                return 'x';\n            } else if (relX > absY || relX < -absY) {\n                return 'y';\n            }\n        }\n    };\n});\ndefine('skylark-grapejs/utils/Sorter',[\n    'skylark-backbone',\n    'skylark-underscore',\n    './mixins'\n], function (Backbone, _, mixins) {\n    'use strict';\n    const $ = Backbone.$;\n    return Backbone.View.extend({\n        initialize(opt) {\n            this.opt = opt || {};\n            _.bindAll(this, 'startSort', 'onMove', 'endMove', 'rollback', 'updateOffset', 'moveDragHelper');\n            var o = opt || {};\n            this.elT = 0;\n            this.elL = 0;\n            this.borderOffset = o.borderOffset || 10;\n            var el = o.container;\n            this.el = typeof el === 'string' ? document.querySelector(el) : el;\n            this.$el = $(this.el);\n            this.containerSel = o.containerSel || 'div';\n            this.itemSel = o.itemSel || 'div';\n            this.draggable = o.draggable || true;\n            this.nested = o.nested || 0;\n            this.pfx = o.pfx || '';\n            this.ppfx = o.ppfx || '';\n            this.freezeClass = o.freezeClass || this.pfx + 'freezed';\n            this.onStart = o.onStart || '';\n            this.onEndMove = o.onEndMove || '';\n            this.direction = o.direction || 'v';\n            this.onMoveClb = o.onMove || '';\n            this.relative = o.relative || 0;\n            this.ignoreViewChildren = o.ignoreViewChildren || 0;\n            this.ignoreModels = o.ignoreModels || 0;\n            this.plh = o.placer || '';\n            this.wmargin = o.wmargin || 0;\n            this.offTop = o.offsetTop || 0;\n            this.offLeft = o.offsetLeft || 0;\n            this.document = o.document || document;\n            this.$document = $(this.document);\n            this.dropContent = null;\n            this.em = o.em || '';\n            this.dragHelper = null;\n            this.canvasRelative = o.canvasRelative || 0;\n            this.selectOnEnd = !o.avoidSelectOnEnd;\n            this.scale = o.scale;\n            this.activeTextModel = null;\n            if (this.em && this.em.undefined) {\n                this.em.undefined('change:canvasOffset', this.updateOffset);\n                this.updateOffset();\n            }\n        },\n        getScale() {\n            return _.result(this, scale) || 1;\n        },\n        getContainerEl(elem) {\n            if (elem)\n                this.el = elem;\n            if (!this.el) {\n                var el = this.opt.container;\n                this.el = typeof el === 'string' ? document.querySelector(el) : el;\n                this.$el = $(this.el);\n            }\n            return this.el;\n        },\n        getDocuments(el) {\n            const em = this.em;\n            const elDoc = el ? el.ownerDocument : em && em.get('Canvas').getBody().ownerDocument;\n            const docs = [document];\n            elDoc && docs.push(elDoc);\n            return docs;\n        },\n        updateOffset() {\n            const offset = this.em.get('canvasOffset') || {};\n            this.offTop = offset.top;\n            this.offLeft = offset.left;\n        },\n        setDropContent(content) {\n            this.dropModel = null;\n            this.dropContent = content;\n        },\n        updateTextViewCursorPosition(e) {\n            const Canvas = this.em.get('Canvas');\n            const targetDoc = Canvas.getDocument();\n            let range = null;\n            if (targetDoc.caretRangeFromPoint) {\n                const poiner = mixins.getPointerEvent(e);\n                range = targetDoc.caretRangeFromPoint(poiner.clientX, poiner.clientY);\n            } else if (e.rangeParent) {\n                range = targetDoc.createRange();\n                range.setStart(e.rangeParent, e.rangeOffset);\n            }\n            const sel = Canvas.getWindow().getSelection();\n            Canvas.getFrameEl().focus();\n            sel.removeAllRanges();\n            range && sel.addRange(range);\n        },\n        setContentEditable(model, mode) {\n            if (model) {\n                const el = model.getEl();\n                if (el.contentEditable != mode)\n                    el.contentEditable = mode;\n            }\n        },\n        toggleSortCursor(active) {\n            const {em} = this;\n            const cv = em && em.get('Canvas');\n            cv && (active ? cv.startAutoscroll() : cv.stopAutoscroll());\n        },\n        setDragHelper(el, event) {\n            const ev = event || '';\n            const clonedEl = el.cloneNode(1);\n            const rect = el.getBoundingClientRect();\n            const computed = getComputedStyle(el);\n            let style = '';\n            for (var i = 0; i < computed.length; i++) {\n                const prop = computed[i];\n                style += `${ prop }:${ computed.getPropertyValue(prop) };`;\n            }\n            document.body.appendChild(clonedEl);\n            clonedEl.className += ` ${ this.pfx }bdrag`;\n            clonedEl.setAttribute('style', style);\n            this.dragHelper = clonedEl;\n            clonedEl.style.width = `${ rect.width }px`;\n            clonedEl.style.height = `${ rect.height }px`;\n            ev && this.moveDragHelper(ev);\n            if (this.em) {\n                $(this.em.get('Canvas').getBody().ownerDocument).undefined('mousemove', this.moveDragHelper).undefined('mousemove', this.moveDragHelper);\n            }\n            $(document).undefined('mousemove', this.moveDragHelper).undefined('mousemove', this.moveDragHelper);\n        },\n        moveDragHelper(e) {\n            const doc = e.target.ownerDocument;\n            if (!this.dragHelper || !doc) {\n                return;\n            }\n            let posY = e.pageY;\n            let posX = e.pageX;\n            let addTop = 0;\n            let addLeft = 0;\n            const window = doc.defaultView || doc.parentWindow;\n            const frame = window.frameElement;\n            const dragHelperStyle = this.dragHelper.style;\n            if (frame) {\n                const frameRect = frame.getBoundingClientRect();\n                addTop = frameRect.top + document.documentElement.scrollTop;\n                addLeft = frameRect.left + document.documentElement.scrollLeft;\n                posY = e.clientY;\n                posX = e.clientX;\n            }\n            dragHelperStyle.top = posY + addTop + 'px';\n            dragHelperStyle.left = posX + addLeft + 'px';\n        },\n        matches(el, selector, useBody) {\n            return mixins.matches.call(el, selector);\n        },\n        closest(el, selector) {\n            if (!el)\n                return;\n            var elem = el.parentNode;\n            while (elem && elem.nodeType === 1) {\n                if (this.undefined(elem, selector))\n                    return elem;\n                elem = elem.parentNode;\n            }\n            return null;\n        },\n        offset(el) {\n            var rect = el.getBoundingClientRect();\n            return {\n                top: rect.top + document.body.scrollTop,\n                left: rect.left + document.body.scrollLeft\n            };\n        },\n        createPlaceholder() {\n            var pfx = this.pfx;\n            var el = document.createElement('div');\n            var ins = document.createElement('div');\n            el.className = pfx + 'placeholder';\n            el.style.display = 'none';\n            el.style['pointer-events'] = 'none';\n            ins.className = pfx + 'placeholder-int';\n            el.appendChild(ins);\n            return el;\n        },\n        startSort(src, opts = {}) {\n            const em = this.em;\n            const itemSel = this.itemSel;\n            const contSel = this.containerSel;\n            const container = this.getContainerEl(opts.container);\n            const docs = this.getDocuments(src);\n            const onStart = this.onStart;\n            let srcModel;\n            let plh = this.plh;\n            this.dropModel = null;\n            this.target = null;\n            this.prevTarget = null;\n            this.moved = 0;\n            if (src && !this.undefined(src, `${ itemSel }, ${ contSel }`)) {\n                src = this.closest(src, itemSel);\n            }\n            this.eV = src;\n            if (!plh) {\n                plh = this.createPlaceholder();\n                container.appendChild(plh);\n                this.plh = plh;\n            }\n            if (src) {\n                srcModel = this.getSourceModel(src);\n                srcModel && srcModel.set && srcModel.set('status', 'freezed');\n                this.srcModel = srcModel;\n            }\n            mixins.on(container, 'mousemove dragover', this.onMove);\n            mixins.on(docs, 'mouseup dragend touchend', this.endMove);\n            mixins.on(docs, 'keydown', this.rollback);\n            onStart && onStart({\n                target: srcModel,\n                parent: srcModel && srcModel.parent(),\n                index: srcModel && srcModel.index()\n            });\n            em && em.clearSelection();\n            this.toggleSortCursor(1);\n            em && em.trigger('sorter:drag:start', src, srcModel);\n        },\n        getTargetModel(el) {\n            let elem = el || this.target;\n            return $(elem).data('model');\n        },\n        getSourceModel(source, {target, avoidChildren = 1} = {}) {\n            const {em, eV} = this;\n            const src = source || eV;\n            let {dropModel, dropContent} = this;\n            const isTextable = src => src && target && src.opt && src.opt.avoidChildren && this.isTextableActive(src, target);\n            if (dropContent && em) {\n                if (isTextable(dropModel)) {\n                    dropModel = null;\n                }\n                if (!dropModel) {\n                    const comps = em.get('DomComponents').getComponents();\n                    const opts = {\n                        avoidChildren,\n                        avoidStore: 1,\n                        avoidUpdateStyle: 1\n                    };\n                    const tempModel = comps.add(dropContent, langx.mixin({},opts,{\n                        temporary: 1\n                    }));\n                    dropModel = comps.remove(tempModel, opts);\n                    dropModel = dropModel instanceof Array ? dropModel[0] : dropModel;\n                    this.dropModel = dropModel;\n                    if (isTextable(dropModel)) {\n                        return this.getSourceModel(src, {\n                            target,\n                            avoidChildren: 0\n                        });\n                    }\n                }\n                return dropModel;\n            }\n            return src && $(src).data('model');\n        },\n        selectTargetModel(model) {\n            if (model instanceof Backbone.Collection) {\n                return;\n            }\n            const {targetModel} = this;\n            if (targetModel && targetModel !== this.srcModel) {\n                targetModel.set('status', '');\n            }\n            if (model && model.set) {\n                model.set('status', 'selected-parent');\n                this.targetModel = model;\n            }\n        },\n        onMove(e) {\n            const ev = e;\n            const {em, onMoveClb, plh} = this;\n            this.moved = 1;\n            var dsp = plh.style.display;\n            if (!dsp || dsp === 'none')\n                plh.style.display = 'block';\n            var eO = this.offset(this.el);\n            this.elT = this.wmargin ? Math.abs(eO.top) : eO.top;\n            this.elL = this.wmargin ? Math.abs(eO.left) : eO.left;\n            var rY = e.pageY - this.elT + this.el.scrollTop;\n            var rX = e.pageX - this.elL + this.el.scrollLeft;\n            if (this.canvasRelative && em) {\n                const mousePos = em.get('Canvas').getMouseRelativeCanvas(e, { noScroll: 1 });\n                rX = mousePos.x;\n                rY = mousePos.y;\n            }\n            this.rX = rX;\n            this.rY = rY;\n            this.eventMove = e;\n            const sourceModel = this.getSourceModel();\n            const dims = this.dimsFromTarget(e.target, rX, rY);\n            const target = this.target;\n            const targetModel = target && this.getTargetModel(target);\n            this.selectTargetModel(targetModel);\n            if (!targetModel)\n                plh.style.display = 'none';\n            if (!target)\n                return;\n            this.lastDims = dims;\n            const pos = this.findPosition(dims, rX, rY);\n            if (this.isTextableActive(sourceModel, targetModel)) {\n                this.activeTextModel = targetModel;\n                this.setContentEditable(targetModel, true);\n                plh.style.display = 'none';\n                this.lastPos = pos;\n                this.updateTextViewCursorPosition(ev);\n            } else {\n                this.disableTextable();\n                this.activeTextModel = null;\n                if (!this.lastPos || (this.lastPos.index != pos.index || this.lastPos.method != pos.method)) {\n                    this.movePlaceholder(this.plh, dims, pos, this.prevTargetDim);\n                    if (!this.$plh)\n                        this.$plh = $(this.plh);\n                    if (!this.canvasRelative) {\n                        if (this.offTop)\n                            this.$plh.css('top', '+=' + this.offTop + 'px');\n                        if (this.offLeft)\n                            this.$plh.css('left', '+=' + this.offLeft + 'px');\n                    }\n                    this.lastPos = pos;\n                }\n            }\n            _.isFunction(onMoveClb) && onMoveClb({\n                event: e,\n                target: sourceModel,\n                parent: targetModel,\n                index: pos.index + (pos.method == 'after' ? 1 : 0)\n            });\n            em && em.trigger('sorter:drag', {\n                target,\n                targetModel,\n                sourceModel,\n                dims,\n                pos,\n                x: rX,\n                y: rY\n            });\n        },\n        isTextableActive(src, trg) {\n            return src && src.get && src.get('textable') && trg && trg.is('text');\n        },\n        disableTextable() {\n            const {activeTextModel} = this;\n            activeTextModel && activeTextModel.getView().disableEditing();\n        },\n        isInFlow(el, parent) {\n            if (!el)\n                return false;\n            parent = parent || document.body;\n            var ch = -1, h;\n            var elem = el;\n            h = elem.offsetHeight;\n            if (!this.styleInFlow(elem, parent))\n                return false;\n            else\n                return true;\n        },\n        styleInFlow(el, parent) {\n            if (mixins.isTextNode(el))\n                return;\n            const style = el.style || {};\n            const $el = $(el);\n            const $parent = parent && $(parent);\n            if (style.overflow && style.overflow !== 'visible')\n                return;\n            if ($el.css('float') !== 'none')\n                return;\n            if ($parent && $parent.css('display') == 'flex' && $parent.css('flex-direction') !== 'column')\n                return;\n            switch (style.position) {\n            case 'static':\n            case 'relative':\n            case '':\n                break;\n            default:\n                return;\n            }\n            switch (el.tagName) {\n            case 'TR':\n            case 'TBODY':\n            case 'THEAD':\n            case 'TFOOT':\n                return true;\n            }\n            switch ($el.css('display')) {\n            case 'block':\n            case 'list-item':\n            case 'table':\n            case 'flex':\n                return true;\n            }\n            return;\n        },\n        validTarget(trg, src) {\n            const trgModel = this.getTargetModel(trg);\n            const srcModel = this.getSourceModel(src, { target: trgModel });\n            src = srcModel && srcModel.view && srcModel.view.el;\n            trg = trgModel && trgModel.view && trgModel.view.el;\n            let result = {\n                valid: true,\n                src,\n                srcModel,\n                trg,\n                trgModel\n            };\n            if (!src || !trg) {\n                result.valid = false;\n                return result;\n            }\n            let draggable = srcModel.get('draggable');\n            draggable = draggable instanceof Array ? draggable.join(', ') : draggable;\n            result.dragInfo = draggable;\n            draggable = _.isString(draggable) ? this.undefined(trg, draggable) : draggable;\n            result.draggable = draggable;\n            let droppable = trgModel.get('droppable');\n            droppable = droppable instanceof Backbone.Collection ? 1 : droppable;\n            droppable = droppable instanceof Array ? droppable.join(', ') : droppable;\n            result.dropInfo = droppable;\n            droppable = _.isString(droppable) ? this.undefined(src, droppable) : droppable;\n            droppable = draggable && this.isTextableActive(srcModel, trgModel) ? 1 : droppable;\n            result.droppable = droppable;\n            if (!droppable || !draggable) {\n                result.valid = false;\n            }\n            return result;\n        },\n        dimsFromTarget(target, rX, rY) {\n            const em = this.em;\n            var dims = [];\n            if (!target) {\n                return dims;\n            }\n            if (!this.undefined(target, `${ this.itemSel }, ${ this.containerSel }`)) {\n                target = this.closest(target, this.itemSel);\n            }\n            if (this.draggable instanceof Array) {\n                target = this.closest(target, this.draggable.join(','));\n            }\n            if (!target) {\n                return dims;\n            }\n            if (this.prevTarget && this.prevTarget != target) {\n                this.prevTarget = null;\n            }\n            if (!this.prevTarget) {\n                this.targetP = this.closest(target, this.containerSel);\n                let validResult = this.validTarget(target);\n                em && em.trigger('sorter:drag:validation', validResult);\n                if (!validResult.valid && this.targetP) {\n                    return this.dimsFromTarget(this.targetP, rX, rY);\n                }\n                this.prevTarget = target;\n                this.prevTargetDim = this.getDim(target);\n                this.cacheDimsP = this.getChildrenDim(this.targetP);\n                this.cacheDims = this.getChildrenDim(target);\n            }\n            if (this.prevTarget == target)\n                dims = this.cacheDims;\n            this.target = this.prevTarget;\n            if (this.nearBorders(this.prevTargetDim, rX, rY) || !this.nested && !this.cacheDims.length) {\n                const targetParent = this.targetP;\n                if (targetParent && this.validTarget(targetParent).valid) {\n                    dims = this.cacheDimsP;\n                    this.target = targetParent;\n                }\n            }\n            this.lastPos = null;\n            return dims;\n        },\n        getTargetFromEl(el) {\n            let target = el;\n            let targetParent;\n            let targetPrev = this.targetPrev;\n            const em = this.em;\n            const containerSel = this.containerSel;\n            const itemSel = this.itemSel;\n            if (!this.undefined(target, `${ itemSel }, ${ containerSel }`)) {\n                target = this.closest(target, itemSel);\n            }\n            if (this.draggable instanceof Array) {\n                target = this.closest(target, this.draggable.join(','));\n            }\n            if (targetPrev && targetPrev != target) {\n                this.targetPrev = '';\n            }\n            if (!this.targetPrev) {\n                targetParent = this.closest(target, containerSel);\n                const validResult = this.validTarget(target);\n                em && em.trigger('sorter:drag:validation', validResult);\n                if (!validResult.valid && targetParent) {\n                    return this.getTargetFromEl(targetParent);\n                }\n                this.targetPrev = target;\n            }\n            if (this.nearElBorders(target)) {\n                targetParent = this.closest(target, containerSel);\n                if (targetParent && this.validTarget(targetParent).valid) {\n                    target = targetParent;\n                }\n            }\n            return target;\n        },\n        nearElBorders(el) {\n            const off = 10;\n            const rect = el.getBoundingClientRect();\n            const body = el.ownerDocument.body;\n            const {x, y} = this.getCurrentPos();\n            const top = rect.top + body.scrollTop;\n            const left = rect.left + body.scrollLeft;\n            const width = rect.width;\n            const height = rect.height;\n            if (y < top + off || y > top + height - off || x < left + off || x > left + width - off) {\n                return 1;\n            }\n        },\n        getCurrentPos() {\n            const ev = this.eventMove;\n            const x = ev.pageX || 0;\n            const y = ev.pageY || 0;\n            return {\n                x,\n                y\n            };\n        },\n        getDim(el) {\n            const {em, canvasRelative} = this;\n            var top, left, height, width;\n            if (canvasRelative && em) {\n                const canvas = em.get('Canvas');\n                const pos = canvas.getElementPos(el, { noScroll: 1 });\n                const elOffsets = canvas.getElementOffsets(el);\n                top = pos.top - elOffsets.marginTop;\n                left = pos.left - elOffsets.marginLeft;\n                height = pos.height + elOffsets.marginTop + elOffsets.marginBottom;\n                width = pos.width + elOffsets.marginLeft + elOffsets.marginRight;\n            } else {\n                var o = this.offset(el);\n                top = this.relative ? el.offsetTop : o.top - (this.wmargin ? -1 : 1) * this.elT;\n                left = this.relative ? el.offsetLeft : o.left - (this.wmargin ? -1 : 1) * this.elL;\n                height = el.offsetHeight;\n                width = el.offsetWidth;\n            }\n            return [\n                top,\n                left,\n                height,\n                width\n            ];\n        },\n        getChildrenDim(trg) {\n            const dims = [];\n            if (!trg)\n                return dims;\n            const trgModel = this.getTargetModel(trg);\n            if (trgModel && trgModel.view && !this.ignoreViewChildren) {\n                const view = trgModel.getCurrentView ? trgModel.getCurrentView() : trgModel.view;\n                trg = view.getChildrenContainer();\n            }\n            _.each(trg.children, (el, i) => {\n                const model = mixins.getModel(el, $);\n                const elIndex = model && model.index ? model.index() : i;\n                if (!mixins.isTextNode(el) && !this.undefined(el, this.itemSel)) {\n                    return;\n                }\n                const dim = this.getDim(el);\n                let dir = this.direction;\n                if (dir == 'v')\n                    dir = true;\n                else if (dir == 'h')\n                    dir = false;\n                else\n                    dir = this.isInFlow(el, trg);\n                dim.push(dir, el, elIndex);\n                dims.push(dim);\n            });\n            return dims;\n        },\n        nearBorders(dim, rX, rY) {\n            var result = 0;\n            var off = this.borderOffset;\n            var x = rX || 0;\n            var y = rY || 0;\n            var t = dim[0];\n            var l = dim[1];\n            var h = dim[2];\n            var w = dim[3];\n            if (t + off > y || y > t + h - off || l + off > x || x > l + w - off)\n                result = 1;\n            return !!result;\n        },\n        findPosition(dims, posX, posY) {\n            var result = {\n                index: 0,\n                indexEl: 0,\n                method: 'before'\n            };\n            var leftLimit = 0, xLimit = 0, dimRight = 0, yLimit = 0, xCenter = 0, yCenter = 0, dimDown = 0, dim = 0;\n            for (var i = 0, len = dims.length; i < len; i++) {\n                dim = dims[i];\n                dimRight = dim[1] + dim[3];\n                dimDown = dim[0] + dim[2];\n                xCenter = dim[1] + dim[3] / 2;\n                yCenter = dim[0] + dim[2] / 2;\n                if (xLimit && dim[1] > xLimit || yLimit && yCenter >= yLimit || leftLimit && dimRight < leftLimit)\n                    continue;\n                result.index = i;\n                result.indexEl = dim[6];\n                if (!dim[4]) {\n                    if (posY < dimDown)\n                        yLimit = dimDown;\n                    if (posX < xCenter) {\n                        xLimit = xCenter;\n                        result.method = 'before';\n                    } else {\n                        leftLimit = xCenter;\n                        result.method = 'after';\n                    }\n                } else {\n                    if (posY < yCenter) {\n                        result.method = 'before';\n                        break;\n                    } else\n                        result.method = 'after';\n                }\n            }\n            return result;\n        },\n        movePlaceholder(plh, dims, pos, trgDim) {\n            var marg = 0, t = 0, l = 0, w = 0, h = 0, un = 'px', margI = 5, brdCol = '#62c462', brd = 3, method = pos.method;\n            var elDim = dims[pos.index];\n            plh.style.borderColor = 'transparent ' + brdCol;\n            plh.style.borderWidth = brd + un + ' ' + (brd + 2) + un;\n            plh.style.margin = '-' + brd + 'px 0 0';\n            if (elDim) {\n                if (!elDim[4]) {\n                    w = 'auto';\n                    h = elDim[2] - marg * 2 + un;\n                    t = elDim[0] + marg;\n                    l = method == 'before' ? elDim[1] - marg : elDim[1] + elDim[3] - marg;\n                    plh.style.borderColor = brdCol + ' transparent';\n                    plh.style.borderWidth = brd + 2 + un + ' ' + brd + un;\n                    plh.style.margin = '0 0 0 -' + brd + 'px';\n                } else {\n                    w = elDim[3] + un;\n                    h = 'auto';\n                    t = method == 'before' ? elDim[0] - marg : elDim[0] + elDim[2] - marg;\n                    l = elDim[1];\n                }\n            } else {\n                if (!this.nested) {\n                    plh.style.display = 'none';\n                    return;\n                }\n                if (trgDim) {\n                    t = trgDim[0] + margI;\n                    l = trgDim[1] + margI;\n                    w = parseInt(trgDim[3]) - margI * 2 + un;\n                    h = 'auto';\n                }\n            }\n            plh.style.top = t + un;\n            plh.style.left = l + un;\n            if (w)\n                plh.style.width = w;\n            if (h)\n                plh.style.height = h;\n        },\n        endMove(e) {\n            const src = this.eV;\n            const moved = [];\n            const docs = this.getDocuments();\n            const container = this.getContainerEl();\n            const onEndMove = this.onEndMove;\n            const {target, lastPos} = this;\n            let srcModel;\n            mixins.off(container, 'mousemove dragover', this.onMove);\n            mixins.off(docs, 'mouseup dragend touchend', this.endMove);\n            mixins.off(docs, 'keydown', this.rollback);\n            this.plh.style.display = 'none';\n            if (src) {\n                srcModel = this.getSourceModel();\n                if (this.selectOnEnd && srcModel && srcModel.set) {\n                    srcModel.set('status', '');\n                    srcModel.set('status', 'selected');\n                }\n            }\n            if (this.moved) {\n                const toMove = this.toMove;\n                const toMoveArr = _.isArray(toMove) ? toMove : toMove ? [toMove] : [src];\n                toMoveArr.forEach(model => {\n                    moved.push(this.move(target, model, lastPos));\n                });\n            }\n            if (this.plh)\n                this.plh.style.display = 'none';\n            var dragHelper = this.dragHelper;\n            if (dragHelper) {\n                dragHelper.parentNode.removeChild(dragHelper);\n                this.dragHelper = null;\n            }\n            this.disableTextable();\n            this.selectTargetModel();\n            this.toggleSortCursor();\n            this.toMove = null;\n            if (_.isFunction(onEndMove)) {\n                const data = {\n                    target: srcModel,\n                    parent: srcModel && srcModel.parent(),\n                    index: srcModel && srcModel.index()\n                };\n                moved.length ? moved.forEach(m => onEndMove(m, this, data)) : onEndMove(null, this, langx.mixin({},\n                    data, {\n                    cancelled: 1\n                }));\n            }\n        },\n        move(dst, src, pos) {\n            const {em, activeTextModel, dropContent} = this;\n            const srcEl = mixins.getElement(src);\n            em && em.trigger('component:dragEnd:before', dst, srcEl, pos);\n            var warns = [];\n            var index = pos.indexEl;\n            var modelToDrop, modelTemp, created;\n            var validResult = this.validTarget(dst, srcEl);\n            var targetCollection = $(dst).data('collection');\n            var model = validResult.srcModel;\n            var droppable = validResult.droppable;\n            var draggable = validResult.draggable;\n            var dropInfo = validResult.dropInfo;\n            var dragInfo = validResult.dragInfo;\n            const {trgModel} = validResult;\n            droppable = trgModel instanceof Backbone.Collection ? 1 : droppable;\n            const isTextableActive = this.isTextableActive(model, trgModel);\n            if (targetCollection && droppable && draggable) {\n                index = pos.method === 'after' ? index + 1 : index;\n                var opts = {\n                    at: index,\n                    noIncrement: 1\n                };\n                if (!dropContent) {\n                    opts.temporary = 1;\n                    modelTemp = targetCollection.add({}, langx.mixin({},opts ));\n                    if (model.collection) {\n                        modelToDrop = model.collection.remove(model, { temporary: 1 });\n                    }\n                } else {\n                    modelToDrop = dropContent;\n                    opts.silent = false;\n                    opts.avoidUpdateStyle = 1;\n                }\n                if (isTextableActive) {\n                    const viewActive = activeTextModel.getView();\n                    activeTextModel.trigger('active');\n                    const {activeRte} = viewActive;\n                    const modelEl = model.getEl();\n                    delete model.opt.temporary;\n                    model.getView().render();\n                    modelEl.setAttribute('data-gjs-textable', 'true');\n                    const {outerHTML} = modelEl;\n                    activeRte.insertHTML && activeRte.insertHTML(outerHTML);\n                } else {\n                    created = targetCollection.add(modelToDrop, opts);\n                }\n                if (!dropContent) {\n                    targetCollection.remove(modelTemp);\n                } else {\n                    this.dropContent = null;\n                }\n                this.prevTarget = null;\n            } else {\n                if (!targetCollection) {\n                    warns.push('Target collection not found');\n                }\n                if (!droppable) {\n                    warns.push(`Target is not droppable, accepts [${ dropInfo }]`);\n                }\n                if (!draggable) {\n                    warns.push(`Component not draggable, acceptable by [${ dragInfo }]`);\n                }\n                console.warn('Invalid target position: ' + warns.join(', '));\n            }\n            em && em.trigger('component:dragEnd', targetCollection, modelToDrop, warns);\n            em && em.trigger('sorter:drag:end', {\n                targetCollection,\n                modelToDrop,\n                warns,\n                validResult,\n                dst,\n                srcEl\n            });\n            return created;\n        },\n        rollback(e) {\n            mixins.off(this.getDocuments(), 'keydown', this.rollback);\n            const key = e.which || e.keyCode;\n            if (key == 27) {\n                this.moved = 0;\n                this.endMove();\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/utils/Resizer',[\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    './mixins'\n], function (langx,_, mixins) {\n    'use strict';\n    var defaultOpts = {\n        mousePosFetcher: null,\n        updateTarget: null,\n        ratioDefault: 0,\n        posFetcher: null,\n        onStart: null,\n        onMove: null,\n        onEnd: null,\n        onUpdateContainer: () => {\n        },\n        step: 1,\n        minDim: 32,\n        maxDim: '',\n        unitHeight: 'px',\n        unitWidth: 'px',\n        keyHeight: 'height',\n        keyWidth: 'width',\n        currentUnit: 1,\n        silentFrames: 0,\n        avoidContainerUpdate: 0,\n        keepAutoHeight: false,\n        keepAutoWidth: false,\n        autoHeight: false,\n        autoWidth: false,\n        tl: 1,\n        tc: 1,\n        tr: 1,\n        cl: 1,\n        cr: 1,\n        bl: 1,\n        bc: 1,\n        br: 1\n    };\n    var createHandler = (name, opts) => {\n        var pfx = opts.prefix || '';\n        var el = document.createElement('i');\n        el.className = pfx + 'resizer-h ' + pfx + 'resizer-h-' + name;\n        el.setAttribute('data-' + pfx + 'handler', name);\n        return el;\n    };\n    var getBoundingRect = (el, win) => {\n        var w = win || window;\n        var rect = el.getBoundingClientRect();\n        return {\n            left: rect.left + w.pageXOffset,\n            top: rect.top + w.pageYOffset,\n            width: rect.width,\n            height: rect.height\n        };\n    };\n    class Resizer {\n        constructor(opts = {}) {\n            this.setOptions(opts);\n            _.bindAll(this, 'handleKeyDown', 'handleMouseDown', 'move', 'stop');\n            return this;\n        }\n        getConfig() {\n            return this.opts;\n        }\n        setOptions(options = {}) {\n            this.opts = _.defaults(options, defaultOpts);\n            this.setup();\n        }\n        setup() {\n            const opts = this.opts;\n            const pfx = opts.prefix || '';\n            const appendTo = opts.appendTo || document.body;\n            let container = this.container;\n            if (!container) {\n                container = document.createElement('div');\n                container.className = `${ pfx }resizer-c`;\n                appendTo.appendChild(container);\n                this.container = container;\n            }\n            while (container.firstChild) {\n                container.removeChild(container.firstChild);\n            }\n            const handlers = {};\n            [\n                'tl',\n                'tc',\n                'tr',\n                'cl',\n                'cr',\n                'bl',\n                'bc',\n                'br'\n            ].forEach(hdl => handlers[hdl] = opts[hdl] ? createHandler(hdl, opts) : '');\n            for (let n in handlers) {\n                const handler = handlers[n];\n                handler && container.appendChild(handler);\n            }\n            this.handlers = handlers;\n            this.mousePosFetcher = opts.mousePosFetcher;\n            this.updateTarget = opts.updateTarget;\n            this.posFetcher = opts.posFetcher;\n            this.onStart = opts.onStart;\n            this.onMove = opts.onMove;\n            this.onEnd = opts.onEnd;\n            this.onUpdateContainer = opts.onUpdateContainer;\n        }\n        toggleFrames(silent) {\n            if (this.opts.silentFrames) {\n                const frames = document.querySelectorAll('iframe');\n                _.each(frames, frame => frame.style.pointerEvents = silent ? 'none' : '');\n            }\n        }\n        isHandler(el) {\n            var handlers = this.handlers;\n            for (var n in handlers) {\n                if (handlers[n] === el)\n                    return true;\n            }\n            return false;\n        }\n        getFocusedEl() {\n            return this.el;\n        }\n        getDocumentEl() {\n            return [\n                this.el.ownerDocument,\n                document\n            ];\n        }\n        getElementPos(el, opts = {}) {\n            var posFetcher = this.posFetcher || '';\n            return posFetcher ? posFetcher(el, opts) : getBoundingRect(el);\n        }\n        focus(el) {\n            if (el && el === this.el) {\n                return;\n            }\n            this.el = el;\n            this.updateContainer({ forceShow: 1 });\n            mixins.on(this.getDocumentEl(), 'mousedown', this.handleMouseDown);\n        }\n        blur() {\n            this.container.style.display = 'none';\n            if (this.el) {\n                mixins.off(this.getDocumentEl(), 'mousedown', this.handleMouseDown);\n                this.el = null;\n            }\n        }\n        start(e) {\n            if (e.button !== 0)\n                return;\n            e.preventDefault();\n            e.stopPropagation();\n            const el = this.el;\n            const resizer = this;\n            const config = this.opts || {};\n            var attrName = 'data-' + config.prefix + 'handler';\n            var rect = this.getElementPos(el, { target: 'el' });\n            this.handlerAttr = e.target.getAttribute(attrName);\n            this.clickedHandler = e.target;\n            this.startDim = {\n                t: rect.top,\n                l: rect.left,\n                w: rect.width,\n                h: rect.height\n            };\n            this.rectDim = {\n                t: rect.top,\n                l: rect.left,\n                w: rect.width,\n                h: rect.height\n            };\n            this.startPos = {\n                x: e.clientX,\n                y: e.clientY\n            };\n            var doc = this.getDocumentEl();\n            mixins.on(doc, 'mousemove', this.move);\n            mixins.on(doc, 'keydown', this.handleKeyDown);\n            mixins.on(doc, 'mouseup', this.stop);\n            _.isFunction(this.onStart) && this.onStart(e, {\n                docs: doc,\n                config,\n                el,\n                resizer\n            });\n            this.toggleFrames(1);\n            this.move(e);\n        }\n        move(e) {\n            const onMove = this.onMove;\n            var mouseFetch = this.mousePosFetcher;\n            var currentPos = mouseFetch ? mouseFetch(e) : {\n                x: e.clientX,\n                y: e.clientY\n            };\n            this.currentPos = currentPos;\n            this.delta = {\n                x: currentPos.x - this.startPos.x,\n                y: currentPos.y - this.startPos.y\n            };\n            this.keys = {\n                shift: e.shiftKey,\n                ctrl: e.ctrlKey,\n                alt: e.altKey\n            };\n            this.rectDim = this.calc(this);\n            this.updateRect(0);\n            onMove && onMove(e);\n            if (e.which === 0) {\n                this.stop(e);\n            }\n        }\n        stop(e) {\n            const config = this.opts;\n            var doc = this.getDocumentEl();\n            mixins.off(doc, 'mousemove', this.move);\n            mixins.off(doc, 'keydown', this.handleKeyDown);\n            mixins.off(doc, 'mouseup', this.stop);\n            this.updateRect(1);\n            this.toggleFrames();\n            _.isFunction(this.onEnd) && this.onEnd(e, {\n                docs: doc,\n                config\n            });\n        }\n        updateRect(store) {\n            const el = this.el;\n            const resizer = this;\n            const config = this.opts;\n            const rect = this.rectDim;\n            const updateTarget = this.updateTarget;\n            const selectedHandler = this.getSelectedHandler();\n            const {unitHeight, unitWidth, keyWidth, keyHeight} = config;\n            if (_.isFunction(updateTarget)) {\n                updateTarget(el, rect, {\n                    store,\n                    selectedHandler,\n                    resizer,\n                    config\n                });\n            } else {\n                const elStyle = el.style;\n                elStyle[keyWidth] = rect.w + unitWidth;\n                elStyle[keyHeight] = rect.h + unitHeight;\n            }\n            this.updateContainer();\n        }\n        updateContainer(opt = {}) {\n            const {opts, container, el} = this;\n            const {style} = container;\n            if (!opts.avoidContainerUpdate && el) {\n                if (opt.forceShow)\n                    style.display = 'block';\n            }\n            this.onUpdateContainer({\n                el: container,\n                resizer: this,\n                opts: langx.mixin({},opts,opt)\n            });\n        }\n        getSelectedHandler() {\n            var handlers = this.handlers;\n            if (!this.selectedHandler) {\n                return;\n            }\n            for (let n in handlers) {\n                if (handlers[n] === this.selectedHandler)\n                    return n;\n            }\n        }\n        handleKeyDown(e) {\n            if (e.keyCode === 27) {\n                this.rectDim = this.startDim;\n                this.stop(e);\n            }\n        }\n        handleMouseDown(e) {\n            var el = e.target;\n            if (this.isHandler(el)) {\n                this.selectedHandler = el;\n                this.start(e);\n            } else if (el !== this.el) {\n                this.selectedHandler = '';\n                this.blur();\n            }\n        }\n        calc(data) {\n            let value;\n            const opts = this.opts || {};\n            const step = opts.step;\n            const startDim = this.startDim;\n            const minDim = opts.minDim;\n            const maxDim = opts.maxDim;\n            const deltaX = data.delta.x;\n            const deltaY = data.delta.y;\n            const startW = startDim.w;\n            const startH = startDim.h;\n            var box = {\n                t: 0,\n                l: 0,\n                w: startW,\n                h: startH\n            };\n            if (!data)\n                return;\n            var attr = data.handlerAttr;\n            if (~attr.indexOf('r')) {\n                value = mixins.normalizeFloat(startW + deltaX * step, step);\n                value = Math.max(minDim, value);\n                maxDim && (value = Math.min(maxDim, value));\n                box.w = value;\n            }\n            if (~attr.indexOf('b')) {\n                value = mixins.normalizeFloat(startH + deltaY * step, step);\n                value = Math.max(minDim, value);\n                maxDim && (value = Math.min(maxDim, value));\n                box.h = value;\n            }\n            if (~attr.indexOf('l')) {\n                value = mixins.normalizeFloat(startW - deltaX * step, step);\n                value = Math.max(minDim, value);\n                maxDim && (value = Math.min(maxDim, value));\n                box.w = value;\n            }\n            if (~attr.indexOf('t')) {\n                value = mixins.normalizeFloat(startH - deltaY * step, step);\n                value = Math.max(minDim, value);\n                maxDim && (value = Math.min(maxDim, value));\n                box.h = value;\n            }\n            var ratioActive = opts.ratioDefault ? !data.keys.shift : data.keys.shift;\n            if (attr.indexOf('c') < 0 && ratioActive) {\n                var ratio = startDim.w / startDim.h;\n                if (box.w / box.h > ratio) {\n                    box.h = Math.round(box.w / ratio);\n                } else {\n                    box.w = Math.round(box.h * ratio);\n                }\n            }\n            if (~attr.indexOf('l')) {\n                box.l = startDim.w - box.w;\n            }\n            if (~attr.indexOf('t')) {\n                box.t = startDim.h - box.h;\n            }\n            return box;\n        }\n    }\n    return {\n        init(opts) {\n            return new Resizer(opts);\n        }\n    };\n});\ndefine('skylark-grapejs/utils/index',[\n    './Dragger',\n    './Sorter',\n    './Resizer'\n], function (Dragger, Sorter, Resizer) {\n    'use strict';\n    return () => {\n        return {\n            name: 'Utils',\n            init() {\n                return this;\n            },\n            Sorter,\n            Resizer,\n            Dragger\n        };\n    };\n});\ndefine('skylark-grapejs/i18n/locale/en',[],function () {\n    'use strict';\n    const traitInputAttr = { placeholder: 'eg. Text here' };\n    return {\n        assetManager: {\n            addButton: 'Add image',\n            inputPlh: 'http://path/to/the/image.jpg',\n            modalTitle: 'Select Image',\n            uploadTitle: 'Drop files here or click to upload'\n        },\n        blockManager: {\n            labels: {},\n            categories: {}\n        },\n        domComponents: {\n            names: {\n                '': 'Box',\n                wrapper: 'Body',\n                text: 'Text',\n                comment: 'Comment',\n                image: 'Image',\n                video: 'Video',\n                label: 'Label',\n                link: 'Link',\n                map: 'Map',\n                tfoot: 'Table foot',\n                tbody: 'Table body',\n                thead: 'Table head',\n                table: 'Table',\n                row: 'Table row',\n                cell: 'Table cell'\n            }\n        },\n        deviceManager: {\n            device: 'Device',\n            devices: {\n                desktop: 'Desktop',\n                tablet: 'Tablet',\n                mobileLandscape: 'Mobile Landscape',\n                mobilePortrait: 'Mobile Portrait'\n            }\n        },\n        panels: {\n            buttons: {\n                titles: {\n                    preview: 'Preview',\n                    fullscreen: 'Fullscreen',\n                    'sw-visibility': 'View components',\n                    'export-template': 'View code',\n                    'open-sm': 'Open Style Manager',\n                    'open-tm': 'Settings',\n                    'open-layers': 'Open Layer Manager',\n                    'open-blocks': 'Open Blocks'\n                }\n            }\n        },\n        selectorManager: {\n            label: 'Classes',\n            selected: 'Selected',\n            emptyState: '- State -',\n            states: {\n                hover: 'Hover',\n                active: 'Click',\n                'nth-of-type(2n)': 'Even/Odd'\n            }\n        },\n        styleManager: {\n            empty: 'Select an element before using Style Manager',\n            layer: 'Layer',\n            fileButton: 'Images',\n            sectors: {\n                general: 'General',\n                layout: 'Layout',\n                typography: 'Typography',\n                decorations: 'Decorations',\n                extra: 'Extra',\n                flex: 'Flex',\n                dimension: 'Dimension'\n            },\n            properties: {}\n        },\n        traitManager: {\n            empty: 'Select an element before using Trait Manager',\n            label: 'Component settings',\n            traits: {\n                labels: {},\n                attributes: {\n                    id: traitInputAttr,\n                    alt: traitInputAttr,\n                    title: traitInputAttr,\n                    href: { placeholder: 'eg. https://google.com' }\n                },\n                options: {\n                    target: {\n                        false: 'This window',\n                        _blank: 'New window'\n                    }\n                }\n            }\n        }\n    };\n});\ndefine('skylark-grapejs/i18n/config',['./locale/en'], function (en) {\n    'use strict';\n    return {\n        locale: 'en',\n        localeFallback: 'en',\n        detectLocale: 1,\n        debug: 0,\n        messages: { en }\n    };\n});\ndefine('skylark-grapejs/i18n/index',[\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    './config'\n], function (langx,_, config) {\n    'use strict';\n    const isObj = el => !Array.isArray(el) && el !== null && typeof el === 'object';\n    const deepAssign = (...args) => {\n        const target = lang.mixin({},args[0] );\n        for (let i = 1; i < args.length; i++) {\n            const source = lang.mixin({},args[i] );\n            for (let key in source) {\n                const targValue = target[key];\n                const srcValue = source[key];\n                if (isObj(targValue) && isObj(srcValue)) {\n                    target[key] = deepAssign(targValue, srcValue);\n                } else {\n                    target[key] = srcValue;\n                }\n            }\n        }\n        return target;\n    };\n    return () => {\n        return {\n            name: 'I18n',\n            config,\n            init(opts = {}) {\n                this.config = langx.mixin({},config,opts,{\n                    messages: langx.mixin({},\n                        config.messages,\n                        opts.messages\n                    )\n                });\n                if (this.config.detectLocale) {\n                    this.config.locale = this._localLang();\n                }\n                this.em = opts.em;\n                return this;\n            },\n            getConfig() {\n                return this.config;\n            },\n            setLocale(locale) {\n                const {em, config} = this;\n                const evObj = {\n                    value: locale,\n                    valuePrev: config.locale\n                };\n                em && em.trigger('i18n:locale', evObj);\n                config.locale = locale;\n                return this;\n            },\n            getLocale() {\n                return this.config.locale;\n            },\n            getMessages(lang, opts = {}) {\n                const {messages} = this.config;\n                lang && !messages[lang] && this._debug(`'${ lang }' i18n lang not found`, opts);\n                return lang ? messages[lang] : messages;\n            },\n            setMessages(msg) {\n                const {em, config} = this;\n                config.messages = msg;\n                em && em.trigger('i18n:update', msg);\n                return this;\n            },\n            addMessages(msg) {\n                const {em} = this;\n                const {messages} = this.config;\n                em && em.trigger('i18n:add', msg);\n                this.setMessages(deepAssign(messages, msg));\n                return this;\n            },\n            t(key, opts = {}) {\n                const {config} = this;\n                const param = opts.params || {};\n                const locale = opts.l || this.getLocale();\n                const localeFlb = opts.lFlb || config.localeFallback;\n                let result = this._getMsg(key, locale, opts);\n                if (!result)\n                    result = this._getMsg(key, localeFlb, opts);\n                !result && this._debug(`'${ key }' i18n key not found in '${ locale }' lang`, opts);\n                result = result && _.isString(result) ? this._addParams(result, param) : result;\n                return result;\n            },\n            _localLang() {\n                const nav = window.navigator || {};\n                const lang = nav.language || nav.userLanguage;\n                return lang ? lang.split('-')[0] : 'en';\n            },\n            _addParams(str, params) {\n                const reg = new RegExp(`\\{([\\\\w\\\\d-]*)\\}`, 'g');\n                return str.replace(reg, (m, val) => params[val] || '').trim();\n            },\n            _getMsg(key, locale, opts = {}) {\n                const msgSet = this.getMessages(locale, opts);\n                if (!msgSet)\n                    return;\n                let result = msgSet[key];\n                if (!result && key.indexOf('.') > 0) {\n                    result = key.split('.').reduce((lang, key) => {\n                        if (_.isUndefined(lang))\n                            return;\n                        return lang[key];\n                    }, msgSet);\n                }\n                return result;\n            },\n            _debug(str, opts = {}) {\n                const {em, config} = this;\n                (opts.debug || config.debug) && em && em.logWarning(str);\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/keymaps/keymaster',[],function(){\r\n  var k,\r\n    _handlers = {},\r\n    _mods = { 16: false, 18: false, 17: false, 91: false },\r\n    _scope = 'all',\r\n    // modifier keys\r\n    _MODIFIERS = {\r\n      '⇧': 16, shift: 16,\r\n      '⌥': 18, alt: 18, option: 18,\r\n      '⌃': 17, ctrl: 17, control: 17,\r\n      '⌘': 91, command: 91\r\n    },\r\n    // special keys\r\n    _MAP = {\r\n      backspace: 8, tab: 9, clear: 12,\r\n      enter: 13, 'return': 13,\r\n      esc: 27, escape: 27, space: 32,\r\n      left: 37, up: 38,\r\n      right: 39, down: 40,\r\n      del: 46, 'delete': 46,\r\n      home: 36, end: 35,\r\n      pageup: 33, pagedown: 34,\r\n      ',': 188, '.': 190, '/': 191,\r\n      '`': 192, '-': 189, '=': 187,\r\n      ';': 186, '\\'': 222,\r\n      '[': 219, ']': 221, '\\\\': 220\r\n    },\r\n    code = function(x){\r\n      return _MAP[x] || x.toUpperCase().charCodeAt(0);\r\n    },\r\n    _downKeys = [];\r\n\r\n  for(k=1;k<20;k++) _MAP['f'+k] = 111+k;\r\n\r\n  // IE doesn't support Array#indexOf, so have a simple replacement\r\n  function index(array, item){\r\n    var i = array.length;\r\n    while(i--) if(array[i]===item) return i;\r\n    return -1;\r\n  }\r\n\r\n  // for comparing mods before unassignment\r\n  function compareArray(a1, a2) {\r\n    if (a1.length != a2.length) return false;\r\n    for (var i = 0; i < a1.length; i++) {\r\n        if (a1[i] !== a2[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  var modifierMap = {\r\n      16:'shiftKey',\r\n      18:'altKey',\r\n      17:'ctrlKey',\r\n      91:'metaKey'\r\n  };\r\n  function updateModifierKey(event) {\r\n      for(k in _mods) _mods[k] = event[modifierMap[k]];\r\n  };\r\n\r\n  // handle keydown event\r\n  function dispatch(event) {\r\n    var key, handler, k, i, modifiersMatch, scope;\r\n    key = event.keyCode;\r\n\r\n    if (index(_downKeys, key) == -1) {\r\n        _downKeys.push(key);\r\n    }\r\n\r\n    // if a modifier key, set the key.<modifierkeyname> property to true and return\r\n    if(key == 93 || key == 224) key = 91; // right command on webkit, command on Gecko\r\n    if(key in _mods) {\r\n      _mods[key] = true;\r\n      // 'assignKey' from inside this closure is exported to window.key\r\n      for(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = true;\r\n      return;\r\n    }\r\n    updateModifierKey(event);\r\n\r\n    // see if we need to ignore the keypress (filter() can can be overridden)\r\n    // by default ignore key presses if a select, textarea, or input is focused\r\n    if(!assignKey.filter.call(this, event)) return;\r\n\r\n    // abort if no potentially matching shortcuts found\r\n    if (!(key in _handlers)) return;\r\n\r\n    scope = getScope();\r\n\r\n    // for each potential shortcut\r\n    for (i = 0; i < _handlers[key].length; i++) {\r\n      handler = _handlers[key][i];\r\n\r\n      // see if it's in the current scope\r\n      if(handler.scope == scope || handler.scope == 'all'){\r\n        // check if modifiers match if any\r\n        modifiersMatch = handler.mods.length > 0;\r\n        for(k in _mods)\r\n          if((!_mods[k] && index(handler.mods, +k) > -1) ||\r\n            (_mods[k] && index(handler.mods, +k) == -1)) modifiersMatch = false;\r\n        // call the handler and stop the event if neccessary\r\n        if((handler.mods.length == 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91]) || modifiersMatch){\r\n          if(handler.method(event, handler)===false){\r\n            if(event.preventDefault) event.preventDefault();\r\n              else event.returnValue = false;\r\n            if(event.stopPropagation) event.stopPropagation();\r\n            if(event.cancelBubble) event.cancelBubble = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // unset modifier keys on keyup\r\n  function clearModifier(event){\r\n    var key = event.keyCode, k,\r\n        i = index(_downKeys, key);\r\n\r\n    // remove key from _downKeys\r\n    if (i >= 0) {\r\n        _downKeys.splice(i, 1);\r\n    }\r\n\r\n    if(key == 93 || key == 224) key = 91;\r\n    if(key in _mods) {\r\n      _mods[key] = false;\r\n      for(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = false;\r\n    }\r\n  };\r\n\r\n  function resetModifiers() {\r\n    for(k in _mods) _mods[k] = false;\r\n    for(k in _MODIFIERS) assignKey[k] = false;\r\n  };\r\n\r\n  // parse and assign shortcut\r\n  function assignKey(key, scope, method){\r\n    var keys, mods;\r\n    keys = getKeys(key);\r\n    if (method === undefined) {\r\n      method = scope;\r\n      scope = 'all';\r\n    }\r\n\r\n    // for each shortcut\r\n    for (var i = 0; i < keys.length; i++) {\r\n      // set modifier keys if any\r\n      mods = [];\r\n      key = keys[i].split('+');\r\n      if (key.length > 1){\r\n        mods = getMods(key);\r\n        key = [key[key.length-1]];\r\n      }\r\n      // convert to keycode and...\r\n      key = key[0]\r\n      key = code(key);\r\n      // ...store handler\r\n      if (!(key in _handlers)) _handlers[key] = [];\r\n      _handlers[key].push({ shortcut: keys[i], scope: scope, method: method, key: keys[i], mods: mods });\r\n    }\r\n  };\r\n\r\n  // unbind all handlers for given key in current scope\r\n  function unbindKey(key, scope) {\r\n    var multipleKeys, keys,\r\n      mods = [],\r\n      i, j, obj;\r\n\r\n    multipleKeys = getKeys(key);\r\n\r\n    for (j = 0; j < multipleKeys.length; j++) {\r\n      keys = multipleKeys[j].split('+');\r\n\r\n      if (keys.length > 1) {\r\n        mods = getMods(keys);\r\n        key = keys[keys.length - 1];\r\n      }\r\n\r\n      key = code(key);\r\n\r\n      if (scope === undefined) {\r\n        scope = getScope();\r\n      }\r\n      if (!_handlers[key]) {\r\n        return;\r\n      }\r\n      for (i = 0; i < _handlers[key].length; i++) {\r\n        obj = _handlers[key][i];\r\n        // only clear handlers if correct scope and mods match\r\n        if (obj.scope === scope && compareArray(obj.mods, mods)) {\r\n          _handlers[key][i] = {};\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Returns true if the key with code 'keyCode' is currently down\r\n  // Converts strings into key codes.\r\n  function isPressed(keyCode) {\r\n      if (typeof(keyCode)=='string') {\r\n        keyCode = code(keyCode);\r\n      }\r\n      return index(_downKeys, keyCode) != -1;\r\n  }\r\n\r\n  function getPressedKeyCodes() {\r\n      return _downKeys.slice(0);\r\n  }\r\n\r\n  function filter(event){\r\n    var tagName = (event.target || event.srcElement).tagName;\r\n    // ignore keypressed in any elements that support keyboard data input\r\n    return !(tagName == 'INPUT' || tagName == 'SELECT' || tagName == 'TEXTAREA');\r\n  }\r\n\r\n  // initialize key.<modifier> to false\r\n  for(k in _MODIFIERS) assignKey[k] = false;\r\n\r\n  // set current scope (default 'all')\r\n  function setScope(scope){ _scope = scope || 'all' };\r\n  function getScope(){ return _scope || 'all' };\r\n\r\n  // delete all handlers for a given scope\r\n  function deleteScope(scope){\r\n    var key, handlers, i;\r\n\r\n    for (key in _handlers) {\r\n      handlers = _handlers[key];\r\n      for (i = 0; i < handlers.length; ) {\r\n        if (handlers[i].scope === scope) handlers.splice(i, 1);\r\n        else i++;\r\n      }\r\n    }\r\n  };\r\n\r\n  // abstract key logic for assign and unassign\r\n  function getKeys(key) {\r\n    var keys;\r\n    key = key.replace(/\\s/g, '');\r\n    keys = key.split(',');\r\n    if ((keys[keys.length - 1]) == '') {\r\n      keys[keys.length - 2] += ',';\r\n    }\r\n    return keys;\r\n  }\r\n\r\n  // abstract mods logic for assign and unassign\r\n  function getMods(key) {\r\n    var mods = key.slice(0, key.length - 1);\r\n    for (var mi = 0; mi < mods.length; mi++)\r\n    mods[mi] = _MODIFIERS[mods[mi]];\r\n    return mods;\r\n  }\r\n\r\n  // cross-browser events\r\n  function addEvent(object, event, method) {\r\n    if (object.addEventListener)\r\n      object.addEventListener(event, method, false);\r\n    else if(object.attachEvent)\r\n      object.attachEvent('on'+event, function(){ method(window.event) });\r\n  };\r\n\r\n  // set the handlers globally on document\r\n  addEvent(document, 'keydown', function(event) { dispatch(event) }); // Passing _scope to a callback to ensure it remains the same by execution. Fixes #48\r\n  addEvent(document, 'keyup', clearModifier);\r\n\r\n  // reset modifiers to false whenever the window is (re)focused.\r\n  addEvent(window, 'focus', resetModifiers);\r\n\r\n  // store previously defined key\r\n  var previousKey = global.key;\r\n\r\n  // restore previously defined key and return reference to our key object\r\n  function noConflict() {\r\n    var k = global.key;\r\n    global.key = previousKey;\r\n    return k;\r\n  }\r\n\r\n  /*\r\n  // set window.key and window.key.set/get/deleteScope, and the default filter\r\n  global.key = assignKey;\r\n  global.key.setScope = setScope;\r\n  global.key.getScope = getScope;\r\n  global.key.deleteScope = deleteScope;\r\n  global.key.filter = filter;\r\n  global.key.isPressed = isPressed;\r\n  global.key.getPressedKeyCodes = getPressedKeyCodes;\r\n  global.key.noConflict = noConflict;\r\n  global.key.unbind = unbindKey;\r\n*/\r\n  return assignKey;\r\n\r\n});\r\n\ndefine('skylark-grapejs/keymaps/index',[\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    './keymaster'\n], function (langx,_, keymaster) {\n    'use strict';\n    return () => {\n        let em;\n        let config;\n        const keymaps = {};\n        const configDef = {\n            defaults: {\n                'core:undo': {\n                    keys: '\\u2318+z, ctrl+z',\n                    handler: 'core:undo'\n                },\n                'core:redo': {\n                    keys: '\\u2318+shift+z, ctrl+shift+z',\n                    handler: 'core:redo'\n                },\n                'core:copy': {\n                    keys: '\\u2318+c, ctrl+c',\n                    handler: 'core:copy'\n                },\n                'core:paste': {\n                    keys: '\\u2318+v, ctrl+v',\n                    handler: 'core:paste'\n                },\n                'core:component-next': {\n                    keys: 's',\n                    handler: 'core:component-next'\n                },\n                'core:component-prev': {\n                    keys: 'w',\n                    handler: 'core:component-prev'\n                },\n                'core:component-enter': {\n                    keys: 'd',\n                    handler: 'core:component-enter'\n                },\n                'core:component-exit': {\n                    keys: 'a',\n                    handler: 'core:component-exit'\n                },\n                'core:component-delete': {\n                    keys: 'backspace, delete',\n                    handler: 'core:component-delete'\n                }\n            }\n        };\n        return {\n            keymaster,\n            name: 'Keymaps',\n            getConfig() {\n                return config;\n            },\n            init(opts = {}) {\n                config = langx.mixin({},\n                    configDef,\n                    opts\n                );\n                em = config.em;\n                this.em = em;\n                return this;\n            },\n            onLoad() {\n                const defKeys = config.defaults;\n                for (let id in defKeys) {\n                    const value = defKeys[id];\n                    this.add(id, value.keys, value.handler);\n                }\n            },\n            add(id, keys, handler, opts = {}) {\n                const {em} = this;\n                const cmd = em.get('Commands');\n                const editor = em.getEditor();\n                const canvas = em.get('Canvas');\n                const keymap = {\n                    id,\n                    keys,\n                    handler\n                };\n                const pk = keymaps[id];\n                pk && this.remove(id);\n                keymaps[id] = keymap;\n                keymaster(keys, (e, h) => {\n                    const opt = {\n                        event: e,\n                        h\n                    };\n                    handler = _.isString(handler) ? cmd.get(handler) : handler;\n                    opts.prevent && canvas.getCanvasView().preventDefault(e);\n                    const ableTorun = !em.isEditing() && !editor.Canvas.isInputFocused();\n                    if (ableTorun || opts.force) {\n                        typeof handler == 'object' ? handler.run(editor, 0, opt) : handler(editor, 0, opt);\n                        const args = [\n                            id,\n                            h.shortcut,\n                            e\n                        ];\n                        em.trigger('keymap:emit', ...args);\n                        em.trigger(`keymap:emit:${ id }`, ...args);\n                    }\n                });\n                em.trigger('keymap:add', keymap);\n                return keymap;\n            },\n            get(id) {\n                return keymaps[id];\n            },\n            getAll() {\n                return keymaps;\n            },\n            remove(id) {\n                const em = this.em;\n                const keymap = this.get(id);\n                if (keymap) {\n                    delete keymaps[id];\n                    keymaster.unbind(keymap.keys);\n                    em && em.trigger('keymap:remove', keymap);\n                    return keymap;\n                }\n            },\n            removeAll() {\n                Object.keys(keymaps).forEach(keymap => this.remove(keymap));\n                return this;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/undo_manager/index',[\n    \"skylark-langx/langx\",\n    'skylark-backbone/UndoManager'\n], function (langx,UndoManager) {\n    'use strict';\n    return () => {\n        let em;\n        let um;\n        let config;\n        let beforeCache;\n        const configDef = {};\n        return {\n            name: 'UndoManager',\n            init(opts = {}) {\n                config = langx.mixin({},opts,configDef);\n                em = config.em;\n                this.em = em;\n                um = new UndoManager(langx.mixin({\n                            track: true,\n                            register: [],\n                        },config\n                ));\n                um.changeUndoType('change', { condition: false });\n                um.changeUndoType('add', {\n                    on(model, collection, options = {}) {\n                        if (options.avoidStore)\n                            return;\n                        return {\n                            object: collection,\n                            before: undefined,\n                            after: model,\n                            options: langx.clone(options)\n                        };\n                    }\n                });\n                um.changeUndoType('remove', {\n                    on(model, collection, options = {}) {\n                        if (options.avoidStore)\n                            return;\n                        return {\n                            object: collection,\n                            before: model,\n                            after: undefined,\n                            options: langx.clone(options)\n                        };\n                    }\n                });\n                const customUndoType = {\n                    on(object, value, opt = {}) {\n                        !beforeCache && (beforeCache = object.previousAttributes());\n                        if (opt.avoidStore) {\n                            return;\n                        } else {\n                            const result = {\n                                object,\n                                before: beforeCache,\n                                after: object.toJSON()\n                            };\n                            beforeCache = null;\n                            return result;\n                        }\n                    },\n                    undo(model, bf, af, opt) {\n                        model.set(bf);\n                    },\n                    redo(model, bf, af, opt) {\n                        model.set(af);\n                    }\n                };\n                const events = [\n                    'style',\n                    'attributes',\n                    'content',\n                    'src'\n                ];\n                events.forEach(ev => um.addUndoType(`change:${ ev }`, customUndoType));\n                um.on('undo redo', () => em.trigger('component:toggled change:canvasOffset'));\n                [\n                    'undo',\n                    'redo'\n                ].forEach(ev => um.on(ev, () => em.trigger(ev)));\n                return this;\n            },\n            getConfig() {\n                return config;\n            },\n            add(entity) {\n                um.register(entity);\n                return this;\n            },\n            remove(entity) {\n                um.unregister(entity);\n                return this;\n            },\n            removeAll() {\n                um.unregisterAll();\n                return this;\n            },\n            start() {\n                um.startTracking();\n                return this;\n            },\n            stop() {\n                um.stopTracking();\n                return this;\n            },\n            undo() {\n                !em.isEditing() && um.undo(1);\n                return this;\n            },\n            undoAll() {\n                um.undoAll();\n                return this;\n            },\n            redo() {\n                !em.isEditing() && um.redo(1);\n                return this;\n            },\n            redoAll() {\n                um.redoAll();\n                return this;\n            },\n            hasUndo() {\n                return um.isAvailable('undo');\n            },\n            hasRedo() {\n                return um.isAvailable('redo');\n            },\n            getStack() {\n                return um.stack;\n            },\n            clear() {\n                um.clear();\n                return this;\n            },\n            getInstance() {\n                return um;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/storage_manager/config/config',[],function () {\n    'use strict';\n    return {\n        id: 'gjs-',\n        autosave: 1,\n        autoload: 1,\n        type: 'local',\n        stepsBeforeSave: 1,\n        storeComponents: 1,\n        storeStyles: 1,\n        storeHtml: 1,\n        storeCss: 1,\n        checkLocal: 1,\n        params: {},\n        headers: {},\n        urlStore: '',\n        urlLoad: '',\n        beforeSend(jqXHR, settings) {\n        },\n        onComplete(jqXHR, status) {\n        },\n        contentTypeJson: true,\n        credentials: 'include',\n        fetchOptions: ''\n    };\n});\ndefine('skylark-grapejs/storage_manager/model/LocalStorage',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: { checkLocal: true },\n        store(data, clb) {\n            this.checkStorageEnvironment();\n            for (var key in data)\n                localStorage.setItem(key, data[key]);\n            if (typeof clb == 'function') {\n                clb();\n            }\n        },\n        load(keys, clb) {\n            this.checkStorageEnvironment();\n            var result = {};\n            for (var i = 0, len = keys.length; i < len; i++) {\n                var value = localStorage.getItem(keys[i]);\n                if (value)\n                    result[keys[i]] = value;\n            }\n            if (typeof clb == 'function') {\n                clb(result);\n            }\n            return result;\n        },\n        remove(keys) {\n            this.checkStorageEnvironment();\n            for (var i = 0, len = keys.length; i < len; i++)\n                localStorage.removeItem(keys[i]);\n        },\n        checkStorageEnvironment() {\n            if (this.get('checkLocal') && !localStorage)\n                console.warn(\"Your browser doesn't support localStorage\");\n        }\n    });\n});\ndefine('skylark-grapejs/utils/fetch',[\n], function () {\n    'use strict';\n    return typeof fetch == 'function' ? fetch.bind() : (url, options) => {\n        return new Promise((res, rej) => {\n            const req = new XMLHttpRequest();\n            req.open(options.method || 'get', url);\n            req.withCredentials = options.credentials == 'include';\n            for (let k in options.headers || {}) {\n                req.setRequestHeader(k, options.headers[k]);\n            }\n            req.onload = e => res({\n                status: req.status,\n                statusText: req.statusText,\n                text: () => Promise.resolve(req.responseText)\n            });\n            req.onerror = rej;\n            if (req.upload && options.onProgress) {\n                req.upload.onprogress = options.onProgress;\n            }\n            options.body ? req.send(options.body) : req.send();\n        });\n    };\n});\ndefine('skylark-grapejs/storage_manager/model/RemoteStorage',[\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    '../../utils/fetch',\n    'skylark-underscore'\n], function (langx,Backbone, fetch, a) {\n    'use strict';\n    return Backbone.Model.extend({\n        fetch,\n        defaults: {\n            urlStore: '',\n            urlLoad: '',\n            params: {},\n            beforeSend() {\n            },\n            onComplete() {\n            },\n            contentTypeJson: false,\n            credentials: 'include',\n            fetchOptions: ''\n        },\n        onStart() {\n            const em = this.get('em');\n            const before = this.get('beforeSend');\n            before && before();\n        },\n        onError(err, clbErr) {\n            if (clbErr) {\n                clbErr(err);\n            } else {\n                const em = this.get('em');\n                console.error(err);\n                em && em.trigger('storage:error', err);\n            }\n        },\n        onResponse(text, clb) {\n            const em = this.get('em');\n            const complete = this.get('onComplete');\n            const typeJson = this.get('contentTypeJson');\n            const parsable = text && typeof text === 'string';\n            const res = typeJson && parsable ? JSON.parse(text) : text;\n            complete && complete(res);\n            clb && clb(res);\n            em && em.trigger('storage:response', res);\n        },\n        store(data, clb, clbErr) {\n            const body = {};\n            for (let key in data) {\n                body[key] = data[key];\n            }\n            this.request(this.get('urlStore'), { body }, clb, clbErr);\n        },\n        load(keys, clb, clbErr) {\n            this.request(this.get('urlLoad'), { method: 'get' }, clb, clbErr);\n        },\n        request(url, opts = {}, clb = null, clbErr = null) {\n            const typeJson = this.get('contentTypeJson');\n            const headers = this.get('headers') || {};\n            const params = this.get('params');\n            const reqHead = 'X-Requested-With';\n            const typeHead = 'Content-Type';\n            const bodyObj = opts.body || {};\n            let fetchOptions;\n            let body;\n            for (let param in params) {\n                bodyObj[param] = params[param];\n            }\n            if (a.isUndefined(headers[reqHead])) {\n                headers[reqHead] = 'XMLHttpRequest';\n            }\n            if (a.isUndefined(headers[typeHead]) && typeJson) {\n                headers[typeHead] = 'application/json; charset=utf-8';\n            }\n            if (typeJson) {\n                body = JSON.stringify(bodyObj);\n            } else {\n                body = new FormData();\n                for (let bodyKey in bodyObj) {\n                    body.append(bodyKey, bodyObj[bodyKey]);\n                }\n            }\n            fetchOptions = {\n                method: opts.method || 'post',\n                credentials: this.get('credentials'),\n                headers\n            };\n            if (fetchOptions.method === 'post') {\n                fetchOptions.body = body;\n            }\n            const fetchOpts = this.get('fetchOptions') || {};\n            const addOpts = a.isFunction(fetchOpts) ? fetchOpts(fetchOptions) : fetchOptions;\n            this.onStart();\n            this.fetch(url, langx.mixin({},fetchOptions,addOpts)).then(\n                res => (res.status / 200 | 0) == 1 ? res.text() : res.text().then(text => Promise.reject(text))).then(text => this.onResponse(text, clb)).catch(err => this.onError(err, clbErr));\n        }\n    });\n});\ndefine('skylark-grapejs/storage_manager/index',[\n    \"skylark-langx/langx\",\n    './config/config',\n    './model/LocalStorage',\n    './model/RemoteStorage'\n], function (langx,defaults, LocalStorage, RemoteStorage) {\n    'use strict';\n    return () => {\n        var c = {};\n        let em;\n        var storages = {};\n        var defaultStorages = {};\n        const eventStart = 'storage:start';\n        const eventEnd = 'storage:end';\n        const eventError = 'storage:error';\n        return {\n            name: 'StorageManager',\n            init(config = {}) {\n                c = langx.mixin({},defaults,config);\n                em = c.em;\n                if (c._disable)\n                    c.type = 0;\n                defaultStorages.remote = new RemoteStorage(c);\n                defaultStorages.local = new LocalStorage(c);\n                c.currentStorage = c.type;\n                this.loadDefaultProviders().setCurrent(c.type);\n                return this;\n            },\n            getConfig() {\n                return c;\n            },\n            isAutosave() {\n                return !!c.autosave;\n            },\n            setAutosave(v) {\n                c.autosave = !!v;\n                return this;\n            },\n            getStepsBeforeSave() {\n                return c.stepsBeforeSave;\n            },\n            setStepsBeforeSave(v) {\n                c.stepsBeforeSave = v;\n                return this;\n            },\n            add(id, storage) {\n                storages[id] = storage;\n                return this;\n            },\n            get(id) {\n                return storages[id] || null;\n            },\n            getStorages() {\n                return storages;\n            },\n            getCurrent() {\n                return c.currentStorage;\n            },\n            setCurrent(id) {\n                c.currentStorage = id;\n                return this;\n            },\n            store(data, clb) {\n                const st = this.get(this.getCurrent());\n                const toStore = {};\n                this.onStart('store', data);\n                for (let key in data) {\n                    toStore[c.id + key] = data[key];\n                }\n                return st ? st.store(toStore, res => {\n                    clb && clb(res);\n                    this.onEnd('store', res);\n                }, err => {\n                    this.onError('store', err);\n                }) : null;\n            },\n            load(keys, clb) {\n                var st = this.get(this.getCurrent());\n                var keysF = [];\n                var result = {};\n                if (typeof keys === 'string')\n                    keys = [keys];\n                this.onStart('load', keys);\n                for (var i = 0, len = keys.length; i < len; i++) {\n                    keysF.push(c.id + keys[i]);\n                }\n                if (st) {\n                    st.load(keysF, res => {\n                        var reg = new RegExp('^' + c.id + '');\n                        for (var itemKey in res) {\n                            var itemKeyR = itemKey.replace(reg, '');\n                            result[itemKeyR] = res[itemKey];\n                        }\n                        clb && clb(result);\n                        this.onEnd('load', result);\n                    }, err => {\n                        clb && clb(result);\n                        this.onError('load', err);\n                    });\n                } else {\n                    clb && clb(result);\n                }\n            },\n            loadDefaultProviders() {\n                for (var id in defaultStorages)\n                    this.add(id, defaultStorages[id]);\n                return this;\n            },\n            getCurrentStorage() {\n                return this.get(this.getCurrent());\n            },\n            onStart(ctx, data) {\n                if (em) {\n                    em.trigger(eventStart);\n                    ctx && em.trigger(`${ eventStart }:${ ctx }`, data);\n                }\n            },\n            onEnd(ctx, data) {\n                if (em) {\n                    em.trigger(eventEnd);\n                    ctx && em.trigger(`${ eventEnd }:${ ctx }`, data);\n                }\n            },\n            onError(ctx, data) {\n                if (em) {\n                    em.trigger(eventError, data);\n                    ctx && em.trigger(`${ eventError }:${ ctx }`, data);\n                    this.onEnd(ctx, data);\n                }\n            },\n            canAutoload() {\n                const storage = this.getCurrentStorage();\n                return storage && this.getConfig().autoload;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/device_manager/config/config',[],function () {\n    'use strict';\n    return { devices: [] };\n});\ndefine('skylark-grapejs/device_manager/model/Device',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    return Backbone.Model.extend({\n        idAttribute: 'name',\n        defaults: {\n            name: '',\n            width: null,\n            height: '',\n            widthMedia: null,\n            priority: null\n        },\n        initialize() {\n            this.get('widthMedia') === null && this.set('widthMedia', this.get('width'));\n            this.get('width') === null && this.set('width', this.get('widthMedia'));\n            !this.get('priority') && this.set('priority', parseFloat(this.get('widthMedia')) || 0);\n            const toCheck = [\n                'width',\n                'height',\n                'widthMedia'\n            ];\n            toCheck.forEach(prop => this.checkUnit(prop));\n        },\n        checkUnit(prop) {\n            const pr = this.get(prop) || '';\n            const noUnit = (parseFloat(pr) || 0).toString() === pr.toString();\n            noUnit && this.set(prop, `${ pr }px`);\n        }\n    });\n});\ndefine('skylark-grapejs/device_manager/model/Devices',[\n    'skylark-backbone',\n    './Device'\n], function (Backbone, Device) {\n    'use strict';\n    return Backbone.Collection.extend({\n        model: Device,\n        comparator: (left, right) => {\n            const max = Number.MAX_VALUE;\n            return (right.get('priority') || max) - (left.get('priority') || max);\n        },\n        getSorted() {\n            return this.sort();\n        }\n    });\n});\ndefine('skylark-grapejs/device_manager/view/DevicesView',[\n    'skylark-underscore',\n    'skylark-backbone'\n], function (_, Backbone) {\n    'use strict';\n    return Backbone.View.extend({\n        template: _.template(`\n    <div class=\"<%= ppfx %>device-label\"><%= deviceLabel %></div>\n    <div class=\"<%= ppfx %>field <%= ppfx %>select\">\n      <span id=\"<%= ppfx %>input-holder\">\n        <select class=\"<%= ppfx %>devices\"></select>\n      </span>\n      <div class=\"<%= ppfx %>sel-arrow\">\n        <div class=\"<%= ppfx %>d-s-arrow\"></div>\n      </div>\n    </div>\n    <button style=\"display:none\" class=\"<%= ppfx %>add-trasp\">+</button>`),\n        events: { change: 'updateDevice' },\n        initialize(o) {\n            this.config = o.config || {};\n            this.em = this.config.em;\n            this.ppfx = this.config.pStylePrefix || '';\n            this.events['click .' + this.ppfx + 'add-trasp'] = this.startAdd;\n            this.listenTo(this.em, 'change:device', this.updateSelect);\n            this.delegateEvents();\n        },\n        startAdd() {\n        },\n        updateDevice() {\n            var em = this.em;\n            if (em) {\n                var devEl = this.devicesEl;\n                var val = devEl ? devEl.val() : '';\n                em.set('device', val);\n            }\n        },\n        updateSelect() {\n            var em = this.em;\n            var devEl = this.devicesEl;\n            if (em && em.getDeviceModel && devEl) {\n                var device = em.getDeviceModel();\n                var name = device ? device.get('name') : '';\n                devEl.val(name);\n            }\n        },\n        getOptions() {\n            const {collection, em} = this;\n            let result = '';\n            collection.each(device => {\n                const {name, id} = device.attributes;\n                const label = em && em.t && em.t(`deviceManager.devices.${ id }`) || name;\n                result += `<option value=\"${ name }\">${ label }</option>`;\n            });\n            return result;\n        },\n        render() {\n            const {em, ppfx, $el, el} = this;\n            $el.html(this.undefined({\n                ppfx,\n                deviceLabel: em && em.t && em.t('deviceManager.device')\n            }));\n            this.devicesEl = $el.find(`.${ ppfx }devices`);\n            this.devicesEl.append(this.getOptions());\n            el.className = `${ ppfx }devices-c`;\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/device_manager/index',[\n    \"skylark-langx/langx\",\n    './config/config',\n    './model/Devices',\n    './view/DevicesView'\n], function (langx,defaults, Devices, DevicesView) {\n    'use strict';\n    return () => {\n        var c = {};\n        var devices, view;\n        return {\n            name: 'DeviceManager',\n            init(config) {\n                c = config || {};\n                for (var name in defaults) {\n                    if (!(name in c))\n                        c[name] = defaults[name];\n                }\n                devices = new Devices();\n                (c.devices || []).forEach(dv => this.add(dv.id || dv.name, dv.width, dv));\n                view = new DevicesView({\n                    collection: devices,\n                    config: c\n                });\n                return this;\n            },\n            add(id, width, opts = {}) {\n                const obj = langx.mixin({},opts,{\n                    id,\n                    name: opts.name || id,\n                    width: width\n                });\n                return devices.add(obj);\n            },\n            get(name) {\n                return devices.get(name);\n            },\n            getAll() {\n                return devices;\n            },\n            render() {\n                return view.render().el;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/parser/config/config',[],function () {\n    'use strict';\n    return {\n        textTags: [\n            'br',\n            'b',\n            'i',\n            'u',\n            'a',\n            'ul',\n            'ol'\n        ],\n        parserCss: null,\n        parserHtml: null\n    };\n});\ndefine('skylark-grapejs/parser/model/BrowserParserCss',['skylark-underscore'], function (_) {\n    'use strict';\n    const atRules = {\n        4: 'media',\n        5: 'font-face',\n        6: 'page',\n        7: 'keyframes',\n        11: 'counter-style',\n        12: 'supports',\n        13: 'document',\n        14: 'font-feature-values',\n        15: 'viewport'\n    };\n    const atRuleKeys = _.keys(atRules);\n    const singleAtRules = [\n        '5',\n        '6',\n        '11',\n        '15'\n    ];\n    const singleAtRulesNames = [\n        'font-face',\n        'page',\n        'counter-style',\n        'viewport'\n    ];\n    const parseSelector = (str = '') => {\n        const add = [];\n        const result = [];\n        const sels = str.split(',');\n        for (var i = 0, len = sels.length; i < len; i++) {\n            var sel = sels[i].trim();\n            if (/^(\\.{1}[\\w\\-]+)+(:{1,2}[\\w\\-()]+)?$/gi.test(sel) || /^(#{1}[\\w\\-]+){1}(:{1,2}[\\w\\-()]+)?$/gi.test(sel)) {\n                var cls = sel.split('.').filter(Boolean);\n                result.push(cls);\n            } else {\n                add.push(sel);\n            }\n        }\n        return {\n            result,\n            add\n        };\n    };\n    const parseStyle = node => {\n        const stl = node.style;\n        const style = {};\n        for (var i = 0, len = stl.length; i < len; i++) {\n            const propName = stl[i];\n            const propValue = stl.getPropertyValue(propName);\n            const important = stl.getPropertyPriority(propName);\n            style[propName] = `${ propValue }${ important ? ` !${ important }` : '' }`;\n        }\n        return style;\n    };\n    const parseCondition = node => {\n        const condition = node.conditionText || node.media && node.media.mediaText || node.name || node.selectorText || '';\n        return condition.trim();\n    };\n    const createNode = (selectors, style = {}, opts = {}) => {\n        const node = {};\n        const selLen = selectors.length;\n        const lastClass = selectors[selLen - 1];\n        const stateArr = lastClass ? lastClass.split(/:(.+)/) : [];\n        const state = stateArr[1];\n        const {atRule, selectorsAdd, mediaText} = opts;\n        const singleAtRule = singleAtRulesNames.indexOf(atRule) >= 0;\n        singleAtRule && (node.singleAtRule = 1);\n        atRule && (node.atRuleType = atRule);\n        selectorsAdd && (node.selectorsAdd = selectorsAdd);\n        mediaText && (node.mediaText = mediaText);\n        if (state) {\n            selectors[selLen - 1] = stateArr[0];\n            node.state = state;\n            stateArr.splice(stateArr.length - 1, 1);\n        }\n        node.selectors = selectors;\n        node.style = style;\n        return node;\n    };\n    const parseNode = el => {\n        var result = [];\n        var nodes = el.cssRules || [];\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            const node = nodes[i];\n            const type = node.type.toString();\n            let singleAtRule = 0;\n            let atRuleType = '';\n            let condition = '';\n            let sels = node.selectorText || node.keyText;\n            const isSingleAtRule = singleAtRules.indexOf(type) >= 0;\n            if (isSingleAtRule) {\n                singleAtRule = 1;\n                atRuleType = atRules[type];\n                condition = parseCondition(node);\n            } else if (atRuleKeys.indexOf(type) >= 0) {\n                var subRules = parseNode(node);\n                condition = parseCondition(node);\n                for (var s = 0, lens = subRules.length; s < lens; s++) {\n                    var subRule = subRules[s];\n                    condition && (subRule.mediaText = condition);\n                    subRule.atRuleType = atRules[type];\n                }\n                result = result.concat(subRules);\n            }\n            if (!sels && !isSingleAtRule)\n                continue;\n            const style = parseStyle(node);\n            const selsParsed = parseSelector(sels);\n            const selsAdd = selsParsed.add;\n            sels = selsParsed.result;\n            let lastRule;\n            for (var k = 0, len3 = sels.length; k < len3; k++) {\n                const model = createNode(sels[k], style, { atRule: atRules[type] });\n                result.push(model);\n                lastRule = model;\n            }\n            if (selsAdd.length) {\n                var selsAddStr = selsAdd.join(', ');\n                if (lastRule) {\n                    lastRule.selectorsAdd = selsAddStr;\n                } else {\n                    const model = {\n                        selectors: [],\n                        selectorsAdd: selsAddStr,\n                        style\n                    };\n                    singleAtRule && (model.singleAtRule = singleAtRule);\n                    atRuleType && (model.atRuleType = atRuleType);\n                    condition && (model.mediaText = condition);\n                    result.push(model);\n                }\n            }\n        }\n        return result;\n    };\n    var parser =  str => {\n        const el = document.createElement('style');\n        el.innerHTML = str;\n        document.head.appendChild(el);\n        const sheet = el.sheet;\n        document.head.removeChild(el);\n        return parseNode(sheet);\n    };\n\n\n    parser.parseSelector = parseSelector;\n    parser.parseStyle = parseStyle;\n    parser.parseCondition = parseCondition;\n    parser.createNode = createNode;\n    parser.parseNode = parseNode;\n\n    return parser;\n});\ndefine('skylark-grapejs/parser/model/ParserCss',[\n    'skylark-underscore',\n    './BrowserParserCss',\n    './BrowserParserCss'\n], function (a, BrowserCssParser, b) {\n    'use strict';\n    return (config = {}) => ({\n        parse(str) {\n            let result = [];\n            const {parserCss, em = {}} = config;\n            const editor = em && em.get && em.get('Editor');\n            const nodes = parserCss ? parserCss(str, editor) : BrowserCssParser(str);\n            nodes.forEach(node => result = result.concat(this.checkNode(node)));\n            return result;\n        },\n        checkNode(node) {\n            const {selectors, style} = node;\n            if (a.isString(selectors)) {\n                const nodes = [];\n                const selsParsed = b.parseSelector(selectors);\n                const classSets = selsParsed.result;\n                const selectorsAdd = selsParsed.add.join(', ');\n                const opts = {\n                    atRule: node.atRule,\n                    mediaText: node.params\n                };\n                if (classSets.length) {\n                    classSets.forEach(classSet => {\n                        nodes.push(b.createNode(classSet, style, opts));\n                    });\n                } else {\n                    nodes.push(b.createNode([], style, opts));\n                }\n                if (selectorsAdd) {\n                    const lastNode = nodes[nodes.length - 1];\n                    lastNode.selectorsAdd = selectorsAdd;\n                }\n                node = nodes;\n            }\n            return node;\n        }\n    });\n});\ndefine('skylark-grapejs/parser/model/ParserHtml',['skylark-underscore'], function (a) {\n    'use strict';\n    return config => {\n        var TEXT_NODE = 'span';\n        var c = config;\n        var modelAttrStart = 'data-gjs-';\n        return {\n            compTypes: '',\n            modelAttrStart,\n            splitPropsFromAttr(attr = {}) {\n                const props = {};\n                const attrs = {};\n                a.each(attr, (value, key) => {\n                    if (key.indexOf(this.modelAttrStart) === 0) {\n                        const modelAttr = key.replace(modelAttrStart, '');\n                        const valueLen = value.length;\n                        const valStr = value && a.isString(value);\n                        const firstChar = valStr && value.substr(0, 1);\n                        const lastChar = valStr && value.substr(valueLen - 1);\n                        value = value === 'true' ? true : value;\n                        value = value === 'false' ? false : value;\n                        try {\n                            value = firstChar == '{' && lastChar == '}' || firstChar == '[' && lastChar == ']' ? JSON.parse(value) : value;\n                        } catch (e) {\n                        }\n                        props[modelAttr] = value;\n                    } else {\n                        attrs[key] = value;\n                    }\n                });\n                return {\n                    props,\n                    attrs\n                };\n            },\n            parseStyle(str) {\n                var result = {};\n                var decls = str.split(';');\n                for (var i = 0, len = decls.length; i < len; i++) {\n                    var decl = decls[i].trim();\n                    if (!decl)\n                        continue;\n                    var prop = decl.split(':');\n                    result[prop[0].trim()] = prop.slice(1).join(':').trim();\n                }\n                return result;\n            },\n            parseClass(str) {\n                const result = [];\n                const cls = str.split(' ');\n                for (let i = 0, len = cls.length; i < len; i++) {\n                    const cl = cls[i].trim();\n                    if (!cl)\n                        continue;\n                    result.push(cl);\n                }\n                return result;\n            },\n            parseNode(el) {\n                const result = [];\n                const nodes = el.childNodes;\n                for (var i = 0, len = nodes.length; i < len; i++) {\n                    const node = nodes[i];\n                    const attrs = node.attributes || [];\n                    const attrsLen = attrs.length;\n                    const nodePrev = result[result.length - 1];\n                    const nodeChild = node.childNodes.length;\n                    const ct = this.compTypes;\n                    let model = {};\n                    if (ct) {\n                        let obj = '';\n                        let type = node.getAttribute && node.getAttribute(`${ modelAttrStart }type`);\n                        if (type) {\n                            model = { type };\n                        } else {\n                            for (let it = 0; it < ct.length; it++) {\n                                const compType = ct[it];\n                                obj = compType.model.isComponent(node);\n                                if (obj) {\n                                    if (typeof obj !== 'object') {\n                                        obj = { type: compType.id };\n                                    }\n                                    break;\n                                }\n                            }\n                            model = obj;\n                        }\n                    }\n                    if (!model.tagName) {\n                        model.tagName = node.tagName ? node.tagName.toLowerCase() : '';\n                    }\n                    if (attrsLen) {\n                        model.attributes = {};\n                    }\n                    for (let j = 0; j < attrsLen; j++) {\n                        const nodeName = attrs[j].nodeName;\n                        let nodeValue = attrs[j].nodeValue;\n                        if (nodeName == 'style') {\n                            model.style = this.parseStyle(nodeValue);\n                        } else if (nodeName == 'class') {\n                            model.classes = this.parseClass(nodeValue);\n                        } else if (nodeName == 'contenteditable') {\n                            continue;\n                        } else if (nodeName.indexOf(modelAttrStart) === 0) {\n                            const modelAttr = nodeName.replace(modelAttrStart, '');\n                            const valueLen = nodeValue.length;\n                            const firstChar = nodeValue && nodeValue.substr(0, 1);\n                            const lastChar = nodeValue && nodeValue.substr(valueLen - 1);\n                            nodeValue = nodeValue === 'true' ? true : nodeValue;\n                            nodeValue = nodeValue === 'false' ? false : nodeValue;\n                            try {\n                                nodeValue = firstChar == '{' && lastChar == '}' || firstChar == '[' && lastChar == ']' ? JSON.parse(nodeValue) : nodeValue;\n                            } catch (e) {\n                            }\n                            model[modelAttr] = nodeValue;\n                        } else {\n                            model.attributes[nodeName] = nodeValue;\n                        }\n                    }\n                    if (nodeChild && !model.components) {\n                        const firstChild = node.childNodes[0];\n                        if (nodeChild === 1 && firstChild.nodeType === 3) {\n                            !model.type && (model.type = 'text');\n                            model.content = firstChild.nodeValue;\n                        } else {\n                            model.components = this.parseNode(node);\n                        }\n                    }\n                    if (model.type == 'textnode') {\n                        if (nodePrev && nodePrev.type == 'textnode') {\n                            nodePrev.content += model.content;\n                            continue;\n                        }\n                        if (!config.keepEmptyTextNodes) {\n                            const content = node.nodeValue;\n                            if (content != ' ' && !content.trim()) {\n                                continue;\n                            }\n                        }\n                    }\n                    const comps = model.components;\n                    if (!model.type && comps) {\n                        let allTxt = 1;\n                        let foundTextNode = 0;\n                        for (let ci = 0; ci < comps.length; ci++) {\n                            const comp = comps[ci];\n                            const cType = comp.type;\n                            if ([\n                                    'text',\n                                    'textnode'\n                                ].indexOf(cType) < 0 && c.textTags.indexOf(comp.tagName) < 0) {\n                                allTxt = 0;\n                                break;\n                            }\n                            if (cType == 'textnode') {\n                                foundTextNode = 1;\n                            }\n                        }\n                        if (allTxt && foundTextNode) {\n                            model.type = 'text';\n                        }\n                    }\n                    if (!model.tagName && model.type != 'textnode') {\n                        continue;\n                    }\n                    result.push(model);\n                }\n                return result;\n            },\n            parse(str, parserCss) {\n                var config = c.em && c.em.get('Config') || {};\n                var res = {\n                    html: '',\n                    css: ''\n                };\n                var el = document.createElement('div');\n                el.innerHTML = str;\n                var scripts = el.querySelectorAll('script');\n                var i = scripts.length;\n                if (!config.allowScripts) {\n                    while (i--)\n                        scripts[i].parentNode.removeChild(scripts[i]);\n                }\n                if (parserCss) {\n                    var styleStr = '';\n                    var styles = el.querySelectorAll('style');\n                    var j = styles.length;\n                    while (j--) {\n                        styleStr = styles[j].innerHTML + styleStr;\n                        styles[j].parentNode.removeChild(styles[j]);\n                    }\n                    if (styleStr)\n                        res.css = parserCss.parse(styleStr);\n                }\n                var result = this.parseNode(el);\n                if (result.length == 1)\n                    result = result[0];\n                res.html = result;\n                return res;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/parser/index',[\n    \"skylark-langx/langx\",\n    './config/config',\n    './model/ParserCss',\n    './model/ParserHtml'\n], function (langx,defaults, parserCss, parserHtml) {\n    'use strict';\n    return () => {\n        let conf = {};\n        let pHtml, pCss;\n        return {\n            compTypes: '',\n            parserCss: null,\n            parserHtml: null,\n            name: 'Parser',\n            getConfig() {\n                return conf;\n            },\n            init(config = {}) {\n                conf = langx.mixin({},defaults,config);\n                conf.Parser = this;\n                pHtml = new parserHtml(conf);\n                pCss = new parserCss(conf);\n                this.em = conf.em;\n                this.parserCss = pCss;\n                this.parserHtml = pHtml;\n                return this;\n            },\n            parseHtml(str) {\n                const {em, compTypes} = this;\n                pHtml.compTypes = em ? em.get('DomComponents').getTypes() : compTypes;\n                return pHtml.parse(str, pCss);\n            },\n            parseCss(str) {\n                return pCss.parse(str);\n            }\n        };\n    };\n});\ndefine('utils/mixins',['skylark-underscore'], function (_) {\n    'use strict';\n    const elProt = window.Element.prototype;\n    const matches = elProt.matches || elProt.webkitMatchesSelector || elProt.mozMatchesSelector || elProt.msMatchesSelector;\n    const appendStyles = (styles, opts = {}) => {\n        const stls = _.isArray(styles) ? [...styles] : [styles];\n        if (stls.length) {\n            const href = stls.shift();\n            if (href && (!opts.unique || !document.querySelector(`link[href=\"${ href }\"]`))) {\n                const {head} = document;\n                const link = document.createElement('link');\n                link.href = href;\n                link.rel = 'stylesheet';\n                if (opts.prepand) {\n                    head.insertBefore(link, head.firstChild);\n                } else {\n                    head.appendChild(link);\n                }\n            }\n            appendStyles(stls);\n        }\n    };\n    const shallowDiff = (objOrig, objNew) => {\n        const result = {};\n        const keysNew = _.keys(objNew);\n        for (let prop in objOrig) {\n            if (objOrig.hasOwnProperty(prop)) {\n                const origValue = objOrig[prop];\n                const newValue = objNew[prop];\n                if (keysNew.indexOf(prop) >= 0) {\n                    if (origValue !== newValue) {\n                        result[prop] = newValue;\n                    }\n                } else {\n                    result[prop] = null;\n                }\n            }\n        }\n        for (let prop in objNew) {\n            if (objNew.hasOwnProperty(prop)) {\n                if (_.isUndefined(objOrig[prop])) {\n                    result[prop] = objNew[prop];\n                }\n            }\n        }\n        return result;\n    };\n    const on = (el, ev, fn) => {\n        ev = ev.split(/\\s+/);\n        el = el instanceof Array ? el : [el];\n        for (let i = 0; i < ev.length; ++i) {\n            el.forEach(elem => elem.addEventListener(ev[i], fn));\n        }\n    };\n    const off = (el, ev, fn) => {\n        ev = ev.split(/\\s+/);\n        el = el instanceof Array ? el : [el];\n        for (let i = 0; i < ev.length; ++i) {\n            el.forEach(elem => elem.removeEventListener(ev[i], fn));\n        }\n    };\n    const getUnitFromValue = value => {\n        return value.replace(parseFloat(value), '');\n    };\n    const upFirst = value => value[0].toUpperCase() + value.toLowerCase().slice(1);\n    const camelCase = value => {\n        const values = value.split('-').filter(String);\n        return values[0].toLowerCase() + values.slice(1).map(upFirst);\n    };\n    const normalizeFloat = (value, step = 1, valueDef = 0) => {\n        let stepDecimals = 0;\n        if (isNaN(value))\n            return valueDef;\n        value = parseFloat(value);\n        if (Math.floor(value) !== value) {\n            const side = step.toString().split('.')[1];\n            stepDecimals = side ? side.length : 0;\n        }\n        return stepDecimals ? parseFloat(value.toFixed(stepDecimals)) : value;\n    };\n    const hasDnd = em => {\n        return 'draggable' in document.createElement('i') && (em ? em.get('Config').nativeDnD : 1);\n    };\n    const getElement = el => {\n        if (_.isElement(el) || isTextNode(el)) {\n            return el;\n        } else if (el && el.getEl) {\n            return el.getEl();\n        }\n    };\n    const isTextNode = el => el && el.nodeType === 3;\n    const isCommentNode = el => el && el.nodeType === 8;\n    const isTaggableNode = el => el && !isTextNode(el) && !isCommentNode(el);\n    const getModel = (el, $) => {\n        let model = el;\n        _.isElement(el) && (model = $(el).data('model'));\n        return model;\n    };\n    const getElRect = el => {\n        const def = {\n            top: 0,\n            left: 0,\n            width: 0,\n            height: 0\n        };\n        if (!el)\n            return def;\n        let rectText;\n        if (isTextNode(el)) {\n            const range = document.createRange();\n            range.selectNode(el);\n            rectText = range.getBoundingClientRect();\n            range.detach();\n        }\n        return rectText || (el.getBoundingClientRect ? el.getBoundingClientRect() : def);\n    };\n    const getPointerEvent = ev => ev.touches && ev.touches[0] ? ev.touches[0] : ev;\n    const getKeyCode = ev => ev.which || ev.keyCode;\n    const getKeyChar = ev => String.fromCharCode(getKeyCode(ev));\n    const isEscKey = ev => getKeyCode(ev) === 27;\n    const capitalize = str => str && str.charAt(0).toUpperCase() + str.substring(1);\n    const isComponent = obj => obj && obj.toHTML;\n    const isRule = obj => obj && obj.toCSS;\n    const getViewEl = el => el.__gjsv;\n    const setViewEl = (el, view) => {\n        el.__gjsv = view;\n    };\n    return {\n        isCommentNode: isCommentNode,\n        isTaggableNode: isTaggableNode,\n        on,\n        off,\n        hasDnd,\n        upFirst,\n        matches,\n        getModel,\n        getElRect,\n        camelCase,\n        isTextNode,\n        getKeyCode,\n        getKeyChar,\n        isEscKey,\n        getElement,\n        shallowDiff,\n        normalizeFloat,\n        getPointerEvent,\n        getUnitFromValue,\n        capitalize,\n        getViewEl,\n        setViewEl,\n        appendStyles,\n        isComponent,\n        isRule\n    };\n});\ndefine('skylark-grapejs/selector_manager/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: 'clm-',\n        appendTo: '',\n        selectors: [],\n        states: [\n            { name: 'hover' },\n            { name: 'active' },\n            { name: 'nth-of-type(2n)' }\n        ],\n        escapeName: 0,\n        selectedName: 0,\n        iconAdd: '<svg viewBox=\"0 0 24 24\"><path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"></path></svg>',\n        iconSync: '<svg viewBox=\"0 0 24 24\"><path d=\"M12 18c-3.31 0-6-2.69-6-6 0-1 .25-1.97.7-2.8L5.24 7.74A7.93 7.93 0 0 0 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4m0-11V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1-.25 1.97-.7 2.8l1.46 1.46A7.93 7.93 0 0 0 20 12c0-4.42-3.58-8-8-8z\"></path></svg>',\n        iconTagOn: '<svg viewBox=\"0 0 24 24\"><path d=\"M19 19H5V5h10V3H5c-1.11 0-2 .89-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-8h-2m-11.09-.92L6.5 11.5 11 16 21 6l-1.41-1.42L11 13.17l-3.09-3.09z\"></path></svg>',\n        iconTagOff: '<svg viewBox=\"0 0 24 24\"><path d=\"M19 3H5c-1.11 0-2 .89-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5a2 2 0 0 0-2-2m0 2v14H5V5h14z\"></path></svg>',\n        iconTagRemove: '<svg viewBox=\"0 0 24 24\"><path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\"></path></svg>',\n        render: 0,\n        componentFirst: 0\n    };\n});\ndefine('skylark-grapejs/selector_manager/model/Selector',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    const TYPE_CLASS = 1;\n    const TYPE_ID = 2;\n    const Selector = Backbone.Model.extend({\n        idAttribute: 'name',\n        defaults: {\n            name: '',\n            label: '',\n            type: TYPE_CLASS,\n            active: true,\n            private: false,\n            protected: false\n        },\n        initialize(props, opts = {}) {\n            const {\n                config = {}\n            } = opts;\n            const name = this.get('name');\n            const label = this.get('label');\n            if (!name) {\n                this.set('name', label);\n            } else if (!label) {\n                this.set('label', name);\n            }\n            const namePreEsc = this.get('name');\n            const {escapeName} = config;\n            const nameEsc = escapeName ? escapeName(namePreEsc) : Selector.escapeName(namePreEsc);\n            this.set('name', nameEsc);\n        },\n        getFullName(opts = {}) {\n            const {escape} = opts;\n            const name = this.get('name');\n            let init = '';\n            switch (this.get('type')) {\n            case TYPE_CLASS:\n                init = '.';\n                break;\n            case TYPE_ID:\n                init = '#';\n                break;\n            }\n            return init + (escape ? escape(name) : name);\n        }\n    }, {\n        TYPE_CLASS,\n        TYPE_ID,\n        escapeName(name) {\n            return `${ name }`.trim().replace(/([^a-z0-9\\w-\\:]+)/gi, '-');\n        }\n    });\n    return Selector;\n});\ndefine('skylark-grapejs/selector_manager/model/Selectors',[\n    'skylark-underscore',\n    'skylark-backbone',\n    './Selector'\n], function (a, Backbone, Selector) {\n    'use strict';\n    return Backbone.Collection.extend({\n        model: Selector,\n        modelId: attr => `${ attr.name }_${ attr.type || Selector.TYPE_CLASS }`,\n        getStyleable() {\n            return a.filter(this.models, item => item.get('active') && !item.get('private'));\n        },\n        getValid({noDisabled} = {}) {\n            return a.filter(this.models, item => !item.get('private')).undefined(item => noDisabled ? item.get('active') : 1);\n        },\n        getFullString(collection, opts = {}) {\n            const result = [];\n            const coll = collection || this;\n            coll.forEach(selector => result.push(selector.getFullName(opts)));\n            return result.join('').trim();\n        }\n    });\n});\ndefine('skylark-grapejs/selector_manager/view/ClassTagView',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    const inputProp = 'contentEditable';\n    return Backbone.View.extend({\n        template() {\n            const {pfx, model, config} = this;\n            const label = model.get('label') || '';\n            return `\n      <span id=\"${ pfx }checkbox\" class=\"${ pfx }tag-status\" data-tag-status></span>\n      <span id=\"${ pfx }tag-label\" data-tag-name>${ label }</span>\n      <span id=\"${ pfx }close\" class=\"${ pfx }tag-close\" data-tag-remove>\n        ${ config.iconTagRemove }\n      </span>\n    `;\n        },\n        events: {\n            'click [data-tag-remove]': 'removeTag',\n            'click [data-tag-status]': 'changeStatus',\n            'dblclick [data-tag-name]': 'startEditTag',\n            'focusout [data-tag-name]': 'endEditTag'\n        },\n        initialize(o) {\n            const config = o.config || {};\n            this.config = config;\n            this.coll = o.coll || null;\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.em = config.em;\n            this.listenTo(this.model, 'change:active', this.updateStatus);\n        },\n        getInputEl() {\n            if (!this.inputEl) {\n                this.inputEl = this.el.querySelector('[data-tag-name]');\n            }\n            return this.inputEl;\n        },\n        startEditTag() {\n            const {em} = this;\n            const inputEl = this.getInputEl();\n            inputEl[inputProp] = true;\n            inputEl.focus();\n            em && em.setEditing(1);\n        },\n        endEditTag() {\n            const model = this.model;\n            const inputEl = this.getInputEl();\n            const label = inputEl.textContent;\n            const em = this.em;\n            const sm = em && em.get('SelectorManager');\n            inputEl[inputProp] = false;\n            em && em.setEditing(0);\n            if (sm) {\n                const name = sm.escapeName(label);\n                if (sm.get(name)) {\n                    inputEl.innerText = model.get('label');\n                } else {\n                    model.set({\n                        name,\n                        label\n                    });\n                }\n            }\n        },\n        changeStatus() {\n            const {model} = this;\n            model.set('active', !model.get('active'));\n        },\n        removeTag() {\n            const {em, model} = this;\n            const targets = em && em.getSelectedAll();\n            targets.forEach(sel => {\n                !model.get('protected') && sel && sel.getSelectors().remove(model);\n            });\n        },\n        updateStatus() {\n            const {model, $el, config} = this;\n            const {iconTagOn, iconTagOff} = config;\n            const $chk = $el.find('[data-tag-status]');\n            if (model.get('active')) {\n                $chk.html(iconTagOn);\n                $el.removeClass('opac50');\n            } else {\n                $chk.html(iconTagOff);\n                $el.addClass('opac50');\n            }\n        },\n        render() {\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            this.$el.html(this.template());\n            this.$el.attr('class', `${ pfx }tag ${ ppfx }three-bg`);\n            this.updateStatus();\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/selector_manager/view/ClassTagsView',[\n    'skylark-underscore',\n    'skylark-backbone',\n    './ClassTagView'\n], function (a, Backbone, ClassTagView) {\n    'use strict';\n    return Backbone.View.extend({\n        template({labelInfo, labelStates, labelHead, iconSync, iconAdd, pfx, ppfx}) {\n            return `\n    <div id=\"${ pfx }up\" class=\"${ pfx }header\">\n      <div id=\"${ pfx }label\" class=\"${ pfx }header-label\">${ labelHead }</div>\n      <div id=\"${ pfx }status-c\" class=\"${ pfx }header-status\">\n        <span id=\"${ pfx }input-c\" data-states-c>\n          <div class=\"${ ppfx }field ${ ppfx }select\">\n            <span id=\"${ ppfx }input-holder\">\n              <select id=\"${ pfx }states\" data-states>\n                <option value=\"\">${ labelStates }</option>\n              </select>\n            </span>\n            <div class=\"${ ppfx }sel-arrow\">\n              <div class=\"${ ppfx }d-s-arrow\"></div>\n            </div>\n          </div>\n        </span>\n      </div>\n    </div>\n    <div id=\"${ pfx }tags-field\" class=\"${ ppfx }field\">\n      <div id=\"${ pfx }tags-c\" data-selectors></div>\n      <input id=\"${ pfx }new\" data-input/>\n      <span id=\"${ pfx }add-tag\" class=\"${ pfx }tags-btn ${ pfx }tags-btn__add\" data-add>\n        ${ iconAdd }\n      </span>\n      <span class=\"${ pfx }tags-btn ${ pfx }tags-btn__sync\" style=\"display: none\" data-sync-style>\n        ${ iconSync }\n      </span>\n    </div>\n    <div class=\"${ pfx }sels-info\">\n      <div class=\"${ pfx }label-sel\">${ labelInfo }:</div>\n      <div class=\"${ pfx }sels\" data-selected></div>\n      <div style=\"clear:both\"></div>\n    </div>`;\n        },\n        events: {\n            'change [data-states]': 'stateChanged',\n            'click [data-add]': 'startNewTag',\n            'focusout [data-input]': 'endNewTag',\n            'keyup [data-input]': 'onInputKeyUp',\n            'click [data-sync-style]': 'syncStyle'\n        },\n        initialize(o = {}) {\n            this.config = o.config || {};\n            this.pfx = this.config.stylePrefix || '';\n            this.ppfx = this.config.pStylePrefix || '';\n            this.className = this.pfx + 'tags';\n            this.stateInputId = this.pfx + 'states';\n            this.stateInputC = this.pfx + 'input-c';\n            this.states = this.config.states || [];\n            const {em} = this.config;\n            const emitter = this.getStyleEmitter();\n            const coll = this.collection;\n            this.target = this.config.em;\n            this.em = em;\n            const toList = 'component:toggled component:update:classes';\n            const toListCls = 'component:update:classes change:state';\n            this.listenTo(em, toList, this.componentChanged);\n            this.listenTo(emitter, 'styleManager:update', this.componentChanged);\n            this.listenTo(em, toListCls, this.__handleStateChange);\n            this.listenTo(em, 'styleable:change change:device', this.checkSync);\n            this.listenTo(coll, 'add', this.addNew);\n            this.listenTo(coll, 'reset', this.renderClasses);\n            this.listenTo(coll, 'remove', this.tagRemoved);\n            this.delegateEvents();\n        },\n        syncStyle() {\n            const {em} = this;\n            const target = this.getTarget();\n            const cssC = em.get('CssComposer');\n            const opts = { noDisabled: 1 };\n            const selectors = this.getCommonSelectors({ opts });\n            const state = em.get('state');\n            const mediaText = em.getCurrentMedia();\n            const ruleComponents = [];\n            const rule = cssC.get(selectors, state, mediaText) || cssC.add(selectors, state, mediaText);\n            let style;\n            this.getTargets().forEach(target => {\n                const ruleComponent = cssC.getIdRule(target.getId(), {\n                    state,\n                    mediaText\n                });\n                style = ruleComponent.getStyle();\n                ruleComponent.setStyle({});\n                ruleComponents.push(ruleComponent);\n            });\n            style && rule.addStyle(style);\n            em.trigger('component:toggled');\n            em.trigger('component:sync-style', {\n                component: target,\n                selectors,\n                mediaText,\n                rule,\n                ruleComponents,\n                state\n            });\n        },\n        getStyleEmitter() {\n            const {em} = this;\n            const sm = em && em.get('StyleManager');\n            const emitter = sm && sm.getEmitter();\n            return emitter || {};\n        },\n        tagRemoved(model) {\n            this.updateStateVis();\n        },\n        getStateOptions() {\n            const {states, em} = this;\n            let result = [];\n            states.forEach(state => result.push(`<option value=\"${ state.name }\">${ em.t(`selectorManager.states.${ state.name }`) || state.label || state.name }</option>`));\n            return result.join('');\n        },\n        addNew(model) {\n            this.addToClasses(model);\n        },\n        startNewTag() {\n            this.$addBtn.css({ display: 'none' });\n            this.$input.show().focus();\n        },\n        endNewTag() {\n            this.$addBtn.css({ display: '' });\n            this.$input.hide().val('');\n        },\n        onInputKeyUp(e) {\n            if (e.keyCode === 13)\n                this.addNewTag(this.$input.val());\n            else if (e.keyCode === 27)\n                this.endNewTag();\n        },\n        checkStates() {\n            const state = this.em.getState();\n            const statesEl = this.getStates();\n            statesEl && statesEl.val(state);\n        },\n        componentChanged: a.debounce(function ({targets} = {}) {\n            this.updateSelection(targets);\n        }),\n        updateSelection(targets) {\n            let trgs = targets || this.getTargets();\n            trgs = a.isArray(trgs) ? trgs : [trgs];\n            let selectors = [];\n            if (trgs && trgs.length) {\n                selectors = this.getCommonSelectors({ targets: trgs });\n                this.checkSync({ validSelectors: selectors });\n            }\n            this.collection.reset(selectors);\n            this.updateStateVis(trgs);\n            return selectors;\n        },\n        getCommonSelectors({targets, opts = {}} = {}) {\n            const trgs = targets || this.getTargets();\n            const selectors = trgs.map(tr => tr.getSelectors && tr.getSelectors().getValid(opts)).filter(i => i);\n            return this._commonSelectors(...selectors);\n        },\n        _commonSelectors(...args) {\n            if (!args.length)\n                return [];\n            if (args.length === 1)\n                return args[0];\n            if (args.length === 2)\n                return args[0].filter(item => args[1].indexOf(item) >= 0);\n            return args.slice(1).reduce((acc, item) => this._commonSelectors(acc, item), args[0]);\n        },\n        checkSync: a.debounce(function () {\n            const {$btnSyncEl, config, collection} = this;\n            const target = this.getTarget();\n            let hasStyle;\n            if (target && config.componentFirst && collection.length) {\n                const style = target.getStyle();\n                hasStyle = !a.isEmpty(style);\n            }\n            $btnSyncEl && $btnSyncEl[hasStyle ? 'show' : 'hide']();\n        }),\n        getTarget() {\n            return this.target.getSelected();\n        },\n        getTargets() {\n            return this.target.getSelectedAll();\n        },\n        updateStateVis(target) {\n            const em = this.em;\n            const avoidInline = em && em.getConfig('avoidInlineStyle');\n            const display = this.collection.length || avoidInline ? '' : 'none';\n            this.getStatesC().css('display', display);\n            this.updateSelector(target);\n        },\n        __handleStateChange() {\n            this.updateSelector(this.getTargets());\n        },\n        updateSelector(targets) {\n            const elSel = this.el.querySelector('[data-selected]');\n            const result = [];\n            let trgs = targets || this.getTargets();\n            trgs = a.isArray(trgs) ? trgs : [trgs];\n            trgs.forEach(target => result.push(this.__getName(target)));\n            elSel && (elSel.innerHTML = result.join(', '));\n            this.checkStates();\n        },\n        __getName(target) {\n            const {pfx, config, em} = this;\n            const {selectedName, componentFirst} = config;\n            let result;\n            if (a.isString(target)) {\n                result = `<span class=\"${ pfx }sel-gen\">${ target }</span>`;\n            } else {\n                if (!target || !target.get)\n                    return;\n                const selectors = target.getSelectors().getStyleable();\n                const state = em.get('state');\n                const idRes = target.getId ? `<span class=\"${ pfx }sel-cmp\">${ target.getName() }</span><span class=\"${ pfx }sel-id\">#${ target.getId() }</span>` : '';\n                result = this.collection.getFullString(selectors);\n                result = result ? `<span class=\"${ pfx }sel-rule\">${ result }</span>` : target.get('selectorsAdd') || idRes;\n                result = componentFirst && idRes ? idRes : result;\n                result += state ? `<span class=\"${ pfx }sel-state\">:${ state }</span>` : '';\n                result = selectedName ? selectedName({\n                    result,\n                    state,\n                    target\n                }) : result;\n            }\n            return result && `<span class=\"${ pfx }sel\">${ result }</span>`;\n        },\n        stateChanged(ev) {\n            const {em} = this;\n            const {value} = ev.target;\n            em.set('state', value);\n        },\n        addNewTag(label) {\n            const {em} = this;\n            if (!label.trim())\n                return;\n            if (em) {\n                const sm = em.get('SelectorManager');\n                const model = sm.add({ label });\n                this.getTargets().forEach(target => {\n                    target.getSelectors().add(model);\n                    this.collection.add(model);\n                    this.updateStateVis();\n                });\n            }\n            this.endNewTag();\n        },\n        addToClasses(model, fragmentEl = null) {\n            const fragment = fragmentEl;\n            const classes = this.getClasses();\n            const rendered = new ClassTagView({\n                model,\n                config: this.config,\n                coll: this.collection\n            }).render().el;\n            fragment ? fragment.appendChild(rendered) : classes.append(rendered);\n            return rendered;\n        },\n        renderClasses() {\n            const frag = document.createDocumentFragment();\n            const classes = this.getClasses();\n            classes.empty();\n            this.collection.each(model => this.addToClasses(model, frag));\n            classes.append(frag);\n        },\n        getClasses() {\n            return this.$el.find('[data-selectors]');\n        },\n        getStates() {\n            if (!this.$states) {\n                const el = this.$el.find('[data-states]');\n                this.$states = el[0] && el;\n            }\n            return this.$states;\n        },\n        getStatesC() {\n            if (!this.$statesC)\n                this.$statesC = this.$el.find('#' + this.stateInputC);\n            return this.$statesC;\n        },\n        render() {\n            const {em, pfx, ppfx, config, $el, el} = this;\n            const {render, iconSync, iconAdd} = config;\n            const tmpOpts = {\n                iconSync,\n                iconAdd,\n                labelHead: em.t('selectorManager.label'),\n                labelStates: em.t('selectorManager.emptyState'),\n                labelInfo: em.t('selectorManager.selected'),\n                ppfx,\n                pfx,\n                el\n            };\n            $el.html(this.template(tmpOpts));\n            const renderRes = render && render(tmpOpts);\n            renderRes && renderRes !== el && $el.empty().append(renderRes);\n            this.$input = $el.find('[data-input]');\n            this.$addBtn = $el.find('[data-add]');\n            this.$classes = $el.find('#' + pfx + 'tags-c');\n            this.$btnSyncEl = $el.find('[data-sync-style]');\n            this.$input.hide();\n            const statesEl = this.getStates();\n            statesEl && statesEl.append(this.getStateOptions());\n            this.renderClasses();\n            $el.attr('class', `${ this.className } ${ ppfx }one-bg ${ ppfx }two-color`);\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/selector_manager/index',[\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    '../../utils/mixins',\n    './config/config',\n    './model/Selector',\n    './model/Selectors',\n    './view/ClassTagsView'\n], function (langx,_, b, defaults, Selector, Selectors, ClassTagsView) {\n    'use strict';\n    const isId = str => _.isString(str) && str[0] == '#';\n    const isClass = str => _.isString(str) && str[0] == '.';\n    return config => {\n        var c = config || {};\n        var selectors;\n        return {\n            Selector,\n            Selectors,\n            name: 'SelectorManager',\n            getConfig() {\n                return c;\n            },\n            init(conf = {}) {\n                c = langx.mxinin({},defaults,conf);\n                const em = c.em;\n                const ppfx = c.pStylePrefix;\n                this.em = em;\n                if (ppfx) {\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                }\n                this.selectorTags = new ClassTagsView({\n                    collection: new Selectors([], {\n                        em,\n                        config: c\n                    }),\n                    config: c\n                });\n                selectors = new Selectors(c.selectors);\n                selectors.on('add', model => em.trigger('selector:add', model));\n                selectors.on('remove', model => em.trigger('selector:remove', model));\n                selectors.on('change', model => em.trigger('selector:update', model, model.previousAttributes(), model.changedAttributes()));\n                em.on('change:state', (m, value) => em.trigger('selector:state', value));\n                return this;\n            },\n            postRender() {\n                const elTo = this.getConfig().appendTo;\n                if (elTo) {\n                    const el = _.isElement(elTo) ? elTo : document.querySelector(elTo);\n                    el.appendChild(this.render([]));\n                }\n            },\n            select(value, opts = {}) {\n                const targets = Array.undefined(value) ? value : [value];\n                const toSelect = this.em.get('StyleManager').setTarget(targets, opts);\n                const res = toSelect.filter(i => i).map(sel => b.isComponent(sel) ? sel : b.isRule(sel) && !sel.get('selectorsAdd') ? sel : sel.getSelectorsString());\n                this.selectorTags.componentChanged({ targets: res });\n                return this;\n            },\n            setState(value) {\n                this.em.setState(value);\n                return this;\n            },\n            getState() {\n                return this.em.setState();\n            },\n            addSelector(name, opt = {}) {\n                let opts = langx.clone(opt);\n                if (_.isObject(name)) {\n                    opts = name;\n                } else {\n                    opts.name = name;\n                }\n                if (isId(opts.name)) {\n                    opts.name = opts.name.substr(1);\n                    opts.type = Selector.TYPE_ID;\n                } else if (isClass(opts.name)) {\n                    opts.name = opts.name.substr(1);\n                }\n                if (opts.label && !opts.name) {\n                    opts.name = this.escapeName(opts.label);\n                }\n                const cname = opts.name;\n                const selector = cname ? this.get(cname, opts.type) : selectors.where(opts)[0];\n                if (!selector) {\n                    return selectors.add(opts, { config: c });\n                }\n                return selector;\n            },\n            getSelector(name, type = Selector.TYPE_CLASS) {\n                if (isId(name)) {\n                    name = name.substr(1);\n                    type = Selector.TYPE_ID;\n                } else if (isClass(name)) {\n                    name = name.substr(1);\n                }\n                return selectors.where({\n                    name,\n                    type\n                })[0];\n            },\n            add(name, opts = {}) {\n                if (_.isArray(name)) {\n                    return name.map(item => this.addSelector(item, opts));\n                } else {\n                    return this.addSelector(name, opts);\n                }\n            },\n            addClass(classes) {\n                const added = [];\n                if (_.isString(classes)) {\n                    classes = classes.trim().split(' ');\n                }\n                classes.forEach(name => added.push(this.addSelector(name)));\n                return added;\n            },\n            get(name, type) {\n                if (_.isArray(name)) {\n                    const result = [];\n                    const selectors = name.map(item => this.getSelector(item)).filter(item => item);\n                    selectors.forEach(item => result.indexOf(item) < 0 && result.push(item));\n                    return result;\n                } else {\n                    return this.getSelector(name, type);\n                }\n            },\n            getAll() {\n                return selectors;\n            },\n            escapeName(name) {\n                const {escapeName} = c;\n                return escapeName ? escapeName(name) : Selector.escapeName(name);\n            },\n            render(selectors) {\n                if (selectors) {\n                    this.selectorTags = new ClassTagsView({\n                        collection: new Selectors(selectors),\n                        config: c\n                    });\n                    return this.selectorTags.render().el;\n                } else\n                    return this.selectorTags.render().el;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/style_manager/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: 'sm-',\n        sectors: [],\n        appendTo: '',\n        hideNotStylable: true,\n        highlightChanged: true,\n        highlightComputed: true,\n        showComputed: true,\n        clearProperties: 0,\n        avoidComputed: [\n            'width',\n            'height'\n        ]\n    };\n});\ndefine('skylark-grapejs/domain_abstract/model/TypeableCollection',[\n    'skylark-underscore',\n    'skylark-backbone'\n], function (a, Backbone) {\n    'use strict';\n    const Model = Backbone.Model;\n    const View = Backbone.View;\n    return {\n        types: [],\n        initialize(models, opts) {\n            this.model = (attrs = {}, options = {}) => {\n                let Model, View, type;\n                if (attrs && attrs.type) {\n                    const baseType = this.getBaseType();\n                    type = this.getType(attrs.type);\n                    Model = type ? type.model : baseType.model;\n                    View = type ? type.view : baseType.view;\n                } else {\n                    const typeFound = this.recognizeType(attrs);\n                    type = typeFound.type;\n                    Model = type.model;\n                    View = type.view;\n                    attrs = typeFound.attributes;\n                }\n                const model = new Model(attrs, options);\n                model.typeView = View;\n                return model;\n            };\n            const init = this.init && this.init.bind(this);\n            init && init();\n        },\n        recognizeType(value) {\n            const types = this.getTypes();\n            for (let i = 0; i < types.length; i++) {\n                const type = types[i];\n                let typeFound = type.isType(value);\n                typeFound = typeof typeFound == 'boolean' && typeFound ? { type: type.id } : typeFound;\n                if (typeFound) {\n                    return {\n                        type,\n                        attributes: typeFound\n                    };\n                }\n            }\n            return {\n                type: this.getBaseType(),\n                attributes: value\n            };\n        },\n        getBaseType() {\n            const types = this.getTypes();\n            return types[types.length - 1];\n        },\n        getTypes() {\n            return this.types;\n        },\n        getType(id) {\n            const types = this.getTypes();\n            for (let i = 0; i < types.length; i++) {\n                const type = types[i];\n                if (type.id === id) {\n                    return type;\n                }\n            }\n        },\n        addType(id, definition) {\n            const type = this.getType(id);\n            const baseType = this.getBaseType();\n            const ModelInst = type ? type.model : baseType.model;\n            const ViewInst = type ? type.view : baseType.view;\n            let {model, view, isType} = definition;\n            model = model instanceof Model || a.isFunction(model) ? model : ModelInst.extend(model || {});\n            view = view instanceof View || a.isFunction(view) ? view : ViewInst.extend(view || {});\n            if (type) {\n                type.model = model;\n                type.view = view;\n                type.isType = isType || type.isType;\n            } else {\n                definition.id = id;\n                definition.model = model;\n                definition.view = view;\n                definition.isType = isType || function (value) {\n                    if (value && value.type == id) {\n                        return true;\n                    }\n                };\n                this.getTypes().unshift(definition);\n            }\n        }\n    };\n});\ndefine('skylark-grapejs/style_manager/model/Property',[\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins'\n], function (langx,Backbone, a, b) {\n    'use strict';\n    const Property = Backbone.Model.extend({\n        defaults: {\n            name: '',\n            property: '',\n            type: '',\n            defaults: '',\n            info: '',\n            value: '',\n            icon: '',\n            functionName: '',\n            status: '',\n            visible: true,\n            fixedValues: [\n                'initial',\n                'inherit'\n            ],\n            full: 0,\n            important: 0,\n            toRequire: 0,\n            requires: null,\n            requiresParent: null\n        },\n        initialize(props = {}, opts = {}) {\n            const id = this.get('id') || '';\n            const name = this.get('name') || '';\n            !this.get('property') && this.set('property', (name || id).replace(/ /g, '-'));\n            const prop = this.get('property');\n            !this.get('id') && this.set('id', prop);\n            !name && this.set('name', b.capitalize(prop).replace(/-/g, ' '));\n            Property.callInit(this, props, opts);\n        },\n        init() {\n        },\n        clearValue(opts = {}) {\n            this.set({\n                value: undefined,\n                status: ''\n            }, opts);\n            return this;\n        },\n        setValue(value, complete = 1, opts = {}) {\n            const parsed = this.parseValue(value);\n            this.set(parsed, langx.mixin({},opts,{\n                avoidStore: !complete\n            }));\n        },\n        setValueFromInput(value, complete, opts = {}) {\n            this.setValue(value, complete, langx.mixin({},opts,{\n                fromInput: 1\n            }));\n        },\n        parseValue(value, opts = {}) {\n            const result = { value };\n            const imp = '!important';\n            if (a.isString(value) && value.indexOf(imp) !== -1) {\n                result.value = value.replace(imp, '').trim();\n                result.important = 1;\n            }\n            if (!this.get('functionName') && !opts.complete) {\n                return result;\n            }\n            const args = [];\n            let valueStr = `${ result.value }`;\n            let start = valueStr.indexOf('(') + 1;\n            let end = valueStr.lastIndexOf(')');\n            const functionName = valueStr.substring(0, start - 1);\n            if (functionName)\n                result.functionName = functionName;\n            args.push(start);\n            if (end >= 0) {\n                args.push(end);\n            }\n            result.value = String.prototype.substring.apply(valueStr, args);\n            if (opts.numeric) {\n                const num = parseFloat(result.value);\n                result.unit = result.value.replace(num, '');\n                result.value = num;\n            }\n            return result;\n        },\n        splitValues(values, separator = ',') {\n            const res = [];\n            const op = '(';\n            const cl = ')';\n            let curr = '';\n            let acc = 0;\n            (values || '').split('').forEach(str => {\n                if (str == op) {\n                    acc++;\n                    curr = curr + op;\n                } else if (str == cl && acc > 0) {\n                    acc--;\n                    curr = curr + cl;\n                } else if (str === separator && acc == 0) {\n                    res.push(curr);\n                    curr = '';\n                } else {\n                    curr = curr + str;\n                }\n            });\n            curr !== '' && res.push(curr);\n            return res.map(i => i.trim());\n        },\n        getDefaultValue() {\n            return this.get('defaults');\n        },\n        getFullValue(val) {\n            const fn = this.get('functionName');\n            const def = this.getDefaultValue();\n            let value = a.isUndefined(val) ? this.get('value') : val;\n            const hasValue = !a.isUndefined(value) && value !== '';\n            if (value && def && value === def) {\n                return def;\n            }\n            if (fn && hasValue) {\n                value = `${ fn }(${ value })`;\n            }\n            if (hasValue && this.get('important')) {\n                value = `${ value } !important`;\n            }\n            return value || '';\n        }\n    }, {\n        callParentInit(property, ctx, props, opts = {}) {\n            property.prototype.initialize.apply(ctx, [\n                props,\n                langx.mixin({},opts,{\n                    skipInit: 1\n                })\n            ]);\n        },\n        callInit(context, props, opts = {}) {\n            !opts.skipInit && context.init(props, opts);\n        }\n    });\n    return Property;\n});\ndefine('skylark-grapejs/style_manager/model/PropertyComposite',[\n    \"skylark-langx/langx\",\n    './Property'\n], function (langx,Property) {\n    'use strict';\n    return Property.extend({\n        defaults: {\n            ...Property.prototype.defaults,\n            detached: 0,\n            properties: [],\n            separator: ' '\n        },\n        initialize(props = {}, opts = {}) {\n            Property.callParentInit(Property, this, props, opts);\n            const properties = this.get('properties') || [];\n            const Properties = require('./Properties').default;\n            this.set('properties', new Properties(properties));\n            this.listenTo(this, 'change:value', this.updateValues);\n            Property.callInit(this, props, opts);\n        },\n        clearValue(opts = {}) {\n            this.get('properties').each(property => property.clearValue());\n            return Property.prototype.clearValue.apply(this, arguments);\n        },\n        updateValues() {\n            const values = this.getFullValue().split(this.getSplitSeparator());\n            this.get('properties').each((property, i) => {\n                const len = values.length;\n                const value = values[i] || values[i % len + (len != 1 && len % 2 ? 1 : 0)];\n            });\n        },\n        getSplitSeparator() {\n            return new RegExp(`${ this.get('separator') }(?![^\\\\(]*\\\\))`);\n        },\n        getDefaultValue(defaultProps) {\n            let value = this.get('defaults');\n            if (value && !defaultProps) {\n                return value;\n            }\n            value = '';\n            const properties = this.get('properties');\n            properties.each((prop, index) => value += `${ prop.getDefaultValue() } `);\n            return value.trim();\n        },\n        getFullValue() {\n            if (this.get('detached')) {\n                return '';\n            }\n            return this.get('properties').getFullValue();\n        },\n        getPropertyAt(index) {\n            return this.get('properties').at(index);\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/model/Layer',[\n    'skylark-backbone',\n    './Properties'\n], function (Backbone, Properties) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            index: '',\n            value: '',\n            values: {},\n            active: false,\n            preview: false,\n            properties: []\n        },\n        initialize() {\n            const prp = this.get('properties');\n            var value = this.get('value');\n            this.set('properties', prp instanceof Properties ? prp : new Properties(prp));\n            const props = this.get('properties');\n            props.forEach(this.onPropAdd, this);\n            this.listenTo(props, 'add', this.onPropAdd);\n            if (!value) {\n                var val = '';\n                var values = this.get('values');\n                for (var prop in values) {\n                    val += ' ' + values[prop];\n                }\n                this.set('value', val.trim());\n            }\n        },\n        onPropAdd(prop) {\n            const coll = this.collection;\n            prop.parent = coll && coll.property;\n        },\n        getPropertyAt(index) {\n            return this.get('properties').at(index);\n        },\n        getPropertyValue(property) {\n            let result = '';\n            this.get('properties').each(prop => {\n                if (prop.get('property') == property) {\n                    result = prop.getFullValue();\n                }\n            });\n            return result;\n        },\n        getFullValue() {\n            let result = [];\n            this.get('properties').each(prop => result.push(prop.getFullValue()));\n            return result.join(' ').trim();\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/model/Layers',[\n    'skylark-underscore',\n    'skylark-backbone',\n    './Layer'\n], function (a, Backbone, Layer) {\n    'use strict';\n    return Backbone.Collection.extend({\n        model: Layer,\n        initialize() {\n            this.idx = 1;\n            this.on('add', this.onAdd);\n            this.on('reset', this.onReset);\n        },\n        onAdd(model, c, opts) {\n            if (!opts.noIncrement)\n                model.set('index', this.idx++);\n            opts.active && this.active(this.indexOf(model));\n        },\n        onReset() {\n            this.idx = 1;\n        },\n        getSeparator() {\n            const {property} = this;\n            return property ? property.get('layerSeparator') : ', ';\n        },\n        getLayersFromValue(value) {\n            const layers = [];\n            value.replace(/\\(([\\w\\s,.]*)\\)/g, match => {\n                var cleaned = match.replace(/,\\s*/g, ',');\n                value = value.replace(match, cleaned);\n            });\n            const layerValues = value ? value.split(this.getSeparator()) : [];\n            layerValues.forEach(layerValue => {\n                layers.push({ properties: this.properties.parseValue(layerValue) });\n            });\n            return layers;\n        },\n        getLayersFromStyle(styleObj) {\n            const layers = [];\n            const properties = this.properties;\n            const propNames = properties.pluck('property');\n            properties.each(propModel => {\n                const style = styleObj[propModel.get('property')];\n                const values = style ? style.split(', ') : [];\n                values.forEach((value, i) => {\n                    value = propModel.parseValue(value.trim()).value;\n                    const layer = layers[i];\n                    const propertyObj = {\n                        ...propModel.attributes,\n                        ...{ value }\n                    };\n                    if (layer) {\n                        layer.properties.push(propertyObj);\n                    } else {\n                        layers[i] = { properties: [propertyObj] };\n                    }\n                });\n            });\n            layers.forEach(layer => {\n                const layerProprs = layer.properties.map(prop => prop.property);\n                properties.each(propModel => {\n                    const propertyName = propModel.get('property');\n                    if (layerProprs.indexOf(propertyName) < 0) {\n                        layer.properties.push({ ...propModel.attributes });\n                    }\n                });\n            });\n            return layers;\n        },\n        active(index) {\n            this.each(layer => layer.set('active', 0));\n            const layer = this.at(index);\n            layer && layer.set('active', 1);\n        },\n        getFullValue() {\n            let result = [];\n            this.each(layer => result.push(layer.getFullValue()));\n            return result.join(this.getSeparator());\n        },\n        getPropertyValues(property, defValue) {\n            const result = [];\n            this.each(layer => {\n                const value = layer.getPropertyValue(property);\n                value ? result.push(value) : !a.isUndefined(defValue) && result.push(defValue);\n            });\n            return result.join(', ');\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/model/PropertyStack',[\n    \"skylark-langx/langx\",\n    './PropertyComposite',\n    './Layers'\n], function (langx,Property, Layers) {\n    'use strict';\n    return Property.extend({\n        defaults: langx.mixin({},\n            ...Property.prototype.defaults,{\n            layers: [],\n            layerSeparator: ', ',\n            prepend: 0,\n            preview: 0\n        }),\n        initialize(props = {}, opts = {}) {\n            Property.callParentInit(Property, this, props, opts);\n            const layers = this.get('layers');\n            const layersColl = new Layers(layers);\n            layersColl.property = this;\n            layersColl.properties = this.get('properties');\n            this.set('layers', layersColl);\n            Property.callInit(this, props, opts);\n        },\n        getLayers() {\n            return this.get('layers');\n        },\n        getCurrentLayer() {\n            return this.getLayers().filter(layer => layer.get('active'))[0];\n        },\n        getFullValue() {\n            return this.get('detached') ? '' : this.get('layers').getFullValue();\n        },\n        getValueFromStyle(styles = {}) {\n            const layers = this.getLayers().getLayersFromStyle(styles);\n            return new Layers(layers).getFullValue();\n        },\n        clearValue() {\n            this.getLayers().reset();\n            return Property.prototype.clearValue.apply(this, arguments);\n        },\n        getLayersFromTarget(target) {\n            return;\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/view/PropertyView',[\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins'\n], function (Backbone, a, b) {\n    'use strict';\n    const clearProp = 'data-clear-style';\n    return Backbone.View.extend({\n        template(model) {\n            const pfx = this.pfx;\n            return `\n      <div class=\"${ pfx }label\">\n        ${ this.templateLabel(model) }\n      </div>\n      <div class=\"${ this.ppfx }fields\">\n        ${ this.templateInput(model) }\n      </div>\n    `;\n        },\n        templateLabel(model) {\n            const {pfx, em} = this;\n            const {parent} = model;\n            const {icon = '', info = '', id, name} = model.attributes;\n            const label = em && em.t(`styleManager.properties.${ id }`) || name;\n            return `\n      <span class=\"${ pfx }icon ${ icon }\" title=\"${ info }\">\n        ${ label }\n      </span>\n      ${ !parent ? `<b class=\"${ pfx }clear\" ${ clearProp }>&Cross;</b>` : '' }\n    `;\n        },\n        templateInput(model) {\n            return `\n      <div class=\"${ this.ppfx }field\">\n        <input placeholder=\"${ model.getDefaultValue() }\"/>\n      </div>\n    `;\n        },\n        events: {\n            change: 'inputValueChanged',\n            [`click [${ clearProp }]`]: 'clear'\n        },\n        initialize(o = {}) {\n            a.bindAll(this, 'targetUpdated');\n            this.config = o.config || {};\n            const em = this.config.em;\n            this.em = em;\n            this.pfx = this.config.stylePrefix || '';\n            this.ppfx = this.config.pStylePrefix || '';\n            this.target = o.target || {};\n            this.propTarget = o.propTarget || {};\n            this.onChange = o.onChange;\n            this.onInputRender = o.onInputRender || {};\n            this.customValue = o.customValue || {};\n            const model = this.model;\n            this.property = model.get('property');\n            this.input = null;\n            const pfx = this.pfx;\n            this.inputHolderId = '#' + pfx + 'input-holder';\n            this.sector = model.collection && model.collection.sector;\n            model.view = this;\n            if (!model.get('value')) {\n                model.set('value', model.getDefaultValue());\n            }\n            em && em.on(`update:component:style:${ this.property }`, this.targetUpdated);\n            const requires = model.get('requires');\n            requires && Object.keys(requires).forEach(property => {\n                em && em.on(`component:styleUpdate:${ property }`, this.targetUpdated);\n            });\n            this.listenTo(this.propTarget, 'update styleManager:update', this.targetUpdated);\n            this.listenTo(model, 'destroy remove', this.remove);\n            this.listenTo(model, 'change:value', this.modelValueChanged);\n            this.listenTo(model, 'targetUpdated', this.targetUpdated);\n            this.listenTo(model, 'change:visible', this.updateVisibility);\n            this.listenTo(model, 'change:status', this.updateStatus);\n            this.listenTo(model, 'change:name change:className change:full', this.render);\n            const init = this.init && this.init.bind(this);\n            init && init();\n        },\n        updateStatus() {\n            const {model} = this;\n            const status = model.get('status');\n            const parent = model.parent;\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            const config = this.config;\n            const updatedCls = `${ ppfx }four-color`;\n            const computedCls = `${ ppfx }color-warn`;\n            const labelEl = this.$el.children(`.${ pfx }label`);\n            const clearStyleEl = this.getClearEl();\n            const clearStyle = clearStyleEl ? clearStyleEl.style : {};\n            labelEl.removeClass(`${ updatedCls } ${ computedCls }`);\n            clearStyle.display = 'none';\n            switch (status) {\n            case 'updated':\n                !parent && labelEl.addClass(updatedCls);\n                if (config.clearProperties) {\n                    clearStyle.display = 'inline';\n                }\n                break;\n            case 'computed':\n                labelEl.addClass(computedCls);\n                break;\n            }\n        },\n        clear(ev) {\n            ev && ev.stopPropagation();\n            this.model.clearValue();\n            setTimeout(() => this.targetUpdated());\n        },\n        getClearEl() {\n            if (!this.clearEl) {\n                this.clearEl = this.el.querySelector(`[${ clearProp }]`);\n            }\n            return this.clearEl;\n        },\n        getTarget() {\n            return this.getTargetModel();\n        },\n        getTargets() {\n            const {targets} = this.propTarget;\n            return targets || [this.getTarget()];\n        },\n        getTargetModel() {\n            return this.propTarget && this.propTarget.model;\n        },\n        getHelperModel() {\n            return this.propTarget && this.propTarget.helper;\n        },\n        inputValueChanged(e) {\n            e && e.stopPropagation();\n            this.model.setValue(this.getInputValue(), 1, { fromInput: 1 });\n            this.elementUpdated();\n        },\n        elementUpdated() {\n            this.setStatus('updated');\n        },\n        setStatus(value) {\n            this.model.set('status', value);\n            const parent = this.model.parent;\n            parent && value == 'updated' && parent.set('status', value);\n        },\n        emitUpdateTarget: a.debounce(function () {\n            const em = this.config.em;\n            em && em.trigger('styleManager:update:target', this.getTarget());\n        }),\n        _getTargetData() {\n            const {model, config} = this;\n            const targetValue = this.getTargetValue({ ignoreDefault: 1 });\n            const defaultValue = model.getDefaultValue();\n            const computedValue = this.getComputedValue();\n            let value = '';\n            let status = '';\n            if (targetValue) {\n                value = targetValue;\n                if (config.highlightChanged) {\n                    status = 'updated';\n                }\n            } else if (computedValue && config.showComputed && computedValue != defaultValue) {\n                value = computedValue;\n                if (config.highlightComputed) {\n                    status = 'computed';\n                }\n            } else {\n                value = defaultValue;\n                status = '';\n            }\n            return {\n                value,\n                status,\n                targetValue,\n                defaultValue,\n                computedValue\n            };\n        },\n        targetUpdated(mod, val, opts = {}) {\n            this.emitUpdateTarget();\n            if (!this.checkVisibility()) {\n                return;\n            }\n            const config = this.config;\n            const em = config.em;\n            const {model} = this;\n            const property = model.get('property');\n            \n            //const {\n            //    status,\n            //    value,\n            //    ...targetData\n            //} = this._getTargetData();\n\n            const targetData = this._getTargetData()\n            this.setStatus(targetData.status);\n            model.setValue(targetData.value, 0, {\n                fromTarget: 1,\n                ...opts\n            });\n            if (em) {\n                const data = {\n                //    status,\n                //    value,\n                    ...targetData\n                };\n                em.trigger('styleManager:change', this, property, targetData.value, data);\n                em.trigger(`styleManager:change:${ property }`, this, targetData.value, data);\n                this._emitUpdate(data);\n            }\n        },\n        _emitUpdate(addData = {}) {\n            const {em, model} = this;\n            if (!em)\n                return;\n            const property = model.get('property');\n            const data = {\n                ...this._getEventData(),\n                ...addData\n            };\n            const {id} = data;\n            em.trigger('style:update', data);\n            em.trigger(`style:update:${ property }`, data);\n            property !== id && em.trigger(`style:update:${ id }`, data);\n        },\n        _getEventData() {\n            const {model} = this;\n            return {\n                propertyView: this,\n                targets: this.getTargets(),\n                value: model.getFullValue(),\n                property: model,\n                id: model.get('id'),\n                name: model.get('property')\n            };\n        },\n        checkVisibility() {\n            var result = 1;\n            if (this.config.hideNotStylable) {\n                if (!this.isTargetStylable() || !this.isComponentStylable()) {\n                    this.hide();\n                    result = 0;\n                } else {\n                    this.show();\n                }\n                if (this.sector) {\n                    this.sector.trigger('updateVisibility');\n                }\n            }\n            return result;\n        },\n        getTargetValue(opts = {}) {\n            let result;\n            const {model} = this;\n            const target = this.getTargetModel();\n            const customFetchValue = this.customValue;\n            if (!target) {\n                return result;\n            }\n            result = target.getStyle()[model.get('property')];\n            if (!result && !opts.ignoreDefault) {\n                result = model.getDefaultValue();\n            }\n            if (typeof customFetchValue == 'function' && !opts.ignoreCustomValue) {\n                let index = model.collection.indexOf(model);\n                let customValue = customFetchValue(this, index, result);\n                if (customValue) {\n                    result = customValue;\n                }\n            }\n            return result;\n        },\n        getComputedValue() {\n            const target = this.propTarget;\n            const computed = target.computed || {};\n            const computedDef = target.computedDefault || {};\n            const avoid = this.config.avoidComputed || [];\n            const property = this.model.get('property');\n            const notToSkip = avoid.indexOf(property) < 0;\n            const value = computed[property];\n            const valueDef = computedDef[b.camelCase(property)];\n            return computed && notToSkip && valueDef !== value && value || '';\n        },\n        getInputValue() {\n            const input = this.getInputEl();\n            return input ? input.value : '';\n        },\n        modelValueChanged(e, val, opt = {}) {\n            const model = this.model;\n            const value = model.getFullValue();\n            if (!opt.fromInput) {\n                this.setValue(value);\n            }\n            this.getTargets().forEach(target => this.__updateTarget(target, opt));\n        },\n        __updateTarget(target, opt = {}) {\n            const {model} = this;\n            const {em} = this.config;\n            const prop = model.get('property');\n            const value = model.getFullValue();\n            const onChange = this.onChange;\n            if (!target || !this.isTargetStylable(target) || !this.isComponentStylable()) {\n                return;\n            }\n            if (!opt.fromTarget) {\n                if (onChange && !opt.fromParent) {\n                    onChange(target, this, opt);\n                } else {\n                    this.updateTargetStyle(value, null, {\n                        ...opt,\n                        target\n                    });\n                }\n            }\n            const component = em && em.getSelected();\n            if (em && component) {\n                !opt.noEmit && em.trigger('component:update', component);\n                em.trigger('component:styleUpdate', component, prop);\n                em.trigger(`component:styleUpdate:${ prop }`, component);\n            }\n            this._emitUpdate();\n        },\n        updateTargetStyle(value, name = '', opts = {}) {\n            const property = name || this.model.get('property');\n            const target = opts.target || this.getTarget();\n            const style = target.getStyle();\n            if (value) {\n                style[property] = value;\n            } else {\n                delete style[property];\n            }\n            target.setStyle(style, opts);\n            const helper = this.getHelperModel();\n            helper && helper.setStyle(style, opts);\n        },\n        isTargetStylable(target) {\n            const trg = target || this.getTarget();\n            const model = this.model;\n            const id = model.get('id');\n            const property = model.get('property');\n            const toRequire = model.get('toRequire');\n            const unstylable = trg.get('unstylable');\n            const stylableReq = trg.get('stylable-require');\n            const requires = model.get('requires');\n            const requiresParent = model.get('requiresParent');\n            const sectors = this.sector ? this.sector.collection : null;\n            const selected = this.em ? this.em.getSelected() : null;\n            let stylable = trg.get('stylable');\n            if (a.isArray(stylable)) {\n                stylable = stylable.indexOf(property) >= 0;\n            }\n            if (a.isArray(unstylable)) {\n                stylable = unstylable.indexOf(property) < 0;\n            }\n            if (toRequire) {\n                stylable = !target || stylableReq && (stylableReq.indexOf(id) >= 0 || stylableReq.indexOf(property) >= 0);\n            }\n            if (sectors && requires) {\n                const properties = Object.keys(requires);\n                sectors.undefined(sector => {\n                    sector.get('properties').undefined(model => {\n                        if (a.includes(properties, model.id)) {\n                            const values = requires[model.id];\n                            stylable = stylable && a.includes(values, model.get('value'));\n                        }\n                    });\n                });\n            }\n            if (requiresParent) {\n                const parent = selected && selected.parent();\n                const parentEl = parent && parent.getEl();\n                if (parentEl) {\n                    const styles = window.getComputedStyle(parentEl);\n                    a.each(requiresParent, (values, property) => {\n                        stylable = stylable && styles[property] && a.includes(values, styles[property]);\n                    });\n                } else {\n                    stylable = false;\n                }\n            }\n            return stylable;\n        },\n        isComponentStylable() {\n            const em = this.em;\n            const component = em && em.getSelected();\n            if (!component) {\n                return true;\n            }\n            return this.isTargetStylable(component);\n        },\n        setRawValue(value) {\n            this.setValue(this.model.parseValue(value));\n        },\n        setValue(value) {\n            const model = this.model;\n            let val = a.isUndefined(value) ? model.getDefaultValue() : value;\n            const input = this.getInputEl();\n            input && (input.value = val);\n        },\n        getInputEl() {\n            if (!this.input) {\n                this.input = this.el.querySelector('input');\n            }\n            return this.input;\n        },\n        updateVisibility() {\n            this.el.style.display = this.model.get('visible') ? 'block' : 'none';\n        },\n        show() {\n            this.model.set('visible', 1);\n        },\n        hide() {\n            this.model.set('visible', 0);\n        },\n        cleanValue() {\n            this.setValue('');\n        },\n        clearCached() {\n            this.clearEl = null;\n            this.input = null;\n            this.$input = null;\n        },\n        render() {\n            this.clearCached();\n            const pfx = this.pfx;\n            const model = this.model;\n            const el = this.el;\n            const property = model.get('property');\n            const full = model.get('full');\n            const cls = model.get('className') || '';\n            const className = `${ pfx }property`;\n            el.innerHTML = this.template(model);\n            el.className = `${ className } ${ pfx }${ model.get('type') } ${ className }__${ property } ${ cls }`.trim();\n            el.className += full ? ` ${ className }--full` : '';\n            this.updateStatus();\n            const onRender = this.onRender && this.onRender.bind(this);\n            onRender && onRender();\n            this.setValue(model.get('value'), { targetUpdate: 1 });\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/view/PropertyCompositeView',[\n    'skylark-backbone',\n    './PropertyView'\n], function (Backbone, PropertyView) {\n    'use strict';\n    const $ = Backbone.$;\n    return PropertyView.extend({\n        templateInput() {\n            const pfx = this.pfx;\n            return `\n      <div class=\"${ pfx }field ${ pfx }composite\">\n        <span id=\"${ pfx }input-holder\"></span>\n      </div>\n    `;\n        },\n        inputValueChanged(...args) {\n            if (!this.model.get('detached')) {\n                PropertyView.prototype.inputValueChanged.apply(this, args);\n            }\n        },\n        clear(e) {\n            const props = this.properties;\n            props && props.forEach(propView => propView.clear());\n            PropertyView.prototype.clear.apply(this, arguments);\n        },\n        onRender() {\n            var model = this.model;\n            var props = model.get('properties') || [];\n            var self = this;\n            this.properties = [];\n            if (props.length) {\n                if (!this.$input) {\n                    this.$input = $('<input type=\"hidden\" value=\"0\">');\n                    this.input = this.$input.get(0);\n                }\n                if (!this.props) {\n                    this.props = model.get('properties');\n                }\n                if (!this.$props) {\n                    this.props.each(function (prop, index) {\n                        if (prop && prop.get('type') == 'composite') {\n                            this.props.remove(prop);\n                            console.warn('Nested composite types not yet allowed.');\n                        }\n                        prop.parent = model;\n                    }, this);\n                    var PropertiesView = require('./PropertiesView').default;\n                    var propsView = new PropertiesView(this.getPropsConfig());\n                    this.$props = propsView.render().$el;\n                    this.properties = propsView.properties;\n                    this.$el.find(`#${ this.pfx }input-holder`).append(this.$props);\n                }\n            }\n        },\n        getPropsConfig(opts) {\n            var that = this;\n            const model = this.model;\n            var result = {\n                config: {\n                    ...this.config,\n                    highlightComputed: 0\n                },\n                collection: this.props,\n                target: this.target,\n                propTarget: this.propTarget,\n                onChange(el, view, opts) {\n                    model.set('value', model.getFullValue(), opts);\n                },\n                customValue(property, mIndex) {\n                    return that.valueOnIndex(mIndex, property);\n                }\n            };\n            if (model.get('detached')) {\n                delete result.onChange;\n            }\n            return result;\n        },\n        valueOnIndex(index, view) {\n            let value;\n            const targetValue = this.getTargetValue({ ignoreDefault: 1 });\n            if (targetValue) {\n                const values = targetValue.split(this.model.getSplitSeparator());\n                value = values[index];\n            } else {\n                value = view && view.getTargetValue({\n                    ignoreCustomValue: 1,\n                    ignoreDefault: 1\n                });\n            }\n            return value;\n        },\n        clearCached() {\n            PropertyView.prototype.clearCached.apply(this, arguments);\n            this.$input = null;\n            this.props = null;\n            this.$props = null;\n        }\n    });\n});\ndefine('skylark-grapejs/utils/dom',['skylark-underscore'], function (_) {\n    'use strict';\n    const KEY_TAG = 'tag';\n    const KEY_ATTR = 'attributes';\n    const KEY_CHILD = 'children';\n    const motionsEv = 'transitionend oTransitionEnd transitionend webkitTransitionEnd';\n    const empty = node => {\n        while (node.firstChild)\n            node.removeChild(node.firstChild);\n    };\n    const replaceWith = (oldEl, newEl) => {\n        oldEl.parentNode.replaceChild(newEl, oldEl);\n    };\n    const appendAtIndex = (parent, child, index) => {\n        const {childNodes} = parent;\n        const total = childNodes.length;\n        const at = _.isUndefined(index) ? total : index;\n        if (_.isString(child)) {\n            parent.insertAdjacentHTML('beforeEnd', child);\n            child = parent.lastChild;\n            parent.removeChild(child);\n        }\n        if (at >= total) {\n            parent.appendChild(child);\n        } else {\n            parent.insertBefore(child, childNodes[at]);\n        }\n    };\n    const append = (parent, child) => appendAtIndex(parent, child);\n    const createEl = (tag, attrs = '', child) => {\n        const el = document.createElement(tag);\n        attrs && _.each(attrs, (value, key) => el.setAttribute(key, value));\n        if (child) {\n            if (_.isString(child))\n                el.innerHTML = child;\n            else\n                el.appendChild(child);\n        }\n        return el;\n    };\n    const createCustomEvent = (e, cls) => {\n        let oEvent;\n        try {\n            oEvent = new window[cls](e.type, e);\n        } catch (e) {\n            oEvent = document.createEvent(cls);\n            oEvent.initEvent(e.type, true, true);\n        }\n        oEvent.keyCodeVal = e.keyCode;\n        oEvent._parentEvent = e;\n        [\n            'keyCode',\n            'which'\n        ].forEach(prop => {\n            Object.defineProperty(oEvent, prop, {\n                get() {\n                    return this.keyCodeVal;\n                }\n            });\n        });\n        return oEvent;\n    };\n    const appendVNodes = (node, vNodes = []) => {\n        const vNodesArr = Array.isArray(vNodes) ? vNodes : [vNodes];\n        vNodesArr.forEach(vnode => {\n            const tag = vnode[KEY_TAG] || 'div';\n            const attr = vnode[KEY_ATTR] || {};\n            const el = document.createElement(tag);\n            _.each(attr, (value, key) => {\n                el.setAttribute(key, value);\n            });\n            node.appendChild(el);\n        });\n    };\n    return {\n        motionsEv: motionsEv,\n        empty: empty,\n        replaceWith: replaceWith,\n        appendAtIndex: appendAtIndex,\n        append: append,\n        createEl: createEl,\n        createCustomEvent: createCustomEvent,\n        appendVNodes: appendVNodes\n    };\n});\ndefine('skylark-grapejs/style_manager/view/PropertiesView',[\n    'skylark-backbone',\n    '../../utils/dom'\n], function (Backbone, a) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize(o) {\n            this.config = o.config || {};\n            this.pfx = this.config.stylePrefix || '';\n            this.target = o.target || {};\n            this.propTarget = o.propTarget || {};\n            this.onChange = o.onChange;\n            this.onInputRender = o.onInputRender || {};\n            this.customValue = o.customValue || {};\n            this.properties = [];\n            const coll = this.collection;\n            this.listenTo(coll, 'add', this.addTo);\n            this.listenTo(coll, 'reset', this.render);\n        },\n        addTo(model, coll, opts) {\n            this.add(model, null, opts);\n        },\n        add(model, frag, opts = {}) {\n            const appendTo = frag || this.el;\n            const view = new model.typeView({\n                model,\n                name: model.get('name'),\n                id: this.pfx + model.get('property'),\n                target: this.target,\n                propTarget: this.propTarget,\n                onChange: this.onChange,\n                onInputRender: this.onInputRender,\n                config: this.config\n            });\n            if (model.get('type') != 'composite') {\n                view.customValue = this.customValue;\n            }\n            view.render();\n            const rendered = view.el;\n            this.properties.push(view);\n            view.updateVisibility();\n            a.appendAtIndex(appendTo, rendered, opts.at);\n        },\n        render() {\n            const {$el} = this;\n            this.properties = [];\n            const fragment = document.createDocumentFragment();\n            this.collection.each(model => this.add(model, fragment));\n            $el.empty();\n            $el.append(fragment);\n            $el.attr('class', `${ this.pfx }properties`);\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/view/LayerView',[\n    'skylark-underscore',\n    'skylark-backbone',\n    './PropertiesView'\n], function (a, Backbone, PropertiesView) {\n    'use strict';\n    return Backbone.View.extend({\n        events: {\n            click: 'active',\n            'click [data-close-layer]': 'remove',\n            'mousedown [data-move-layer]': 'initSorter',\n            'touchstart [data-move-layer]': 'initSorter'\n        },\n        template(model) {\n            const {pfx, ppfx, em} = this;\n            const label = `${ em && em.t('styleManager.layer') } ${ model.get('index') }`;\n            return `\n      <div id=\"${ pfx }move\" class=\"${ ppfx }no-touch-actions\" data-move-layer>\n        <i class=\"fa fa-arrows\"></i>\n      </div>\n      <div id=\"${ pfx }label\">${ label }</div>\n      <div id=\"${ pfx }preview-box\">\n      \t<div id=\"${ pfx }preview\" data-preview></div>\n      </div>\n      <div id=\"${ pfx }close-layer\" class=\"${ pfx }btn-close\" data-close-layer>\n        &Cross;\n      </div>\n      <div id=\"${ pfx }inputs\" data-properties></div>\n      <div style=\"clear:both\"></div>\n    `;\n        },\n        initialize(o = {}) {\n            let model = this.model;\n            this.stackModel = o.stackModel;\n            this.config = o.config || {};\n            this.em = this.config.em;\n            this.pfx = this.config.stylePrefix || '';\n            this.ppfx = this.config.pStylePrefix || '';\n            this.sorter = o.sorter || null;\n            this.propsConfig = o.propsConfig || {};\n            this.customPreview = o.onPreview;\n            this.listenTo(model, 'destroy remove', this.remove);\n            this.listenTo(model, 'change:active', this.updateVisibility);\n            this.listenTo(model.get('properties'), 'change', this.updatePreview);\n            model.view = this;\n            model.set({\n                droppable: 0,\n                draggable: 1\n            });\n            this.$el.data('model', model);\n        },\n        initSorter(e) {\n            if (this.sorter)\n                this.sorter.startSort(this.el);\n        },\n        remove(e) {\n            if (e && e.stopPropagation)\n                e.stopPropagation();\n            const model = this.model;\n            const collection = model.collection;\n            const stackModel = this.stackModel;\n            Backbone.View.prototype.remove.apply(this, arguments);\n            if (collection.contains(model)) {\n                collection.remove(model);\n            }\n            if (stackModel && stackModel.set) {\n                stackModel.set({ stackIndex: null }, { silent: true });\n                stackModel.trigger('updateValue');\n            }\n        },\n        onPreview(value) {\n            const {stackModel} = this;\n            const detach = stackModel && stackModel.get('detached');\n            const values = value.split(' ');\n            const lim = 3;\n            const result = [];\n            const resultObj = {};\n            this.model.get('properties').undefined((prop, index) => {\n                const property = prop.get('property');\n                let value = detach ? prop.getFullValue() : values[index] || '';\n                if (value) {\n                    if (prop.get('type') == 'integer') {\n                        let valueInt = parseInt(value, 10);\n                        let unit = value.replace(valueInt, '');\n                        valueInt = !isNaN(valueInt) ? valueInt : 0;\n                        valueInt = valueInt > lim ? lim : valueInt;\n                        valueInt = valueInt < -lim ? -lim : valueInt;\n                        value = valueInt + unit;\n                    }\n                }\n                result.push(value);\n                resultObj[property] = value;\n            });\n            return detach ? resultObj : result.join(' ');\n        },\n        updatePreview() {\n            const stackModel = this.stackModel;\n            const customPreview = this.customPreview;\n            const previewEl = this.getPreviewEl();\n            const value = this.model.getFullValue();\n            const preview = customPreview ? customPreview(value) : this.onPreview(value);\n            if (preview && stackModel && previewEl) {\n                const {style} = previewEl;\n                if (a.isString(preview)) {\n                    style[stackModel.get('property')] = preview;\n                } else {\n                    let prvStr = [];\n                    a.each(preview, (val, prop) => prvStr.push(`${ prop }:${ val }`));\n                    previewEl.setAttribute('style', prvStr.join(';'));\n                }\n            }\n        },\n        getPropertiesWrapper() {\n            if (!this.propsWrapEl) {\n                this.propsWrapEl = this.el.querySelector('[data-properties]');\n            }\n            return this.propsWrapEl;\n        },\n        getPreviewEl() {\n            if (!this.previewEl) {\n                this.previewEl = this.el.querySelector('[data-preview]');\n            }\n            return this.previewEl;\n        },\n        active() {\n            const model = this.model;\n            const collection = model.collection;\n            collection.active(collection.indexOf(model));\n        },\n        updateVisibility() {\n            const pfx = this.pfx;\n            const wrapEl = this.getPropertiesWrapper();\n            const active = this.model.get('active');\n            wrapEl.style.display = active ? '' : 'none';\n            this.$el[active ? 'addClass' : 'removeClass'](`${ pfx }active`);\n        },\n        render() {\n            const propsConfig = this.propsConfig;\n            const {model, el, pfx} = this;\n            const preview = model.get('preview');\n            const properties = new PropertiesView({\n                collection: model.get('properties'),\n                config: this.config,\n                target: propsConfig.target,\n                customValue: propsConfig.customValue,\n                propTarget: propsConfig.propTarget,\n                onChange: propsConfig.onChange\n            }).render().el;\n            el.innerHTML = this.template(model);\n            el.className = `${ pfx }layer${ !preview ? ` ${ pfx }no-preview` : '' }`;\n            this.getPropertiesWrapper().appendChild(properties);\n            this.updateVisibility();\n            this.updatePreview();\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/view/LayersView',[\n    'skylark-backbone',\n    './LayerView'\n], function (Backbone, LayerView) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize(o) {\n            this.config = o.config || {};\n            this.stackModel = o.stackModel;\n            this.preview = o.preview;\n            this.pfx = this.config.stylePrefix || '';\n            this.ppfx = this.config.pStylePrefix || '';\n            this.propsConfig = o.propsConfig;\n            let pfx = this.pfx;\n            let ppfx = this.ppfx;\n            let collection = this.collection;\n            this.className = `${ pfx }layers ${ ppfx }field`;\n            this.listenTo(collection, 'add', this.addTo);\n            this.listenTo(collection, 'deselectAll', this.deselectAll);\n            this.listenTo(collection, 'reset', this.render);\n            var em = this.config.em || '';\n            var utils = em ? em.get('Utils') : '';\n            this.sorter = utils ? new utils.Sorter({\n                container: this.el,\n                ignoreViewChildren: 1,\n                containerSel: `.${ pfx }layers`,\n                itemSel: `.${ pfx }layer`,\n                pfx: this.config.pStylePrefix\n            }) : '';\n            collection.view = this;\n            this.$el.data('model', collection);\n            this.$el.data('collection', collection);\n        },\n        addTo(model) {\n            var i = this.collection.indexOf(model);\n            this.addToCollection(model, null, i);\n        },\n        addToCollection(model, fragmentEl, index) {\n            var fragment = fragmentEl || null;\n            const stackModel = this.stackModel;\n            const config = this.config;\n            const sorter = this.sorter;\n            const propsConfig = this.propsConfig;\n            if (typeof this.preview !== 'undefined') {\n                model.set('preview', this.preview);\n            }\n            var view = new LayerView({\n                model,\n                config,\n                sorter,\n                stackModel,\n                propsConfig\n            });\n            var rendered = view.render().el;\n            if (fragment) {\n                fragment.appendChild(rendered);\n            } else {\n                if (typeof index != 'undefined') {\n                    var method = 'before';\n                    if (this.$el.children().length == index) {\n                        index--;\n                        method = 'after';\n                    }\n                    if (index < 0) {\n                        this.$el.append(rendered);\n                    } else\n                        this.$el.children().eq(index)[method](rendered);\n                } else\n                    this.$el.append(rendered);\n            }\n            return rendered;\n        },\n        deselectAll() {\n            this.$el.find('.' + this.pfx + 'layer').removeClass(this.pfx + 'active');\n        },\n        render() {\n            var fragment = document.createDocumentFragment();\n            this.$el.empty();\n            this.collection.each(function (model) {\n                this.addToCollection(model, fragment);\n            }, this);\n            this.$el.append(fragment);\n            this.$el.attr('class', this.className);\n            if (this.sorter)\n                this.sorter.plh = null;\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/code_manager/model/CssGenerator',[\n    'skylark-backbone',\n    'skylark-underscore'\n], function (Backbone, a) {\n    'use strict';\n    const maxValue = Number.MAX_VALUE;\n    return Backbone.Model.extend({\n        initialize() {\n            this.compCls = [];\n            this.ids = [];\n        },\n        buildFromModel(model, opts = {}) {\n            let code = '';\n            const em = this.em;\n            const avoidInline = em && em.getConfig('avoidInlineStyle');\n            const style = model.styleToString();\n            const classes = model.get('classes');\n            const wrapperIsBody = opts.wrapperIsBody;\n            const isWrapper = model.get('wrapper');\n            this.ids.push(`#${ model.getId() }`);\n            classes.undefined(model => this.compCls.push(model.getFullName()));\n            if (!avoidInline && style) {\n                let selector = `#${ model.getId() }`;\n                selector = wrapperIsBody && isWrapper ? 'body' : selector;\n                code = `${ selector }{${ style }}`;\n            }\n            const components = model.components();\n            components.undefined(model => code += this.buildFromModel(model, opts));\n            return code;\n        },\n        build(model, opts = {}) {\n            const cssc = opts.cssc;\n            const em = opts.em || '';\n            this.em = em;\n            this.compCls = [];\n            this.ids = [];\n            var code = this.buildFromModel(model, opts);\n            const clearStyles = a.isUndefined(opts.clearStyles) && em ? em.getConfig('clearStyles') : opts.clearStyles;\n            if (cssc) {\n                const rules = cssc.getAll();\n                const atRules = {};\n                const dump = [];\n                rules.undefined(rule => {\n                    const atRule = rule.getAtRule();\n                    if (atRule) {\n                        const mRules = atRules[atRule];\n                        if (mRules) {\n                            mRules.push(rule);\n                        } else {\n                            atRules[atRule] = [rule];\n                        }\n                        return;\n                    }\n                    code += this.buildFromRule(rule, dump, opts);\n                });\n                this.sortMediaObject(atRules).forEach(item => {\n                    let rulesStr = '';\n                    const atRule = item.key;\n                    const mRules = item.value;\n                    mRules.forEach(rule => {\n                        const ruleStr = this.buildFromRule(rule, dump, opts);\n                        if (rule.get('singleAtRule')) {\n                            code += `${ atRule }{${ ruleStr }}`;\n                        } else {\n                            rulesStr += ruleStr;\n                        }\n                    });\n                    if (rulesStr) {\n                        code += `${ atRule }{${ rulesStr }}`;\n                    }\n                });\n                em && clearStyles && rules.remove(dump);\n            }\n            return code;\n        },\n        buildFromRule(rule, dump, opts = {}) {\n            let result = '';\n            const selectorStrNoAdd = rule.selectorsToString({ skipAdd: 1 });\n            const selectorsAdd = rule.get('selectorsAdd');\n            const singleAtRule = rule.get('singleAtRule');\n            let found;\n            rule.get('selectors').undefined(selector => {\n                const name = selector.getFullName();\n                if (this.compCls.indexOf(name) >= 0 || this.ids.indexOf(name) >= 0 || opts.keepUnusedStyles) {\n                    found = 1;\n                }\n            });\n            if (selectorStrNoAdd && found || selectorsAdd || singleAtRule) {\n                const block = rule.getDeclaration();\n                block && (result += block);\n            } else {\n                dump.push(rule);\n            }\n            return result;\n        },\n        getQueryLength(mediaQuery) {\n            const length = /(-?\\d*\\.?\\d+)\\w{0,}/.exec(mediaQuery);\n            if (!length)\n                return maxValue;\n            return parseFloat(length[1]);\n        },\n        sortMediaObject(items = {}) {\n            const itemsArr = [];\n            a.each(items, (value, key) => itemsArr.push({\n                key,\n                value\n            }));\n            return itemsArr.sort((a, b) => {\n                const isMobFirst = [\n                    a.key,\n                    b.key\n                ].every(mquery => mquery.indexOf('min-width') !== -1);\n                const left = isMobFirst ? a.key : b.key;\n                const right = isMobFirst ? b.key : a.key;\n                return this.getQueryLength(left) - this.getQueryLength(right);\n            });\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/view/PropertyStackView',[\n    'skylark-underscore',\n    './PropertyCompositeView',\n    './LayersView',\n    '../../code_manager/model/CssGenerator'\n], function (a, PropertyCompositeView, LayersView, CssGenerator) {\n    'use strict';\n    const cssGen = new CssGenerator();\n    return PropertyCompositeView.extend({\n        templateInput() {\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            return `\n      <div class=\"${ pfx }field ${ pfx }stack\">\n        <button type=\"button\" id=\"${ pfx }add\" data-add-layer>+</button>\n        <div data-layers-wrapper></div>\n      </div>\n    `;\n        },\n        init() {\n            const model = this.model;\n            const pfx = this.pfx;\n            model.set('stackIndex', null);\n            this.events[`click [data-add-layer]`] = 'addLayer';\n            this.listenTo(model, 'change:stackIndex', this.indexChanged);\n            this.listenTo(model, 'updateValue', this.inputValueChanged);\n            this.delegateEvents();\n        },\n        targetUpdated(...args) {\n            if (!this.model.get('detached')) {\n                PropertyCompositeView.prototype.targetUpdated.apply(this, args);\n            } else {\n                const {status} = this._getTargetData();\n                this.setStatus(status);\n                this.checkVisibility();\n            }\n            this.refreshLayers();\n        },\n        getLayers() {\n            return this.model.get('layers');\n        },\n        indexChanged(e) {\n            const model = this.model;\n            this.getLayers().active(model.get('stackIndex'));\n        },\n        addLayer() {\n            const model = this.model;\n            const layers = this.getLayers();\n            const prepend = model.get('prepend');\n            const properties = model.get('properties').deepClone();\n            properties.each(property => property.set('value', ''));\n            const layer = layers.add({ properties }, {\n                active: 1,\n                ...prepend && { at: 0 }\n            });\n            this.inputValueChanged();\n            model.set('stackIndex', layers.indexOf(layer));\n        },\n        inputValueChanged() {\n            const model = this.model;\n            this.elementUpdated();\n            if (!model.get('detached')) {\n                model.set('value', this.getLayerValues());\n            } else {\n                model.get('properties').each(prop => prop.trigger('change:value'));\n            }\n        },\n        setValue() {\n        },\n        getLayerValues() {\n            return this.getLayers().getFullValue();\n        },\n        _getClassRule(opts = {}) {\n            const {em} = this;\n            const {\n                skipAdd = 1\n            } = opts;\n            const selected = em.getSelected();\n            const targetAlt = em.get('StyleManager').getModelToStyle(selected, {\n                skipAdd,\n                useClasses: 1\n            });\n            return targetAlt !== selected && targetAlt;\n        },\n        _getParentTarget(target, opts = {}) {\n            const {em, model} = this;\n            const property = model.get('property');\n            const isValid = opts.isValid || (rule => rule.getStyle()[property]);\n            const targetsDevice = em.get('CssComposer').getAll().filter(rule => rule.selectorsToString() === target.getSelectorsString());\n            const map = targetsDevice.reduce((acc, rule) => {\n                acc[rule.getAtRule()] = rule;\n                return acc;\n            }, {});\n            const mapSorted = cssGen.sortMediaObject(map);\n            const sortedRules = mapSorted.map(item => item.value);\n            const currIndex = sortedRules.indexOf(target);\n            const rulesToCheck = sortedRules.splice(0, currIndex);\n            let result;\n            for (let i = rulesToCheck.length - 1; i > -1; i--) {\n                const rule = rulesToCheck[i];\n                if (isValid(rule)) {\n                    result = rule;\n                    break;\n                }\n            }\n            return result;\n        },\n        refreshLayers() {\n            let layersObj = [];\n            const {model, em} = this;\n            const layers = this.getLayers();\n            const detached = model.get('detached');\n            const property = model.get('property');\n            const target = this.getTarget();\n            const valueComput = this.getComputedValue();\n            const selected = em.getSelected();\n            let resultValue, style, targetAlt, targetAltDevice, valueTargetAlt, valueTrgAltDvc;\n            if (detached) {\n                style = target ? target.getStyle() : {};\n                const hasDetachedStyle = rule => {\n                    const name = model.get('properties').at(0).get('property');\n                    return rule && !a.isUndefined(rule.getStyle()[name]);\n                };\n                if (!a.keys(style).length && valueComput && selected) {\n                    const parentOpts = { isValid: rule => hasDetachedStyle(rule) };\n                    targetAltDevice = this._getParentTarget(target, parentOpts);\n                    if (targetAltDevice) {\n                        style = targetAltDevice.getStyle();\n                    } else {\n                        targetAlt = this._getClassRule();\n                        valueTargetAlt = hasDetachedStyle(targetAlt) && targetAlt.getStyle();\n                        targetAltDevice = !valueTargetAlt && this._getParentTarget(this._getClassRule({ skipAdd: 0 }), parentOpts);\n                        valueTrgAltDvc = hasDetachedStyle(targetAltDevice) && targetAltDevice.getStyle();\n                        style = valueTargetAlt || valueTrgAltDvc || {};\n                    }\n                }\n                resultValue = style;\n                layersObj = layers.getLayersFromStyle(style);\n            } else {\n                const valueTrg = this.getTargetValue({ ignoreDefault: 1 });\n                let value = valueTrg;\n                if (!value && valueComput) {\n                    targetAltDevice = this._getParentTarget(target);\n                    if (targetAltDevice) {\n                        value = targetAltDevice.getStyle()[property];\n                    } else {\n                        targetAlt = this._getClassRule();\n                        valueTargetAlt = targetAlt && targetAlt.getStyle()[property];\n                        targetAltDevice = !valueTargetAlt && this._getParentTarget(this._getClassRule({ skipAdd: 0 }));\n                        valueTrgAltDvc = targetAltDevice && targetAltDevice.getStyle()[property];\n                        value = valueTargetAlt || valueTrgAltDvc || valueComput;\n                    }\n                }\n                value = value == model.getDefaultValue() ? '' : value;\n                resultValue = value;\n                layersObj = layers.getLayersFromValue(value);\n            }\n            const toAdd = model.getLayersFromTarget(target, {\n                resultValue,\n                layersObj\n            }) || layersObj;\n            layers.reset();\n            layers.add(toAdd);\n            model.set({ stackIndex: null }, { silent: true });\n        },\n        getTargetValue(opts = {}) {\n            let result = PropertyCompositeView.prototype.getTargetValue.call(this, opts);\n            const {detached} = this.model.attributes;\n            if (a.isUndefined(result) && !detached) {\n                result = this.model.getValueFromStyle(this.getTarget().getStyle());\n            }\n            return result;\n        },\n        onRender() {\n            const self = this;\n            const model = this.model;\n            const fieldEl = this.el.querySelector('[data-layers-wrapper]');\n            const PropertiesView = require('./PropertiesView').default;\n            const propsConfig = {\n                target: this.target,\n                propTarget: this.propTarget,\n                onChange(el, view, opt) {\n                    const subModel = view.model;\n                    if (model.get('detached')) {\n                        const subProp = subModel.get('property');\n                        const defVal = subModel.getDefaultValue();\n                        const values = self.getLayers().getPropertyValues(subProp, defVal);\n                        view.updateTargetStyle(values, null, opt);\n                    } else {\n                        if (model.get('status') == 'updated') {\n                            const value = model.getFullValue();\n                            model.set('value', value, opt);\n                            !value && view.updateTargetStyle(value, null, opt);\n                        }\n                    }\n                }\n            };\n            const layers = new LayersView({\n                collection: this.getLayers(),\n                stackModel: model,\n                preview: model.get('preview'),\n                config: this.config,\n                propsConfig\n            }).render().el;\n            new PropertiesView({\n                target: this.target,\n                collection: this.model.get('properties'),\n                stackModel: model,\n                config: this.config,\n                onChange: propsConfig.onChange,\n                propTarget: propsConfig.propTarget\n            }).render();\n            fieldEl.appendChild(layers);\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/view/PropertyFileView',[\n    'skylark-underscore',\n    'skylark-backbone',\n    './PropertyView'\n], function (a, Backbone, PropertyView) {\n    'use strict';\n    const $ = Backbone.$;\n    return PropertyView.extend({\n        templateInput() {\n            const {pfx, em} = this;\n            return `\n    <div class=\"${ pfx }field ${ pfx }file\">\n      <div id='${ pfx }input-holder'>\n        <div class=\"${ pfx }btn-c\">\n          <button class=\"${ pfx }btn\" id=\"${ pfx }images\" type=\"button\">\n            ${ em.t('styleManager.fileButton') }\n          </button>\n        </div>\n        <div style=\"clear:both;\"></div>\n      </div>\n      <div id=\"${ pfx }preview-box\">\n        <div id=\"${ pfx }preview-file\"></div>\n        <div id=\"${ pfx }close\">&Cross;</div>\n      </div>\n    </div>\n    `;\n        },\n        init() {\n            const em = this.em;\n            this.modal = em.get('Modal');\n            this.am = em.get('AssetManager');\n            this.events['click #' + this.pfx + 'close'] = 'removeFile';\n            this.events['click #' + this.pfx + 'images'] = 'openAssetManager';\n            this.delegateEvents();\n        },\n        onRender() {\n            if (!this.$input) {\n                const plh = this.model.getDefaultValue();\n                this.$input = $(`<input placeholder=\"${ plh }\">`);\n            }\n            if (!this.$preview) {\n                this.$preview = this.$el.find('#' + this.pfx + 'preview-file');\n            }\n            if (!this.$previewBox) {\n                this.$previewBox = this.$el.find('#' + this.pfx + 'preview-box');\n            }\n            this.setValue(this.componentValue, 0);\n        },\n        clearCached() {\n            PropertyView.prototype.clearCached.apply(this, arguments);\n            this.$preview = null;\n            this.$previewBox = null;\n        },\n        setValue(value, f) {\n            PropertyView.prototype.setValue.apply(this, arguments);\n            this.setPreviewView(value && value != this.model.getDefaultValue());\n            this.setPreview(value);\n        },\n        setPreviewView(v) {\n            const pv = this.$previewBox;\n            pv && pv[v ? 'addClass' : 'removeClass'](`${ this.pfx }show`);\n            pv && pv.css({ display: v ? 'block' : 'none' });\n        },\n        spreadUrl(url) {\n            this.model.set('value', url);\n            this.setPreviewView(1);\n        },\n        setPreview(value) {\n            const preview = this.$preview;\n            value = value && value.indexOf('url(') < 0 ? `url(${ value })` : value;\n            preview && preview.css('background-image', value);\n        },\n        cleanValue() {\n            this.setPreviewView(0);\n            this.model.set({ value: '' }, { silent: true });\n        },\n        removeFile(...args) {\n            this.model.set('value', this.model.getDefaultValue());\n            PropertyView.prototype.cleanValue.apply(this, args);\n            this.setPreviewView(0);\n        },\n        openAssetManager(e) {\n            const {em, modal} = this;\n            const editor = em ? em.get('Editor') : '';\n            if (editor) {\n                editor.runCommand('open-assets', {\n                    types: ['image'],\n                    accept: 'image/*',\n                    target: this.getTargetModel(),\n                    onClick() {\n                    },\n                    onDblClick() {\n                    },\n                    onSelect: asset => {\n                        modal.close();\n                        const url = a.isString(asset) ? asset : asset.get('src');\n                        this.spreadUrl(url);\n                    }\n                });\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/view/PropertyIntegerView',[\n    'skylark-backbone',\n    './PropertyView'\n], function (Backbone, PropertyView) {\n    'use strict';\n    const $ = Backbone.$;\n    return PropertyView.extend({\n        templateInput() {\n            return '';\n        },\n        init() {\n            const model = this.model;\n            this.listenTo(model, 'change:unit', this.modelValueChanged);\n            this.listenTo(model, 'el:change', this.elementUpdated);\n            this.listenTo(model, 'change:units', this.render);\n        },\n        setValue(value) {\n            const parsed = this.model.parseValue(value);\n            value = `${ parsed.value }${ parsed.unit }`;\n            this.inputInst.setValue(value, { silent: 1 });\n        },\n        onRender() {\n            const ppfx = this.ppfx;\n            if (!this.input) {\n                const input = this.model.input;\n                input.ppfx = ppfx;\n                input.render();\n                const fields = this.el.querySelector(`.${ ppfx }fields`);\n                fields.appendChild(input.el);\n                this.$input = input.inputEl;\n                this.unit = input.unitEl;\n                this.$unit = $(this.unit);\n                this.input = this.$input.get(0);\n                this.inputInst = input;\n            }\n        },\n        clearCached() {\n            PropertyView.prototype.clearCached.apply(this, arguments);\n            this.unit = null;\n            this.$unit = null;\n        }\n    });\n});\ndefine('skylark-grapejs/utils/ColorPicker',[],function () {\n    'use strict';\n    return function ($, undefined) {\n        'use strict';\n        var defaultOpts = {\n                beforeShow: noop,\n                move: noop,\n                change: noop,\n                show: noop,\n                hide: noop,\n                color: false,\n                flat: false,\n                showInput: false,\n                allowEmpty: false,\n                showButtons: true,\n                clickoutFiresChange: true,\n                showInitial: false,\n                showPalette: false,\n                showPaletteOnly: false,\n                hideAfterPaletteSelect: false,\n                togglePaletteOnly: false,\n                showSelectionPalette: true,\n                localStorageKey: false,\n                appendTo: 'body',\n                maxSelectionSize: 7,\n                cancelText: 'cancel',\n                chooseText: 'choose',\n                togglePaletteMoreText: 'more',\n                togglePaletteLessText: 'less',\n                clearText: 'Clear Color Selection',\n                noColorSelectedText: 'No Color Selected',\n                preferredFormat: false,\n                className: '',\n                containerClassName: '',\n                replacerClassName: '',\n                showAlpha: false,\n                theme: 'sp-light',\n                palette: [[\n                        '#ffffff',\n                        '#000000',\n                        '#ff0000',\n                        '#ff8000',\n                        '#ffff00',\n                        '#008000',\n                        '#0000ff',\n                        '#4b0082',\n                        '#9400d3'\n                    ]],\n                selectionPalette: [],\n                disabled: false,\n                offset: null\n            }, spectrums = [], IE = !!/msie/i.exec(window.navigator.userAgent), rgbaSupport = function () {\n                function contains(str, substr) {\n                    return !!~('' + str).indexOf(substr);\n                }\n                var elem = document.createElement('div');\n                var style = elem.style;\n                style.cssText = 'background-color:rgba(0,0,0,.5)';\n                return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');\n            }(), replaceInput = [\n                \"<div class='sp-replacer'>\",\n                \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\n                \"<div class='sp-dd'>&#9660;</div>\",\n                '</div>'\n            ].join(''), markup = function () {\n                var gradientFix = '';\n                if (IE) {\n                    for (var i = 1; i <= 6; i++) {\n                        gradientFix += \"<div class='sp-\" + i + \"'></div>\";\n                    }\n                }\n                return [\n                    \"<div class='sp-container sp-hidden'>\",\n                    \"<div class='sp-palette-container'>\",\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\n                    \"<div class='sp-palette-button-container sp-cf'>\",\n                    \"<button type='button' class='sp-palette-toggle'></button>\",\n                    '</div>',\n                    '</div>',\n                    \"<div class='sp-picker-container'>\",\n                    \"<div class='sp-top sp-cf'>\",\n                    \"<div class='sp-fill'></div>\",\n                    \"<div class='sp-top-inner'>\",\n                    \"<div class='sp-color'>\",\n                    \"<div class='sp-sat'>\",\n                    \"<div class='sp-val'>\",\n                    \"<div class='sp-dragger'></div>\",\n                    '</div>',\n                    '</div>',\n                    '</div>',\n                    \"<div class='sp-clear sp-clear-display'>\",\n                    '</div>',\n                    \"<div class='sp-hue'>\",\n                    \"<div class='sp-slider'></div>\",\n                    gradientFix,\n                    '</div>',\n                    '</div>',\n                    \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\n                    '</div>',\n                    \"<div class='sp-input-container sp-cf'>\",\n                    \"<input class='sp-input' type='text' spellcheck='false'  />\",\n                    '</div>',\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\n                    \"<div class='sp-button-container sp-cf'>\",\n                    \"<a class='sp-cancel' href='#'></a>\",\n                    \"<button type='button' class='sp-choose'></button>\",\n                    '</div>',\n                    '</div>',\n                    '</div>'\n                ].join('');\n            }();\n        function paletteTemplate(p, color, className, opts) {\n            var html = [];\n            for (var i = 0; i < p.length; i++) {\n                var current = p[i];\n                if (current) {\n                    var tiny = tinycolor(current);\n                    var c = tiny.toHsl().l < 0.5 ? 'sp-thumb-el sp-thumb-dark' : 'sp-thumb-el sp-thumb-light';\n                    c += tinycolor.equals(color, current) ? ' sp-thumb-active' : '';\n                    var formattedString = tiny.toString(opts.preferredFormat || 'rgb');\n                    var swatchStyle = rgbaSupport ? 'background-color:' + tiny.toRgbString() : 'filter:' + tiny.toFilter();\n                    html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\"></span></span>');\n                } else {\n                    var cls = 'sp-clear-display';\n                    html.push($('<div />').append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>').attr('title', opts.noColorSelectedText)).html());\n                }\n            }\n            return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + '</div>';\n        }\n        function hideAll() {\n            for (var i = 0; i < spectrums.length; i++) {\n                if (spectrums[i]) {\n                    spectrums[i].hide();\n                }\n            }\n        }\n        function instanceOptions(o, callbackContext) {\n            var opts = $.extend({}, defaultOpts, o);\n            opts.callbacks = {\n                move: bind(opts.move, callbackContext),\n                change: bind(opts.change, callbackContext),\n                show: bind(opts.show, callbackContext),\n                hide: bind(opts.hide, callbackContext),\n                beforeShow: bind(opts.beforeShow, callbackContext)\n            };\n            return opts;\n        }\n        function spectrum(element, o) {\n            var opts = instanceOptions(o, element), flat = opts.flat, showSelectionPalette = opts.showSelectionPalette, localStorageKey = opts.localStorageKey, theme = opts.theme, callbacks = opts.callbacks, resize = throttle(reflow, 10), visible = false, isDragging = false, dragWidth = 0, dragHeight = 0, dragHelperHeight = 0, slideHeight = 0, slideWidth = 0, alphaWidth = 0, alphaSlideHelperWidth = 0, slideHelperHeight = 0, currentHue = 0, currentSaturation = 0, currentValue = 0, currentAlpha = 1, palette = [], paletteArray = [], paletteLookup = {}, selectionPalette = opts.selectionPalette.slice(0), maxSelectionSize = opts.maxSelectionSize, draggingClass = 'sp-dragging', shiftMovementDirection = null;\n            var doc = element.ownerDocument, body = doc.body, boundElement = $(element), disabled = false, container = $(markup, doc).addClass(theme), pickerContainer = container.find('.sp-picker-container'), dragger = container.find('.sp-color'), dragHelper = container.find('.sp-dragger'), slider = container.find('.sp-hue'), slideHelper = container.find('.sp-slider'), alphaSliderInner = container.find('.sp-alpha-inner'), alphaSlider = container.find('.sp-alpha'), alphaSlideHelper = container.find('.sp-alpha-handle'), textInput = container.find('.sp-input'), paletteContainer = container.find('.sp-palette'), initialColorContainer = container.find('.sp-initial'), cancelButton = container.find('.sp-cancel'), clearButton = container.find('.sp-clear'), chooseButton = container.find('.sp-choose'), toggleButton = container.find('.sp-palette-toggle'), isInput = boundElement.is('input'), isInputTypeColor = isInput && boundElement.attr('type') === 'color' && inputTypeColorSupport(), shouldReplace = isInput && !flat, replacer = shouldReplace ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]), offsetElement = shouldReplace ? replacer : boundElement, previewElement = replacer.find('.sp-preview-inner'), initialColor = opts.color || isInput && boundElement.val(), colorOnShow = false, currentPreferredFormat = opts.preferredFormat, clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange, isEmpty = !initialColor, allowEmpty = opts.allowEmpty && !isInputTypeColor;\n            function applyOptions() {\n                if (opts.showPaletteOnly) {\n                    opts.showPalette = true;\n                }\n                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\n                if (opts.palette) {\n                    palette = opts.palette.slice(0);\n                    paletteArray = $.isArray(palette[0]) ? palette : [palette];\n                    paletteLookup = {};\n                    for (var i = 0; i < paletteArray.length; i++) {\n                        for (var j = 0; j < paletteArray[i].length; j++) {\n                            var rgb = tinycolor(paletteArray[i][j]).toRgbString();\n                            paletteLookup[rgb] = true;\n                        }\n                    }\n                }\n                container.toggleClass('sp-flat', flat);\n                container.toggleClass('sp-input-disabled', !opts.showInput);\n                container.toggleClass('sp-alpha-enabled', opts.showAlpha);\n                container.toggleClass('sp-clear-enabled', allowEmpty);\n                container.toggleClass('sp-buttons-disabled', !opts.showButtons);\n                container.toggleClass('sp-palette-buttons-disabled', !opts.togglePaletteOnly);\n                container.toggleClass('sp-palette-disabled', !opts.showPalette);\n                container.toggleClass('sp-palette-only', opts.showPaletteOnly);\n                container.toggleClass('sp-initial-disabled', !opts.showInitial);\n                container.addClass(opts.className).addClass(opts.containerClassName);\n                reflow();\n            }\n            function initialize() {\n                if (IE) {\n                    container.find('*:not(input)').attr('unselectable', 'on');\n                }\n                applyOptions();\n                if (shouldReplace) {\n                    boundElement.after(replacer).hide();\n                }\n                if (!allowEmpty) {\n                    clearButton.hide();\n                }\n                if (flat) {\n                    boundElement.after(container).hide();\n                } else {\n                    var appendTo = opts.appendTo === 'parent' ? boundElement.parent() : $(opts.appendTo);\n                    if (appendTo.length !== 1) {\n                        appendTo = $('body');\n                    }\n                    appendTo.append(container);\n                }\n                updateSelectionPaletteFromStorage();\n                offsetElement.bind('click.spectrum touchstart.spectrum', function (e) {\n                    if (!disabled) {\n                        toggle();\n                    }\n                    e.stopPropagation();\n                    if (!$(e.target).is('input')) {\n                        e.preventDefault();\n                    }\n                });\n                if (boundElement.is(':disabled') || opts.disabled === true) {\n                    disable();\n                }\n                container.click(stopPropagation);\n                textInput.change(setFromTextInput);\n                textInput.bind('paste', function () {\n                    setTimeout(setFromTextInput, 1);\n                });\n                textInput.keydown(function (e) {\n                    if (e.keyCode == 13) {\n                        setFromTextInput();\n                    }\n                });\n                cancelButton.text(opts.cancelText);\n                cancelButton.bind('click.spectrum', function (e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    revert();\n                    hide();\n                });\n                clearButton.attr('title', opts.clearText);\n                clearButton.bind('click.spectrum', function (e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    isEmpty = true;\n                    move();\n                    if (flat) {\n                        updateOriginalInput(true);\n                    }\n                });\n                chooseButton.text(opts.chooseText);\n                chooseButton.bind('click.spectrum', function (e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    if (IE && textInput.is(':focus')) {\n                        textInput.trigger('change');\n                    }\n                    if (isValid()) {\n                        updateOriginalInput(true);\n                        hide();\n                    }\n                });\n                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\n                toggleButton.bind('click.spectrum', function (e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    opts.showPaletteOnly = !opts.showPaletteOnly;\n                    if (!opts.showPaletteOnly && !flat) {\n                        container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));\n                    }\n                    applyOptions();\n                });\n                draggable(alphaSlider, function (dragX, dragY, e) {\n                    currentAlpha = dragX / alphaWidth;\n                    isEmpty = false;\n                    if (e.shiftKey) {\n                        currentAlpha = Math.round(currentAlpha * 10) / 10;\n                    }\n                    move();\n                }, dragStart, dragStop);\n                draggable(slider, function (dragX, dragY) {\n                    currentHue = parseFloat(dragY / slideHeight);\n                    isEmpty = false;\n                    if (!opts.showAlpha) {\n                        currentAlpha = 1;\n                    }\n                    move();\n                }, dragStart, dragStop);\n                draggable(dragger, function (dragX, dragY, e) {\n                    if (!e.shiftKey) {\n                        shiftMovementDirection = null;\n                    } else if (!shiftMovementDirection) {\n                        var oldDragX = currentSaturation * dragWidth;\n                        var oldDragY = dragHeight - currentValue * dragHeight;\n                        var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\n                        shiftMovementDirection = furtherFromX ? 'x' : 'y';\n                    }\n                    var setSaturation = !shiftMovementDirection || shiftMovementDirection === 'x';\n                    var setValue = !shiftMovementDirection || shiftMovementDirection === 'y';\n                    if (setSaturation) {\n                        currentSaturation = parseFloat(dragX / dragWidth);\n                    }\n                    if (setValue) {\n                        currentValue = parseFloat((dragHeight - dragY) / dragHeight);\n                    }\n                    isEmpty = false;\n                    if (!opts.showAlpha) {\n                        currentAlpha = 1;\n                    }\n                    move();\n                }, dragStart, dragStop);\n                if (!!initialColor) {\n                    set(initialColor);\n                    updateUI();\n                    currentPreferredFormat = opts.preferredFormat || tinycolor(initialColor).format;\n                    addColorToSelectionPalette(initialColor);\n                } else {\n                    updateUI();\n                }\n                if (flat) {\n                    show();\n                }\n                function paletteElementClick(e) {\n                    if (e.data && e.data.ignore) {\n                        set($(e.target).closest('.sp-thumb-el').data('color'));\n                        move();\n                    } else {\n                        set($(e.target).closest('.sp-thumb-el').data('color'));\n                        move();\n                        updateOriginalInput(true);\n                        if (opts.hideAfterPaletteSelect) {\n                            hide();\n                        }\n                    }\n                    return false;\n                }\n                var paletteEvent = IE ? 'mousedown.spectrum' : 'click.spectrum touchstart.spectrum';\n                paletteContainer.delegate('.sp-thumb-el', paletteEvent, paletteElementClick);\n                initialColorContainer.delegate('.sp-thumb-el:nth-child(1)', paletteEvent, { ignore: true }, paletteElementClick);\n            }\n            function updateSelectionPaletteFromStorage() {\n                if (localStorageKey && window.localStorage) {\n                    try {\n                        var oldPalette = window.localStorage[localStorageKey].split(',#');\n                        if (oldPalette.length > 1) {\n                            delete window.localStorage[localStorageKey];\n                            $.each(oldPalette, function (i, c) {\n                                addColorToSelectionPalette(c);\n                            });\n                        }\n                    } catch (e) {\n                    }\n                    try {\n                        selectionPalette = window.localStorage[localStorageKey].split(';');\n                    } catch (e) {\n                    }\n                }\n            }\n            function addColorToSelectionPalette(color) {\n                if (showSelectionPalette) {\n                    var rgb = tinycolor(color).toRgbString();\n                    if (!paletteLookup[rgb] && $.inArray(rgb, selectionPalette) === -1) {\n                        selectionPalette.push(rgb);\n                        while (selectionPalette.length > maxSelectionSize) {\n                            selectionPalette.shift();\n                        }\n                    }\n                    if (localStorageKey && window.localStorage) {\n                        try {\n                            window.localStorage[localStorageKey] = selectionPalette.join(';');\n                        } catch (e) {\n                        }\n                    }\n                }\n            }\n            function getUniqueSelectionPalette() {\n                var unique = [];\n                if (opts.showPalette) {\n                    for (var i = 0; i < selectionPalette.length; i++) {\n                        var rgb = tinycolor(selectionPalette[i]).toRgbString();\n                        if (!paletteLookup[rgb]) {\n                            unique.push(selectionPalette[i]);\n                        }\n                    }\n                }\n                return unique.reverse().slice(0, opts.maxSelectionSize);\n            }\n            function drawPalette() {\n                var currentColor = get();\n                var html = $.map(paletteArray, function (palette, i) {\n                    return paletteTemplate(palette, currentColor, 'sp-palette-row sp-palette-row-' + i, opts);\n                });\n                updateSelectionPaletteFromStorage();\n                if (selectionPalette) {\n                    html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, 'sp-palette-row sp-palette-row-selection', opts));\n                }\n                paletteContainer.html(html.join(''));\n            }\n            function drawInitial() {\n                if (opts.showInitial) {\n                    var initial = colorOnShow;\n                    var current = get();\n                    initialColorContainer.html(paletteTemplate([\n                        initial,\n                        current\n                    ], current, 'sp-palette-row-initial', opts));\n                }\n            }\n            function dragStart() {\n                if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {\n                    reflow();\n                }\n                isDragging = true;\n                container.addClass(draggingClass);\n                shiftMovementDirection = null;\n                boundElement.trigger('dragstart.spectrum', [get()]);\n            }\n            function dragStop() {\n                isDragging = false;\n                container.removeClass(draggingClass);\n                boundElement.trigger('dragstop.spectrum', [get()]);\n            }\n            function setFromTextInput() {\n                var value = textInput.val();\n                if ((value === null || value === '') && allowEmpty) {\n                    set(null);\n                    updateOriginalInput(true);\n                } else {\n                    var tiny = tinycolor(value);\n                    if (tiny.isValid()) {\n                        set(tiny);\n                        updateOriginalInput(true);\n                    } else {\n                        textInput.addClass('sp-validation-error');\n                    }\n                }\n            }\n            function toggle() {\n                if (visible) {\n                    hide();\n                } else {\n                    show();\n                }\n            }\n            function show() {\n                var event = $.Event('beforeShow.spectrum');\n                if (visible) {\n                    reflow();\n                    return;\n                }\n                boundElement.trigger('beforeShow.spectrum', [get()]);\n                if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {\n                    return;\n                }\n                hideAll();\n                visible = true;\n                var $doc = $(doc);\n                $doc.bind('keydown.spectrum', onkeydown);\n                $doc.bind('click.spectrum', clickout);\n                $(window).bind('resize.spectrum', resize);\n                replacer.addClass('sp-active');\n                container.removeClass('sp-hidden');\n                reflow();\n                updateUI();\n                colorOnShow = get();\n                drawInitial();\n                callbacks.show(colorOnShow);\n                boundElement.trigger('show.spectrum', [colorOnShow]);\n            }\n            function onkeydown(e) {\n                if (e.keyCode === 27) {\n                    hide();\n                }\n            }\n            function clickout(e) {\n                if (e.button == 2) {\n                    return;\n                }\n                if (isDragging) {\n                    return;\n                }\n                if (clickoutFiresChange) {\n                    updateOriginalInput(true);\n                } else {\n                    revert();\n                }\n                hide();\n            }\n            function hide() {\n                if (!visible || flat) {\n                    return;\n                }\n                visible = false;\n                $(doc).unbind('keydown.spectrum', onkeydown);\n                $(doc).unbind('click.spectrum', clickout);\n                $(window).unbind('resize.spectrum', resize);\n                replacer.removeClass('sp-active');\n                container.addClass('sp-hidden');\n                callbacks.hide(get());\n                boundElement.trigger('hide.spectrum', [get()]);\n            }\n            function revert() {\n                set(colorOnShow, true);\n            }\n            function set(color, ignoreFormatChange) {\n                if (tinycolor.equals(color, get())) {\n                    updateUI();\n                    return;\n                }\n                var newColor, newHsv;\n                if (!color && allowEmpty) {\n                    isEmpty = true;\n                } else {\n                    isEmpty = false;\n                    newColor = tinycolor(color);\n                    newHsv = newColor.toHsv();\n                    currentHue = newHsv.h % 360 / 360;\n                    currentSaturation = newHsv.s;\n                    currentValue = newHsv.v;\n                    currentAlpha = newHsv.a;\n                }\n                updateUI();\n                if (newColor && newColor.isValid() && !ignoreFormatChange) {\n                    currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\n                }\n            }\n            function get(opts) {\n                opts = opts || {};\n                if (allowEmpty && isEmpty) {\n                    return null;\n                }\n                return tinycolor.fromRatio({\n                    h: currentHue,\n                    s: currentSaturation,\n                    v: currentValue,\n                    a: Math.round(currentAlpha * 100) / 100\n                }, { format: opts.format || currentPreferredFormat });\n            }\n            function isValid() {\n                return !textInput.hasClass('sp-validation-error');\n            }\n            function move() {\n                updateUI();\n                callbacks.move(get());\n                boundElement.trigger('move.spectrum', [get()]);\n            }\n            function updateUI() {\n                textInput.removeClass('sp-validation-error');\n                updateHelperLocations();\n                var flatColor = tinycolor.fromRatio({\n                    h: currentHue,\n                    s: 1,\n                    v: 1\n                });\n                dragger.css('background-color', flatColor.toHexString());\n                var format = currentPreferredFormat;\n                if (currentAlpha < 1 && !(currentAlpha === 0 && format === 'name')) {\n                    if (format === 'hex' || format === 'hex3' || format === 'hex6' || format === 'name') {\n                        format = 'rgb';\n                    }\n                }\n                var realColor = get({ format: format }), displayColor = '';\n                previewElement.removeClass('sp-clear-display');\n                previewElement.css('background-color', 'transparent');\n                if (!realColor && allowEmpty) {\n                    previewElement.addClass('sp-clear-display');\n                } else {\n                    var realHex = realColor.toHexString(), realRgb = realColor.toRgbString();\n                    if (rgbaSupport || realColor.alpha === 1) {\n                        previewElement.css('background-color', realRgb);\n                    } else {\n                        previewElement.css('background-color', 'transparent');\n                        previewElement.css('filter', realColor.toFilter());\n                    }\n                    if (opts.showAlpha) {\n                        var rgb = realColor.toRgb();\n                        rgb.a = 0;\n                        var realAlpha = tinycolor(rgb).toRgbString();\n                        var gradient = 'linear-gradient(left, ' + realAlpha + ', ' + realHex + ')';\n                        if (IE) {\n                            alphaSliderInner.css('filter', tinycolor(realAlpha).toFilter({ gradientType: 1 }, realHex));\n                        } else {\n                            alphaSliderInner.css('background', '-webkit-' + gradient);\n                            alphaSliderInner.css('background', '-moz-' + gradient);\n                            alphaSliderInner.css('background', '-ms-' + gradient);\n                            alphaSliderInner.css('background', 'linear-gradient(to right, ' + realAlpha + ', ' + realHex + ')');\n                        }\n                    }\n                    displayColor = realColor.toString(format);\n                }\n                if (opts.showInput) {\n                    textInput.val(displayColor);\n                }\n                if (opts.showPalette) {\n                    drawPalette();\n                }\n                drawInitial();\n            }\n            function updateHelperLocations() {\n                var s = currentSaturation;\n                var v = currentValue;\n                if (allowEmpty && isEmpty) {\n                    alphaSlideHelper.hide();\n                    slideHelper.hide();\n                    dragHelper.hide();\n                } else {\n                    alphaSlideHelper.show();\n                    slideHelper.show();\n                    dragHelper.show();\n                    var dragX = s * dragWidth;\n                    var dragY = dragHeight - v * dragHeight;\n                    dragX = Math.max(-dragHelperHeight, Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight));\n                    dragY = Math.max(-dragHelperHeight, Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight));\n                    dragHelper.css({\n                        top: dragY + 'px',\n                        left: dragX + 'px'\n                    });\n                    var alphaX = currentAlpha * alphaWidth;\n                    alphaSlideHelper.css({ left: alphaX - alphaSlideHelperWidth / 2 + 'px' });\n                    var slideY = currentHue * slideHeight;\n                    slideHelper.css({ top: slideY - slideHelperHeight + 'px' });\n                }\n            }\n            function updateOriginalInput(fireCallback) {\n                var color = get(), displayColor = '', hasChanged = !tinycolor.equals(color, colorOnShow);\n                if (color) {\n                    displayColor = color.toString(currentPreferredFormat);\n                    addColorToSelectionPalette(color);\n                }\n                if (isInput) {\n                    boundElement.val(displayColor);\n                }\n                if (fireCallback && hasChanged) {\n                    callbacks.change(color);\n                    boundElement.trigger('change', [color]);\n                }\n            }\n            function reflow() {\n                if (!visible) {\n                    return;\n                }\n                dragWidth = dragger.width();\n                dragHeight = dragger.height();\n                dragHelperHeight = dragHelper.height();\n                slideWidth = slider.width();\n                slideHeight = slider.height();\n                slideHelperHeight = slideHelper.height();\n                alphaWidth = alphaSlider.width();\n                alphaSlideHelperWidth = alphaSlideHelper.width();\n                if (!flat) {\n                    container.css('position', 'absolute');\n                    if (opts.offset) {\n                        container.offset(opts.offset);\n                    } else {\n                        container.offset(getOffset(container, offsetElement));\n                    }\n                }\n                updateHelperLocations();\n                if (opts.showPalette) {\n                    drawPalette();\n                }\n                boundElement.trigger('reflow.spectrum');\n            }\n            function destroy() {\n                boundElement.show();\n                offsetElement.unbind('click.spectrum touchstart.spectrum');\n                container.remove();\n                replacer.remove();\n                spectrums[spect.id] = null;\n            }\n            function option(optionName, optionValue) {\n                if (optionName === undefined) {\n                    return $.extend({}, opts);\n                }\n                if (optionValue === undefined) {\n                    return opts[optionName];\n                }\n                opts[optionName] = optionValue;\n                if (optionName === 'preferredFormat') {\n                    currentPreferredFormat = opts.preferredFormat;\n                }\n                applyOptions();\n            }\n            function enable() {\n                disabled = false;\n                boundElement.attr('disabled', false);\n                offsetElement.removeClass('sp-disabled');\n            }\n            function disable() {\n                hide();\n                disabled = true;\n                boundElement.attr('disabled', true);\n                offsetElement.addClass('sp-disabled');\n            }\n            function setOffset(coord) {\n                opts.offset = coord;\n                reflow();\n            }\n            initialize();\n            var spect = {\n                show: show,\n                hide: hide,\n                toggle: toggle,\n                reflow: reflow,\n                option: option,\n                enable: enable,\n                disable: disable,\n                offset: setOffset,\n                set: function (c) {\n                    set(c);\n                    updateOriginalInput();\n                },\n                get: get,\n                destroy: destroy,\n                container: container\n            };\n            spect.id = spectrums.push(spect) - 1;\n            return spect;\n        }\n        function getOffset(picker, input) {\n            var extraY = 0;\n            var dpWidth = picker.outerWidth();\n            var dpHeight = picker.outerHeight();\n            var inputHeight = input.outerHeight();\n            var doc = picker[0].ownerDocument;\n            var docElem = doc.documentElement;\n            var cW = docElem.clientWidth;\n            var cH = docElem.clientHeight;\n            var scL = $(doc).scrollLeft();\n            var scT = $(doc).scrollTop();\n            var viewWidth = cW + scL;\n            var viewHeight = cH + scT;\n            var offset = input.offset();\n            offset.top += inputHeight;\n            offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);\n            offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight - extraY) : extraY);\n            return offset;\n        }\n        function noop() {\n        }\n        function stopPropagation(e) {\n            e.stopPropagation();\n        }\n        function bind(func, obj) {\n            var slice = Array.prototype.slice;\n            var args = slice.call(arguments, 2);\n            return function () {\n                return func.apply(obj, args.concat(slice.call(arguments)));\n            };\n        }\n        function draggable(element, onmove, onstart, onstop) {\n            onmove = onmove || function () {\n            };\n            onstart = onstart || function () {\n            };\n            onstop = onstop || function () {\n            };\n            var doc = document;\n            var dragging = false;\n            var offset = {};\n            var maxHeight = 0;\n            var maxWidth = 0;\n            var hasTouch = 'ontouchstart' in window;\n            var duringDragEvents = {};\n            duringDragEvents['selectstart'] = prevent;\n            duringDragEvents['dragstart'] = prevent;\n            duringDragEvents['touchmove mousemove'] = move;\n            duringDragEvents['touchend mouseup'] = stop;\n            function prevent(e) {\n                if (e.stopPropagation) {\n                    e.stopPropagation();\n                }\n                if (e.preventDefault) {\n                    e.preventDefault();\n                }\n                e.returnValue = false;\n            }\n            function move(e) {\n                if (dragging) {\n                    if (IE && doc.documentMode < 9 && !e.button) {\n                        return stop();\n                    }\n                    var t0 = e && e.touches && e.touches[0];\n                    var pageX = t0 && t0.pageX || e.pageX;\n                    var pageY = t0 && t0.pageY || e.pageY;\n                    var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\n                    var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\n                    if (hasTouch) {\n                        prevent(e);\n                    }\n                    onmove.apply(element, [\n                        dragX,\n                        dragY,\n                        e\n                    ]);\n                }\n            }\n            function start(e) {\n                var rightclick = e.which ? e.which == 3 : e.button == 2;\n                if (!rightclick && !dragging) {\n                    if (onstart.apply(element, arguments) !== false) {\n                        dragging = true;\n                        maxHeight = $(element).height();\n                        maxWidth = $(element).width();\n                        offset = $(element).offset();\n                        $(doc).bind(duringDragEvents);\n                        $(doc.body).addClass('sp-dragging');\n                        move(e);\n                        prevent(e);\n                    }\n                }\n            }\n            function stop() {\n                if (dragging) {\n                    $(doc).unbind(duringDragEvents);\n                    $(doc.body).removeClass('sp-dragging');\n                    setTimeout(function () {\n                        onstop.apply(element, arguments);\n                    }, 0);\n                }\n                dragging = false;\n            }\n            $(element).bind('touchstart mousedown', start);\n        }\n        function throttle(func, wait, debounce) {\n            var timeout;\n            return function () {\n                var context = this, args = arguments;\n                var throttler = function () {\n                    timeout = null;\n                    func.apply(context, args);\n                };\n                if (debounce)\n                    clearTimeout(timeout);\n                if (debounce || !timeout)\n                    timeout = setTimeout(throttler, wait);\n            };\n        }\n        function inputTypeColorSupport() {\n            return $.fn.spectrum.inputTypeColorSupport();\n        }\n        var dataID = 'spectrum.id';\n        $.fn.spectrum = function (opts, extra) {\n            if (typeof opts == 'string') {\n                var returnValue = this;\n                var args = Array.prototype.slice.call(arguments, 1);\n                this.each(function () {\n                    var spect = spectrums[$(this).data(dataID)];\n                    if (spect) {\n                        var method = spect[opts];\n                        if (!method) {\n                            throw new Error(\"Spectrum: no such method: '\" + opts + \"'\");\n                        }\n                        if (opts == 'get') {\n                            returnValue = spect.get();\n                        } else if (opts == 'container') {\n                            returnValue = spect.container;\n                        } else if (opts == 'option') {\n                            returnValue = spect.option.apply(spect, args);\n                        } else if (opts == 'destroy') {\n                            spect.destroy();\n                            $(this).removeData(dataID);\n                        } else {\n                            method.apply(spect, args);\n                        }\n                    }\n                });\n                return returnValue;\n            }\n            return this.spectrum('destroy').each(function () {\n                var options = $.extend({}, opts, $(this).data());\n                var spect = spectrum(this, options);\n                $(this).data(dataID, spect.id);\n            });\n        };\n        $.fn.spectrum.load = true;\n        $.fn.spectrum.loadOpts = {};\n        $.fn.spectrum.draggable = draggable;\n        $.fn.spectrum.defaults = defaultOpts;\n        $.fn.spectrum.inputTypeColorSupport = function inputTypeColorSupport() {\n            if (typeof inputTypeColorSupport._cachedResult === 'undefined') {\n                var colorInput = $(\"<input type='color'/>\")[0];\n                inputTypeColorSupport._cachedResult = colorInput.type === 'color' && colorInput.value !== '';\n            }\n            return inputTypeColorSupport._cachedResult;\n        };\n        $.spectrum = {};\n        $.spectrum.localization = {};\n        $.spectrum.palettes = {};\n        $.fn.spectrum.processNativeColorInputs = function () {\n            var colorInputs = $('input[type=color]');\n            if (colorInputs.length && !inputTypeColorSupport()) {\n                colorInputs.spectrum({ preferredFormat: 'hex6' });\n            }\n        };\n        var trimLeft = /^[\\s,#]+/, trimRight = /\\s+$/, tinyCounter = 0, math = Math, mathRound = math.round, mathMin = math.min, mathMax = math.max, mathRandom = math.random;\n        var tinycolor = function (color, opts) {\n            color = color ? color : '';\n            opts = opts || {};\n            if (color instanceof tinycolor) {\n                return color;\n            }\n            if (!(this instanceof tinycolor)) {\n                return new tinycolor(color, opts);\n            }\n            var rgb = inputToRGB(color);\n            this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;\n            this._gradientType = opts.gradientType;\n            if (this._r < 1) {\n                this._r = mathRound(this._r);\n            }\n            if (this._g < 1) {\n                this._g = mathRound(this._g);\n            }\n            if (this._b < 1) {\n                this._b = mathRound(this._b);\n            }\n            this._ok = rgb.ok;\n            this._tc_id = tinyCounter++;\n        };\n        tinycolor.prototype = {\n            isDark: function () {\n                return this.getBrightness() < 128;\n            },\n            isLight: function () {\n                return !this.isDark();\n            },\n            isValid: function () {\n                return this._ok;\n            },\n            getOriginalInput: function () {\n                return this._originalInput;\n            },\n            getFormat: function () {\n                return this._format;\n            },\n            getAlpha: function () {\n                return this._a;\n            },\n            getBrightness: function () {\n                var rgb = this.toRgb();\n                return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n            },\n            setAlpha: function (value) {\n                this._a = boundAlpha(value);\n                this._roundA = mathRound(100 * this._a) / 100;\n                return this;\n            },\n            toHsv: function () {\n                var hsv = rgbToHsv(this._r, this._g, this._b);\n                return {\n                    h: hsv.h * 360,\n                    s: hsv.s,\n                    v: hsv.v,\n                    a: this._a\n                };\n            },\n            toHsvString: function () {\n                var hsv = rgbToHsv(this._r, this._g, this._b);\n                var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n                return this._a == 1 ? 'hsv(' + h + ', ' + s + '%, ' + v + '%)' : 'hsva(' + h + ', ' + s + '%, ' + v + '%, ' + this._roundA + ')';\n            },\n            toHsl: function () {\n                var hsl = rgbToHsl(this._r, this._g, this._b);\n                return {\n                    h: hsl.h * 360,\n                    s: hsl.s,\n                    l: hsl.l,\n                    a: this._a\n                };\n            },\n            toHslString: function () {\n                var hsl = rgbToHsl(this._r, this._g, this._b);\n                var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n                return this._a == 1 ? 'hsl(' + h + ', ' + s + '%, ' + l + '%)' : 'hsla(' + h + ', ' + s + '%, ' + l + '%, ' + this._roundA + ')';\n            },\n            toHex: function (allow3Char) {\n                return rgbToHex(this._r, this._g, this._b, allow3Char);\n            },\n            toHexString: function (allow3Char) {\n                return '#' + this.toHex(allow3Char);\n            },\n            toHex8: function () {\n                return rgbaToHex(this._r, this._g, this._b, this._a);\n            },\n            toHex8String: function () {\n                return '#' + this.toHex8();\n            },\n            toRgb: function () {\n                return {\n                    r: mathRound(this._r),\n                    g: mathRound(this._g),\n                    b: mathRound(this._b),\n                    a: this._a\n                };\n            },\n            toRgbString: function () {\n                return this._a == 1 ? 'rgb(' + mathRound(this._r) + ', ' + mathRound(this._g) + ', ' + mathRound(this._b) + ')' : 'rgba(' + mathRound(this._r) + ', ' + mathRound(this._g) + ', ' + mathRound(this._b) + ', ' + this._roundA + ')';\n            },\n            toPercentageRgb: function () {\n                return {\n                    r: mathRound(bound01(this._r, 255) * 100) + '%',\n                    g: mathRound(bound01(this._g, 255) * 100) + '%',\n                    b: mathRound(bound01(this._b, 255) * 100) + '%',\n                    a: this._a\n                };\n            },\n            toPercentageRgbString: function () {\n                return this._a == 1 ? 'rgb(' + mathRound(bound01(this._r, 255) * 100) + '%, ' + mathRound(bound01(this._g, 255) * 100) + '%, ' + mathRound(bound01(this._b, 255) * 100) + '%)' : 'rgba(' + mathRound(bound01(this._r, 255) * 100) + '%, ' + mathRound(bound01(this._g, 255) * 100) + '%, ' + mathRound(bound01(this._b, 255) * 100) + '%, ' + this._roundA + ')';\n            },\n            toName: function () {\n                if (this._a === 0) {\n                    return 'transparent';\n                }\n                if (this._a < 1) {\n                    return false;\n                }\n                return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n            },\n            toFilter: function (secondColor) {\n                var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);\n                var secondHex8String = hex8String;\n                var gradientType = this._gradientType ? 'GradientType = 1, ' : '';\n                if (secondColor) {\n                    var s = tinycolor(secondColor);\n                    secondHex8String = s.toHex8String();\n                }\n                return 'progid:DXImageTransform.Microsoft.gradient(' + gradientType + 'startColorstr=' + hex8String + ',endColorstr=' + secondHex8String + ')';\n            },\n            toString: function (format) {\n                var formatSet = !!format;\n                format = format || this._format;\n                var formattedString = false;\n                var hasAlpha = this._a < 1 && this._a >= 0;\n                var needsAlphaFormat = !formatSet && hasAlpha && (format === 'hex' || format === 'hex6' || format === 'hex3' || format === 'name');\n                if (needsAlphaFormat) {\n                    if (format === 'name' && this._a === 0) {\n                        return this.toName();\n                    }\n                    return this.toRgbString();\n                }\n                if (format === 'rgb') {\n                    formattedString = this.toRgbString();\n                }\n                if (format === 'prgb') {\n                    formattedString = this.toPercentageRgbString();\n                }\n                if (format === 'hex' || format === 'hex6') {\n                    formattedString = this.toHexString();\n                }\n                if (format === 'hex3') {\n                    formattedString = this.toHexString(true);\n                }\n                if (format === 'hex8') {\n                    formattedString = this.toHex8String();\n                }\n                if (format === 'name') {\n                    formattedString = this.toName();\n                }\n                if (format === 'hsl') {\n                    formattedString = this.toHslString();\n                }\n                if (format === 'hsv') {\n                    formattedString = this.toHsvString();\n                }\n                return formattedString || this.toHexString();\n            },\n            _applyModification: function (fn, args) {\n                var color = fn.apply(null, [this].concat([].slice.call(args)));\n                this._r = color._r;\n                this._g = color._g;\n                this._b = color._b;\n                this.setAlpha(color._a);\n                return this;\n            },\n            lighten: function () {\n                return this._applyModification(lighten, arguments);\n            },\n            brighten: function () {\n                return this._applyModification(brighten, arguments);\n            },\n            darken: function () {\n                return this._applyModification(darken, arguments);\n            },\n            desaturate: function () {\n                return this._applyModification(desaturate, arguments);\n            },\n            saturate: function () {\n                return this._applyModification(saturate, arguments);\n            },\n            greyscale: function () {\n                return this._applyModification(greyscale, arguments);\n            },\n            spin: function () {\n                return this._applyModification(spin, arguments);\n            },\n            _applyCombination: function (fn, args) {\n                return fn.apply(null, [this].concat([].slice.call(args)));\n            },\n            analogous: function () {\n                return this._applyCombination(analogous, arguments);\n            },\n            complement: function () {\n                return this._applyCombination(complement, arguments);\n            },\n            monochromatic: function () {\n                return this._applyCombination(monochromatic, arguments);\n            },\n            splitcomplement: function () {\n                return this._applyCombination(splitcomplement, arguments);\n            },\n            triad: function () {\n                return this._applyCombination(triad, arguments);\n            },\n            tetrad: function () {\n                return this._applyCombination(tetrad, arguments);\n            }\n        };\n        tinycolor.fromRatio = function (color, opts) {\n            if (typeof color == 'object') {\n                var newColor = {};\n                for (var i in color) {\n                    if (color.hasOwnProperty(i)) {\n                        if (i === 'a') {\n                            newColor[i] = color[i];\n                        } else {\n                            newColor[i] = convertToPercentage(color[i]);\n                        }\n                    }\n                }\n                color = newColor;\n            }\n            return tinycolor(color, opts);\n        };\n        function inputToRGB(color) {\n            var rgb = {\n                r: 0,\n                g: 0,\n                b: 0\n            };\n            var a = 1;\n            var ok = false;\n            var format = false;\n            if (typeof color == 'string') {\n                color = stringInputToObject(color);\n            }\n            if (typeof color == 'object') {\n                if (color.hasOwnProperty('r') && color.hasOwnProperty('g') && color.hasOwnProperty('b')) {\n                    rgb = rgbToRgb(color.r, color.g, color.b);\n                    ok = true;\n                    format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\n                } else if (color.hasOwnProperty('h') && color.hasOwnProperty('s') && color.hasOwnProperty('v')) {\n                    color.s = convertToPercentage(color.s);\n                    color.v = convertToPercentage(color.v);\n                    rgb = hsvToRgb(color.h, color.s, color.v);\n                    ok = true;\n                    format = 'hsv';\n                } else if (color.hasOwnProperty('h') && color.hasOwnProperty('s') && color.hasOwnProperty('l')) {\n                    color.s = convertToPercentage(color.s);\n                    color.l = convertToPercentage(color.l);\n                    rgb = hslToRgb(color.h, color.s, color.l);\n                    ok = true;\n                    format = 'hsl';\n                }\n                if (color.hasOwnProperty('a')) {\n                    a = color.a;\n                }\n            }\n            a = boundAlpha(a);\n            return {\n                ok: ok,\n                format: color.format || format,\n                r: mathMin(255, mathMax(rgb.r, 0)),\n                g: mathMin(255, mathMax(rgb.g, 0)),\n                b: mathMin(255, mathMax(rgb.b, 0)),\n                a: a\n            };\n        }\n        function rgbToRgb(r, g, b) {\n            return {\n                r: bound01(r, 255) * 255,\n                g: bound01(g, 255) * 255,\n                b: bound01(b, 255) * 255\n            };\n        }\n        function rgbToHsl(r, g, b) {\n            r = bound01(r, 255);\n            g = bound01(g, 255);\n            b = bound01(b, 255);\n            var max = mathMax(r, g, b), min = mathMin(r, g, b);\n            var h, s, l = (max + min) / 2;\n            if (max == min) {\n                h = s = 0;\n            } else {\n                var d = max - min;\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n                }\n                h /= 6;\n            }\n            return {\n                h: h,\n                s: s,\n                l: l\n            };\n        }\n        function hslToRgb(h, s, l) {\n            var r, g, b;\n            h = bound01(h, 360);\n            s = bound01(s, 100);\n            l = bound01(l, 100);\n            function hue2rgb(p, q, t) {\n                if (t < 0)\n                    t += 1;\n                if (t > 1)\n                    t -= 1;\n                if (t < 1 / 6)\n                    return p + (q - p) * 6 * t;\n                if (t < 1 / 2)\n                    return q;\n                if (t < 2 / 3)\n                    return p + (q - p) * (2 / 3 - t) * 6;\n                return p;\n            }\n            if (s === 0) {\n                r = g = b = l;\n            } else {\n                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                var p = 2 * l - q;\n                r = hue2rgb(p, q, h + 1 / 3);\n                g = hue2rgb(p, q, h);\n                b = hue2rgb(p, q, h - 1 / 3);\n            }\n            return {\n                r: r * 255,\n                g: g * 255,\n                b: b * 255\n            };\n        }\n        function rgbToHsv(r, g, b) {\n            r = bound01(r, 255);\n            g = bound01(g, 255);\n            b = bound01(b, 255);\n            var max = mathMax(r, g, b), min = mathMin(r, g, b);\n            var h, s, v = max;\n            var d = max - min;\n            s = max === 0 ? 0 : d / max;\n            if (max == min) {\n                h = 0;\n            } else {\n                switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n                }\n                h /= 6;\n            }\n            return {\n                h: h,\n                s: s,\n                v: v\n            };\n        }\n        function hsvToRgb(h, s, v) {\n            h = bound01(h, 360) * 6;\n            s = bound01(s, 100);\n            v = bound01(v, 100);\n            var i = math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [\n                    v,\n                    q,\n                    p,\n                    p,\n                    t,\n                    v\n                ][mod], g = [\n                    t,\n                    v,\n                    v,\n                    q,\n                    p,\n                    p\n                ][mod], b = [\n                    p,\n                    p,\n                    t,\n                    v,\n                    v,\n                    q\n                ][mod];\n            return {\n                r: r * 255,\n                g: g * 255,\n                b: b * 255\n            };\n        }\n        function rgbToHex(r, g, b, allow3Char) {\n            var hex = [\n                pad2(mathRound(r).toString(16)),\n                pad2(mathRound(g).toString(16)),\n                pad2(mathRound(b).toString(16))\n            ];\n            if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n            }\n            return hex.join('');\n        }\n        function rgbaToHex(r, g, b, a) {\n            var hex = [\n                pad2(convertDecimalToHex(a)),\n                pad2(mathRound(r).toString(16)),\n                pad2(mathRound(g).toString(16)),\n                pad2(mathRound(b).toString(16))\n            ];\n            return hex.join('');\n        }\n        tinycolor.equals = function (color1, color2) {\n            if (!color1 || !color2) {\n                return false;\n            }\n            return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n        };\n        tinycolor.random = function () {\n            return tinycolor.fromRatio({\n                r: mathRandom(),\n                g: mathRandom(),\n                b: mathRandom()\n            });\n        };\n        function desaturate(color, amount) {\n            amount = amount === 0 ? 0 : amount || 10;\n            var hsl = tinycolor(color).toHsl();\n            hsl.s -= amount / 100;\n            hsl.s = clamp01(hsl.s);\n            return tinycolor(hsl);\n        }\n        function saturate(color, amount) {\n            amount = amount === 0 ? 0 : amount || 10;\n            var hsl = tinycolor(color).toHsl();\n            hsl.s += amount / 100;\n            hsl.s = clamp01(hsl.s);\n            return tinycolor(hsl);\n        }\n        function greyscale(color) {\n            return tinycolor(color).desaturate(100);\n        }\n        function lighten(color, amount) {\n            amount = amount === 0 ? 0 : amount || 10;\n            var hsl = tinycolor(color).toHsl();\n            hsl.l += amount / 100;\n            hsl.l = clamp01(hsl.l);\n            return tinycolor(hsl);\n        }\n        function brighten(color, amount) {\n            amount = amount === 0 ? 0 : amount || 10;\n            var rgb = tinycolor(color).toRgb();\n            rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));\n            rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));\n            rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));\n            return tinycolor(rgb);\n        }\n        function darken(color, amount) {\n            amount = amount === 0 ? 0 : amount || 10;\n            var hsl = tinycolor(color).toHsl();\n            hsl.l -= amount / 100;\n            hsl.l = clamp01(hsl.l);\n            return tinycolor(hsl);\n        }\n        function spin(color, amount) {\n            var hsl = tinycolor(color).toHsl();\n            var hue = (mathRound(hsl.h) + amount) % 360;\n            hsl.h = hue < 0 ? 360 + hue : hue;\n            return tinycolor(hsl);\n        }\n        function complement(color) {\n            var hsl = tinycolor(color).toHsl();\n            hsl.h = (hsl.h + 180) % 360;\n            return tinycolor(hsl);\n        }\n        function triad(color) {\n            var hsl = tinycolor(color).toHsl();\n            var h = hsl.h;\n            return [\n                tinycolor(color),\n                tinycolor({\n                    h: (h + 120) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                tinycolor({\n                    h: (h + 240) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        }\n        function tetrad(color) {\n            var hsl = tinycolor(color).toHsl();\n            var h = hsl.h;\n            return [\n                tinycolor(color),\n                tinycolor({\n                    h: (h + 90) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                tinycolor({\n                    h: (h + 180) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                tinycolor({\n                    h: (h + 270) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        }\n        function splitcomplement(color) {\n            var hsl = tinycolor(color).toHsl();\n            var h = hsl.h;\n            return [\n                tinycolor(color),\n                tinycolor({\n                    h: (h + 72) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                tinycolor({\n                    h: (h + 216) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        }\n        function analogous(color, results, slices) {\n            results = results || 6;\n            slices = slices || 30;\n            var hsl = tinycolor(color).toHsl();\n            var part = 360 / slices;\n            var ret = [tinycolor(color)];\n            for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n                hsl.h = (hsl.h + part) % 360;\n                ret.push(tinycolor(hsl));\n            }\n            return ret;\n        }\n        function monochromatic(color, results) {\n            results = results || 6;\n            var hsv = tinycolor(color).toHsv();\n            var h = hsv.h, s = hsv.s, v = hsv.v;\n            var ret = [];\n            var modification = 1 / results;\n            while (results--) {\n                ret.push(tinycolor({\n                    h: h,\n                    s: s,\n                    v: v\n                }));\n                v = (v + modification) % 1;\n            }\n            return ret;\n        }\n        tinycolor.mix = function (color1, color2, amount) {\n            amount = amount === 0 ? 0 : amount || 50;\n            var rgb1 = tinycolor(color1).toRgb();\n            var rgb2 = tinycolor(color2).toRgb();\n            var p = amount / 100;\n            var w = p * 2 - 1;\n            var a = rgb2.a - rgb1.a;\n            var w1;\n            if (w * a == -1) {\n                w1 = w;\n            } else {\n                w1 = (w + a) / (1 + w * a);\n            }\n            w1 = (w1 + 1) / 2;\n            var w2 = 1 - w1;\n            var rgba = {\n                r: rgb2.r * w1 + rgb1.r * w2,\n                g: rgb2.g * w1 + rgb1.g * w2,\n                b: rgb2.b * w1 + rgb1.b * w2,\n                a: rgb2.a * p + rgb1.a * (1 - p)\n            };\n            return tinycolor(rgba);\n        };\n        tinycolor.readability = function (color1, color2) {\n            var c1 = tinycolor(color1);\n            var c2 = tinycolor(color2);\n            var rgb1 = c1.toRgb();\n            var rgb2 = c2.toRgb();\n            var brightnessA = c1.getBrightness();\n            var brightnessB = c2.getBrightness();\n            var colorDiff = Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) + Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) + Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b);\n            return {\n                brightness: Math.abs(brightnessA - brightnessB),\n                color: colorDiff\n            };\n        };\n        tinycolor.isReadable = function (color1, color2) {\n            var readability = tinycolor.readability(color1, color2);\n            return readability.brightness > 125 && readability.color > 500;\n        };\n        tinycolor.mostReadable = function (baseColor, colorList) {\n            var bestColor = null;\n            var bestScore = 0;\n            var bestIsReadable = false;\n            for (var i = 0; i < colorList.length; i++) {\n                var readability = tinycolor.readability(baseColor, colorList[i]);\n                var readable = readability.brightness > 125 && readability.color > 500;\n                var score = 3 * (readability.brightness / 125) + readability.color / 500;\n                if (readable && !bestIsReadable || readable && bestIsReadable && score > bestScore || !readable && !bestIsReadable && score > bestScore) {\n                    bestIsReadable = readable;\n                    bestScore = score;\n                    bestColor = tinycolor(colorList[i]);\n                }\n            }\n            return bestColor;\n        };\n        var names = tinycolor.names = {\n            aliceblue: 'f0f8ff',\n            antiquewhite: 'faebd7',\n            aqua: '0ff',\n            aquamarine: '7fffd4',\n            azure: 'f0ffff',\n            beige: 'f5f5dc',\n            bisque: 'ffe4c4',\n            black: '000',\n            blanchedalmond: 'ffebcd',\n            blue: '00f',\n            blueviolet: '8a2be2',\n            brown: 'a52a2a',\n            burlywood: 'deb887',\n            burntsienna: 'ea7e5d',\n            cadetblue: '5f9ea0',\n            chartreuse: '7fff00',\n            chocolate: 'd2691e',\n            coral: 'ff7f50',\n            cornflowerblue: '6495ed',\n            cornsilk: 'fff8dc',\n            crimson: 'dc143c',\n            cyan: '0ff',\n            darkblue: '00008b',\n            darkcyan: '008b8b',\n            darkgoldenrod: 'b8860b',\n            darkgray: 'a9a9a9',\n            darkgreen: '006400',\n            darkgrey: 'a9a9a9',\n            darkkhaki: 'bdb76b',\n            darkmagenta: '8b008b',\n            darkolivegreen: '556b2f',\n            darkorange: 'ff8c00',\n            darkorchid: '9932cc',\n            darkred: '8b0000',\n            darksalmon: 'e9967a',\n            darkseagreen: '8fbc8f',\n            darkslateblue: '483d8b',\n            darkslategray: '2f4f4f',\n            darkslategrey: '2f4f4f',\n            darkturquoise: '00ced1',\n            darkviolet: '9400d3',\n            deeppink: 'ff1493',\n            deepskyblue: '00bfff',\n            dimgray: '696969',\n            dimgrey: '696969',\n            dodgerblue: '1e90ff',\n            firebrick: 'b22222',\n            floralwhite: 'fffaf0',\n            forestgreen: '228b22',\n            fuchsia: 'f0f',\n            gainsboro: 'dcdcdc',\n            ghostwhite: 'f8f8ff',\n            gold: 'ffd700',\n            goldenrod: 'daa520',\n            gray: '808080',\n            green: '008000',\n            greenyellow: 'adff2f',\n            grey: '808080',\n            honeydew: 'f0fff0',\n            hotpink: 'ff69b4',\n            indianred: 'cd5c5c',\n            indigo: '4b0082',\n            ivory: 'fffff0',\n            khaki: 'f0e68c',\n            lavender: 'e6e6fa',\n            lavenderblush: 'fff0f5',\n            lawngreen: '7cfc00',\n            lemonchiffon: 'fffacd',\n            lightblue: 'add8e6',\n            lightcoral: 'f08080',\n            lightcyan: 'e0ffff',\n            lightgoldenrodyellow: 'fafad2',\n            lightgray: 'd3d3d3',\n            lightgreen: '90ee90',\n            lightgrey: 'd3d3d3',\n            lightpink: 'ffb6c1',\n            lightsalmon: 'ffa07a',\n            lightseagreen: '20b2aa',\n            lightskyblue: '87cefa',\n            lightslategray: '789',\n            lightslategrey: '789',\n            lightsteelblue: 'b0c4de',\n            lightyellow: 'ffffe0',\n            lime: '0f0',\n            limegreen: '32cd32',\n            linen: 'faf0e6',\n            magenta: 'f0f',\n            maroon: '800000',\n            mediumaquamarine: '66cdaa',\n            mediumblue: '0000cd',\n            mediumorchid: 'ba55d3',\n            mediumpurple: '9370db',\n            mediumseagreen: '3cb371',\n            mediumslateblue: '7b68ee',\n            mediumspringgreen: '00fa9a',\n            mediumturquoise: '48d1cc',\n            mediumvioletred: 'c71585',\n            midnightblue: '191970',\n            mintcream: 'f5fffa',\n            mistyrose: 'ffe4e1',\n            moccasin: 'ffe4b5',\n            navajowhite: 'ffdead',\n            navy: '000080',\n            oldlace: 'fdf5e6',\n            olive: '808000',\n            olivedrab: '6b8e23',\n            orange: 'ffa500',\n            orangered: 'ff4500',\n            orchid: 'da70d6',\n            palegoldenrod: 'eee8aa',\n            palegreen: '98fb98',\n            paleturquoise: 'afeeee',\n            palevioletred: 'db7093',\n            papayawhip: 'ffefd5',\n            peachpuff: 'ffdab9',\n            peru: 'cd853f',\n            pink: 'ffc0cb',\n            plum: 'dda0dd',\n            powderblue: 'b0e0e6',\n            purple: '800080',\n            rebeccapurple: '663399',\n            red: 'f00',\n            rosybrown: 'bc8f8f',\n            royalblue: '4169e1',\n            saddlebrown: '8b4513',\n            salmon: 'fa8072',\n            sandybrown: 'f4a460',\n            seagreen: '2e8b57',\n            seashell: 'fff5ee',\n            sienna: 'a0522d',\n            silver: 'c0c0c0',\n            skyblue: '87ceeb',\n            slateblue: '6a5acd',\n            slategray: '708090',\n            slategrey: '708090',\n            snow: 'fffafa',\n            springgreen: '00ff7f',\n            steelblue: '4682b4',\n            tan: 'd2b48c',\n            teal: '008080',\n            thistle: 'd8bfd8',\n            tomato: 'ff6347',\n            turquoise: '40e0d0',\n            violet: 'ee82ee',\n            wheat: 'f5deb3',\n            white: 'fff',\n            whitesmoke: 'f5f5f5',\n            yellow: 'ff0',\n            yellowgreen: '9acd32'\n        };\n        var hexNames = tinycolor.hexNames = flip(names);\n        function flip(o) {\n            var flipped = {};\n            for (var i in o) {\n                if (o.hasOwnProperty(i)) {\n                    flipped[o[i]] = i;\n                }\n            }\n            return flipped;\n        }\n        function boundAlpha(a) {\n            a = parseFloat(a);\n            if (isNaN(a) || a < 0 || a > 1) {\n                a = 1;\n            }\n            return a;\n        }\n        function bound01(n, max) {\n            if (isOnePointZero(n)) {\n                n = '100%';\n            }\n            var processPercent = isPercentage(n);\n            n = mathMin(max, mathMax(0, parseFloat(n)));\n            if (processPercent) {\n                n = parseInt(n * max, 10) / 100;\n            }\n            if (math.abs(n - max) < 0.000001) {\n                return 1;\n            }\n            return n % max / parseFloat(max);\n        }\n        function clamp01(val) {\n            return mathMin(1, mathMax(0, val));\n        }\n        function parseIntFromHex(val) {\n            return parseInt(val, 16);\n        }\n        function isOnePointZero(n) {\n            return typeof n == 'string' && n.indexOf('.') != -1 && parseFloat(n) === 1;\n        }\n        function isPercentage(n) {\n            return typeof n === 'string' && n.indexOf('%') != -1;\n        }\n        function pad2(c) {\n            return c.length == 1 ? '0' + c : '' + c;\n        }\n        function convertToPercentage(n) {\n            if (n <= 1) {\n                n = n * 100 + '%';\n            }\n            return n;\n        }\n        function convertDecimalToHex(d) {\n            return Math.round(parseFloat(d) * 255).toString(16);\n        }\n        function convertHexToDecimal(h) {\n            return parseIntFromHex(h) / 255;\n        }\n        var matchers = function () {\n            var CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n            var CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n            var CSS_UNIT = '(?:' + CSS_NUMBER + ')|(?:' + CSS_INTEGER + ')';\n            var PERMISSIVE_MATCH3 = '[\\\\s|\\\\(]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')\\\\s*\\\\)?';\n            var PERMISSIVE_MATCH4 = '[\\\\s|\\\\(]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')\\\\s*\\\\)?';\n            return {\n                rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\n                rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\n                hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\n                hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\n                hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\n                hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\n                hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n                hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n                hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n            };\n        }();\n        function stringInputToObject(color) {\n            color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();\n            var named = false;\n            if (names[color]) {\n                color = names[color];\n                named = true;\n            } else if (color == 'transparent') {\n                return {\n                    r: 0,\n                    g: 0,\n                    b: 0,\n                    a: 0,\n                    format: 'name'\n                };\n            }\n            var match;\n            if (match = matchers.rgb.exec(color)) {\n                return {\n                    r: match[1],\n                    g: match[2],\n                    b: match[3]\n                };\n            }\n            if (match = matchers.rgba.exec(color)) {\n                return {\n                    r: match[1],\n                    g: match[2],\n                    b: match[3],\n                    a: match[4]\n                };\n            }\n            if (match = matchers.hsl.exec(color)) {\n                return {\n                    h: match[1],\n                    s: match[2],\n                    l: match[3]\n                };\n            }\n            if (match = matchers.hsla.exec(color)) {\n                return {\n                    h: match[1],\n                    s: match[2],\n                    l: match[3],\n                    a: match[4]\n                };\n            }\n            if (match = matchers.hsv.exec(color)) {\n                return {\n                    h: match[1],\n                    s: match[2],\n                    v: match[3]\n                };\n            }\n            if (match = matchers.hsva.exec(color)) {\n                return {\n                    h: match[1],\n                    s: match[2],\n                    v: match[3],\n                    a: match[4]\n                };\n            }\n            if (match = matchers.hex8.exec(color)) {\n                return {\n                    a: convertHexToDecimal(match[1]),\n                    r: parseIntFromHex(match[2]),\n                    g: parseIntFromHex(match[3]),\n                    b: parseIntFromHex(match[4]),\n                    format: named ? 'name' : 'hex8'\n                };\n            }\n            if (match = matchers.hex6.exec(color)) {\n                return {\n                    r: parseIntFromHex(match[1]),\n                    g: parseIntFromHex(match[2]),\n                    b: parseIntFromHex(match[3]),\n                    format: named ? 'name' : 'hex'\n                };\n            }\n            if (match = matchers.hex3.exec(color)) {\n                return {\n                    r: parseIntFromHex(match[1] + '' + match[1]),\n                    g: parseIntFromHex(match[2] + '' + match[2]),\n                    b: parseIntFromHex(match[3] + '' + match[3]),\n                    format: named ? 'name' : 'hex'\n                };\n            }\n            return false;\n        }\n        window.tinycolor = tinycolor;\n        $(function () {\n            if ($.fn.spectrum.load) {\n                $.fn.spectrum.processNativeColorInputs();\n            }\n        });\n    };\n});\ndefine('skylark-grapejs/domain_abstract/ui/Input',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    const $ = Backbone.$;\n    return Backbone.View.extend({\n        events: { change: 'handleChange' },\n        template() {\n            return `<span class=\"${ this.holderClass() }\"></span>`;\n        },\n        inputClass() {\n            return `${ this.ppfx }field`;\n        },\n        holderClass() {\n            return `${ this.ppfx }input-holder`;\n        },\n        initialize(opts = {}) {\n            const ppfx = opts.ppfx || '';\n            this.opts = opts;\n            this.ppfx = ppfx;\n            this.em = opts.target || {};\n            this.listenTo(this.model, 'change:value', this.handleModelChange);\n        },\n        elementUpdated() {\n            this.model.trigger('el:change');\n        },\n        setValue(value) {\n            const model = this.model;\n            let val = value || model.get('defaults');\n            const input = this.getInputEl();\n            input && (input.value = val);\n        },\n        handleModelChange(model, value, opts) {\n            this.setValue(value, opts);\n        },\n        handleChange(e) {\n            e.stopPropagation();\n            const value = this.getInputEl().value;\n            this.model.set({ value }, { fromInput: 1 });\n            this.elementUpdated();\n        },\n        getInputEl() {\n            if (!this.inputEl) {\n                const {model} = this;\n                const plh = model.get('placeholder') || model.get('defaults') || '';\n                this.inputEl = $(`<input type=\"text\" placeholder=\"${ plh }\">`);\n            }\n            return this.inputEl.get(0);\n        },\n        render() {\n            this.inputEl = null;\n            const el = this.$el;\n            el.addClass(this.inputClass());\n            el.html(this.template());\n            el.find(`.${ this.holderClass() }`).append(this.getInputEl());\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/domain_abstract/ui/InputColor',[\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/ColorPicker',\n    './Input'\n], function (Backbone, a, ColorPicker, Input) {\n    'use strict';\n    const $ = Backbone.$;\n    ColorPicker($);\n    return Input.extend({\n        template() {\n            const ppfx = this.ppfx;\n            return `\n      <div class=\"${ this.holderClass() }\"></div>\n      <div class=\"${ ppfx }field-colorp\">\n        <div class=\"${ ppfx }field-colorp-c\" data-colorp-c>\n          <div class=\"${ ppfx }checker-bg\"></div>\n        </div>\n      </div>\n    `;\n        },\n        inputClass() {\n            const ppfx = this.ppfx;\n            return `${ ppfx }field ${ ppfx }field-color`;\n        },\n        holderClass() {\n            return `${ this.ppfx }input-holder`;\n        },\n        setValue(val, opts = {}) {\n            const model = this.model;\n            const def = model.get('defaults');\n            const value = !a.isUndefined(val) ? val : !a.isUndefined(def) ? def : '';\n            const inputEl = this.getInputEl();\n            const colorEl = this.getColorEl();\n            const valueClr = value != 'none' ? value : '';\n            inputEl.value = value;\n            colorEl.get(0).style.backgroundColor = valueClr;\n            if (opts.fromTarget) {\n                colorEl.spectrum('set', valueClr);\n                this.noneColor = value == 'none';\n            }\n        },\n        getColorEl() {\n            if (!this.colorEl) {\n                const self = this;\n                const ppfx = this.ppfx;\n                var model = this.model;\n                var colorEl = $(`<div class=\"${ this.ppfx }field-color-picker\"></div>`);\n                var cpStyle = colorEl.get(0).style;\n                var elToAppend = this.em && this.em.config ? this.em.config.el : '';\n                var colorPickerConfig = this.em && this.em.getConfig && this.em.getConfig('colorPicker') || {};\n                const getColor = color => {\n                    let cl = color.getAlpha() == 1 ? color.toHexString() : color.toRgbString();\n                    return cl.replace(/ /g, '');\n                };\n                let changed = 0;\n                let previousColor;\n                this.$el.find(`[data-colorp-c]`).append(colorEl);\n                colorEl.spectrum({\n                    containerClassName: `${ ppfx }one-bg ${ ppfx }two-color`,\n                    appendTo: elToAppend || 'body',\n                    maxSelectionSize: 8,\n                    showPalette: true,\n                    showAlpha: true,\n                    chooseText: 'Ok',\n                    cancelText: '\\u2A2F',\n                    palette: [],\n                    ...colorPickerConfig,\n                    move(color) {\n                        const cl = getColor(color);\n                        cpStyle.backgroundColor = cl;\n                        model.setValueFromInput(cl, 0);\n                    },\n                    change(color) {\n                        changed = 1;\n                        const cl = getColor(color);\n                        cpStyle.backgroundColor = cl;\n                        model.setValueFromInput(0, 0);\n                        model.setValueFromInput(cl);\n                        self.noneColor = 0;\n                    },\n                    show(color) {\n                        changed = 0;\n                        previousColor = getColor(color);\n                    },\n                    hide(color) {\n                        if (!changed && previousColor) {\n                            if (self.noneColor) {\n                                previousColor = '';\n                            }\n                            cpStyle.backgroundColor = previousColor;\n                            colorEl.spectrum('set', previousColor);\n                            model.setValueFromInput(previousColor, 0);\n                        }\n                    }\n                });\n                this.colorEl = colorEl;\n            }\n            return this.colorEl;\n        },\n        render() {\n            Input.prototype.render.call(this);\n            this.getColorEl();\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/view/PropertyColorView',[\n    './PropertyIntegerView',\n    '../../domain_abstract/ui/InputColor'\n], function (PropertyIntegerView, InputColor) {\n    'use strict';\n    return PropertyIntegerView.extend({\n        setValue(value, opts = {}) {\n            opts = {\n                ...opts,\n                silent: 1\n            };\n            this.inputInst.setValue(value, opts);\n        },\n        onRender() {\n            if (!this.input) {\n                const ppfx = this.ppfx;\n                const inputColor = new InputColor({\n                    target: this.target,\n                    model: this.model,\n                    ppfx\n                });\n                const input = inputColor.render();\n                this.el.querySelector(`.${ ppfx }fields`).appendChild(input.el);\n                this.$input = input.inputEl;\n                this.$color = input.colorEl;\n                this.input = this.$input.get(0);\n                this.inputInst = input;\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/model/PropertyRadio',[\n    \"skylark-langx/langx\",\n    './Property'\n], function (Property) {\n    'use strict';\n    return Property.extend({\n        defaults: () => ({\n            ...Property.prototype.defaults,\n            options: [],\n            full: 1\n        }),\n        initialize(...args) {\n            Property.prototype.initialize.apply(this, args);\n            this.listenTo(this, 'change:options', this.onOptionChange);\n        },\n        onOptionChange() {\n            this.set('list', this.get('options'));\n        },\n        getOptions() {\n            const {options, list} = this.attributes;\n            return options && options.length ? options : list;\n        },\n        setOptions(opts = []) {\n            this.set('options', opts);\n            return this;\n        },\n        addOption(opt) {\n            if (opt) {\n                const opts = this.getOptions();\n                this.setOptions([\n                    ...opts,\n                    opt\n                ]);\n            }\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/model/PropertySelect',[\n    \"skylark-langx/langx\",\n\t'./PropertyRadio'\n], function (Property) {\n    'use strict';\n    return Property.extend({\n        defaults: () => ({\n            ...Property.prototype.defaults(),\n            full: 0\n        })\n    });\n});\ndefine('skylark-grapejs/style_manager/view/PropertySelectView',[\n    'skylark-backbone',\n    './PropertyView'\n], function (Backbone, PropertyView) {\n    'use strict';\n    const $ = Backbone.$;\n    return PropertyView.extend({\n        templateInput() {\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            return `\n      <div class=\"${ ppfx }field ${ ppfx }select\">\n        <span id=\"${ pfx }input-holder\"></span>\n        <div class=\"${ ppfx }sel-arrow\">\n          <div class=\"${ ppfx }d-s-arrow\"></div>\n        </div>\n      </div>\n    `;\n        },\n        initialize(...args) {\n            PropertyView.prototype.initialize.apply(this, args);\n            this.listenTo(this.model, 'change:options', this.updateOptions);\n        },\n        updateOptions() {\n            this.input = null;\n            this.onRender();\n        },\n        onRender() {\n            var pfx = this.pfx;\n            const options = this.model.getOptions();\n            if (!this.input) {\n                let optionsStr = '';\n                options.forEach(option => {\n                    let name = option.name || option.value;\n                    let style = option.style ? option.style.replace(/\"/g, '&quot;') : '';\n                    let styleAttr = style ? `style=\"${ style }\"` : '';\n                    let value = option.value.replace(/\"/g, '&quot;');\n                    optionsStr += `<option value=\"${ value }\" ${ styleAttr }>${ name }</option>`;\n                });\n                const inputH = this.el.querySelector(`#${ pfx }input-holder`);\n                inputH.innerHTML = `<select>${ optionsStr }</select>`;\n                this.input = inputH.firstChild;\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/view/PropertyRadioView',['./PropertyView'], function (PropertyView) {\n    'use strict';\n    return PropertyView.extend({\n        templateInput() {\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            return `\n      <div class=\"${ ppfx }field ${ ppfx }field-radio\">\n      </div>\n    `;\n        },\n        onRender() {\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            const itemCls = `${ ppfx }radio-item-label`;\n            const model = this.model;\n            const prop = model.get('property');\n            const options = model.get('list') || model.get('options') || [];\n            const {cid} = model;\n            const clsInput = `${ pfx }radio ${ pfx }radio-${ prop }`;\n            if (!this.input) {\n                if (options && options.length) {\n                    let inputStr = '';\n                    options.forEach(el => {\n                        let cl = el.className ? `${ el.className } ${ pfx }icon ${ itemCls }` : '';\n                        let id = `${ prop }-${ el.value }-${ cid }`;\n                        let labelTxt = el.name || el.value;\n                        let titleAttr = el.title ? `title=\"${ el.title }\"` : '';\n                        inputStr += `\n            <div class=\"${ ppfx }radio-item\">\n              <input type=\"radio\" class=\"${ clsInput }\" id=\"${ id }\" name=\"${ prop }-${ cid }\" value=\"${ el.value }\"/>\n              <label class=\"${ cl || itemCls }\" ${ titleAttr } for=\"${ id }\">${ cl ? '' : labelTxt }</label>\n            </div>\n          `;\n                    });\n                    const inputHld = this.el.querySelector(`.${ ppfx }field`);\n                    inputHld.innerHTML = `<div class=\"${ ppfx }radio-items\">${ inputStr }</div>`;\n                    this.input = inputHld.firstChild;\n                }\n            }\n        },\n        getInputValue() {\n            const inputChk = this.getCheckedEl();\n            return inputChk ? inputChk.value : '';\n        },\n        getCheckedEl() {\n            const input = this.getInputEl();\n            return input ? input.querySelector('input:checked') : '';\n        },\n        setValue(value) {\n            const model = this.model;\n            let val = value || model.get('value') || model.getDefaultValue();\n            const input = this.getInputEl();\n            const inputIn = input ? input.querySelector(`[value=\"${ val }\"]`) : '';\n            if (inputIn) {\n                inputIn.checked = true;\n            } else {\n                const inputChk = this.getCheckedEl();\n                inputChk && (inputChk.checked = false);\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/domain_abstract/ui/InputNumber',[\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins',\n    './Input'\n], function (Backbone, a, b, Input) {\n    'use strict';\n    const $ = Backbone.$;\n    return Input.extend({\n        events: {\n            'change input': 'handleChange',\n            'change select': 'handleUnitChange',\n            'click [data-arrow-up]': 'upArrowClick',\n            'click [data-arrow-down]': 'downArrowClick',\n            'mousedown [data-arrows]': 'downIncrement'\n        },\n        template() {\n            const ppfx = this.ppfx;\n            return `\n      <span class=\"${ ppfx }input-holder\"></span>\n      <span class=\"${ ppfx }field-units\"></span>\n      <div class=\"${ ppfx }field-arrows\" data-arrows>\n        <div class=\"${ ppfx }field-arrow-u\" data-arrow-up></div>\n        <div class=\"${ ppfx }field-arrow-d\" data-arrow-down></div>\n      </div>\n    `;\n        },\n        inputClass() {\n            const ppfx = this.ppfx;\n            return this.opts.contClass || `${ ppfx }field ${ ppfx }field-integer`;\n        },\n        initialize(opts = {}) {\n            Input.prototype.initialize.apply(this, arguments);\n            a.bindAll(this, 'moveIncrement', 'upIncrement');\n            this.doc = document;\n            this.listenTo(this.model, 'change:unit', this.handleModelChange);\n        },\n        setValue(value, opts) {\n            var opt = opts || {};\n            var valid = this.validateInputValue(value, { deepCheck: 1 });\n            var validObj = { value: valid.value };\n            if (valid.unit || valid.force) {\n                validObj.unit = valid.unit;\n            }\n            this.model.set(validObj, opt);\n            if (opt.silent) {\n                this.handleModelChange();\n            }\n        },\n        handleChange(e) {\n            e.stopPropagation();\n            this.setValue(this.getInputEl().value);\n            this.elementUpdated();\n        },\n        handleUnitChange(e) {\n            e.stopPropagation();\n            var value = this.getUnitEl().value;\n            this.model.set('unit', value);\n            this.elementUpdated();\n        },\n        elementUpdated() {\n            this.model.trigger('el:change');\n        },\n        handleModelChange() {\n            const model = this.model;\n            this.getInputEl().value = model.get('value');\n            const unitEl = this.getUnitEl();\n            unitEl && (unitEl.value = model.get('unit') || '');\n        },\n        getUnitEl() {\n            if (!this.unitEl) {\n                const model = this.model;\n                const units = model.get('units') || [];\n                if (units.length) {\n                    const options = [];\n                    units.forEach(unit => {\n                        const selected = unit == model.get('unit') ? 'selected' : '';\n                        options.push(`<option ${ selected }>${ unit }</option>`);\n                    });\n                    const temp = document.createElement('div');\n                    temp.innerHTML = `<select class=\"${ this.ppfx }input-unit\">${ options.join('') }</select>`;\n                    this.unitEl = temp.firstChild;\n                }\n            }\n            return this.unitEl;\n        },\n        upArrowClick() {\n            const model = this.model;\n            const step = model.get('step');\n            let value = parseInt(model.get('value'), 10);\n            value = this.normalizeValue(value + step);\n            var valid = this.validateInputValue(value);\n            model.set('value', valid.value);\n            this.elementUpdated();\n        },\n        downArrowClick() {\n            const model = this.model;\n            const step = model.get('step');\n            const value = parseInt(model.get('value'), 10);\n            const val = this.normalizeValue(value - step);\n            var valid = this.validateInputValue(val);\n            model.set('value', valid.value);\n            this.elementUpdated();\n        },\n        downIncrement(e) {\n            e.preventDefault();\n            this.moved = 0;\n            var value = this.model.get('value');\n            value = this.normalizeValue(value);\n            this.current = {\n                y: e.pageY,\n                val: value\n            };\n            b.on(this.doc, 'mousemove', this.moveIncrement);\n            b.on(this.doc, 'mouseup', this.upIncrement);\n        },\n        moveIncrement(ev) {\n            this.moved = 1;\n            const model = this.model;\n            const step = model.get('step');\n            const data = this.current;\n            var pos = this.normalizeValue(data.val + (data.y - ev.pageY) * step);\n            this.prValue = this.validateInputValue(pos).value;\n            model.set('value', this.prValue, { avoidStore: 1 });\n            return false;\n        },\n        upIncrement() {\n            const model = this.model;\n            const step = model.get('step');\n            b.off(this.doc, 'mouseup', this.upIncrement);\n            b.off(this.doc, 'mousemove', this.moveIncrement);\n            if (this.prValue && this.moved) {\n                var value = this.prValue - step;\n                model.set('value', value, { avoidStore: 1 }).set('value', value + step);\n                this.elementUpdated();\n            }\n        },\n        normalizeValue(value, defValue = 0) {\n            const model = this.model;\n            const step = model.get('step');\n            let stepDecimals = 0;\n            if (isNaN(value)) {\n                return defValue;\n            }\n            value = parseFloat(value);\n            if (Math.floor(value) !== value) {\n                const side = step.toString().split('.')[1];\n                stepDecimals = side ? side.length : 0;\n            }\n            return stepDecimals ? parseFloat(value.toFixed(stepDecimals)) : value;\n        },\n        validateInputValue(value, opts) {\n            var force = 0;\n            var opt = opts || {};\n            var model = this.model;\n            const defValue = '';\n            var val = !a.isUndefined(value) ? value : defValue;\n            var units = model.get('units') || [];\n            var unit = model.get('unit') || units.length && units[0] || '';\n            var max = model.get('max');\n            var min = model.get('min');\n            if (opt.deepCheck) {\n                var fixed = model.get('fixedValues') || [];\n                if (val) {\n                    var regFixed = new RegExp('^' + fixed.join('|'), 'g');\n                    if (fixed.length && regFixed.test(val)) {\n                        val = val.match(regFixed)[0];\n                        unit = '';\n                        force = 1;\n                    } else {\n                        var valCopy = val + '';\n                        val += '';\n                        val = parseFloat(val.replace(',', '.'));\n                        val = !isNaN(val) ? val : defValue;\n                        var uN = valCopy.replace(val, '');\n                        if (a.indexOf(units, uN) >= 0)\n                            unit = uN;\n                    }\n                }\n            }\n            if (!a.isUndefined(max) && max !== '')\n                val = val > max ? max : val;\n            if (!a.isUndefined(min) && min !== '')\n                val = val < min ? min : val;\n            return {\n                force,\n                value: val,\n                unit\n            };\n        },\n        render() {\n            Input.prototype.render.call(this);\n            this.unitEl = null;\n            const unit = this.getUnitEl();\n            unit && this.$el.find(`.${ this.ppfx }field-units`).get(0).appendChild(unit);\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/model/PropertyInteger',[\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    './Property',\n    '../../domain_abstract/ui/InputNumber'\n], function (a, Property, InputNumber) {\n    'use strict';\n    return Property.extend({\n        defaults: {\n            ...Property.prototype.defaults,\n            units: [],\n            unit: '',\n            step: 1,\n            min: '',\n            max: ''\n        },\n        initialize(props = {}, opts = {}) {\n            Property.callParentInit(Property, this, props, opts);\n            const unit = this.get('unit');\n            const units = this.get('units');\n            this.input = new InputNumber({ model: this });\n            if (units.length && !unit) {\n                this.set('unit', units[0]);\n            }\n            Property.callInit(this, props, opts);\n        },\n        clearValue(opts = {}) {\n            this.set({\n                value: undefined,\n                unit: undefined\n            }, opts);\n            return this;\n        },\n        parseValue(val) {\n            const parsed = Property.prototype.parseValue.apply(this, arguments);\n            const {value, unit} = this.input.validateInputValue(parsed.value, { deepCheck: 1 });\n            parsed.value = value;\n            parsed.unit = unit;\n            return parsed;\n        },\n        getFullValue() {\n            let value = this.get('value');\n            let unit = this.get('unit');\n            value = !a.isUndefined(value) ? value : '';\n            unit = !a.isUndefined(unit) && value ? unit : '';\n            value = `${ value }${ unit }`;\n            return Property.prototype.getFullValue.apply(this, [value]);\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/model/PropertySlider',[\n    \"skylark-langx/langx\",\n\t'./PropertyInteger'\n], function (Property) {\n    'use strict';\n    return Property.extend({\n        defaults: {\n            ...Property.prototype.defaults,\n            showInput: 1\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/view/PropertySliderView',['./PropertyIntegerView'], function (Property) {\n    'use strict';\n    return Property.extend({\n        events() {\n            return {\n                ...Property.prototype.events,\n                'change [type=range]': 'inputValueChanged',\n                'input [type=range]': 'inputValueChangedSoft',\n                change: ''\n            };\n        },\n        templateInput(model) {\n            const ppfx = this.ppfx;\n            return `\n      <div class=\"${ ppfx }field ${ ppfx }field-range\">\n        <input type=\"range\"\n          min=\"${ model.get('min') }\"\n          max=\"${ model.get('max') }\"\n          step=\"${ model.get('step') }\"/>\n      </div>\n    `;\n        },\n        getSliderEl() {\n            if (!this.slider) {\n                this.slider = this.el.querySelector('input[type=range]');\n            }\n            return this.slider;\n        },\n        inputValueChanged() {\n            const model = this.model;\n            const step = model.get('step');\n            this.getInputEl().value = this.getSliderEl().value;\n            const value = this.getInputValue() - step;\n            model.set('value', value, { avoidStore: 1 }).set('value', value + step);\n            this.elementUpdated();\n        },\n        inputValueChangedSoft() {\n            this.getInputEl().value = this.getSliderEl().value;\n            this.model.set('value', this.getInputValue(), { avoidStore: 1 });\n            this.elementUpdated();\n        },\n        setValue(value) {\n            const parsed = this.model.parseValue(value);\n            this.getSliderEl().value = parseFloat(parsed.value);\n            Property.prototype.setValue.apply(this, arguments);\n        },\n        onRender() {\n            Property.prototype.onRender.apply(this, arguments);\n            if (!this.model.get('showInput')) {\n                this.inputInst.el.style.display = 'none';\n            }\n        },\n        clearCached() {\n            Property.prototype.clearCached.apply(this, arguments);\n            this.slider = null;\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/model/Properties',[\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    '../../domain_abstract/model/TypeableCollection',\n    './Property',\n    './PropertyStack',\n    './../view/PropertyStackView',\n    './PropertyComposite',\n    './../view/PropertyCompositeView',\n    './../view/PropertyFileView',\n    './../view/PropertyColorView',\n    './PropertySelect',\n    './../view/PropertySelectView',\n    './PropertyRadio',\n    './../view/PropertyRadioView',\n    './PropertySlider',\n    './../view/PropertySliderView',\n    './PropertyInteger',\n    './../view/PropertyIntegerView',\n    './../view/PropertyView'\n], function (langx,Backbone, TypeableCollection, Property, PropertyStack, PropertyStackView, PropertyComposite, PropertyCompositeView, PropertyFileView, PropertyColorView, PropertySelect, PropertySelectView, PropertyRadio, PropertyRadioView, PropertySlider, PropertySliderView, PropertyInteger, PropertyIntegerView, PropertyView) {\n    'use strict';\n    return Backbone.Collection.extend(TypeableCollection).extend({\n        types: [\n            {\n                id: 'stack',\n                model: PropertyStack,\n                view: PropertyStackView,\n                isType(value) {\n                    if (value && value.type == 'stack') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'composite',\n                model: PropertyComposite,\n                view: PropertyCompositeView,\n                isType(value) {\n                    if (value && value.type == 'composite') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'file',\n                model: Property,\n                view: PropertyFileView,\n                isType(value) {\n                    if (value && value.type == 'file') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'color',\n                model: Property,\n                view: PropertyColorView,\n                isType(value) {\n                    if (value && value.type == 'color') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'select',\n                model: PropertySelect,\n                view: PropertySelectView,\n                isType(value) {\n                    if (value && value.type == 'select') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'radio',\n                model: PropertyRadio,\n                view: PropertyRadioView,\n                isType(value) {\n                    if (value && value.type == 'radio') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'slider',\n                model: PropertySlider,\n                view: PropertySliderView,\n                isType(value) {\n                    if (value && value.type == 'slider') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'integer',\n                model: PropertyInteger,\n                view: PropertyIntegerView,\n                isType(value) {\n                    if (value && value.type == 'integer') {\n                        return value;\n                    }\n                }\n            },\n            {\n                id: 'base',\n                model: Property,\n                view: PropertyView,\n                isType(value) {\n                    value.type = 'base';\n                    return value;\n                }\n            }\n        ],\n        deepClone() {\n            const collection = this.clone();\n            collection.reset(collection.map(model => {\n                const cloned = model.clone();\n                cloned.typeView = model.typeView;\n                return cloned;\n            }));\n            return collection;\n        },\n        parseValue(value) {\n            const properties = [];\n            const values = value.split(' ');\n            values.forEach((value, i) => {\n                const property = this.at(i);\n                if (!property)\n                    return;\n                properties.push(langx.mixin({},property.attributes,{ value }));\n            });\n            return properties;\n        },\n        getFullValue() {\n            let result = '';\n            this.each(model => result += `${ model.getFullValue() } `);\n            return result.trim();\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/model/PropertyFactory',[],function () {\n    'use strict';\n    return () => ({\n        build(props) {\n            var objs = [];\n            var dftFixedValues = [\n                'initial',\n                'inherit'\n            ];\n            if (typeof props === 'string')\n                props = [props];\n            for (var i = 0, len = props.length; i < len; i++) {\n                var obj = {};\n                var prop = props[i];\n                obj.property = prop;\n                switch (prop) {\n                case 'border-radius-c':\n                    obj.property = 'border-radius';\n                    break;\n                }\n                switch (prop) {\n                case 'top':\n                case 'right':\n                case 'bottom':\n                case 'left':\n                case 'margin-top':\n                case 'margin-right':\n                case 'margin-bottom':\n                case 'margin-left':\n                case 'padding-top':\n                case 'padding-right':\n                case 'padding-bottom':\n                case 'padding-left':\n                case 'width':\n                case 'max-width':\n                case 'min-width':\n                case 'height':\n                case 'max-height':\n                case 'min-height':\n                case 'flex-basis':\n                    obj.fixedValues = [\n                        'initial',\n                        'inherit',\n                        'auto'\n                    ];\n                    break;\n                case 'font-size':\n                    obj.fixedValues = [\n                        'medium',\n                        'xx-small',\n                        'x-small',\n                        'small',\n                        'large',\n                        'x-large',\n                        'xx-large',\n                        'smaller',\n                        'larger',\n                        'length',\n                        'initial',\n                        'inherit'\n                    ];\n                    break;\n                case 'letter-spacing':\n                case 'line-height':\n                    obj.fixedValues = [\n                        'normal',\n                        'initial',\n                        'inherit'\n                    ];\n                    break;\n                }\n                switch (prop) {\n                case 'float':\n                case 'position':\n                case 'text-align':\n                    obj.type = 'radio';\n                    break;\n                case 'display':\n                case 'flex-direction':\n                case 'flex-wrap':\n                case 'justify-content':\n                case 'align-items':\n                case 'align-content':\n                case 'align-self':\n                case 'font-family':\n                case 'font-weight':\n                case 'border-style':\n                case 'box-shadow-type':\n                case 'background-repeat':\n                case 'background-position':\n                case 'background-attachment':\n                case 'background-size':\n                case 'transition-property':\n                case 'transition-timing-function':\n                case 'cursor':\n                case 'overflow':\n                case 'overflow-x':\n                case 'overflow-y':\n                    obj.type = 'select';\n                    break;\n                case 'top':\n                case 'right':\n                case 'bottom':\n                case 'left':\n                case 'margin-top':\n                case 'margin-right':\n                case 'margin-bottom':\n                case 'margin-left':\n                case 'padding-top':\n                case 'padding-right':\n                case 'padding-bottom':\n                case 'padding-left':\n                case 'min-height':\n                case 'min-width':\n                case 'max-height':\n                case 'max-width':\n                case 'width':\n                case 'height':\n                case 'font-size':\n                case 'letter-spacing':\n                case 'line-height':\n                case 'text-shadow-h':\n                case 'text-shadow-v':\n                case 'text-shadow-blur':\n                case 'border-radius-c':\n                case 'border-top-left-radius':\n                case 'border-top-right-radius':\n                case 'border-bottom-left-radius':\n                case 'border-bottom-right-radius':\n                case 'border-width':\n                case 'box-shadow-h':\n                case 'box-shadow-v':\n                case 'box-shadow-blur':\n                case 'box-shadow-spread':\n                case 'transition-duration':\n                case 'perspective':\n                case 'transform-rotate-x':\n                case 'transform-rotate-y':\n                case 'transform-rotate-z':\n                case 'transform-scale-x':\n                case 'transform-scale-y':\n                case 'transform-scale-z':\n                case 'order':\n                case 'flex-grow':\n                case 'flex-shrink':\n                case 'flex-basis':\n                    obj.type = 'integer';\n                    break;\n                case 'margin':\n                case 'padding':\n                case 'border-radius':\n                case 'border':\n                case 'transform':\n                    obj.type = 'composite';\n                    break;\n                case 'color':\n                case 'text-shadow-color':\n                case 'background-color':\n                case 'border-color':\n                case 'box-shadow-color':\n                    obj.type = 'color';\n                    break;\n                case 'text-shadow':\n                case 'box-shadow':\n                case 'background':\n                case 'transition':\n                    obj.type = 'stack';\n                    break;\n                case 'background-image':\n                    obj.type = 'file';\n                    break;\n                }\n                switch (prop) {\n                case 'float':\n                case 'background-color':\n                case 'text-shadow':\n                    obj.defaults = 'none';\n                    break;\n                case 'display':\n                    obj.defaults = 'block';\n                    break;\n                case 'flex-direction':\n                    obj.defaults = 'row';\n                    break;\n                case 'flex-wrap':\n                    obj.defaults = 'nowrap';\n                    break;\n                case 'justify-content':\n                    obj.defaults = 'flex-start';\n                    break;\n                case 'align-items':\n                    obj.defaults = 'stretch';\n                    break;\n                case 'align-content':\n                    obj.defaults = 'stretch';\n                    break;\n                case 'align-self':\n                    obj.defaults = 'auto';\n                    break;\n                case 'position':\n                    obj.defaults = 'static';\n                    break;\n                case 'margin-top':\n                case 'margin-right':\n                case 'margin-bottom':\n                case 'margin-left':\n                case 'padding-top':\n                case 'padding-right':\n                case 'padding-bottom':\n                case 'padding-left':\n                case 'text-shadow-h':\n                case 'text-shadow-v':\n                case 'text-shadow-blur':\n                case 'border-radius-c':\n                case 'box-shadow-h':\n                case 'box-shadow-v':\n                case 'box-shadow-spread':\n                case 'perspective':\n                case 'transform-rotate-x':\n                case 'transform-rotate-y':\n                case 'transform-rotate-z':\n                case 'order':\n                case 'flex-grow':\n                    obj.defaults = 0;\n                    break;\n                case 'border-top-left-radius':\n                case 'border-top-right-radius':\n                case 'border-bottom-left-radius':\n                case 'border-bottom-right-radius':\n                    obj.defaults = '0px';\n                    break;\n                case 'transform-scale-x':\n                case 'transform-scale-y':\n                case 'transform-scale-z':\n                case 'flex-shrink':\n                    obj.defaults = 1;\n                    break;\n                case 'box-shadow-blur':\n                    obj.defaults = '5px';\n                    break;\n                case 'top':\n                case 'right':\n                case 'bottom':\n                case 'left':\n                case 'min-height':\n                case 'min-width':\n                case 'max-height':\n                case 'max-width':\n                case 'width':\n                case 'height':\n                case 'background-size':\n                case 'cursor':\n                case 'flex-basis':\n                    obj.defaults = 'auto';\n                    break;\n                case 'font-family':\n                    obj.defaults = 'Arial, Helvetica, sans-serif';\n                    break;\n                case 'font-size':\n                case 'border-width':\n                    obj.defaults = 'medium';\n                    break;\n                case 'font-weight':\n                    obj.defaults = '400';\n                    break;\n                case 'letter-spacing':\n                case 'line-height':\n                    obj.defaults = 'normal';\n                    break;\n                case 'color':\n                case 'text-shadow-color':\n                case 'border-color':\n                case 'box-shadow-color':\n                    obj.defaults = 'black';\n                    break;\n                case 'text-align':\n                    obj.defaults = 'left';\n                    break;\n                case 'border-style':\n                    obj.defaults = 'solid';\n                    break;\n                case 'box-shadow-type':\n                    obj.defaults = '';\n                    break;\n                case 'background-repeat':\n                    obj.defaults = 'repeat';\n                    break;\n                case 'background-position':\n                    obj.defaults = 'left top';\n                    break;\n                case 'background-attachment':\n                    obj.defaults = 'scroll';\n                    break;\n                case 'transition-property':\n                    obj.defaults = 'width';\n                    break;\n                case 'transition-duration':\n                    obj.defaults = '2';\n                    break;\n                case 'transition-timing-function':\n                    obj.defaults = 'ease';\n                    break;\n                case 'overflow':\n                case 'overflow-x':\n                case 'overflow-y':\n                    obj.defaults = 'visible';\n                    break;\n                }\n                switch (prop) {\n                case 'flex-direction':\n                case 'flex-wrap':\n                case 'justify-content':\n                case 'align-items':\n                case 'align-content':\n                    obj.requires = { display: ['flex'] };\n                    break;\n                case 'order':\n                case 'flex-basis':\n                case 'flex-grow':\n                case 'flex-shrink':\n                case 'align-self':\n                    obj.requiresParent = { display: ['flex'] };\n                    break;\n                }\n                switch (prop) {\n                case 'top':\n                case 'bottom':\n                case 'margin-top':\n                case 'margin-bottom':\n                case 'padding-top':\n                case 'padding-bottom':\n                case 'min-height':\n                case 'max-height':\n                case 'height':\n                    obj.units = [\n                        'px',\n                        '%',\n                        'vh'\n                    ];\n                    break;\n                case 'right':\n                case 'left':\n                case 'margin-right':\n                case 'margin-left':\n                case 'padding-right':\n                case 'padding-left':\n                case 'min-width':\n                case 'max-width':\n                case 'width':\n                    obj.units = [\n                        'px',\n                        '%',\n                        'vw'\n                    ];\n                    break;\n                case 'flex-basis':\n                    obj.units = [\n                        'px',\n                        '%',\n                        'vw',\n                        'vh'\n                    ];\n                    break;\n                case 'text-shadow-v':\n                case 'text-shadow-h':\n                case 'text-shadow-blur':\n                case 'border-radius-c':\n                case 'border-top-left-radius':\n                case 'border-top-right-radius':\n                case 'border-bottom-left-radius':\n                case 'border-bottom-right-radius':\n                case 'box-shadow-h':\n                case 'box-shadow-v':\n                    obj.units = [\n                        'px',\n                        '%'\n                    ];\n                    break;\n                case 'font-size':\n                case 'letter-spacing':\n                case 'line-height':\n                    obj.units = [\n                        'px',\n                        'em',\n                        'rem',\n                        '%'\n                    ];\n                    break;\n                case 'border-width':\n                    obj.units = [\n                        'px',\n                        'em'\n                    ];\n                    break;\n                case 'box-shadow-blur':\n                case 'box-shadow-spread':\n                case 'perspective':\n                    obj.units = ['px'];\n                    break;\n                case 'transition-duration':\n                    obj.units = ['s'];\n                    break;\n                case 'transform-rotate-x':\n                case 'transform-rotate-y':\n                case 'transform-rotate-z':\n                    obj.units = ['deg'];\n                    break;\n                }\n                switch (prop) {\n                case 'padding-top':\n                case 'padding-right':\n                case 'padding-bottom':\n                case 'padding-left':\n                case 'min-height':\n                case 'min-width':\n                case 'max-height':\n                case 'max-width':\n                case 'width':\n                case 'height':\n                case 'font-size':\n                case 'text-shadow-blur':\n                case 'border-radius-c':\n                case 'border-top-left-radius':\n                case 'border-top-right-radius':\n                case 'border-bottom-left-radius':\n                case 'border-bottom-right-radius':\n                case 'border-width':\n                case 'box-shadow-blur':\n                case 'transition-duration':\n                case 'perspective':\n                case 'flex-basis':\n                    obj.min = 0;\n                    break;\n                }\n                switch (prop) {\n                case 'text-shadow':\n                case 'box-shadow':\n                case 'background':\n                    obj.preview = true;\n                    break;\n                }\n                switch (prop) {\n                case 'background':\n                    obj.detached = true;\n                    break;\n                }\n                switch (prop) {\n                case 'transform-rotate-x':\n                    obj.functionName = 'rotateX';\n                    break;\n                case 'transform-rotate-y':\n                    obj.functionName = 'rotateY';\n                    break;\n                case 'transform-rotate-z':\n                    obj.functionName = 'rotateZ';\n                    break;\n                case 'transform-scale-x':\n                    obj.functionName = 'scaleX';\n                    break;\n                case 'transform-scale-y':\n                    obj.functionName = 'scaleY';\n                    break;\n                case 'transform-scale-z':\n                    obj.functionName = 'scaleZ';\n                    break;\n                case 'background-image':\n                    obj.functionName = 'url';\n                    break;\n                }\n                switch (prop) {\n                case 'float':\n                    obj.list = [\n                        { value: 'none' },\n                        { value: 'left' },\n                        { value: 'right' }\n                    ];\n                    break;\n                case 'display':\n                    obj.list = [\n                        { value: 'block' },\n                        { value: 'inline' },\n                        { value: 'inline-block' },\n                        { value: 'flex' },\n                        { value: 'none' }\n                    ];\n                    break;\n                case 'flex-direction':\n                    obj.list = [\n                        { value: 'row' },\n                        { value: 'row-reverse' },\n                        { value: 'column' },\n                        { value: 'column-reverse' }\n                    ];\n                    break;\n                case 'flex-wrap':\n                    obj.list = [\n                        { value: 'nowrap' },\n                        { value: 'wrap' },\n                        { value: 'wrap-reverse' }\n                    ];\n                    break;\n                case 'justify-content':\n                    obj.list = [\n                        { value: 'flex-start' },\n                        { value: 'flex-end' },\n                        { value: 'center' },\n                        { value: 'space-between' },\n                        { value: 'space-around' },\n                        { value: 'space-evenly' }\n                    ];\n                    break;\n                case 'align-items':\n                    obj.list = [\n                        { value: 'flex-start' },\n                        { value: 'flex-end' },\n                        { value: 'center' },\n                        { value: 'baseline' },\n                        { value: 'stretch' }\n                    ];\n                    break;\n                case 'align-content':\n                    obj.list = [\n                        { value: 'flex-start' },\n                        { value: 'flex-end' },\n                        { value: 'center' },\n                        { value: 'space-between' },\n                        { value: 'space-around' },\n                        { value: 'stretch' }\n                    ];\n                    break;\n                case 'align-self':\n                    obj.list = [\n                        { value: 'auto' },\n                        { value: 'flex-start' },\n                        { value: 'flex-end' },\n                        { value: 'center' },\n                        { value: 'baseline' },\n                        { value: 'stretch' }\n                    ];\n                    break;\n                case 'position':\n                    obj.list = [\n                        { value: 'static' },\n                        { value: 'relative' },\n                        { value: 'absolute' },\n                        { value: 'fixed' }\n                    ];\n                    break;\n                case 'font-family':\n                    var ss = ', sans-serif';\n                    var fonts = [\n                        'Arial, Helvetica' + ss,\n                        'Arial Black, Gadget' + ss,\n                        'Brush Script MT' + ss,\n                        'Comic Sans MS, cursive' + ss,\n                        'Courier New, Courier, monospace',\n                        'Georgia, serif',\n                        'Helvetica, serif',\n                        'Impact, Charcoal' + ss,\n                        'Lucida Sans Unicode, Lucida Grande' + ss,\n                        'Tahoma, Geneva' + ss,\n                        'Times New Roman, Times, serif',\n                        'Trebuchet MS, Helvetica' + ss,\n                        'Verdana, Geneva' + ss\n                    ];\n                    obj.list = [];\n                    for (var j = 0, l = fonts.length; j < l; j++) {\n                        var font = {};\n                        font.value = fonts[j];\n                        font.name = fonts[j].split(',')[0];\n                        obj.list.push(font);\n                    }\n                    break;\n                case 'font-weight':\n                    obj.list = [\n                        {\n                            value: '100',\n                            name: 'Thin'\n                        },\n                        {\n                            value: '200',\n                            name: 'Extra-Light'\n                        },\n                        {\n                            value: '300',\n                            name: 'Light'\n                        },\n                        {\n                            value: '400',\n                            name: 'Normal'\n                        },\n                        {\n                            value: '500',\n                            name: 'Medium'\n                        },\n                        {\n                            value: '600',\n                            name: 'Semi-Bold'\n                        },\n                        {\n                            value: '700',\n                            name: 'Bold'\n                        },\n                        {\n                            value: '800',\n                            name: 'Extra-Bold'\n                        },\n                        {\n                            value: '900',\n                            name: 'Ultra-Bold'\n                        }\n                    ];\n                    break;\n                case 'text-align':\n                    obj.list = [\n                        { value: 'left' },\n                        { value: 'center' },\n                        { value: 'right' },\n                        { value: 'justify' }\n                    ];\n                    break;\n                case 'border-style':\n                    obj.list = [\n                        { value: 'none' },\n                        { value: 'solid' },\n                        { value: 'dotted' },\n                        { value: 'dashed' },\n                        { value: 'double' },\n                        { value: 'groove' },\n                        { value: 'ridge' },\n                        { value: 'inset' },\n                        { value: 'outset' }\n                    ];\n                    break;\n                case 'box-shadow-type':\n                    obj.list = [\n                        {\n                            value: '',\n                            name: 'Outside'\n                        },\n                        {\n                            value: 'inset',\n                            name: 'Inside'\n                        }\n                    ];\n                    break;\n                case 'background-repeat':\n                    obj.list = [\n                        { value: 'repeat' },\n                        { value: 'repeat-x' },\n                        { value: 'repeat-y' },\n                        { value: 'no-repeat' }\n                    ];\n                    break;\n                case 'background-position':\n                    obj.list = [\n                        { value: 'left top' },\n                        { value: 'left center' },\n                        { value: 'left bottom' },\n                        { value: 'right top' },\n                        { value: 'right center' },\n                        { value: 'right bottom' },\n                        { value: 'center top' },\n                        { value: 'center center' },\n                        { value: 'center bottom' }\n                    ];\n                    break;\n                case 'background-attachment':\n                    obj.list = [\n                        { value: 'scroll' },\n                        { value: 'fixed' },\n                        { value: 'local' }\n                    ];\n                    break;\n                case 'background-size':\n                    obj.list = [\n                        { value: 'auto' },\n                        { value: 'cover' },\n                        { value: 'contain' }\n                    ];\n                    break;\n                case 'transition-property':\n                    obj.list = [\n                        { value: 'all' },\n                        { value: 'width' },\n                        { value: 'height' },\n                        { value: 'background-color' },\n                        { value: 'transform' },\n                        { value: 'box-shadow' },\n                        { value: 'opacity' }\n                    ];\n                    break;\n                case 'transition-timing-function':\n                    obj.list = [\n                        { value: 'linear' },\n                        { value: 'ease' },\n                        { value: 'ease-in' },\n                        { value: 'ease-out' },\n                        { value: 'ease-in-out' }\n                    ];\n                    break;\n                case 'cursor':\n                    obj.list = [\n                        { value: 'auto' },\n                        { value: 'pointer' },\n                        { value: 'copy' },\n                        { value: 'crosshair' },\n                        { value: 'grab' },\n                        { value: 'grabbing' },\n                        { value: 'help' },\n                        { value: 'move' },\n                        { value: 'text' }\n                    ];\n                    break;\n                case 'overflow':\n                case 'overflow-x':\n                case 'overflow-y':\n                    obj.list = [\n                        { value: 'visible' },\n                        { value: 'hidden' },\n                        { value: 'scroll' },\n                        { value: 'auto' }\n                    ];\n                    break;\n                }\n                switch (prop) {\n                case 'margin':\n                    obj.properties = this.build([\n                        'margin-top',\n                        'margin-right',\n                        'margin-bottom',\n                        'margin-left'\n                    ]);\n                    break;\n                case 'padding':\n                    obj.properties = this.build([\n                        'padding-top',\n                        'padding-right',\n                        'padding-bottom',\n                        'padding-left'\n                    ]);\n                    break;\n                case 'text-shadow':\n                    obj.properties = this.build([\n                        'text-shadow-h',\n                        'text-shadow-v',\n                        'text-shadow-blur',\n                        'text-shadow-color'\n                    ]);\n                    break;\n                case 'border':\n                    obj.properties = this.build([\n                        'border-width',\n                        'border-style',\n                        'border-color'\n                    ]);\n                    break;\n                case 'border-radius':\n                    obj.properties = this.build([\n                        'border-top-left-radius',\n                        'border-top-right-radius',\n                        'border-bottom-right-radius',\n                        'border-bottom-left-radius'\n                    ]);\n                    break;\n                case 'box-shadow':\n                    obj.properties = this.build([\n                        'box-shadow-h',\n                        'box-shadow-v',\n                        'box-shadow-blur',\n                        'box-shadow-spread',\n                        'box-shadow-color',\n                        'box-shadow-type'\n                    ]);\n                    break;\n                case 'background':\n                    obj.properties = this.build([\n                        'background-image',\n                        'background-repeat',\n                        'background-position',\n                        'background-attachment',\n                        'background-size'\n                    ]);\n                    break;\n                case 'transition':\n                    obj.properties = this.build([\n                        'transition-property',\n                        'transition-duration',\n                        'transition-timing-function'\n                    ]);\n                    break;\n                case 'transform':\n                    obj.properties = this.build([\n                        'transform-rotate-x',\n                        'transform-rotate-y',\n                        'transform-rotate-z',\n                        'transform-scale-x',\n                        'transform-scale-y',\n                        'transform-scale-z'\n                    ]);\n                    break;\n                }\n                objs.push(obj);\n            }\n            return objs;\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/model/Sector',[\n    'skylark-backbone',\n    'skylark-underscore',\n    './Properties',\n    './PropertyFactory'\n], function (Backbone, a, Properties, PropertyFactory) {\n    'use strict';\n    return Backbone.Model.undefined({\n        defaults: {\n            id: '',\n            name: '',\n            open: true,\n            buildProps: '',\n            extendBuilded: 1,\n            properties: []\n        },\n        initialize(opts) {\n            const o = opts || {};\n            const builded = this.buildProperties(o.buildProps);\n            const name = this.get('name') || '';\n            let props = [];\n            !this.get('id') && this.set('id', name.replace(/ /g, '_').toLowerCase());\n            if (!builded)\n                props = this.get('properties');\n            else\n                props = this.extendProperties(builded);\n            const propsModel = new Properties(props);\n            propsModel.sector = this;\n            this.set('properties', propsModel);\n        },\n        extendProperties(props, moProps, ex) {\n            var pLen = props.length;\n            var mProps = moProps || this.get('properties');\n            var ext = this.get('extendBuilded');\n            var isolated = [];\n            for (var i = 0, len = mProps.length; i < len; i++) {\n                var mProp = mProps[i];\n                var found = 0;\n                for (var j = 0; j < pLen; j++) {\n                    var prop = props[j];\n                    if (mProp.property == prop.property || mProp.id == prop.property) {\n                        var mPProps = mProp.properties;\n                        if (mPProps && mPProps.length) {\n                            mProp.properties = this.extendProperties(prop.properties || [], mPProps, 1);\n                        }\n                        props[j] = ext ? a.extend(prop, mProp) : mProp;\n                        isolated[j] = props[j];\n                        found = 1;\n                        continue;\n                    }\n                }\n                if (!found) {\n                    props.push(mProp);\n                    isolated.push(mProp);\n                }\n            }\n            return ex ? isolated.filter(i => i) : props;\n        },\n        buildProperties(props) {\n            var r;\n            var buildP = props || [];\n            if (!buildP.length)\n                return;\n            if (!this.propFactory)\n                this.propFactory = new PropertyFactory();\n            r = this.propFactory.build(buildP);\n            return r;\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/model/Sectors',[\n    'skylark-backbone',\n    './Sector'\n], function (Backbone, Sector) {\n    'use strict';\n    return Backbone.Collection.extend({ model: Sector });\n});\ndefine('skylark-grapejs/style_manager/view/SectorView',[\n    'skylark-backbone',\n    'skylark-underscore',\n    './PropertiesView'\n], function (Backbone, _, PropertiesView) {\n    'use strict';\n    return Backbone.View.extend({\n        template: _.template(`\n  <div class=\"<%= pfx %>title\" data-sector-title>\n    <i id=\"<%= pfx %>caret\" class=\"fa\"></i>\n    <%= label %>\n  </div>`),\n        events: { 'click [data-sector-title]': 'toggle' },\n        initialize(o) {\n            this.config = o.config || {};\n            this.em = this.config.em;\n            this.pfx = this.config.stylePrefix || '';\n            this.target = o.target || {};\n            this.propTarget = o.propTarget || {};\n            this.caretR = 'fa-caret-right';\n            this.caretD = 'fa-caret-down';\n            const model = this.model;\n            this.listenTo(model, 'change:open', this.updateOpen);\n            this.listenTo(model, 'updateVisibility', this.updateVisibility);\n            this.listenTo(model, 'destroy remove', this.remove);\n        },\n        updateVisibility() {\n            var show;\n            this.model.get('properties').each(prop => {\n                if (prop.get('visible')) {\n                    show = 1;\n                }\n            });\n            this.el.style.display = show ? 'block' : 'none';\n        },\n        updateOpen() {\n            if (this.model.get('open'))\n                this.show();\n            else\n                this.hide();\n        },\n        show() {\n            this.$el.addClass(this.pfx + 'open');\n            this.getPropertiesEl().style.display = '';\n            this.$caret.removeClass(this.caretR).addClass(this.caretD);\n        },\n        hide() {\n            this.$el.removeClass(this.pfx + 'open');\n            this.getPropertiesEl().style.display = 'none';\n            this.$caret.removeClass(this.caretD).addClass(this.caretR);\n        },\n        getPropertiesEl() {\n            return this.$el.find(`.${ this.pfx }properties`).get(0);\n        },\n        toggle(e) {\n            var v = this.model.get('open') ? 0 : 1;\n            this.model.set('open', v);\n        },\n        render() {\n            const {pfx, model, em, $el} = this;\n            const {id, name} = model.attributes;\n            const label = em && em.t(`styleManager.sectors.${ id }`) || name;\n            $el.html(this.undefined({\n                pfx,\n                label\n            }));\n            this.$caret = $el.find(`#${ pfx }caret`);\n            this.renderProperties();\n            $el.attr('class', `${ pfx }sector ${ pfx }sector__${ id } no-select`);\n            this.updateOpen();\n            return this;\n        },\n        renderProperties() {\n            var objs = this.model.get('properties');\n            if (objs) {\n                var view = new PropertiesView({\n                    collection: objs,\n                    target: this.target,\n                    propTarget: this.propTarget,\n                    config: this.config\n                });\n                this.$el.append(view.render().el);\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/view/SectorsView',[\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins',\n    '../../utils/dom',\n    './SectorView'\n], function (Backbone, a, b, c, SectorView) {\n    'use strict';\n    const helperCls = 'hc-state';\n    return Backbone.View.undefined({\n        initialize(o = {}) {\n            const config = o.config || {};\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.target = o.target || {};\n            this.config = config;\n            const target = {};\n            a.extend(target, Backbone.Events);\n            const body = document.body;\n            const dummy = document.createElement(`el-${ new Date().getTime() }`);\n            body.appendChild(dummy);\n            target.computedDefault = { ...window.getComputedStyle(dummy) };\n            body.removeChild(dummy);\n            this.propTarget = target;\n            const coll = this.collection;\n            const events = 'component:toggled component:update:classes change:state change:device frame:resized';\n            this.listenTo(coll, 'add', this.addTo);\n            this.listenTo(coll, 'reset', this.render);\n            this.listenTo(this.target, events, this.targetUpdated);\n        },\n        addTo(model, coll, opts = {}) {\n            this.addToCollection(model, null, opts);\n        },\n        toggleStateCls(targets = [], enable) {\n            targets.forEach(trg => {\n                const el = trg.getEl();\n                el && el.classList[enable ? 'add' : 'remove'](helperCls);\n            });\n        },\n        targetUpdated(trg) {\n            const em = this.target;\n            const pt = this.propTarget;\n            const targets = em.getSelectedAll();\n            let model = em.getSelected();\n            const mdToClear = trg && !!trg.toHTML ? trg : model;\n            mdToClear && this.toggleStateCls([mdToClear]);\n            if (!model)\n                return;\n            const config = em.get('Config');\n            const state = !config.devicePreviewMode ? em.get('state') : '';\n            const {componentFirst} = em.get('SelectorManager').getConfig();\n            const el = model.getEl();\n            pt.helper = null;\n            pt.targets = null;\n            if (el && b.isTaggableNode(el)) {\n                const stateStr = state ? `:${ state }` : null;\n                pt.computed = window.getComputedStyle(el, stateStr);\n            }\n            const appendStateRule = (style = {}) => {\n                const cc = em.get('CssComposer');\n                const rules = cc.getAll();\n                let helperRule = cc.getClassRule(helperCls);\n                if (!helperRule) {\n                    helperRule = cc.setClassRule(helperCls);\n                } else {\n                    rules.remove(helperRule);\n                    rules.add(helperRule);\n                }\n                helperRule.set('important', 1);\n                helperRule.setStyle(style);\n                pt.helper = helperRule;\n            };\n            model = em.get('StyleManager').getModelToStyle(model);\n            if (state) {\n                appendStateRule(model.getStyle());\n                this.toggleStateCls(targets, 1);\n            }\n            pt.model = model;\n            if (componentFirst)\n                pt.targets = targets;\n            pt.trigger('update');\n        },\n        setTarget(target, opts = {}) {\n            const em = this.target;\n            const trgs = a.isArray(target) ? target : [target];\n            const {targetIsClass, stylable} = opts;\n            const models = [];\n            trgs.forEach(target => {\n                let model = target;\n                if (a.isString(target)) {\n                    let rule;\n                    const rules = em.get('CssComposer').getAll();\n                    if (targetIsClass) {\n                        rule = rules.filter(rule => rule.get('selectors').getFullString() === target)[0];\n                    }\n                    if (!rule) {\n                        rule = rules.filter(rule => rule.get('selectorsAdd') === target)[0];\n                    }\n                    if (!rule) {\n                        rule = rules.add({\n                            selectors: [],\n                            selectorsAdd: target\n                        });\n                    }\n                    stylable && rule.set({ stylable });\n                    model = rule;\n                }\n                models.push(model);\n            });\n            const pt = this.propTarget;\n            pt.targets = models;\n            pt.trigger('update');\n            return models;\n        },\n        addToCollection(model, fragmentEl, opts = {}) {\n            const {pfx, target, propTarget, config, el} = this;\n            const appendTo = fragmentEl || el;\n            const rendered = new SectorView({\n                model,\n                id: `${ pfx }${ model.get('id') }`,\n                name: model.get('name'),\n                properties: model.get('properties'),\n                target,\n                propTarget,\n                config\n            }).render().el;\n            c.appendAtIndex(appendTo, rendered, opts.at);\n            return rendered;\n        },\n        render() {\n            const frag = document.createDocumentFragment();\n            const $el = this.$el;\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            $el.empty();\n            this.collection.each(model => this.addToCollection(model, frag));\n            $el.append(frag);\n            $el.addClass(`${ pfx }sectors ${ ppfx }one-bg ${ ppfx }two-color`);\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/style_manager/index',[\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    './config/config',\n    './model/Sectors',\n    './model/Properties',\n    './view/SectorsView'\n], function (langx,_, defaults, Sectors, Properties, SectorsView) {\n    'use strict';\n    return () => {\n        var c = {};\n        let properties;\n        var sectors, SectView;\n        return {\n            name: 'StyleManager',\n            getConfig() {\n                return c;\n            },\n            init(config) {\n                c = langx.mxinin({},defaults,conf);\n                const ppfx = c.pStylePrefix;\n                this.em = c.em;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                properties = new Properties();\n                sectors = new Sectors([], c);\n                SectView = new SectorsView({\n                    collection: sectors,\n                    target: c.em,\n                    config: c\n                });\n                return this;\n            },\n            onLoad() {\n                sectors.add(c.sectors);\n            },\n            postRender() {\n                const elTo = this.getConfig().appendTo;\n                if (elTo) {\n                    const el = _.isElement(elTo) ? elTo : document.querySelector(elTo);\n                    el.appendChild(this.render());\n                }\n            },\n            addSector(id, sector, opts = {}) {\n                let result = this.getSector(id);\n                if (!result) {\n                    sector.id = id;\n                    result = sectors.add(sector, opts);\n                }\n                return result;\n            },\n            getSector(id, opts = {}) {\n                const res = sectors.where({ id })[0];\n                !res && opts.warn && this._logNoSector(id);\n                return res;\n            },\n            removeSector(id) {\n                return this.getSectors().remove(this.getSector(id, { warn: 1 }));\n            },\n            getSectors() {\n                return sectors;\n            },\n            addProperty(sectorId, property, opts = {}) {\n                const sector = this.getSector(sectorId, { warn: 1 });\n                let prop = null;\n                if (sector)\n                    prop = sector.get('properties').add(property, opts);\n                return prop;\n            },\n            getProperty(sectorId, name) {\n                const sector = this.getSector(sectorId, { warn: 1 });\n                let prop = null;\n                if (sector) {\n                    prop = sector.get('properties').where({ property: name });\n                    prop = prop.length == 1 ? prop[0] : prop;\n                }\n                return prop;\n            },\n            removeProperty(sectorId, name) {\n                const props = this.getProperties(sectorId);\n                return props && props.remove(this.getProperty(sectorId, name));\n            },\n            getProperties(sectorId) {\n                let props = null;\n                const sector = this.getSector(sectorId, { warn: 1 });\n                if (sector)\n                    props = sector.get('properties');\n                return props;\n            },\n            getModelToStyle(model, options = {}) {\n                const em = c.em;\n                const {skipAdd} = options;\n                const classes = model.get('classes');\n                const id = model.getId();\n                if (em) {\n                    const config = em.getConfig();\n                    const um = em.get('UndoManager');\n                    const cssC = em.get('CssComposer');\n                    const sm = em.get('SelectorManager');\n                    const smConf = sm ? sm.getConfig() : {};\n                    const state = !config.devicePreviewMode ? em.get('state') : '';\n                    const valid = classes.getStyleable();\n                    const hasClasses = valid.length;\n                    const useClasses = !smConf.componentFirst || options.useClasses;\n                    const opts = { state };\n                    let rule;\n                    um.stop();\n                    if (hasClasses && useClasses) {\n                        const deviceW = em.getCurrentMedia();\n                        rule = cssC.get(valid, state, deviceW);\n                        if (!rule && !skipAdd) {\n                            rule = cssC.add(valid, state, deviceW);\n                        }\n                    } else if (config.avoidInlineStyle) {\n                        rule = cssC.getIdRule(id, opts);\n                        !rule && !skipAdd && (rule = cssC.setIdRule(id, {}, opts));\n                        if (model.is('wrapper'))\n                            rule.set('wrapper', 1);\n                    }\n                    rule && (model = rule);\n                    um.start();\n                }\n                return model;\n            },\n            addType(id, definition) {\n                properties.addType(id, definition);\n            },\n            getType(id) {\n                return properties.getType(id);\n            },\n            getTypes() {\n                return properties.getTypes();\n            },\n            createType(id, {model = {}, view = {}} = {}) {\n                const type = this.getType(id);\n                if (type) {\n                    return new type.view(\n                        langx.mixin({\n                            model: new type.model(model),\n                            config: c,\n                        },view)\n                    );\n                }\n            },\n            setTarget(target, opts) {\n                return SectView.setTarget(target, opts);\n            },\n            getEmitter() {\n                return SectView.propTarget;\n            },\n            render() {\n                return SectView.render().el;\n            },\n            _logNoSector(sectorId) {\n                const {em} = this;\n                em && em.logWarning(`'${ sectorId }' sector not found`);\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/modal_dialog/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: 'mdl-',\n        title: '',\n        content: '',\n        backdrop: true\n    };\n});\ndefine('skylark-grapejs/modal_dialog/model/Modal',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            title: '',\n            content: '',\n            open: false\n        }\n    });\n});\ndefine('skylark-grapejs/modal_dialog/view/ModalView',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    return Backbone.View.extend({\n        template({pfx, ppfx, content, title}) {\n            return `<div class=\"${ pfx }dialog ${ ppfx }one-bg ${ ppfx }two-color\">\n      <div class=\"${ pfx }header\">\n        <div class=\"${ pfx }title\">${ title }</div>\n        <div class=\"${ pfx }btn-close\" data-close-modal>&Cross;</div>\n      </div>\n      <div class=\"${ pfx }content\">\n        <div id=\"${ pfx }c\">${ content }</div>\n        <div style=\"clear:both\"></div>\n      </div>\n    </div>\n    <div class=\"${ pfx }collector\" style=\"display: none\"></div>`;\n        },\n        events: {\n            click: 'onClick',\n            'click [data-close-modal]': 'hide'\n        },\n        initialize(o) {\n            const model = this.model;\n            const config = o.config || {};\n            const pfx = config.stylePrefix || '';\n            this.config = config;\n            this.pfx = pfx;\n            this.ppfx = config.pStylePrefix || '';\n            this.listenTo(model, 'change:open', this.updateOpen);\n            this.listenTo(model, 'change:title', this.updateTitle);\n            this.listenTo(model, 'change:content', this.updateContent);\n        },\n        onClick(e) {\n            const bkd = this.config.backdrop;\n            bkd && e.target === this.el && this.hide();\n        },\n        getCollector() {\n            if (!this.$collector)\n                this.$collector = this.$el.find('.' + this.pfx + 'collector');\n            return this.$collector;\n        },\n        getContent() {\n            const pfx = this.pfx;\n            if (!this.$content) {\n                this.$content = this.$el.find(`.${ pfx }content #${ pfx }c`);\n            }\n            return this.$content;\n        },\n        getTitle() {\n            if (!this.$title)\n                this.$title = this.$el.find('.' + this.pfx + 'title');\n            return this.$title.get(0);\n        },\n        updateContent() {\n            var content = this.getContent();\n            const children = content.children();\n            const coll = this.getCollector();\n            const body = this.model.get('content');\n            children.length && coll.append(children);\n            content.empty().append(body);\n        },\n        updateTitle() {\n            var title = this.getTitle();\n            if (title)\n                title.innerHTML = this.model.get('title');\n        },\n        updateOpen() {\n            this.el.style.display = this.model.get('open') ? '' : 'none';\n        },\n        hide() {\n            this.model.set('open', 0);\n        },\n        show() {\n            this.model.set('open', 1);\n        },\n        render() {\n            const el = this.$el;\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            const obj = this.model.toJSON();\n            obj.pfx = this.pfx;\n            obj.ppfx = this.ppfx;\n            el.html(this.template(obj));\n            el.attr('class', `${ pfx }container`);\n            this.updateOpen();\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/modal_dialog/index',[\n    './config/config',\n    './model/Modal',\n    './view/ModalView'\n], function (defaults, ModalM, ModalView) {\n    'use strict';\n    return () => {\n        var c = {};\n        var model, modal;\n        const triggerEvent = (enable, em) => {\n            em && em.trigger(`modal:${ enable ? 'open' : 'close' }`);\n        };\n        return {\n            name: 'Modal',\n            getConfig() {\n                return c;\n            },\n            init(config = {}) {\n                c = {\n                    ...defaults,\n                    ...config\n                };\n                const em = c.em;\n                this.em = em;\n                var ppfx = c.pStylePrefix;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                model = new ModalM(c);\n                model.on('change:open', (m, enb) => triggerEvent(enb, em));\n                modal = new ModalView({\n                    model,\n                    config: c\n                });\n                return this;\n            },\n            postRender(view) {\n                const el = view.model.getConfig().el || view.el;\n                this.render().appendTo(el);\n            },\n            open(opts = {}) {\n                opts.title && this.setTitle(opts.title);\n                opts.content && this.setContent(opts.content);\n                modal.show();\n                return this;\n            },\n            close() {\n                modal.hide();\n                return this;\n            },\n            onceClose(clb) {\n                this.em.once('modal:close', clb);\n                return this;\n            },\n            onceOpen(clb) {\n                this.em.once('modal:open', clb);\n                return this;\n            },\n            isOpen() {\n                return !!model.get('open');\n            },\n            setTitle(title) {\n                model.set('title', title);\n                return this;\n            },\n            getTitle() {\n                return model.get('title');\n            },\n            setContent(content) {\n                model.set('content', ' ');\n                model.set('content', content);\n                return this;\n            },\n            getContent() {\n                return model.get('content');\n            },\n            getContentEl() {\n                return modal.getContent().get(0);\n            },\n            getModel() {\n                return model;\n            },\n            render() {\n                return modal.render().$el;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/code_manager/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: 'cm-',\n        inlineCss: false\n    };\n});\ndefine('skylark-grapejs/code_manager/model/HtmlGenerator',[\n    'skylark-backbone'\n], function (Backbone) {\n    'use strict';\n    return Backbone.Model.extend({\n        build(model, opts = {}) {\n            const models = model.get('components');\n            if (opts.exportWrapper) {\n                return model.toHTML({ ...opts.wrapperIsBody && { tag: 'body' } });\n            }\n            return this.buildModels(models);\n        },\n        buildModels(models) {\n            let code = '';\n            models.each(model => {\n                code += model.toHTML();\n            });\n            return code;\n        }\n    });\n});\ndefine('skylark-grapejs/code_manager/model/JsonGenerator',[\n    'skylark-underscore',\n    'skylark-backbone'\n], function (a, Backbone) {\n    'use strict';\n    return Backbone.Model.extend({\n        build(model) {\n            var json = model.toJSON();\n            this.beforeEach(json);\n            a.each(json, function (v, attr) {\n                var obj = json[attr];\n                if (obj instanceof Backbone.Model) {\n                    json[attr] = this.build(obj);\n                } else if (obj instanceof Backbone.Collection) {\n                    var coll = obj;\n                    json[attr] = [];\n                    if (coll.length) {\n                        coll.undefined(function (el, index) {\n                            json[attr][index] = this.build(el);\n                        }, this);\n                    }\n                }\n            }, this);\n            return json;\n        },\n        beforeEach(obj) {\n            delete obj.status;\n        }\n    });\n});\ndefine('skylark-grapejs/code_manager/model/JsGenerator',[\n    'skylark-underscore',\n    'skylark-backbone'\n], function (a, Backbone) {\n    'use strict';\n    return Backbone.Model.undefined({\n        mapModel(model) {\n            var code = '';\n            var script = model.get('script-export') || model.get('script');\n            var type = model.get('type');\n            var comps = model.get('components');\n            var id = model.getId();\n            if (script) {\n                var attr = model.get('attributes');\n                attr = a.extend({}, attr, { id });\n                model.set('attributes', attr, { silent: 1 });\n                var scrStr = model.getScriptString(script);\n                if (model.get('scriptUpdated')) {\n                    this.mapJs[type + '-' + id] = {\n                        ids: [id],\n                        code: scrStr\n                    };\n                } else {\n                    var mapType = this.mapJs[type];\n                    if (mapType) {\n                        mapType.ids.push(id);\n                    } else {\n                        this.mapJs[type] = {\n                            ids: [id],\n                            code: scrStr\n                        };\n                    }\n                }\n            }\n            comps.each(function (model) {\n                code += this.mapModel(model);\n            }, this);\n            return code;\n        },\n        build(model) {\n            this.mapJs = {};\n            this.mapModel(model);\n            var code = '';\n            for (var type in this.mapJs) {\n                var mapType = this.mapJs[type];\n                var ids = '#' + mapType.ids.join(', #');\n                code += `\n        var items = document.querySelectorAll('${ ids }');\n        for (var i = 0, len = items.length; i < len; i++) {\n          (function(){${ mapType.code }}.bind(items[i]))();\n        }`;\n            }\n            return code;\n        }\n    });\n});\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: https://codemirror.net/LICENSE\r\n\r\ndefine('skylark-codemirror/mode/xml/xml',[\"../../CodeMirror\"], function(CodeMirror) {\r\n\r\n\r\nvar htmlConfig = {\r\n  autoSelfClosers: {'area': true, 'base': true, 'br': true, 'col': true, 'command': true,\r\n                    'embed': true, 'frame': true, 'hr': true, 'img': true, 'input': true,\r\n                    'keygen': true, 'link': true, 'meta': true, 'param': true, 'source': true,\r\n                    'track': true, 'wbr': true, 'menuitem': true},\r\n  implicitlyClosed: {'dd': true, 'li': true, 'optgroup': true, 'option': true, 'p': true,\r\n                     'rp': true, 'rt': true, 'tbody': true, 'td': true, 'tfoot': true,\r\n                     'th': true, 'tr': true},\r\n  contextGrabbers: {\r\n    'dd': {'dd': true, 'dt': true},\r\n    'dt': {'dd': true, 'dt': true},\r\n    'li': {'li': true},\r\n    'option': {'option': true, 'optgroup': true},\r\n    'optgroup': {'optgroup': true},\r\n    'p': {'address': true, 'article': true, 'aside': true, 'blockquote': true, 'dir': true,\r\n          'div': true, 'dl': true, 'fieldset': true, 'footer': true, 'form': true,\r\n          'h1': true, 'h2': true, 'h3': true, 'h4': true, 'h5': true, 'h6': true,\r\n          'header': true, 'hgroup': true, 'hr': true, 'menu': true, 'nav': true, 'ol': true,\r\n          'p': true, 'pre': true, 'section': true, 'table': true, 'ul': true},\r\n    'rp': {'rp': true, 'rt': true},\r\n    'rt': {'rp': true, 'rt': true},\r\n    'tbody': {'tbody': true, 'tfoot': true},\r\n    'td': {'td': true, 'th': true},\r\n    'tfoot': {'tbody': true},\r\n    'th': {'td': true, 'th': true},\r\n    'thead': {'tbody': true, 'tfoot': true},\r\n    'tr': {'tr': true}\r\n  },\r\n  doNotIndent: {\"pre\": true},\r\n  allowUnquoted: true,\r\n  allowMissing: true,\r\n  caseFold: true\r\n}\r\n\r\nvar xmlConfig = {\r\n  autoSelfClosers: {},\r\n  implicitlyClosed: {},\r\n  contextGrabbers: {},\r\n  doNotIndent: {},\r\n  allowUnquoted: false,\r\n  allowMissing: false,\r\n  allowMissingTagName: false,\r\n  caseFold: false\r\n}\r\n\r\nCodeMirror.defineMode(\"xml\", function(editorConf, config_) {\r\n  var indentUnit = editorConf.indentUnit\r\n  var config = {}\r\n  var defaults = config_.htmlMode ? htmlConfig : xmlConfig\r\n  for (var prop in defaults) config[prop] = defaults[prop]\r\n  for (var prop in config_) config[prop] = config_[prop]\r\n\r\n  // Return variables for tokenizers\r\n  var type, setStyle;\r\n\r\n  function inText(stream, state) {\r\n    function chain(parser) {\r\n      state.tokenize = parser;\r\n      return parser(stream, state);\r\n    }\r\n\r\n    var ch = stream.next();\r\n    if (ch == \"<\") {\r\n      if (stream.eat(\"!\")) {\r\n        if (stream.eat(\"[\")) {\r\n          if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));\r\n          else return null;\r\n        } else if (stream.match(\"--\")) {\r\n          return chain(inBlock(\"comment\", \"-->\"));\r\n        } else if (stream.match(\"DOCTYPE\", true, true)) {\r\n          stream.eatWhile(/[\\w\\._\\-]/);\r\n          return chain(doctype(1));\r\n        } else {\r\n          return null;\r\n        }\r\n      } else if (stream.eat(\"?\")) {\r\n        stream.eatWhile(/[\\w\\._\\-]/);\r\n        state.tokenize = inBlock(\"meta\", \"?>\");\r\n        return \"meta\";\r\n      } else {\r\n        type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\r\n        state.tokenize = inTag;\r\n        return \"tag bracket\";\r\n      }\r\n    } else if (ch == \"&\") {\r\n      var ok;\r\n      if (stream.eat(\"#\")) {\r\n        if (stream.eat(\"x\")) {\r\n          ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\r\n        } else {\r\n          ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\r\n        }\r\n      } else {\r\n        ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\r\n      }\r\n      return ok ? \"atom\" : \"error\";\r\n    } else {\r\n      stream.eatWhile(/[^&<]/);\r\n      return null;\r\n    }\r\n  }\r\n  inText.isInText = true;\r\n\r\n  function inTag(stream, state) {\r\n    var ch = stream.next();\r\n    if (ch == \">\" || (ch == \"/\" && stream.eat(\">\"))) {\r\n      state.tokenize = inText;\r\n      type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\r\n      return \"tag bracket\";\r\n    } else if (ch == \"=\") {\r\n      type = \"equals\";\r\n      return null;\r\n    } else if (ch == \"<\") {\r\n      state.tokenize = inText;\r\n      state.state = baseState;\r\n      state.tagName = state.tagStart = null;\r\n      var next = state.tokenize(stream, state);\r\n      return next ? next + \" tag error\" : \"tag error\";\r\n    } else if (/[\\'\\\"]/.test(ch)) {\r\n      state.tokenize = inAttribute(ch);\r\n      state.stringStartCol = stream.column();\r\n      return state.tokenize(stream, state);\r\n    } else {\r\n      stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\r\n      return \"word\";\r\n    }\r\n  }\r\n\r\n  function inAttribute(quote) {\r\n    var closure = function(stream, state) {\r\n      while (!stream.eol()) {\r\n        if (stream.next() == quote) {\r\n          state.tokenize = inTag;\r\n          break;\r\n        }\r\n      }\r\n      return \"string\";\r\n    };\r\n    closure.isInAttribute = true;\r\n    return closure;\r\n  }\r\n\r\n  function inBlock(style, terminator) {\r\n    return function(stream, state) {\r\n      while (!stream.eol()) {\r\n        if (stream.match(terminator)) {\r\n          state.tokenize = inText;\r\n          break;\r\n        }\r\n        stream.next();\r\n      }\r\n      return style;\r\n    }\r\n  }\r\n\r\n  function doctype(depth) {\r\n    return function(stream, state) {\r\n      var ch;\r\n      while ((ch = stream.next()) != null) {\r\n        if (ch == \"<\") {\r\n          state.tokenize = doctype(depth + 1);\r\n          return state.tokenize(stream, state);\r\n        } else if (ch == \">\") {\r\n          if (depth == 1) {\r\n            state.tokenize = inText;\r\n            break;\r\n          } else {\r\n            state.tokenize = doctype(depth - 1);\r\n            return state.tokenize(stream, state);\r\n          }\r\n        }\r\n      }\r\n      return \"meta\";\r\n    };\r\n  }\r\n\r\n  function Context(state, tagName, startOfLine) {\r\n    this.prev = state.context;\r\n    this.tagName = tagName;\r\n    this.indent = state.indented;\r\n    this.startOfLine = startOfLine;\r\n    if (config.doNotIndent.hasOwnProperty(tagName) || (state.context && state.context.noIndent))\r\n      this.noIndent = true;\r\n  }\r\n  function popContext(state) {\r\n    if (state.context) state.context = state.context.prev;\r\n  }\r\n  function maybePopContext(state, nextTagName) {\r\n    var parentTagName;\r\n    while (true) {\r\n      if (!state.context) {\r\n        return;\r\n      }\r\n      parentTagName = state.context.tagName;\r\n      if (!config.contextGrabbers.hasOwnProperty(parentTagName) ||\r\n          !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\r\n        return;\r\n      }\r\n      popContext(state);\r\n    }\r\n  }\r\n\r\n  function baseState(type, stream, state) {\r\n    if (type == \"openTag\") {\r\n      state.tagStart = stream.column();\r\n      return tagNameState;\r\n    } else if (type == \"closeTag\") {\r\n      return closeTagNameState;\r\n    } else {\r\n      return baseState;\r\n    }\r\n  }\r\n  function tagNameState(type, stream, state) {\r\n    if (type == \"word\") {\r\n      state.tagName = stream.current();\r\n      setStyle = \"tag\";\r\n      return attrState;\r\n    } else if (config.allowMissingTagName && type == \"endTag\") {\r\n      setStyle = \"tag bracket\";\r\n      return attrState(type, stream, state);\r\n    } else {\r\n      setStyle = \"error\";\r\n      return tagNameState;\r\n    }\r\n  }\r\n  function closeTagNameState(type, stream, state) {\r\n    if (type == \"word\") {\r\n      var tagName = stream.current();\r\n      if (state.context && state.context.tagName != tagName &&\r\n          config.implicitlyClosed.hasOwnProperty(state.context.tagName))\r\n        popContext(state);\r\n      if ((state.context && state.context.tagName == tagName) || config.matchClosing === false) {\r\n        setStyle = \"tag\";\r\n        return closeState;\r\n      } else {\r\n        setStyle = \"tag error\";\r\n        return closeStateErr;\r\n      }\r\n    } else if (config.allowMissingTagName && type == \"endTag\") {\r\n      setStyle = \"tag bracket\";\r\n      return closeState(type, stream, state);\r\n    } else {\r\n      setStyle = \"error\";\r\n      return closeStateErr;\r\n    }\r\n  }\r\n\r\n  function closeState(type, _stream, state) {\r\n    if (type != \"endTag\") {\r\n      setStyle = \"error\";\r\n      return closeState;\r\n    }\r\n    popContext(state);\r\n    return baseState;\r\n  }\r\n  function closeStateErr(type, stream, state) {\r\n    setStyle = \"error\";\r\n    return closeState(type, stream, state);\r\n  }\r\n\r\n  function attrState(type, _stream, state) {\r\n    if (type == \"word\") {\r\n      setStyle = \"attribute\";\r\n      return attrEqState;\r\n    } else if (type == \"endTag\" || type == \"selfcloseTag\") {\r\n      var tagName = state.tagName, tagStart = state.tagStart;\r\n      state.tagName = state.tagStart = null;\r\n      if (type == \"selfcloseTag\" ||\r\n          config.autoSelfClosers.hasOwnProperty(tagName)) {\r\n        maybePopContext(state, tagName);\r\n      } else {\r\n        maybePopContext(state, tagName);\r\n        state.context = new Context(state, tagName, tagStart == state.indented);\r\n      }\r\n      return baseState;\r\n    }\r\n    setStyle = \"error\";\r\n    return attrState;\r\n  }\r\n  function attrEqState(type, stream, state) {\r\n    if (type == \"equals\") return attrValueState;\r\n    if (!config.allowMissing) setStyle = \"error\";\r\n    return attrState(type, stream, state);\r\n  }\r\n  function attrValueState(type, stream, state) {\r\n    if (type == \"string\") return attrContinuedState;\r\n    if (type == \"word\" && config.allowUnquoted) {setStyle = \"string\"; return attrState;}\r\n    setStyle = \"error\";\r\n    return attrState(type, stream, state);\r\n  }\r\n  function attrContinuedState(type, stream, state) {\r\n    if (type == \"string\") return attrContinuedState;\r\n    return attrState(type, stream, state);\r\n  }\r\n\r\n  return {\r\n    startState: function(baseIndent) {\r\n      var state = {tokenize: inText,\r\n                   state: baseState,\r\n                   indented: baseIndent || 0,\r\n                   tagName: null, tagStart: null,\r\n                   context: null}\r\n      if (baseIndent != null) state.baseIndent = baseIndent\r\n      return state\r\n    },\r\n\r\n    token: function(stream, state) {\r\n      if (!state.tagName && stream.sol())\r\n        state.indented = stream.indentation();\r\n\r\n      if (stream.eatSpace()) return null;\r\n      type = null;\r\n      var style = state.tokenize(stream, state);\r\n      if ((style || type) && style != \"comment\") {\r\n        setStyle = null;\r\n        state.state = state.state(type || style, stream, state);\r\n        if (setStyle)\r\n          style = setStyle == \"error\" ? style + \" error\" : setStyle;\r\n      }\r\n      return style;\r\n    },\r\n\r\n    indent: function(state, textAfter, fullLine) {\r\n      var context = state.context;\r\n      // Indent multi-line strings (e.g. css).\r\n      if (state.tokenize.isInAttribute) {\r\n        if (state.tagStart == state.indented)\r\n          return state.stringStartCol + 1;\r\n        else\r\n          return state.indented + indentUnit;\r\n      }\r\n      if (context && context.noIndent) return CodeMirror.Pass;\r\n      if (state.tokenize != inTag && state.tokenize != inText)\r\n        return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0;\r\n      // Indent the starts of attribute names.\r\n      if (state.tagName) {\r\n        if (config.multilineTagIndentPastTag !== false)\r\n          return state.tagStart + state.tagName.length + 2;\r\n        else\r\n          return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\r\n      }\r\n      if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\r\n      var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\r\n      if (tagAfter && tagAfter[1]) { // Closing tag spotted\r\n        while (context) {\r\n          if (context.tagName == tagAfter[2]) {\r\n            context = context.prev;\r\n            break;\r\n          } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\r\n            context = context.prev;\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n      } else if (tagAfter) { // Opening tag spotted\r\n        while (context) {\r\n          var grabbers = config.contextGrabbers[context.tagName];\r\n          if (grabbers && grabbers.hasOwnProperty(tagAfter[2]))\r\n            context = context.prev;\r\n          else\r\n            break;\r\n        }\r\n      }\r\n      while (context && context.prev && !context.startOfLine)\r\n        context = context.prev;\r\n      if (context) return context.indent + indentUnit;\r\n      else return state.baseIndent || 0;\r\n    },\r\n\r\n    electricInput: /<\\/[\\s\\w:]+>$/,\r\n    blockCommentStart: \"<!--\",\r\n    blockCommentEnd: \"-->\",\r\n\r\n    configuration: config.htmlMode ? \"html\" : \"xml\",\r\n    helperType: config.htmlMode ? \"html\" : \"xml\",\r\n\r\n    skipAttribute: function(state) {\r\n      if (state.state == attrValueState)\r\n        state.state = attrState\r\n    }\r\n  };\r\n});\r\n\r\nCodeMirror.defineMIME(\"text/xml\", \"xml\");\r\nCodeMirror.defineMIME(\"application/xml\", \"xml\");\r\nif (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\"))\r\n  CodeMirror.defineMIME(\"text/html\", {name: \"xml\", htmlMode: true});\r\n\r\n});\r\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: https://codemirror.net/LICENSE\r\n\r\ndefine('skylark-codemirror/mode/javascript/javascript',[\"../../CodeMirror\"], function(CodeMirror) {\r\n\r\n\r\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\r\n  var indentUnit = config.indentUnit;\r\n  var statementIndent = parserConfig.statementIndent;\r\n  var jsonldMode = parserConfig.jsonld;\r\n  var jsonMode = parserConfig.json || jsonldMode;\r\n  var isTS = parserConfig.typescript;\r\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\r\n\r\n  // Tokenizer\r\n\r\n  var keywords = function(){\r\n    function kw(type) {return {type: type, style: \"keyword\"};}\r\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\r\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\r\n\r\n    return {\r\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\r\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\r\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\r\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\r\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\r\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\r\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\r\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\r\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\r\n      \"await\": C\r\n    };\r\n  }();\r\n\r\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\r\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\r\n\r\n  function readRegexp(stream) {\r\n    var escaped = false, next, inSet = false;\r\n    while ((next = stream.next()) != null) {\r\n      if (!escaped) {\r\n        if (next == \"/\" && !inSet) return;\r\n        if (next == \"[\") inSet = true;\r\n        else if (inSet && next == \"]\") inSet = false;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n  }\r\n\r\n  // Used as scratch variables to communicate multiple values without\r\n  // consing up tons of objects.\r\n  var type, content;\r\n  function ret(tp, style, cont) {\r\n    type = tp; content = cont;\r\n    return style;\r\n  }\r\n  function tokenBase(stream, state) {\r\n    var ch = stream.next();\r\n    if (ch == '\"' || ch == \"'\") {\r\n      state.tokenize = tokenString(ch);\r\n      return state.tokenize(stream, state);\r\n    } else if (ch == \".\" && stream.match(/^\\d+(?:[eE][+\\-]?\\d+)?/)) {\r\n      return ret(\"number\", \"number\");\r\n    } else if (ch == \".\" && stream.match(\"..\")) {\r\n      return ret(\"spread\", \"meta\");\r\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\r\n      return ret(ch);\r\n    } else if (ch == \"=\" && stream.eat(\">\")) {\r\n      return ret(\"=>\", \"operator\");\r\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\da-f]+|o[0-7]+|b[01]+)n?/i)) {\r\n      return ret(\"number\", \"number\");\r\n    } else if (/\\d/.test(ch)) {\r\n      stream.match(/^\\d*(?:n|(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?/);\r\n      return ret(\"number\", \"number\");\r\n    } else if (ch == \"/\") {\r\n      if (stream.eat(\"*\")) {\r\n        state.tokenize = tokenComment;\r\n        return tokenComment(stream, state);\r\n      } else if (stream.eat(\"/\")) {\r\n        stream.skipToEnd();\r\n        return ret(\"comment\", \"comment\");\r\n      } else if (expressionAllowed(stream, state, 1)) {\r\n        readRegexp(stream);\r\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\r\n        return ret(\"regexp\", \"string-2\");\r\n      } else {\r\n        stream.eat(\"=\");\r\n        return ret(\"operator\", \"operator\", stream.current());\r\n      }\r\n    } else if (ch == \"`\") {\r\n      state.tokenize = tokenQuasi;\r\n      return tokenQuasi(stream, state);\r\n    } else if (ch == \"#\") {\r\n      stream.skipToEnd();\r\n      return ret(\"error\", \"error\");\r\n    } else if (isOperatorChar.test(ch)) {\r\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\r\n        if (stream.eat(\"=\")) {\r\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\r\n        } else if (/[<>*+\\-]/.test(ch)) {\r\n          stream.eat(ch)\r\n          if (ch == \">\") stream.eat(ch)\r\n        }\r\n      }\r\n      return ret(\"operator\", \"operator\", stream.current());\r\n    } else if (wordRE.test(ch)) {\r\n      stream.eatWhile(wordRE);\r\n      var word = stream.current()\r\n      if (state.lastType != \".\") {\r\n        if (keywords.propertyIsEnumerable(word)) {\r\n          var kw = keywords[word]\r\n          return ret(kw.type, kw.style, word)\r\n        }\r\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*.*?\\*\\/)*[\\[\\(\\w]/, false))\r\n          return ret(\"async\", \"keyword\", word)\r\n      }\r\n      return ret(\"variable\", \"variable\", word)\r\n    }\r\n  }\r\n\r\n  function tokenString(quote) {\r\n    return function(stream, state) {\r\n      var escaped = false, next;\r\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\r\n        state.tokenize = tokenBase;\r\n        return ret(\"jsonld-keyword\", \"meta\");\r\n      }\r\n      while ((next = stream.next()) != null) {\r\n        if (next == quote && !escaped) break;\r\n        escaped = !escaped && next == \"\\\\\";\r\n      }\r\n      if (!escaped) state.tokenize = tokenBase;\r\n      return ret(\"string\", \"string\");\r\n    };\r\n  }\r\n\r\n  function tokenComment(stream, state) {\r\n    var maybeEnd = false, ch;\r\n    while (ch = stream.next()) {\r\n      if (ch == \"/\" && maybeEnd) {\r\n        state.tokenize = tokenBase;\r\n        break;\r\n      }\r\n      maybeEnd = (ch == \"*\");\r\n    }\r\n    return ret(\"comment\", \"comment\");\r\n  }\r\n\r\n  function tokenQuasi(stream, state) {\r\n    var escaped = false, next;\r\n    while ((next = stream.next()) != null) {\r\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\r\n        state.tokenize = tokenBase;\r\n        break;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n    return ret(\"quasi\", \"string-2\", stream.current());\r\n  }\r\n\r\n  var brackets = \"([{}])\";\r\n  // This is a crude lookahead trick to try and notice that we're\r\n  // parsing the argument patterns for a fat-arrow function before we\r\n  // actually hit the arrow token. It only works if the arrow is on\r\n  // the same line as the arguments and there's no strange noise\r\n  // (comments) in between. Fallback is to only notice when we hit the\r\n  // arrow, and not declare the arguments as locals for the arrow\r\n  // body.\r\n  function findFatArrow(stream, state) {\r\n    if (state.fatArrowAt) state.fatArrowAt = null;\r\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\r\n    if (arrow < 0) return;\r\n\r\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\r\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\r\n      if (m) arrow = m.index\r\n    }\r\n\r\n    var depth = 0, sawSomething = false;\r\n    for (var pos = arrow - 1; pos >= 0; --pos) {\r\n      var ch = stream.string.charAt(pos);\r\n      var bracket = brackets.indexOf(ch);\r\n      if (bracket >= 0 && bracket < 3) {\r\n        if (!depth) { ++pos; break; }\r\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\r\n      } else if (bracket >= 3 && bracket < 6) {\r\n        ++depth;\r\n      } else if (wordRE.test(ch)) {\r\n        sawSomething = true;\r\n      } else if (/[\"'\\/]/.test(ch)) {\r\n        return;\r\n      } else if (sawSomething && !depth) {\r\n        ++pos;\r\n        break;\r\n      }\r\n    }\r\n    if (sawSomething && !depth) state.fatArrowAt = pos;\r\n  }\r\n\r\n  // Parser\r\n\r\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true, \"this\": true, \"jsonld-keyword\": true};\r\n\r\n  function JSLexical(indented, column, type, align, prev, info) {\r\n    this.indented = indented;\r\n    this.column = column;\r\n    this.type = type;\r\n    this.prev = prev;\r\n    this.info = info;\r\n    if (align != null) this.align = align;\r\n  }\r\n\r\n  function inScope(state, varname) {\r\n    for (var v = state.localVars; v; v = v.next)\r\n      if (v.name == varname) return true;\r\n    for (var cx = state.context; cx; cx = cx.prev) {\r\n      for (var v = cx.vars; v; v = v.next)\r\n        if (v.name == varname) return true;\r\n    }\r\n  }\r\n\r\n  function parseJS(state, style, type, content, stream) {\r\n    var cc = state.cc;\r\n    // Communicate our context to the combinators.\r\n    // (Less wasteful than consing up a hundred closures on every call.)\r\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\r\n\r\n    if (!state.lexical.hasOwnProperty(\"align\"))\r\n      state.lexical.align = true;\r\n\r\n    while(true) {\r\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\r\n      if (combinator(type, content)) {\r\n        while(cc.length && cc[cc.length - 1].lex)\r\n          cc.pop()();\r\n        if (cx.marked) return cx.marked;\r\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\r\n        return style;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Combinator utils\r\n\r\n  var cx = {state: null, column: null, marked: null, cc: null};\r\n  function pass() {\r\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\r\n  }\r\n  function cont() {\r\n    pass.apply(null, arguments);\r\n    return true;\r\n  }\r\n  function inList(name, list) {\r\n    for (var v = list; v; v = v.next) if (v.name == name) return true\r\n    return false;\r\n  }\r\n  function register(varname) {\r\n    var state = cx.state;\r\n    cx.marked = \"def\";\r\n    if (state.context) {\r\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\r\n        // FIXME function decls are also not block scoped\r\n        var newContext = registerVarScoped(varname, state.context)\r\n        if (newContext != null) {\r\n          state.context = newContext\r\n          return\r\n        }\r\n      } else if (!inList(varname, state.localVars)) {\r\n        state.localVars = new Var(varname, state.localVars)\r\n        return\r\n      }\r\n    }\r\n    // Fall through means this is global\r\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\r\n      state.globalVars = new Var(varname, state.globalVars)\r\n  }\r\n  function registerVarScoped(varname, context) {\r\n    if (!context) {\r\n      return null\r\n    } else if (context.block) {\r\n      var inner = registerVarScoped(varname, context.prev)\r\n      if (!inner) return null\r\n      if (inner == context.prev) return context\r\n      return new Context(inner, context.vars, true)\r\n    } else if (inList(varname, context.vars)) {\r\n      return context\r\n    } else {\r\n      return new Context(context.prev, new Var(varname, context.vars), false)\r\n    }\r\n  }\r\n\r\n  function isModifier(name) {\r\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\r\n  }\r\n\r\n  // Combinators\r\n\r\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\r\n  function Var(name, next) { this.name = name; this.next = next }\r\n\r\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\r\n  function pushcontext() {\r\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\r\n    cx.state.localVars = defaultVars\r\n  }\r\n  function pushblockcontext() {\r\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\r\n    cx.state.localVars = null\r\n  }\r\n  function popcontext() {\r\n    cx.state.localVars = cx.state.context.vars\r\n    cx.state.context = cx.state.context.prev\r\n  }\r\n  popcontext.lex = true\r\n  function pushlex(type, info) {\r\n    var result = function() {\r\n      var state = cx.state, indent = state.indented;\r\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\r\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\r\n        indent = outer.indented;\r\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\r\n    };\r\n    result.lex = true;\r\n    return result;\r\n  }\r\n  function poplex() {\r\n    var state = cx.state;\r\n    if (state.lexical.prev) {\r\n      if (state.lexical.type == \")\")\r\n        state.indented = state.lexical.indented;\r\n      state.lexical = state.lexical.prev;\r\n    }\r\n  }\r\n  poplex.lex = true;\r\n\r\n  function expect(wanted) {\r\n    function exp(type) {\r\n      if (type == wanted) return cont();\r\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\r\n      else return cont(exp);\r\n    };\r\n    return exp;\r\n  }\r\n\r\n  function statement(type, value) {\r\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\r\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\r\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\r\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\r\n    if (type == \"debugger\") return cont(expect(\";\"));\r\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\r\n    if (type == \";\") return cont();\r\n    if (type == \"if\") {\r\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\r\n        cx.state.cc.pop()();\r\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\r\n    }\r\n    if (type == \"function\") return cont(functiondef);\r\n    if (type == \"for\") return cont(pushlex(\"form\"), forspec, statement, poplex);\r\n    if (type == \"class\" || (isTS && value == \"interface\")) {\r\n      cx.marked = \"keyword\"\r\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\r\n    }\r\n    if (type == \"variable\") {\r\n      if (isTS && value == \"declare\") {\r\n        cx.marked = \"keyword\"\r\n        return cont(statement)\r\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\r\n        cx.marked = \"keyword\"\r\n        if (value == \"enum\") return cont(enumdef);\r\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\r\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\r\n      } else if (isTS && value == \"namespace\") {\r\n        cx.marked = \"keyword\"\r\n        return cont(pushlex(\"form\"), expression, statement, poplex)\r\n      } else if (isTS && value == \"abstract\") {\r\n        cx.marked = \"keyword\"\r\n        return cont(statement)\r\n      } else {\r\n        return cont(pushlex(\"stat\"), maybelabel);\r\n      }\r\n    }\r\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\r\n                                      block, poplex, poplex, popcontext);\r\n    if (type == \"case\") return cont(expression, expect(\":\"));\r\n    if (type == \"default\") return cont(expect(\":\"));\r\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\r\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\r\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\r\n    if (type == \"async\") return cont(statement)\r\n    if (value == \"@\") return cont(expression, statement)\r\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\r\n  }\r\n  function maybeCatchBinding(type) {\r\n    if (type == \"(\") return cont(funarg, expect(\")\"))\r\n  }\r\n  function expression(type, value) {\r\n    return expressionInner(type, value, false);\r\n  }\r\n  function expressionNoComma(type, value) {\r\n    return expressionInner(type, value, true);\r\n  }\r\n  function parenExpr(type) {\r\n    if (type != \"(\") return pass()\r\n    return cont(pushlex(\")\"), expression, expect(\")\"), poplex)\r\n  }\r\n  function expressionInner(type, value, noComma) {\r\n    if (cx.state.fatArrowAt == cx.stream.start) {\r\n      var body = noComma ? arrowBodyNoComma : arrowBody;\r\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\r\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\r\n    }\r\n\r\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\r\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\r\n    if (type == \"function\") return cont(functiondef, maybeop);\r\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\r\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\r\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\r\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\r\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\r\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\r\n    if (type == \"quasi\") return pass(quasi, maybeop);\r\n    if (type == \"new\") return cont(maybeTarget(noComma));\r\n    if (type == \"import\") return cont(expression);\r\n    return cont();\r\n  }\r\n  function maybeexpression(type) {\r\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\r\n    return pass(expression);\r\n  }\r\n\r\n  function maybeoperatorComma(type, value) {\r\n    if (type == \",\") return cont(expression);\r\n    return maybeoperatorNoComma(type, value, false);\r\n  }\r\n  function maybeoperatorNoComma(type, value, noComma) {\r\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\r\n    var expr = noComma == false ? expression : expressionNoComma;\r\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\r\n    if (type == \"operator\") {\r\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\r\n      if (isTS && value == \"<\" && cx.stream.match(/^([^>]|<.*?>)*>\\s*\\(/, false))\r\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\r\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\r\n      return cont(expr);\r\n    }\r\n    if (type == \"quasi\") { return pass(quasi, me); }\r\n    if (type == \";\") return;\r\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\r\n    if (type == \".\") return cont(property, me);\r\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\r\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\r\n    if (type == \"regexp\") {\r\n      cx.state.lastType = cx.marked = \"operator\"\r\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\r\n      return cont(expr)\r\n    }\r\n  }\r\n  function quasi(type, value) {\r\n    if (type != \"quasi\") return pass();\r\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\r\n    return cont(expression, continueQuasi);\r\n  }\r\n  function continueQuasi(type) {\r\n    if (type == \"}\") {\r\n      cx.marked = \"string-2\";\r\n      cx.state.tokenize = tokenQuasi;\r\n      return cont(quasi);\r\n    }\r\n  }\r\n  function arrowBody(type) {\r\n    findFatArrow(cx.stream, cx.state);\r\n    return pass(type == \"{\" ? statement : expression);\r\n  }\r\n  function arrowBodyNoComma(type) {\r\n    findFatArrow(cx.stream, cx.state);\r\n    return pass(type == \"{\" ? statement : expressionNoComma);\r\n  }\r\n  function maybeTarget(noComma) {\r\n    return function(type) {\r\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\r\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\r\n      else return pass(noComma ? expressionNoComma : expression);\r\n    };\r\n  }\r\n  function target(_, value) {\r\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\r\n  }\r\n  function targetNoComma(_, value) {\r\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\r\n  }\r\n  function maybelabel(type) {\r\n    if (type == \":\") return cont(poplex, statement);\r\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\r\n  }\r\n  function property(type) {\r\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\r\n  }\r\n  function objprop(type, value) {\r\n    if (type == \"async\") {\r\n      cx.marked = \"property\";\r\n      return cont(objprop);\r\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\r\n      cx.marked = \"property\";\r\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\r\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\r\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\r\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\r\n      return cont(afterprop);\r\n    } else if (type == \"number\" || type == \"string\") {\r\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\r\n      return cont(afterprop);\r\n    } else if (type == \"jsonld-keyword\") {\r\n      return cont(afterprop);\r\n    } else if (isTS && isModifier(value)) {\r\n      cx.marked = \"keyword\"\r\n      return cont(objprop)\r\n    } else if (type == \"[\") {\r\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\r\n    } else if (type == \"spread\") {\r\n      return cont(expressionNoComma, afterprop);\r\n    } else if (value == \"*\") {\r\n      cx.marked = \"keyword\";\r\n      return cont(objprop);\r\n    } else if (type == \":\") {\r\n      return pass(afterprop)\r\n    }\r\n  }\r\n  function getterSetter(type) {\r\n    if (type != \"variable\") return pass(afterprop);\r\n    cx.marked = \"property\";\r\n    return cont(functiondef);\r\n  }\r\n  function afterprop(type) {\r\n    if (type == \":\") return cont(expressionNoComma);\r\n    if (type == \"(\") return pass(functiondef);\r\n  }\r\n  function commasep(what, end, sep) {\r\n    function proceed(type, value) {\r\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\r\n        var lex = cx.state.lexical;\r\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\r\n        return cont(function(type, value) {\r\n          if (type == end || value == end) return pass()\r\n          return pass(what)\r\n        }, proceed);\r\n      }\r\n      if (type == end || value == end) return cont();\r\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\r\n      return cont(expect(end));\r\n    }\r\n    return function(type, value) {\r\n      if (type == end || value == end) return cont();\r\n      return pass(what, proceed);\r\n    };\r\n  }\r\n  function contCommasep(what, end, info) {\r\n    for (var i = 3; i < arguments.length; i++)\r\n      cx.cc.push(arguments[i]);\r\n    return cont(pushlex(end, info), commasep(what, end), poplex);\r\n  }\r\n  function block(type) {\r\n    if (type == \"}\") return cont();\r\n    return pass(statement, block);\r\n  }\r\n  function maybetype(type, value) {\r\n    if (isTS) {\r\n      if (type == \":\" || value == \"in\") return cont(typeexpr);\r\n      if (value == \"?\") return cont(maybetype);\r\n    }\r\n  }\r\n  function mayberettype(type) {\r\n    if (isTS && type == \":\") {\r\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\r\n      else return cont(typeexpr)\r\n    }\r\n  }\r\n  function isKW(_, value) {\r\n    if (value == \"is\") {\r\n      cx.marked = \"keyword\"\r\n      return cont()\r\n    }\r\n  }\r\n  function typeexpr(type, value) {\r\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\") {\r\n      cx.marked = \"keyword\"\r\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\r\n    }\r\n    if (type == \"variable\" || value == \"void\") {\r\n      cx.marked = \"type\"\r\n      return cont(afterType)\r\n    }\r\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\r\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\r\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\r\n    if (type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\", \",;\"), poplex, afterType)\r\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\r\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\r\n  }\r\n  function maybeReturnType(type) {\r\n    if (type == \"=>\") return cont(typeexpr)\r\n  }\r\n  function typeprop(type, value) {\r\n    if (type == \"variable\" || cx.style == \"keyword\") {\r\n      cx.marked = \"property\"\r\n      return cont(typeprop)\r\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\r\n      return cont(typeprop)\r\n    } else if (type == \":\") {\r\n      return cont(typeexpr)\r\n    } else if (type == \"[\") {\r\n      return cont(expect(\"variable\"), maybetype, expect(\"]\"), typeprop)\r\n    } else if (type == \"(\") {\r\n      return pass(functiondecl, typeprop)\r\n    }\r\n  }\r\n  function typearg(type, value) {\r\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\r\n    if (type == \":\") return cont(typeexpr)\r\n    if (type == \"spread\") return cont(typearg)\r\n    return pass(typeexpr)\r\n  }\r\n  function afterType(type, value) {\r\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\r\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\r\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\r\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\r\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\r\n  }\r\n  function maybeTypeArgs(_, value) {\r\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\r\n  }\r\n  function typeparam() {\r\n    return pass(typeexpr, maybeTypeDefault)\r\n  }\r\n  function maybeTypeDefault(_, value) {\r\n    if (value == \"=\") return cont(typeexpr)\r\n  }\r\n  function vardef(_, value) {\r\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\r\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\r\n  }\r\n  function pattern(type, value) {\r\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\r\n    if (type == \"variable\") { register(value); return cont(); }\r\n    if (type == \"spread\") return cont(pattern);\r\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\r\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\r\n  }\r\n  function proppattern(type, value) {\r\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\r\n      register(value);\r\n      return cont(maybeAssign);\r\n    }\r\n    if (type == \"variable\") cx.marked = \"property\";\r\n    if (type == \"spread\") return cont(pattern);\r\n    if (type == \"}\") return pass();\r\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\r\n    return cont(expect(\":\"), pattern, maybeAssign);\r\n  }\r\n  function eltpattern() {\r\n    return pass(pattern, maybeAssign)\r\n  }\r\n  function maybeAssign(_type, value) {\r\n    if (value == \"=\") return cont(expressionNoComma);\r\n  }\r\n  function vardefCont(type) {\r\n    if (type == \",\") return cont(vardef);\r\n  }\r\n  function maybeelse(type, value) {\r\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\r\n  }\r\n  function forspec(type, value) {\r\n    if (value == \"await\") return cont(forspec);\r\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\r\n  }\r\n  function forspec1(type) {\r\n    if (type == \"var\") return cont(vardef, forspec2);\r\n    if (type == \"variable\") return cont(forspec2);\r\n    return pass(forspec2)\r\n  }\r\n  function forspec2(type, value) {\r\n    if (type == \")\") return cont()\r\n    if (type == \";\") return cont(forspec2)\r\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\r\n    return pass(expression, forspec2)\r\n  }\r\n  function functiondef(type, value) {\r\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\r\n    if (type == \"variable\") {register(value); return cont(functiondef);}\r\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\r\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\r\n  }\r\n  function functiondecl(type, value) {\r\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\r\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\r\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\r\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\r\n  }\r\n  function typename(type, value) {\r\n    if (type == \"keyword\" || type == \"variable\") {\r\n      cx.marked = \"type\"\r\n      return cont(typename)\r\n    } else if (value == \"<\") {\r\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\r\n    }\r\n  }\r\n  function funarg(type, value) {\r\n    if (value == \"@\") cont(expression, funarg)\r\n    if (type == \"spread\") return cont(funarg);\r\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\r\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\r\n    return pass(pattern, maybetype, maybeAssign);\r\n  }\r\n  function classExpression(type, value) {\r\n    // Class expressions may have an optional name.\r\n    if (type == \"variable\") return className(type, value);\r\n    return classNameAfter(type, value);\r\n  }\r\n  function className(type, value) {\r\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\r\n  }\r\n  function classNameAfter(type, value) {\r\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\r\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\r\n      if (value == \"implements\") cx.marked = \"keyword\";\r\n      return cont(isTS ? typeexpr : expression, classNameAfter);\r\n    }\r\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\r\n  }\r\n  function classBody(type, value) {\r\n    if (type == \"async\" ||\r\n        (type == \"variable\" &&\r\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\r\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\r\n      cx.marked = \"keyword\";\r\n      return cont(classBody);\r\n    }\r\n    if (type == \"variable\" || cx.style == \"keyword\") {\r\n      cx.marked = \"property\";\r\n      return cont(isTS ? classfield : functiondef, classBody);\r\n    }\r\n    if (type == \"number\" || type == \"string\") return cont(isTS ? classfield : functiondef, classBody);\r\n    if (type == \"[\")\r\n      return cont(expression, maybetype, expect(\"]\"), isTS ? classfield : functiondef, classBody)\r\n    if (value == \"*\") {\r\n      cx.marked = \"keyword\";\r\n      return cont(classBody);\r\n    }\r\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\r\n    if (type == \";\" || type == \",\") return cont(classBody);\r\n    if (type == \"}\") return cont();\r\n    if (value == \"@\") return cont(expression, classBody)\r\n  }\r\n  function classfield(type, value) {\r\n    if (value == \"?\") return cont(classfield)\r\n    if (type == \":\") return cont(typeexpr, maybeAssign)\r\n    if (value == \"=\") return cont(expressionNoComma)\r\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\r\n    return pass(isInterface ? functiondecl : functiondef)\r\n  }\r\n  function afterExport(type, value) {\r\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\r\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\r\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\r\n    return pass(statement);\r\n  }\r\n  function exportField(type, value) {\r\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\r\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\r\n  }\r\n  function afterImport(type) {\r\n    if (type == \"string\") return cont();\r\n    if (type == \"(\") return pass(expression);\r\n    return pass(importSpec, maybeMoreImports, maybeFrom);\r\n  }\r\n  function importSpec(type, value) {\r\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\r\n    if (type == \"variable\") register(value);\r\n    if (value == \"*\") cx.marked = \"keyword\";\r\n    return cont(maybeAs);\r\n  }\r\n  function maybeMoreImports(type) {\r\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\r\n  }\r\n  function maybeAs(_type, value) {\r\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\r\n  }\r\n  function maybeFrom(_type, value) {\r\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\r\n  }\r\n  function arrayLiteral(type) {\r\n    if (type == \"]\") return cont();\r\n    return pass(commasep(expressionNoComma, \"]\"));\r\n  }\r\n  function enumdef() {\r\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\r\n  }\r\n  function enummember() {\r\n    return pass(pattern, maybeAssign);\r\n  }\r\n\r\n  function isContinuedStatement(state, textAfter) {\r\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\r\n      isOperatorChar.test(textAfter.charAt(0)) ||\r\n      /[,.]/.test(textAfter.charAt(0));\r\n  }\r\n\r\n  function expressionAllowed(stream, state, backUp) {\r\n    return state.tokenize == tokenBase &&\r\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\r\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\r\n  }\r\n\r\n  // Interface\r\n\r\n  return {\r\n    startState: function(basecolumn) {\r\n      var state = {\r\n        tokenize: tokenBase,\r\n        lastType: \"sof\",\r\n        cc: [],\r\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\r\n        localVars: parserConfig.localVars,\r\n        context: parserConfig.localVars && new Context(null, null, false),\r\n        indented: basecolumn || 0\r\n      };\r\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\r\n        state.globalVars = parserConfig.globalVars;\r\n      return state;\r\n    },\r\n\r\n    token: function(stream, state) {\r\n      if (stream.sol()) {\r\n        if (!state.lexical.hasOwnProperty(\"align\"))\r\n          state.lexical.align = false;\r\n        state.indented = stream.indentation();\r\n        findFatArrow(stream, state);\r\n      }\r\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\r\n      var style = state.tokenize(stream, state);\r\n      if (type == \"comment\") return style;\r\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\r\n      return parseJS(state, style, type, content, stream);\r\n    },\r\n\r\n    indent: function(state, textAfter) {\r\n      if (state.tokenize == tokenComment) return CodeMirror.Pass;\r\n      if (state.tokenize != tokenBase) return 0;\r\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\r\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\r\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\r\n        var c = state.cc[i];\r\n        if (c == poplex) lexical = lexical.prev;\r\n        else if (c != maybeelse) break;\r\n      }\r\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\r\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\r\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\r\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\r\n        lexical = lexical.prev;\r\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\r\n        lexical = lexical.prev;\r\n      var type = lexical.type, closing = firstChar == type;\r\n\r\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\r\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\r\n      else if (type == \"form\") return lexical.indented + indentUnit;\r\n      else if (type == \"stat\")\r\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\r\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\r\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\r\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\r\n      else return lexical.indented + (closing ? 0 : indentUnit);\r\n    },\r\n\r\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\r\n    blockCommentStart: jsonMode ? null : \"/*\",\r\n    blockCommentEnd: jsonMode ? null : \"*/\",\r\n    blockCommentContinue: jsonMode ? null : \" * \",\r\n    lineComment: jsonMode ? null : \"//\",\r\n    fold: \"brace\",\r\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\r\n\r\n    helperType: jsonMode ? \"json\" : \"javascript\",\r\n    jsonldMode: jsonldMode,\r\n    jsonMode: jsonMode,\r\n\r\n    expressionAllowed: expressionAllowed,\r\n\r\n    skipExpression: function(state) {\r\n      var top = state.cc[state.cc.length - 1]\r\n      if (top == expression || top == expressionNoComma) state.cc.pop()\r\n    }\r\n  };\r\n});\r\n\r\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\r\n\r\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\r\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\r\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\r\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\r\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\r\nCodeMirror.defineMIME(\"application/json\", {name: \"javascript\", json: true});\r\nCodeMirror.defineMIME(\"application/x-json\", {name: \"javascript\", json: true});\r\nCodeMirror.defineMIME(\"application/ld+json\", {name: \"javascript\", jsonld: true});\r\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\r\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\r\n\r\n});\r\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: https://codemirror.net/LICENSE\r\n\r\ndefine('skylark-codemirror/mode/css/css',[\"../../CodeMirror\"], function(CodeMirror) {\r\n\r\n\r\nCodeMirror.defineMode(\"css\", function(config, parserConfig) {\r\n  var inline = parserConfig.inline\r\n  if (!parserConfig.propertyKeywords) parserConfig = CodeMirror.resolveMode(\"text/css\");\r\n\r\n  var indentUnit = config.indentUnit,\r\n      tokenHooks = parserConfig.tokenHooks,\r\n      documentTypes = parserConfig.documentTypes || {},\r\n      mediaTypes = parserConfig.mediaTypes || {},\r\n      mediaFeatures = parserConfig.mediaFeatures || {},\r\n      mediaValueKeywords = parserConfig.mediaValueKeywords || {},\r\n      propertyKeywords = parserConfig.propertyKeywords || {},\r\n      nonStandardPropertyKeywords = parserConfig.nonStandardPropertyKeywords || {},\r\n      fontProperties = parserConfig.fontProperties || {},\r\n      counterDescriptors = parserConfig.counterDescriptors || {},\r\n      colorKeywords = parserConfig.colorKeywords || {},\r\n      valueKeywords = parserConfig.valueKeywords || {},\r\n      allowNested = parserConfig.allowNested,\r\n      lineComment = parserConfig.lineComment,\r\n      supportsAtComponent = parserConfig.supportsAtComponent === true;\r\n\r\n  var type, override;\r\n  function ret(style, tp) { type = tp; return style; }\r\n\r\n  // Tokenizers\r\n\r\n  function tokenBase(stream, state) {\r\n    var ch = stream.next();\r\n    if (tokenHooks[ch]) {\r\n      var result = tokenHooks[ch](stream, state);\r\n      if (result !== false) return result;\r\n    }\r\n    if (ch == \"@\") {\r\n      stream.eatWhile(/[\\w\\\\\\-]/);\r\n      return ret(\"def\", stream.current());\r\n    } else if (ch == \"=\" || (ch == \"~\" || ch == \"|\") && stream.eat(\"=\")) {\r\n      return ret(null, \"compare\");\r\n    } else if (ch == \"\\\"\" || ch == \"'\") {\r\n      state.tokenize = tokenString(ch);\r\n      return state.tokenize(stream, state);\r\n    } else if (ch == \"#\") {\r\n      stream.eatWhile(/[\\w\\\\\\-]/);\r\n      return ret(\"atom\", \"hash\");\r\n    } else if (ch == \"!\") {\r\n      stream.match(/^\\s*\\w*/);\r\n      return ret(\"keyword\", \"important\");\r\n    } else if (/\\d/.test(ch) || ch == \".\" && stream.eat(/\\d/)) {\r\n      stream.eatWhile(/[\\w.%]/);\r\n      return ret(\"number\", \"unit\");\r\n    } else if (ch === \"-\") {\r\n      if (/[\\d.]/.test(stream.peek())) {\r\n        stream.eatWhile(/[\\w.%]/);\r\n        return ret(\"number\", \"unit\");\r\n      } else if (stream.match(/^-[\\w\\\\\\-]*/)) {\r\n        stream.eatWhile(/[\\w\\\\\\-]/);\r\n        if (stream.match(/^\\s*:/, false))\r\n          return ret(\"variable-2\", \"variable-definition\");\r\n        return ret(\"variable-2\", \"variable\");\r\n      } else if (stream.match(/^\\w+-/)) {\r\n        return ret(\"meta\", \"meta\");\r\n      }\r\n    } else if (/[,+>*\\/]/.test(ch)) {\r\n      return ret(null, \"select-op\");\r\n    } else if (ch == \".\" && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {\r\n      return ret(\"qualifier\", \"qualifier\");\r\n    } else if (/[:;{}\\[\\]\\(\\)]/.test(ch)) {\r\n      return ret(null, ch);\r\n    } else if (stream.match(/[\\w-.]+(?=\\()/)) {\r\n      if (/^(url(-prefix)?|domain|regexp)$/.test(stream.current().toLowerCase())) {\r\n        state.tokenize = tokenParenthesized;\r\n      }\r\n      return ret(\"variable callee\", \"variable\");\r\n    } else if (/[\\w\\\\\\-]/.test(ch)) {\r\n      stream.eatWhile(/[\\w\\\\\\-]/);\r\n      return ret(\"property\", \"word\");\r\n    } else {\r\n      return ret(null, null);\r\n    }\r\n  }\r\n\r\n  function tokenString(quote) {\r\n    return function(stream, state) {\r\n      var escaped = false, ch;\r\n      while ((ch = stream.next()) != null) {\r\n        if (ch == quote && !escaped) {\r\n          if (quote == \")\") stream.backUp(1);\r\n          break;\r\n        }\r\n        escaped = !escaped && ch == \"\\\\\";\r\n      }\r\n      if (ch == quote || !escaped && quote != \")\") state.tokenize = null;\r\n      return ret(\"string\", \"string\");\r\n    };\r\n  }\r\n\r\n  function tokenParenthesized(stream, state) {\r\n    stream.next(); // Must be '('\r\n    if (!stream.match(/\\s*[\\\"\\')]/, false))\r\n      state.tokenize = tokenString(\")\");\r\n    else\r\n      state.tokenize = null;\r\n    return ret(null, \"(\");\r\n  }\r\n\r\n  // Context management\r\n\r\n  function Context(type, indent, prev) {\r\n    this.type = type;\r\n    this.indent = indent;\r\n    this.prev = prev;\r\n  }\r\n\r\n  function pushContext(state, stream, type, indent) {\r\n    state.context = new Context(type, stream.indentation() + (indent === false ? 0 : indentUnit), state.context);\r\n    return type;\r\n  }\r\n\r\n  function popContext(state) {\r\n    if (state.context.prev)\r\n      state.context = state.context.prev;\r\n    return state.context.type;\r\n  }\r\n\r\n  function pass(type, stream, state) {\r\n    return states[state.context.type](type, stream, state);\r\n  }\r\n  function popAndPass(type, stream, state, n) {\r\n    for (var i = n || 1; i > 0; i--)\r\n      state.context = state.context.prev;\r\n    return pass(type, stream, state);\r\n  }\r\n\r\n  // Parser\r\n\r\n  function wordAsValue(stream) {\r\n    var word = stream.current().toLowerCase();\r\n    if (valueKeywords.hasOwnProperty(word))\r\n      override = \"atom\";\r\n    else if (colorKeywords.hasOwnProperty(word))\r\n      override = \"keyword\";\r\n    else\r\n      override = \"variable\";\r\n  }\r\n\r\n  var states = {};\r\n\r\n  states.top = function(type, stream, state) {\r\n    if (type == \"{\") {\r\n      return pushContext(state, stream, \"block\");\r\n    } else if (type == \"}\" && state.context.prev) {\r\n      return popContext(state);\r\n    } else if (supportsAtComponent && /@component/i.test(type)) {\r\n      return pushContext(state, stream, \"atComponentBlock\");\r\n    } else if (/^@(-moz-)?document$/i.test(type)) {\r\n      return pushContext(state, stream, \"documentTypes\");\r\n    } else if (/^@(media|supports|(-moz-)?document|import)$/i.test(type)) {\r\n      return pushContext(state, stream, \"atBlock\");\r\n    } else if (/^@(font-face|counter-style)/i.test(type)) {\r\n      state.stateArg = type;\r\n      return \"restricted_atBlock_before\";\r\n    } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type)) {\r\n      return \"keyframes\";\r\n    } else if (type && type.charAt(0) == \"@\") {\r\n      return pushContext(state, stream, \"at\");\r\n    } else if (type == \"hash\") {\r\n      override = \"builtin\";\r\n    } else if (type == \"word\") {\r\n      override = \"tag\";\r\n    } else if (type == \"variable-definition\") {\r\n      return \"maybeprop\";\r\n    } else if (type == \"interpolation\") {\r\n      return pushContext(state, stream, \"interpolation\");\r\n    } else if (type == \":\") {\r\n      return \"pseudo\";\r\n    } else if (allowNested && type == \"(\") {\r\n      return pushContext(state, stream, \"parens\");\r\n    }\r\n    return state.context.type;\r\n  };\r\n\r\n  states.block = function(type, stream, state) {\r\n    if (type == \"word\") {\r\n      var word = stream.current().toLowerCase();\r\n      if (propertyKeywords.hasOwnProperty(word)) {\r\n        override = \"property\";\r\n        return \"maybeprop\";\r\n      } else if (nonStandardPropertyKeywords.hasOwnProperty(word)) {\r\n        override = \"string-2\";\r\n        return \"maybeprop\";\r\n      } else if (allowNested) {\r\n        override = stream.match(/^\\s*:(?:\\s|$)/, false) ? \"property\" : \"tag\";\r\n        return \"block\";\r\n      } else {\r\n        override += \" error\";\r\n        return \"maybeprop\";\r\n      }\r\n    } else if (type == \"meta\") {\r\n      return \"block\";\r\n    } else if (!allowNested && (type == \"hash\" || type == \"qualifier\")) {\r\n      override = \"error\";\r\n      return \"block\";\r\n    } else {\r\n      return states.top(type, stream, state);\r\n    }\r\n  };\r\n\r\n  states.maybeprop = function(type, stream, state) {\r\n    if (type == \":\") return pushContext(state, stream, \"prop\");\r\n    return pass(type, stream, state);\r\n  };\r\n\r\n  states.prop = function(type, stream, state) {\r\n    if (type == \";\") return popContext(state);\r\n    if (type == \"{\" && allowNested) return pushContext(state, stream, \"propBlock\");\r\n    if (type == \"}\" || type == \"{\") return popAndPass(type, stream, state);\r\n    if (type == \"(\") return pushContext(state, stream, \"parens\");\r\n\r\n    if (type == \"hash\" && !/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(stream.current())) {\r\n      override += \" error\";\r\n    } else if (type == \"word\") {\r\n      wordAsValue(stream);\r\n    } else if (type == \"interpolation\") {\r\n      return pushContext(state, stream, \"interpolation\");\r\n    }\r\n    return \"prop\";\r\n  };\r\n\r\n  states.propBlock = function(type, _stream, state) {\r\n    if (type == \"}\") return popContext(state);\r\n    if (type == \"word\") { override = \"property\"; return \"maybeprop\"; }\r\n    return state.context.type;\r\n  };\r\n\r\n  states.parens = function(type, stream, state) {\r\n    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\r\n    if (type == \")\") return popContext(state);\r\n    if (type == \"(\") return pushContext(state, stream, \"parens\");\r\n    if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\r\n    if (type == \"word\") wordAsValue(stream);\r\n    return \"parens\";\r\n  };\r\n\r\n  states.pseudo = function(type, stream, state) {\r\n    if (type == \"meta\") return \"pseudo\";\r\n\r\n    if (type == \"word\") {\r\n      override = \"variable-3\";\r\n      return state.context.type;\r\n    }\r\n    return pass(type, stream, state);\r\n  };\r\n\r\n  states.documentTypes = function(type, stream, state) {\r\n    if (type == \"word\" && documentTypes.hasOwnProperty(stream.current())) {\r\n      override = \"tag\";\r\n      return state.context.type;\r\n    } else {\r\n      return states.atBlock(type, stream, state);\r\n    }\r\n  };\r\n\r\n  states.atBlock = function(type, stream, state) {\r\n    if (type == \"(\") return pushContext(state, stream, \"atBlock_parens\");\r\n    if (type == \"}\" || type == \";\") return popAndPass(type, stream, state);\r\n    if (type == \"{\") return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\");\r\n\r\n    if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\r\n\r\n    if (type == \"word\") {\r\n      var word = stream.current().toLowerCase();\r\n      if (word == \"only\" || word == \"not\" || word == \"and\" || word == \"or\")\r\n        override = \"keyword\";\r\n      else if (mediaTypes.hasOwnProperty(word))\r\n        override = \"attribute\";\r\n      else if (mediaFeatures.hasOwnProperty(word))\r\n        override = \"property\";\r\n      else if (mediaValueKeywords.hasOwnProperty(word))\r\n        override = \"keyword\";\r\n      else if (propertyKeywords.hasOwnProperty(word))\r\n        override = \"property\";\r\n      else if (nonStandardPropertyKeywords.hasOwnProperty(word))\r\n        override = \"string-2\";\r\n      else if (valueKeywords.hasOwnProperty(word))\r\n        override = \"atom\";\r\n      else if (colorKeywords.hasOwnProperty(word))\r\n        override = \"keyword\";\r\n      else\r\n        override = \"error\";\r\n    }\r\n    return state.context.type;\r\n  };\r\n\r\n  states.atComponentBlock = function(type, stream, state) {\r\n    if (type == \"}\")\r\n      return popAndPass(type, stream, state);\r\n    if (type == \"{\")\r\n      return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\", false);\r\n    if (type == \"word\")\r\n      override = \"error\";\r\n    return state.context.type;\r\n  };\r\n\r\n  states.atBlock_parens = function(type, stream, state) {\r\n    if (type == \")\") return popContext(state);\r\n    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state, 2);\r\n    return states.atBlock(type, stream, state);\r\n  };\r\n\r\n  states.restricted_atBlock_before = function(type, stream, state) {\r\n    if (type == \"{\")\r\n      return pushContext(state, stream, \"restricted_atBlock\");\r\n    if (type == \"word\" && state.stateArg == \"@counter-style\") {\r\n      override = \"variable\";\r\n      return \"restricted_atBlock_before\";\r\n    }\r\n    return pass(type, stream, state);\r\n  };\r\n\r\n  states.restricted_atBlock = function(type, stream, state) {\r\n    if (type == \"}\") {\r\n      state.stateArg = null;\r\n      return popContext(state);\r\n    }\r\n    if (type == \"word\") {\r\n      if ((state.stateArg == \"@font-face\" && !fontProperties.hasOwnProperty(stream.current().toLowerCase())) ||\r\n          (state.stateArg == \"@counter-style\" && !counterDescriptors.hasOwnProperty(stream.current().toLowerCase())))\r\n        override = \"error\";\r\n      else\r\n        override = \"property\";\r\n      return \"maybeprop\";\r\n    }\r\n    return \"restricted_atBlock\";\r\n  };\r\n\r\n  states.keyframes = function(type, stream, state) {\r\n    if (type == \"word\") { override = \"variable\"; return \"keyframes\"; }\r\n    if (type == \"{\") return pushContext(state, stream, \"top\");\r\n    return pass(type, stream, state);\r\n  };\r\n\r\n  states.at = function(type, stream, state) {\r\n    if (type == \";\") return popContext(state);\r\n    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\r\n    if (type == \"word\") override = \"tag\";\r\n    else if (type == \"hash\") override = \"builtin\";\r\n    return \"at\";\r\n  };\r\n\r\n  states.interpolation = function(type, stream, state) {\r\n    if (type == \"}\") return popContext(state);\r\n    if (type == \"{\" || type == \";\") return popAndPass(type, stream, state);\r\n    if (type == \"word\") override = \"variable\";\r\n    else if (type != \"variable\" && type != \"(\" && type != \")\") override = \"error\";\r\n    return \"interpolation\";\r\n  };\r\n\r\n  return {\r\n    startState: function(base) {\r\n      return {tokenize: null,\r\n              state: inline ? \"block\" : \"top\",\r\n              stateArg: null,\r\n              context: new Context(inline ? \"block\" : \"top\", base || 0, null)};\r\n    },\r\n\r\n    token: function(stream, state) {\r\n      if (!state.tokenize && stream.eatSpace()) return null;\r\n      var style = (state.tokenize || tokenBase)(stream, state);\r\n      if (style && typeof style == \"object\") {\r\n        type = style[1];\r\n        style = style[0];\r\n      }\r\n      override = style;\r\n      if (type != \"comment\")\r\n        state.state = states[state.state](type, stream, state);\r\n      return override;\r\n    },\r\n\r\n    indent: function(state, textAfter) {\r\n      var cx = state.context, ch = textAfter && textAfter.charAt(0);\r\n      var indent = cx.indent;\r\n      if (cx.type == \"prop\" && (ch == \"}\" || ch == \")\")) cx = cx.prev;\r\n      if (cx.prev) {\r\n        if (ch == \"}\" && (cx.type == \"block\" || cx.type == \"top\" ||\r\n                          cx.type == \"interpolation\" || cx.type == \"restricted_atBlock\")) {\r\n          // Resume indentation from parent context.\r\n          cx = cx.prev;\r\n          indent = cx.indent;\r\n        } else if (ch == \")\" && (cx.type == \"parens\" || cx.type == \"atBlock_parens\") ||\r\n            ch == \"{\" && (cx.type == \"at\" || cx.type == \"atBlock\")) {\r\n          // Dedent relative to current context.\r\n          indent = Math.max(0, cx.indent - indentUnit);\r\n        }\r\n      }\r\n      return indent;\r\n    },\r\n\r\n    electricChars: \"}\",\r\n    blockCommentStart: \"/*\",\r\n    blockCommentEnd: \"*/\",\r\n    blockCommentContinue: \" * \",\r\n    lineComment: lineComment,\r\n    fold: \"brace\"\r\n  };\r\n});\r\n\r\n  function keySet(array) {\r\n    var keys = {};\r\n    for (var i = 0; i < array.length; ++i) {\r\n      keys[array[i].toLowerCase()] = true;\r\n    }\r\n    return keys;\r\n  }\r\n\r\n  var documentTypes_ = [\r\n    \"domain\", \"regexp\", \"url\", \"url-prefix\"\r\n  ], documentTypes = keySet(documentTypes_);\r\n\r\n  var mediaTypes_ = [\r\n    \"all\", \"aural\", \"braille\", \"handheld\", \"print\", \"projection\", \"screen\",\r\n    \"tty\", \"tv\", \"embossed\"\r\n  ], mediaTypes = keySet(mediaTypes_);\r\n\r\n  var mediaFeatures_ = [\r\n    \"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\",\r\n    \"device-width\", \"min-device-width\", \"max-device-width\", \"device-height\",\r\n    \"min-device-height\", \"max-device-height\", \"aspect-ratio\",\r\n    \"min-aspect-ratio\", \"max-aspect-ratio\", \"device-aspect-ratio\",\r\n    \"min-device-aspect-ratio\", \"max-device-aspect-ratio\", \"color\", \"min-color\",\r\n    \"max-color\", \"color-index\", \"min-color-index\", \"max-color-index\",\r\n    \"monochrome\", \"min-monochrome\", \"max-monochrome\", \"resolution\",\r\n    \"min-resolution\", \"max-resolution\", \"scan\", \"grid\", \"orientation\",\r\n    \"device-pixel-ratio\", \"min-device-pixel-ratio\", \"max-device-pixel-ratio\",\r\n    \"pointer\", \"any-pointer\", \"hover\", \"any-hover\"\r\n  ], mediaFeatures = keySet(mediaFeatures_);\r\n\r\n  var mediaValueKeywords_ = [\r\n    \"landscape\", \"portrait\", \"none\", \"coarse\", \"fine\", \"on-demand\", \"hover\",\r\n    \"interlace\", \"progressive\"\r\n  ], mediaValueKeywords = keySet(mediaValueKeywords_);\r\n\r\n  var propertyKeywords_ = [\r\n    \"align-content\", \"align-items\", \"align-self\", \"alignment-adjust\",\r\n    \"alignment-baseline\", \"anchor-point\", \"animation\", \"animation-delay\",\r\n    \"animation-direction\", \"animation-duration\", \"animation-fill-mode\",\r\n    \"animation-iteration-count\", \"animation-name\", \"animation-play-state\",\r\n    \"animation-timing-function\", \"appearance\", \"azimuth\", \"backface-visibility\",\r\n    \"background\", \"background-attachment\", \"background-blend-mode\", \"background-clip\",\r\n    \"background-color\", \"background-image\", \"background-origin\", \"background-position\",\r\n    \"background-repeat\", \"background-size\", \"baseline-shift\", \"binding\",\r\n    \"bleed\", \"bookmark-label\", \"bookmark-level\", \"bookmark-state\",\r\n    \"bookmark-target\", \"border\", \"border-bottom\", \"border-bottom-color\",\r\n    \"border-bottom-left-radius\", \"border-bottom-right-radius\",\r\n    \"border-bottom-style\", \"border-bottom-width\", \"border-collapse\",\r\n    \"border-color\", \"border-image\", \"border-image-outset\",\r\n    \"border-image-repeat\", \"border-image-slice\", \"border-image-source\",\r\n    \"border-image-width\", \"border-left\", \"border-left-color\",\r\n    \"border-left-style\", \"border-left-width\", \"border-radius\", \"border-right\",\r\n    \"border-right-color\", \"border-right-style\", \"border-right-width\",\r\n    \"border-spacing\", \"border-style\", \"border-top\", \"border-top-color\",\r\n    \"border-top-left-radius\", \"border-top-right-radius\", \"border-top-style\",\r\n    \"border-top-width\", \"border-width\", \"bottom\", \"box-decoration-break\",\r\n    \"box-shadow\", \"box-sizing\", \"break-after\", \"break-before\", \"break-inside\",\r\n    \"caption-side\", \"caret-color\", \"clear\", \"clip\", \"color\", \"color-profile\", \"column-count\",\r\n    \"column-fill\", \"column-gap\", \"column-rule\", \"column-rule-color\",\r\n    \"column-rule-style\", \"column-rule-width\", \"column-span\", \"column-width\",\r\n    \"columns\", \"content\", \"counter-increment\", \"counter-reset\", \"crop\", \"cue\",\r\n    \"cue-after\", \"cue-before\", \"cursor\", \"direction\", \"display\",\r\n    \"dominant-baseline\", \"drop-initial-after-adjust\",\r\n    \"drop-initial-after-align\", \"drop-initial-before-adjust\",\r\n    \"drop-initial-before-align\", \"drop-initial-size\", \"drop-initial-value\",\r\n    \"elevation\", \"empty-cells\", \"fit\", \"fit-position\", \"flex\", \"flex-basis\",\r\n    \"flex-direction\", \"flex-flow\", \"flex-grow\", \"flex-shrink\", \"flex-wrap\",\r\n    \"float\", \"float-offset\", \"flow-from\", \"flow-into\", \"font\", \"font-feature-settings\",\r\n    \"font-family\", \"font-kerning\", \"font-language-override\", \"font-size\", \"font-size-adjust\",\r\n    \"font-stretch\", \"font-style\", \"font-synthesis\", \"font-variant\",\r\n    \"font-variant-alternates\", \"font-variant-caps\", \"font-variant-east-asian\",\r\n    \"font-variant-ligatures\", \"font-variant-numeric\", \"font-variant-position\",\r\n    \"font-weight\", \"grid\", \"grid-area\", \"grid-auto-columns\", \"grid-auto-flow\",\r\n    \"grid-auto-rows\", \"grid-column\", \"grid-column-end\", \"grid-column-gap\",\r\n    \"grid-column-start\", \"grid-gap\", \"grid-row\", \"grid-row-end\", \"grid-row-gap\",\r\n    \"grid-row-start\", \"grid-template\", \"grid-template-areas\", \"grid-template-columns\",\r\n    \"grid-template-rows\", \"hanging-punctuation\", \"height\", \"hyphens\",\r\n    \"icon\", \"image-orientation\", \"image-rendering\", \"image-resolution\",\r\n    \"inline-box-align\", \"justify-content\", \"justify-items\", \"justify-self\", \"left\", \"letter-spacing\",\r\n    \"line-break\", \"line-height\", \"line-stacking\", \"line-stacking-ruby\",\r\n    \"line-stacking-shift\", \"line-stacking-strategy\", \"list-style\",\r\n    \"list-style-image\", \"list-style-position\", \"list-style-type\", \"margin\",\r\n    \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\",\r\n    \"marks\", \"marquee-direction\", \"marquee-loop\",\r\n    \"marquee-play-count\", \"marquee-speed\", \"marquee-style\", \"max-height\",\r\n    \"max-width\", \"min-height\", \"min-width\", \"mix-blend-mode\", \"move-to\", \"nav-down\", \"nav-index\",\r\n    \"nav-left\", \"nav-right\", \"nav-up\", \"object-fit\", \"object-position\",\r\n    \"opacity\", \"order\", \"orphans\", \"outline\",\r\n    \"outline-color\", \"outline-offset\", \"outline-style\", \"outline-width\",\r\n    \"overflow\", \"overflow-style\", \"overflow-wrap\", \"overflow-x\", \"overflow-y\",\r\n    \"padding\", \"padding-bottom\", \"padding-left\", \"padding-right\", \"padding-top\",\r\n    \"page\", \"page-break-after\", \"page-break-before\", \"page-break-inside\",\r\n    \"page-policy\", \"pause\", \"pause-after\", \"pause-before\", \"perspective\",\r\n    \"perspective-origin\", \"pitch\", \"pitch-range\", \"place-content\", \"place-items\", \"place-self\", \"play-during\", \"position\",\r\n    \"presentation-level\", \"punctuation-trim\", \"quotes\", \"region-break-after\",\r\n    \"region-break-before\", \"region-break-inside\", \"region-fragment\",\r\n    \"rendering-intent\", \"resize\", \"rest\", \"rest-after\", \"rest-before\", \"richness\",\r\n    \"right\", \"rotation\", \"rotation-point\", \"ruby-align\", \"ruby-overhang\",\r\n    \"ruby-position\", \"ruby-span\", \"shape-image-threshold\", \"shape-inside\", \"shape-margin\",\r\n    \"shape-outside\", \"size\", \"speak\", \"speak-as\", \"speak-header\",\r\n    \"speak-numeral\", \"speak-punctuation\", \"speech-rate\", \"stress\", \"string-set\",\r\n    \"tab-size\", \"table-layout\", \"target\", \"target-name\", \"target-new\",\r\n    \"target-position\", \"text-align\", \"text-align-last\", \"text-decoration\",\r\n    \"text-decoration-color\", \"text-decoration-line\", \"text-decoration-skip\",\r\n    \"text-decoration-style\", \"text-emphasis\", \"text-emphasis-color\",\r\n    \"text-emphasis-position\", \"text-emphasis-style\", \"text-height\",\r\n    \"text-indent\", \"text-justify\", \"text-outline\", \"text-overflow\", \"text-shadow\",\r\n    \"text-size-adjust\", \"text-space-collapse\", \"text-transform\", \"text-underline-position\",\r\n    \"text-wrap\", \"top\", \"transform\", \"transform-origin\", \"transform-style\",\r\n    \"transition\", \"transition-delay\", \"transition-duration\",\r\n    \"transition-property\", \"transition-timing-function\", \"unicode-bidi\",\r\n    \"user-select\", \"vertical-align\", \"visibility\", \"voice-balance\", \"voice-duration\",\r\n    \"voice-family\", \"voice-pitch\", \"voice-range\", \"voice-rate\", \"voice-stress\",\r\n    \"voice-volume\", \"volume\", \"white-space\", \"widows\", \"width\", \"will-change\", \"word-break\",\r\n    \"word-spacing\", \"word-wrap\", \"z-index\",\r\n    // SVG-specific\r\n    \"clip-path\", \"clip-rule\", \"mask\", \"enable-background\", \"filter\", \"flood-color\",\r\n    \"flood-opacity\", \"lighting-color\", \"stop-color\", \"stop-opacity\", \"pointer-events\",\r\n    \"color-interpolation\", \"color-interpolation-filters\",\r\n    \"color-rendering\", \"fill\", \"fill-opacity\", \"fill-rule\", \"image-rendering\",\r\n    \"marker\", \"marker-end\", \"marker-mid\", \"marker-start\", \"shape-rendering\", \"stroke\",\r\n    \"stroke-dasharray\", \"stroke-dashoffset\", \"stroke-linecap\", \"stroke-linejoin\",\r\n    \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"text-rendering\",\r\n    \"baseline-shift\", \"dominant-baseline\", \"glyph-orientation-horizontal\",\r\n    \"glyph-orientation-vertical\", \"text-anchor\", \"writing-mode\"\r\n  ], propertyKeywords = keySet(propertyKeywords_);\r\n\r\n  var nonStandardPropertyKeywords_ = [\r\n    \"scrollbar-arrow-color\", \"scrollbar-base-color\", \"scrollbar-dark-shadow-color\",\r\n    \"scrollbar-face-color\", \"scrollbar-highlight-color\", \"scrollbar-shadow-color\",\r\n    \"scrollbar-3d-light-color\", \"scrollbar-track-color\", \"shape-inside\",\r\n    \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\",\r\n    \"searchfield-results-decoration\", \"zoom\"\r\n  ], nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);\r\n\r\n  var fontProperties_ = [\r\n    \"font-family\", \"src\", \"unicode-range\", \"font-variant\", \"font-feature-settings\",\r\n    \"font-stretch\", \"font-weight\", \"font-style\"\r\n  ], fontProperties = keySet(fontProperties_);\r\n\r\n  var counterDescriptors_ = [\r\n    \"additive-symbols\", \"fallback\", \"negative\", \"pad\", \"prefix\", \"range\",\r\n    \"speak-as\", \"suffix\", \"symbols\", \"system\"\r\n  ], counterDescriptors = keySet(counterDescriptors_);\r\n\r\n  var colorKeywords_ = [\r\n    \"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\",\r\n    \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\",\r\n    \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\",\r\n    \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\",\r\n    \"darkgray\", \"darkgreen\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\",\r\n    \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\",\r\n    \"darkslateblue\", \"darkslategray\", \"darkturquoise\", \"darkviolet\",\r\n    \"deeppink\", \"deepskyblue\", \"dimgray\", \"dodgerblue\", \"firebrick\",\r\n    \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\",\r\n    \"gold\", \"goldenrod\", \"gray\", \"grey\", \"green\", \"greenyellow\", \"honeydew\",\r\n    \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\",\r\n    \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\",\r\n    \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightpink\",\r\n    \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\",\r\n    \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\",\r\n    \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\",\r\n    \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\",\r\n    \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\",\r\n    \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\",\r\n    \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\",\r\n    \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\",\r\n    \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\",\r\n    \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\",\r\n    \"slateblue\", \"slategray\", \"snow\", \"springgreen\", \"steelblue\", \"tan\",\r\n    \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\",\r\n    \"whitesmoke\", \"yellow\", \"yellowgreen\"\r\n  ], colorKeywords = keySet(colorKeywords_);\r\n\r\n  var valueKeywords_ = [\r\n    \"above\", \"absolute\", \"activeborder\", \"additive\", \"activecaption\", \"afar\",\r\n    \"after-white-space\", \"ahead\", \"alias\", \"all\", \"all-scroll\", \"alphabetic\", \"alternate\",\r\n    \"always\", \"amharic\", \"amharic-abegede\", \"antialiased\", \"appworkspace\",\r\n    \"arabic-indic\", \"armenian\", \"asterisks\", \"attr\", \"auto\", \"auto-flow\", \"avoid\", \"avoid-column\", \"avoid-page\",\r\n    \"avoid-region\", \"background\", \"backwards\", \"baseline\", \"below\", \"bidi-override\", \"binary\",\r\n    \"bengali\", \"blink\", \"block\", \"block-axis\", \"bold\", \"bolder\", \"border\", \"border-box\",\r\n    \"both\", \"bottom\", \"break\", \"break-all\", \"break-word\", \"bullets\", \"button\", \"button-bevel\",\r\n    \"buttonface\", \"buttonhighlight\", \"buttonshadow\", \"buttontext\", \"calc\", \"cambodian\",\r\n    \"capitalize\", \"caps-lock-indicator\", \"caption\", \"captiontext\", \"caret\",\r\n    \"cell\", \"center\", \"checkbox\", \"circle\", \"cjk-decimal\", \"cjk-earthly-branch\",\r\n    \"cjk-heavenly-stem\", \"cjk-ideographic\", \"clear\", \"clip\", \"close-quote\",\r\n    \"col-resize\", \"collapse\", \"color\", \"color-burn\", \"color-dodge\", \"column\", \"column-reverse\",\r\n    \"compact\", \"condensed\", \"contain\", \"content\", \"contents\",\r\n    \"content-box\", \"context-menu\", \"continuous\", \"copy\", \"counter\", \"counters\", \"cover\", \"crop\",\r\n    \"cross\", \"crosshair\", \"currentcolor\", \"cursive\", \"cyclic\", \"darken\", \"dashed\", \"decimal\",\r\n    \"decimal-leading-zero\", \"default\", \"default-button\", \"dense\", \"destination-atop\",\r\n    \"destination-in\", \"destination-out\", \"destination-over\", \"devanagari\", \"difference\",\r\n    \"disc\", \"discard\", \"disclosure-closed\", \"disclosure-open\", \"document\",\r\n    \"dot-dash\", \"dot-dot-dash\",\r\n    \"dotted\", \"double\", \"down\", \"e-resize\", \"ease\", \"ease-in\", \"ease-in-out\", \"ease-out\",\r\n    \"element\", \"ellipse\", \"ellipsis\", \"embed\", \"end\", \"ethiopic\", \"ethiopic-abegede\",\r\n    \"ethiopic-abegede-am-et\", \"ethiopic-abegede-gez\", \"ethiopic-abegede-ti-er\",\r\n    \"ethiopic-abegede-ti-et\", \"ethiopic-halehame-aa-er\",\r\n    \"ethiopic-halehame-aa-et\", \"ethiopic-halehame-am-et\",\r\n    \"ethiopic-halehame-gez\", \"ethiopic-halehame-om-et\",\r\n    \"ethiopic-halehame-sid-et\", \"ethiopic-halehame-so-et\",\r\n    \"ethiopic-halehame-ti-er\", \"ethiopic-halehame-ti-et\", \"ethiopic-halehame-tig\",\r\n    \"ethiopic-numeric\", \"ew-resize\", \"exclusion\", \"expanded\", \"extends\", \"extra-condensed\",\r\n    \"extra-expanded\", \"fantasy\", \"fast\", \"fill\", \"fixed\", \"flat\", \"flex\", \"flex-end\", \"flex-start\", \"footnotes\",\r\n    \"forwards\", \"from\", \"geometricPrecision\", \"georgian\", \"graytext\", \"grid\", \"groove\",\r\n    \"gujarati\", \"gurmukhi\", \"hand\", \"hangul\", \"hangul-consonant\", \"hard-light\", \"hebrew\",\r\n    \"help\", \"hidden\", \"hide\", \"higher\", \"highlight\", \"highlighttext\",\r\n    \"hiragana\", \"hiragana-iroha\", \"horizontal\", \"hsl\", \"hsla\", \"hue\", \"icon\", \"ignore\",\r\n    \"inactiveborder\", \"inactivecaption\", \"inactivecaptiontext\", \"infinite\",\r\n    \"infobackground\", \"infotext\", \"inherit\", \"initial\", \"inline\", \"inline-axis\",\r\n    \"inline-block\", \"inline-flex\", \"inline-grid\", \"inline-table\", \"inset\", \"inside\", \"intrinsic\", \"invert\",\r\n    \"italic\", \"japanese-formal\", \"japanese-informal\", \"justify\", \"kannada\",\r\n    \"katakana\", \"katakana-iroha\", \"keep-all\", \"khmer\",\r\n    \"korean-hangul-formal\", \"korean-hanja-formal\", \"korean-hanja-informal\",\r\n    \"landscape\", \"lao\", \"large\", \"larger\", \"left\", \"level\", \"lighter\", \"lighten\",\r\n    \"line-through\", \"linear\", \"linear-gradient\", \"lines\", \"list-item\", \"listbox\", \"listitem\",\r\n    \"local\", \"logical\", \"loud\", \"lower\", \"lower-alpha\", \"lower-armenian\",\r\n    \"lower-greek\", \"lower-hexadecimal\", \"lower-latin\", \"lower-norwegian\",\r\n    \"lower-roman\", \"lowercase\", \"ltr\", \"luminosity\", \"malayalam\", \"match\", \"matrix\", \"matrix3d\",\r\n    \"media-controls-background\", \"media-current-time-display\",\r\n    \"media-fullscreen-button\", \"media-mute-button\", \"media-play-button\",\r\n    \"media-return-to-realtime-button\", \"media-rewind-button\",\r\n    \"media-seek-back-button\", \"media-seek-forward-button\", \"media-slider\",\r\n    \"media-sliderthumb\", \"media-time-remaining-display\", \"media-volume-slider\",\r\n    \"media-volume-slider-container\", \"media-volume-sliderthumb\", \"medium\",\r\n    \"menu\", \"menulist\", \"menulist-button\", \"menulist-text\",\r\n    \"menulist-textfield\", \"menutext\", \"message-box\", \"middle\", \"min-intrinsic\",\r\n    \"mix\", \"mongolian\", \"monospace\", \"move\", \"multiple\", \"multiply\", \"myanmar\", \"n-resize\",\r\n    \"narrower\", \"ne-resize\", \"nesw-resize\", \"no-close-quote\", \"no-drop\",\r\n    \"no-open-quote\", \"no-repeat\", \"none\", \"normal\", \"not-allowed\", \"nowrap\",\r\n    \"ns-resize\", \"numbers\", \"numeric\", \"nw-resize\", \"nwse-resize\", \"oblique\", \"octal\", \"opacity\", \"open-quote\",\r\n    \"optimizeLegibility\", \"optimizeSpeed\", \"oriya\", \"oromo\", \"outset\",\r\n    \"outside\", \"outside-shape\", \"overlay\", \"overline\", \"padding\", \"padding-box\",\r\n    \"painted\", \"page\", \"paused\", \"persian\", \"perspective\", \"plus-darker\", \"plus-lighter\",\r\n    \"pointer\", \"polygon\", \"portrait\", \"pre\", \"pre-line\", \"pre-wrap\", \"preserve-3d\",\r\n    \"progress\", \"push-button\", \"radial-gradient\", \"radio\", \"read-only\",\r\n    \"read-write\", \"read-write-plaintext-only\", \"rectangle\", \"region\",\r\n    \"relative\", \"repeat\", \"repeating-linear-gradient\",\r\n    \"repeating-radial-gradient\", \"repeat-x\", \"repeat-y\", \"reset\", \"reverse\",\r\n    \"rgb\", \"rgba\", \"ridge\", \"right\", \"rotate\", \"rotate3d\", \"rotateX\", \"rotateY\",\r\n    \"rotateZ\", \"round\", \"row\", \"row-resize\", \"row-reverse\", \"rtl\", \"run-in\", \"running\",\r\n    \"s-resize\", \"sans-serif\", \"saturation\", \"scale\", \"scale3d\", \"scaleX\", \"scaleY\", \"scaleZ\", \"screen\",\r\n    \"scroll\", \"scrollbar\", \"scroll-position\", \"se-resize\", \"searchfield\",\r\n    \"searchfield-cancel-button\", \"searchfield-decoration\",\r\n    \"searchfield-results-button\", \"searchfield-results-decoration\", \"self-start\", \"self-end\",\r\n    \"semi-condensed\", \"semi-expanded\", \"separate\", \"serif\", \"show\", \"sidama\",\r\n    \"simp-chinese-formal\", \"simp-chinese-informal\", \"single\",\r\n    \"skew\", \"skewX\", \"skewY\", \"skip-white-space\", \"slide\", \"slider-horizontal\",\r\n    \"slider-vertical\", \"sliderthumb-horizontal\", \"sliderthumb-vertical\", \"slow\",\r\n    \"small\", \"small-caps\", \"small-caption\", \"smaller\", \"soft-light\", \"solid\", \"somali\",\r\n    \"source-atop\", \"source-in\", \"source-out\", \"source-over\", \"space\", \"space-around\", \"space-between\", \"space-evenly\", \"spell-out\", \"square\",\r\n    \"square-button\", \"start\", \"static\", \"status-bar\", \"stretch\", \"stroke\", \"sub\",\r\n    \"subpixel-antialiased\", \"super\", \"sw-resize\", \"symbolic\", \"symbols\", \"system-ui\", \"table\",\r\n    \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\",\r\n    \"table-footer-group\", \"table-header-group\", \"table-row\", \"table-row-group\",\r\n    \"tamil\",\r\n    \"telugu\", \"text\", \"text-bottom\", \"text-top\", \"textarea\", \"textfield\", \"thai\",\r\n    \"thick\", \"thin\", \"threeddarkshadow\", \"threedface\", \"threedhighlight\",\r\n    \"threedlightshadow\", \"threedshadow\", \"tibetan\", \"tigre\", \"tigrinya-er\",\r\n    \"tigrinya-er-abegede\", \"tigrinya-et\", \"tigrinya-et-abegede\", \"to\", \"top\",\r\n    \"trad-chinese-formal\", \"trad-chinese-informal\", \"transform\",\r\n    \"translate\", \"translate3d\", \"translateX\", \"translateY\", \"translateZ\",\r\n    \"transparent\", \"ultra-condensed\", \"ultra-expanded\", \"underline\", \"unset\", \"up\",\r\n    \"upper-alpha\", \"upper-armenian\", \"upper-greek\", \"upper-hexadecimal\",\r\n    \"upper-latin\", \"upper-norwegian\", \"upper-roman\", \"uppercase\", \"urdu\", \"url\",\r\n    \"var\", \"vertical\", \"vertical-text\", \"visible\", \"visibleFill\", \"visiblePainted\",\r\n    \"visibleStroke\", \"visual\", \"w-resize\", \"wait\", \"wave\", \"wider\",\r\n    \"window\", \"windowframe\", \"windowtext\", \"words\", \"wrap\", \"wrap-reverse\", \"x-large\", \"x-small\", \"xor\",\r\n    \"xx-large\", \"xx-small\"\r\n  ], valueKeywords = keySet(valueKeywords_);\r\n\r\n  var allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_)\r\n    .concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_)\r\n    .concat(valueKeywords_);\r\n  CodeMirror.registerHelper(\"hintWords\", \"css\", allWords);\r\n\r\n  function tokenCComment(stream, state) {\r\n    var maybeEnd = false, ch;\r\n    while ((ch = stream.next()) != null) {\r\n      if (maybeEnd && ch == \"/\") {\r\n        state.tokenize = null;\r\n        break;\r\n      }\r\n      maybeEnd = (ch == \"*\");\r\n    }\r\n    return [\"comment\", \"comment\"];\r\n  }\r\n\r\n  CodeMirror.defineMIME(\"text/css\", {\r\n    documentTypes: documentTypes,\r\n    mediaTypes: mediaTypes,\r\n    mediaFeatures: mediaFeatures,\r\n    mediaValueKeywords: mediaValueKeywords,\r\n    propertyKeywords: propertyKeywords,\r\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\r\n    fontProperties: fontProperties,\r\n    counterDescriptors: counterDescriptors,\r\n    colorKeywords: colorKeywords,\r\n    valueKeywords: valueKeywords,\r\n    tokenHooks: {\r\n      \"/\": function(stream, state) {\r\n        if (!stream.eat(\"*\")) return false;\r\n        state.tokenize = tokenCComment;\r\n        return tokenCComment(stream, state);\r\n      }\r\n    },\r\n    name: \"css\"\r\n  });\r\n\r\n  CodeMirror.defineMIME(\"text/x-scss\", {\r\n    mediaTypes: mediaTypes,\r\n    mediaFeatures: mediaFeatures,\r\n    mediaValueKeywords: mediaValueKeywords,\r\n    propertyKeywords: propertyKeywords,\r\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\r\n    colorKeywords: colorKeywords,\r\n    valueKeywords: valueKeywords,\r\n    fontProperties: fontProperties,\r\n    allowNested: true,\r\n    lineComment: \"//\",\r\n    tokenHooks: {\r\n      \"/\": function(stream, state) {\r\n        if (stream.eat(\"/\")) {\r\n          stream.skipToEnd();\r\n          return [\"comment\", \"comment\"];\r\n        } else if (stream.eat(\"*\")) {\r\n          state.tokenize = tokenCComment;\r\n          return tokenCComment(stream, state);\r\n        } else {\r\n          return [\"operator\", \"operator\"];\r\n        }\r\n      },\r\n      \":\": function(stream) {\r\n        if (stream.match(/\\s*\\{/, false))\r\n          return [null, null]\r\n        return false;\r\n      },\r\n      \"$\": function(stream) {\r\n        stream.match(/^[\\w-]+/);\r\n        if (stream.match(/^\\s*:/, false))\r\n          return [\"variable-2\", \"variable-definition\"];\r\n        return [\"variable-2\", \"variable\"];\r\n      },\r\n      \"#\": function(stream) {\r\n        if (!stream.eat(\"{\")) return false;\r\n        return [null, \"interpolation\"];\r\n      }\r\n    },\r\n    name: \"css\",\r\n    helperType: \"scss\"\r\n  });\r\n\r\n  CodeMirror.defineMIME(\"text/x-less\", {\r\n    mediaTypes: mediaTypes,\r\n    mediaFeatures: mediaFeatures,\r\n    mediaValueKeywords: mediaValueKeywords,\r\n    propertyKeywords: propertyKeywords,\r\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\r\n    colorKeywords: colorKeywords,\r\n    valueKeywords: valueKeywords,\r\n    fontProperties: fontProperties,\r\n    allowNested: true,\r\n    lineComment: \"//\",\r\n    tokenHooks: {\r\n      \"/\": function(stream, state) {\r\n        if (stream.eat(\"/\")) {\r\n          stream.skipToEnd();\r\n          return [\"comment\", \"comment\"];\r\n        } else if (stream.eat(\"*\")) {\r\n          state.tokenize = tokenCComment;\r\n          return tokenCComment(stream, state);\r\n        } else {\r\n          return [\"operator\", \"operator\"];\r\n        }\r\n      },\r\n      \"@\": function(stream) {\r\n        if (stream.eat(\"{\")) return [null, \"interpolation\"];\r\n        if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\\b/i, false)) return false;\r\n        stream.eatWhile(/[\\w\\\\\\-]/);\r\n        if (stream.match(/^\\s*:/, false))\r\n          return [\"variable-2\", \"variable-definition\"];\r\n        return [\"variable-2\", \"variable\"];\r\n      },\r\n      \"&\": function() {\r\n        return [\"atom\", \"atom\"];\r\n      }\r\n    },\r\n    name: \"css\",\r\n    helperType: \"less\"\r\n  });\r\n\r\n  CodeMirror.defineMIME(\"text/x-gss\", {\r\n    documentTypes: documentTypes,\r\n    mediaTypes: mediaTypes,\r\n    mediaFeatures: mediaFeatures,\r\n    propertyKeywords: propertyKeywords,\r\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\r\n    fontProperties: fontProperties,\r\n    counterDescriptors: counterDescriptors,\r\n    colorKeywords: colorKeywords,\r\n    valueKeywords: valueKeywords,\r\n    supportsAtComponent: true,\r\n    tokenHooks: {\r\n      \"/\": function(stream, state) {\r\n        if (!stream.eat(\"*\")) return false;\r\n        state.tokenize = tokenCComment;\r\n        return tokenCComment(stream, state);\r\n      }\r\n    },\r\n    name: \"css\",\r\n    helperType: \"gss\"\r\n  });\r\n\r\n});\r\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: https://codemirror.net/LICENSE\r\n\r\n\r\ndefine('skylark-codemirror/mode/htmlmixed/htmlmixed',[\r\n  \"../../CodeMirror\",\r\n  \"../xml/xml\",\r\n  \"../javascript/javascript\",\r\n  \"../css/css\"\r\n], function(CodeMirror) {\r\n\r\n  \"use strict\";\r\n\r\n  var defaultTags = {\r\n    script: [\r\n      [\"lang\", /(javascript|babel)/i, \"javascript\"],\r\n      [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"],\r\n      [\"type\", /./, \"text/plain\"],\r\n      [null, null, \"javascript\"]\r\n    ],\r\n    style:  [\r\n      [\"lang\", /^css$/i, \"css\"],\r\n      [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"],\r\n      [\"type\", /./, \"text/plain\"],\r\n      [null, null, \"css\"]\r\n    ]\r\n  };\r\n\r\n  function maybeBackup(stream, pat, style) {\r\n    var cur = stream.current(), close = cur.search(pat);\r\n    if (close > -1) {\r\n      stream.backUp(cur.length - close);\r\n    } else if (cur.match(/<\\/?$/)) {\r\n      stream.backUp(cur.length);\r\n      if (!stream.match(pat, false)) stream.match(cur);\r\n    }\r\n    return style;\r\n  }\r\n\r\n  var attrRegexpCache = {};\r\n  function getAttrRegexp(attr) {\r\n    var regexp = attrRegexpCache[attr];\r\n    if (regexp) return regexp;\r\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\r\n  }\r\n\r\n  function getAttrValue(text, attr) {\r\n    var match = text.match(getAttrRegexp(attr))\r\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\"\r\n  }\r\n\r\n  function getTagRegexp(tagName, anchored) {\r\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\r\n  }\r\n\r\n  function addTags(from, to) {\r\n    for (var tag in from) {\r\n      var dest = to[tag] || (to[tag] = []);\r\n      var source = from[tag];\r\n      for (var i = source.length - 1; i >= 0; i--)\r\n        dest.unshift(source[i])\r\n    }\r\n  }\r\n\r\n  function findMatchingMode(tagInfo, tagText) {\r\n    for (var i = 0; i < tagInfo.length; i++) {\r\n      var spec = tagInfo[i];\r\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\r\n    }\r\n  }\r\n\r\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\r\n    var htmlMode = CodeMirror.getMode(config, {\r\n      name: \"xml\",\r\n      htmlMode: true,\r\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\r\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag\r\n    });\r\n\r\n    var tags = {};\r\n    var configTags = parserConfig && parserConfig.tags, configScript = parserConfig && parserConfig.scriptTypes;\r\n    addTags(defaultTags, tags);\r\n    if (configTags) addTags(configTags, tags);\r\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--)\r\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode])\r\n\r\n    function html(stream, state) {\r\n      var style = htmlMode.token(stream, state.htmlState), tag = /\\btag\\b/.test(style), tagName\r\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) &&\r\n          (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) &&\r\n          tags.hasOwnProperty(tagName)) {\r\n        state.inTag = tagName + \" \"\r\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\r\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag)\r\n        state.inTag = null\r\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2])\r\n        var mode = CodeMirror.getMode(config, modeSpec)\r\n        var endTagA = getTagRegexp(inTag[1], true), endTag = getTagRegexp(inTag[1], false);\r\n        state.token = function (stream, state) {\r\n          if (stream.match(endTagA, false)) {\r\n            state.token = html;\r\n            state.localState = state.localMode = null;\r\n            return null;\r\n          }\r\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\r\n        };\r\n        state.localMode = mode;\r\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\", \"\"));\r\n      } else if (state.inTag) {\r\n        state.inTag += stream.current()\r\n        if (stream.eol()) state.inTag += \" \"\r\n      }\r\n      return style;\r\n    };\r\n\r\n    return {\r\n      startState: function () {\r\n        var state = CodeMirror.startState(htmlMode);\r\n        return {token: html, inTag: null, localMode: null, localState: null, htmlState: state};\r\n      },\r\n\r\n      copyState: function (state) {\r\n        var local;\r\n        if (state.localState) {\r\n          local = CodeMirror.copyState(state.localMode, state.localState);\r\n        }\r\n        return {token: state.token, inTag: state.inTag,\r\n                localMode: state.localMode, localState: local,\r\n                htmlState: CodeMirror.copyState(htmlMode, state.htmlState)};\r\n      },\r\n\r\n      token: function (stream, state) {\r\n        return state.token(stream, state);\r\n      },\r\n\r\n      indent: function (state, textAfter, line) {\r\n        if (!state.localMode || /^\\s*<\\//.test(textAfter))\r\n          return htmlMode.indent(state.htmlState, textAfter, line);\r\n        else if (state.localMode.indent)\r\n          return state.localMode.indent(state.localState, textAfter, line);\r\n        else\r\n          return CodeMirror.Pass;\r\n      },\r\n\r\n      innerMode: function (state) {\r\n        return {state: state.localState || state.htmlState, mode: state.localMode || htmlMode};\r\n      }\r\n    };\r\n  }, \"xml\", \"javascript\", \"css\");\r\n\r\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\r\n});\r\n\ndefine('skylark-grapejs/code_manager/model/formating',[\r\n    'skylark-codemirror'\r\n], function (CodeMirror) {\r\n\r\n  CodeMirror.extendMode(\"css\", {\r\n    commentStart: \"/*\",\r\n    commentEnd: \"*/\",\r\n    newlineAfterToken: function(_type, content) {\r\n      return /^[;{}]$/.test(content);\r\n    }\r\n  });\r\n\r\n  CodeMirror.extendMode(\"javascript\", {\r\n    commentStart: \"/*\",\r\n    commentEnd: \"*/\",\r\n    // FIXME semicolons inside of for\r\n    newlineAfterToken: function(_type, content, textAfter, state) {\r\n      if (this.jsonMode) {\r\n        return /^[\\[,{]$/.test(content) || /^}/.test(textAfter);\r\n      } else {\r\n        if (content == \";\" && state.lexical && state.lexical.type == \")\") return false;\r\n        return /^[;{}]$/.test(content) && !/^;/.test(textAfter);\r\n      }\r\n    }\r\n  });\r\n\r\n  var inlineElements = /^(a|abbr|acronym|area|base|bdo|big|br|button|caption|cite|code|col|colgroup|dd|del|dfn|em|frame|hr|iframe|img|input|ins|kbd|label|legend|link|map|object|optgroup|option|param|q|samp|script|select|small|span|strong|sub|sup|textarea|tt|var)$/;\r\n\r\n  CodeMirror.extendMode(\"xml\", {\r\n    commentStart: \"<!--\",\r\n    commentEnd: \"-->\",\r\n    newlineAfterToken: function(type, content, textAfter, state) {\r\n      var inline = false;\r\n      if (this.configuration == \"html\")\r\n        inline = state.context ? inlineElements.test(state.context.tagName) : false;\r\n      return !inline && ((type == \"tag\" && />$/.test(content) && state.context) ||\r\n                         /^</.test(textAfter));\r\n    }\r\n  });\r\n\r\n  // Comment/uncomment the specified range\r\n  CodeMirror.defineExtension(\"commentRange\", function (isComment, from, to) {\r\n    var cm = this, curMode = CodeMirror.innerMode(cm.getMode(), cm.getTokenAt(from).state).mode;\r\n    cm.operation(function() {\r\n      if (isComment) { // Comment range\r\n        cm.replaceRange(curMode.commentEnd, to);\r\n        cm.replaceRange(curMode.commentStart, from);\r\n        if (from.line == to.line && from.ch == to.ch) // An empty comment inserted - put cursor inside\r\n          cm.setCursor(from.line, from.ch + curMode.commentStart.length);\r\n      } else { // Uncomment range\r\n        var selText = cm.getRange(from, to);\r\n        var startIndex = selText.indexOf(curMode.commentStart);\r\n        var endIndex = selText.lastIndexOf(curMode.commentEnd);\r\n        if (startIndex > -1 && endIndex > -1 && endIndex > startIndex) {\r\n          // Take string till comment start\r\n          selText = selText.substr(0, startIndex) +\r\n          // From comment start till comment end\r\n             selText.substring(startIndex + curMode.commentStart.length, endIndex) +\r\n          // From comment end till string end\r\n             selText.substr(endIndex + curMode.commentEnd.length);\r\n        }\r\n        cm.replaceRange(selText, from, to);\r\n      }\r\n    });\r\n  });\r\n\r\n  // Applies automatic mode-aware indentation to the specified range\r\n  CodeMirror.defineExtension(\"autoIndentRange\", function (from, to) {\r\n    var cmInstance = this;\r\n    this.operation(function () {\r\n      for (var i = from.line; i <= to.line; i++) {\r\n        cmInstance.indentLine(i, \"smart\");\r\n      }\r\n    });\r\n  });\r\n\r\n  // Applies automatic formatting to the specified range\r\n  CodeMirror.defineExtension(\"autoFormatRange\", function (from, to) {\r\n    var cm = this;\r\n    var outer = cm.getMode(), text = cm.getRange(from, to).split(\"\\n\");\r\n    var state = CodeMirror.copyState(outer, cm.getTokenAt(from).state);\r\n    var tabSize = cm.getOption(\"tabSize\");\r\n\r\n    var out = \"\", lines = 0, atSol = from.ch === 0;\r\n    function newline() {\r\n      out += \"\\n\";\r\n      atSol = true;\r\n      ++lines;\r\n    }\r\n\r\n    for (var i = 0; i < text.length; ++i) {\r\n      var stream = new CodeMirror.StringStream(text[i], tabSize);\r\n      while (!stream.eol()) {\r\n        var inner = CodeMirror.innerMode(outer, state);\r\n        var style = outer.token(stream, state), cur = stream.current();\r\n        stream.start = stream.pos;\r\n        if (!atSol || /\\S/.test(cur)) {\r\n          out += cur;\r\n          atSol = false;\r\n        }\r\n        if (!atSol && inner.mode.newlineAfterToken &&\r\n            inner.mode.newlineAfterToken(style, cur, stream.string.slice(stream.pos) || text[i+1] || \"\", inner.state))\r\n          newline();\r\n      }\r\n      if (!stream.pos && outer.blankLine) outer.blankLine(state);\r\n      if (!atSol && i < text.length - 1) newline();\r\n    }\r\n\r\n    cm.operation(function () {\r\n      cm.replaceRange(out, from, to);\r\n      for (var cur = from.line + 1, end = from.line + lines; cur <= end; ++cur)\r\n        cm.indentLine(cur, \"smart\");\r\n      cm.setSelection(from, cm.getCursor(false));\r\n    });\r\n  });\r\n});\r\n\ndefine('skylark-grapejs/code_manager/model/CodeMirrorEditor',[\n    'skylark-underscore',\n    'skylark-backbone',\n    'skylark-codemirror',\n    'skylark-codemirror/mode/htmlmixed/htmlmixed',\n    'skylark-codemirror/mode/css/css',\n    './formating'\n], function (a, Backbone, CodeMirror) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            input: '',\n            label: '',\n            codeName: '',\n            theme: 'hopscotch',\n            readOnly: true,\n            lineNumbers: true\n        },\n        init(el) {\n            a.bindAll(this, 'onChange');\n            this.editor = CodeMirror.fromTextArea(el, {\n                dragDrop: false,\n                lineWrapping: true,\n                mode: this.get('codeName'),\n                ...this.attributes\n            });\n            this.element = el;\n            this.editor.on('change', this.onChange);\n            return this;\n        },\n        onChange() {\n            this.trigger('update', this);\n        },\n        getEditor() {\n            return this.editor;\n        },\n        getElement() {\n            return this.element;\n        },\n        setElement(el) {\n            this.element = el;\n            return this;\n        },\n        refresh() {\n            this.getEditor().refresh();\n            return this;\n        },\n        focus() {\n            this.getEditor().focus();\n            return this;\n        },\n        getContent() {\n            const ed = this.getEditor();\n            return ed && ed.getValue();\n        },\n        setContent(v, opts = {}) {\n            const {editor} = this;\n            if (!editor)\n                return;\n            editor.setValue(v);\n            if (editor.autoFormatRange) {\n                CodeMirror.commands.selectAll(editor);\n                editor.autoFormatRange(editor.getCursor(true), editor.getCursor(false));\n                CodeMirror.commands.goDocStart(editor);\n            }\n            !opts.noRefresh && setTimeout(() => this.refresh());\n        }\n    });\n});\ndefine('skylark-grapejs/code_manager/view/EditorView',[\n    'skylark-underscore',\n    'skylark-backbone'\n], function (_, Backbone) {\n    'use strict';\n    return Backbone.View.extend({\n        template: _.template(`\n  <div class=\"<%= pfx %>editor\" id=\"<%= pfx %><%= codeName %>\">\n  \t<div id=\"<%= pfx %>title\"><%= label %></div>\n  \t<div id=\"<%= pfx %>code\"></div>\n  </div>`),\n        initialize(o) {\n            this.config = o.config || {};\n            this.pfx = this.config.stylePrefix;\n        },\n        render() {\n            var obj = this.model.toJSON();\n            obj.pfx = this.pfx;\n            this.$el.html(this.undefined(obj));\n            this.$el.attr('class', this.pfx + 'editor-c');\n            this.$el.find('#' + this.pfx + 'code').append(this.model.get('input'));\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/code_manager/index',[\n    'skylark-underscore',\n    './config/config',\n    './model/HtmlGenerator',\n    './model/CssGenerator',\n    './model/JsonGenerator',\n    './model/JsGenerator',\n    './model/CodeMirrorEditor',\n    './view/EditorView'\n], function (a, defaults, gHtml, gCss, gJson, gJs, eCM, editorView) {\n    'use strict';\n    return () => {\n        var c = {};\n        var generators = {}, defGenerators = {}, viewers = {}, defViewers = {};\n        const defaultViewer = 'CodeMirror';\n        return {\n            getConfig() {\n                return c;\n            },\n            config: c,\n            EditorView: editorView,\n            name: 'CodeManager',\n            init(config) {\n                c = config || {};\n                for (var name in defaults) {\n                    if (!(name in c))\n                        c[name] = defaults[name];\n                }\n                var ppfx = c.pStylePrefix;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                defGenerators.html = new gHtml();\n                defGenerators.css = new gCss();\n                defGenerators.json = new gJson();\n                defGenerators.js = new gJs();\n                defViewers.CodeMirror = new eCM();\n                this.loadDefaultGenerators().loadDefaultViewers();\n                return this;\n            },\n            addGenerator(id, generator) {\n                generators[id] = generator;\n                return this;\n            },\n            getGenerator(id) {\n                return generators[id] || null;\n            },\n            getGenerators() {\n                return generators;\n            },\n            addViewer(id, viewer) {\n                viewers[id] = viewer;\n                return this;\n            },\n            getViewer(id) {\n                return viewers[id] || null;\n            },\n            getViewers() {\n                return viewers;\n            },\n            createViewer(opts = {}) {\n                const type = !a.isUndefined(opts.type) ? opts.type : defaultViewer;\n                const viewer = this.getViewer(type) && this.getViewer(type).clone();\n                const cont = document.createElement('div');\n                const txtarea = document.createElement('textarea');\n                cont.appendChild(txtarea);\n                viewer.set(opts);\n                viewer.init(txtarea);\n                viewer.setElement(cont);\n                return viewer;\n            },\n            updateViewer(viewer, code) {\n                viewer.setContent(code);\n            },\n            getCode(model, genId, opt = {}) {\n                opt.em = c.em;\n                var generator = this.getGenerator(genId);\n                return generator ? generator.build(model, opt) : '';\n            },\n            loadDefaultGenerators() {\n                for (var id in defGenerators)\n                    this.addGenerator(id, defGenerators[id]);\n                return this;\n            },\n            loadDefaultViewers() {\n                for (var id in defViewers)\n                    this.addViewer(id, defViewers[id]);\n                return this;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/panels/config/config',[],function () {\n    'use strict';\n    const swv = 'sw-visibility';\n    const expt = 'export-template';\n    const osm = 'open-sm';\n    const otm = 'open-tm';\n    const ola = 'open-layers';\n    const obl = 'open-blocks';\n    const ful = 'fullscreen';\n    const prv = 'preview';\n    return {\n        stylePrefix: 'pn-',\n        defaults: [\n            {\n                id: 'commands',\n                buttons: [{}]\n            },\n            {\n                id: 'options',\n                buttons: [\n                    {\n                        active: true,\n                        id: swv,\n                        className: 'fa fa-square-o',\n                        command: swv,\n                        context: swv,\n                        attributes: { title: 'View components' }\n                    },\n                    {\n                        id: prv,\n                        className: 'fa fa-eye',\n                        command: prv,\n                        context: prv,\n                        attributes: { title: 'Preview' }\n                    },\n                    {\n                        id: ful,\n                        className: 'fa fa-arrows-alt',\n                        command: ful,\n                        context: ful,\n                        attributes: { title: 'Fullscreen' }\n                    },\n                    {\n                        id: expt,\n                        className: 'fa fa-code',\n                        command: expt,\n                        attributes: { title: 'View code' }\n                    }\n                ]\n            },\n            {\n                id: 'views',\n                buttons: [\n                    {\n                        id: osm,\n                        className: 'fa fa-paint-brush',\n                        command: osm,\n                        active: true,\n                        togglable: 0,\n                        attributes: { title: 'Open Style Manager' }\n                    },\n                    {\n                        id: otm,\n                        className: 'fa fa-cog',\n                        command: otm,\n                        togglable: 0,\n                        attributes: { title: 'Settings' }\n                    },\n                    {\n                        id: ola,\n                        className: 'fa fa-bars',\n                        command: ola,\n                        togglable: 0,\n                        attributes: { title: 'Open Layer Manager' }\n                    },\n                    {\n                        id: obl,\n                        className: 'fa fa-th-large',\n                        command: obl,\n                        togglable: 0,\n                        attributes: { title: 'Open Blocks' }\n                    }\n                ]\n            }\n        ],\n        em: null,\n        delayBtnsShow: 300\n    };\n});\ndefine('skylark-grapejs/panels/model/Button',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            id: '',\n            label: '',\n            tagName: 'span',\n            className: '',\n            command: '',\n            context: '',\n            buttons: [],\n            attributes: {},\n            options: {},\n            active: false,\n            dragDrop: false,\n            togglable: true,\n            runDefaultCommand: true,\n            stopDefaultCommand: false,\n            disable: false\n        },\n        initialize(options) {\n            if (this.get('buttons').length) {\n                var Buttons = require('./Buttons').default;\n                this.set('buttons', new Buttons(this.get('buttons')));\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/panels/model/Buttons',[\n    'skylark-backbone',\n    './Button'\n], function (Backbone, Button) {\n    'use strict';\n    return Backbone.Collection.extend({\n        model: Button,\n        deactivateAllExceptOne(except, r) {\n            this.forEach((model, index) => {\n                if (model !== except) {\n                    model.set('active', false);\n                    if (r && model.get('buttons').length)\n                        model.get('buttons').deactivateAllExceptOne(except, r);\n                }\n            });\n        },\n        deactivateAll(ctx, sender) {\n            const context = ctx || '';\n            this.forEach(model => {\n                if (model.get('context') == context && model !== sender) {\n                    model.set('active', false, { silent: 1 });\n                    model.trigger('updateActive', { fromCollection: 1 });\n                }\n            });\n        },\n        disableAllButtons(ctx) {\n            var context = ctx || '';\n            this.forEach((model, index) => {\n                if (model.get('context') == context) {\n                    model.set('disable', true);\n                }\n            });\n        },\n        disableAllButtonsExceptOne(except, r) {\n            this.forEach((model, index) => {\n                if (model !== except) {\n                    model.set('disable', true);\n                    if (r && model.get('buttons').length)\n                        model.get('buttons').disableAllButtonsExceptOne(except, r);\n                }\n            });\n        }\n    });\n});\ndefine('skylark-grapejs/panels/model/Panel',[\n    'skylark-backbone',\n    './Buttons'\n], function (Backbone, Buttons) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            id: '',\n            content: '',\n            visible: true,\n            buttons: [],\n            attributes: {}\n        },\n        initialize(options) {\n            this.btn = this.get('buttons') || [];\n            this.buttons = new Buttons(this.btn);\n            this.set('buttons', this.buttons);\n        }\n    });\n});\ndefine('skylark-grapejs/panels/model/Panels',[\n    'skylark-backbone',\n    './Panel'\n], function (Backbone, Panel) {\n    'use strict';\n    return Backbone.Collection.extend({ model: Panel });\n});\ndefine('skylark-grapejs/panels/view/ButtonView',[\n    'skylark-backbone',\n    'skylark-underscore'\n], function (Backbone, a) {\n    'use strict';\n    const $ = Backbone.$;\n    return Backbone.View.extend({\n        tagName() {\n            return this.model.get('tagName');\n        },\n        events: { click: 'clicked' },\n        initialize(o) {\n            var cls = this.model.get('className');\n            this.config = o.config || {};\n            this.em = this.config.em || {};\n            const pfx = this.config.stylePrefix || '';\n            const ppfx = this.config.pStylePrefix || '';\n            this.pfx = pfx;\n            this.ppfx = this.config.pStylePrefix || '';\n            this.id = pfx + this.model.get('id');\n            this.activeCls = `${ pfx }active ${ ppfx }four-color`;\n            this.disableCls = `${ ppfx }disabled`;\n            this.btnsVisCls = `${ pfx }visible`;\n            this.className = pfx + 'btn' + (cls ? ' ' + cls : '');\n            this.listenTo(this.model, 'change', this.render);\n            this.listenTo(this.model, 'change:active updateActive', this.updateActive);\n            this.listenTo(this.model, 'checkActive', this.checkActive);\n            this.listenTo(this.model, 'change:bntsVis', this.updateBtnsVis);\n            this.listenTo(this.model, 'change:attributes', this.updateAttributes);\n            this.listenTo(this.model, 'change:className', this.updateClassName);\n            this.listenTo(this.model, 'change:disable', this.updateDisable);\n            if (this.em && this.em.get)\n                this.commands = this.em.get('Commands');\n        },\n        updateClassName() {\n            const {model, pfx} = this;\n            const cls = model.get('className');\n            const attrCls = model.get('attributes').class;\n            const classStr = `${ attrCls ? attrCls : '' } ${ pfx }btn ${ cls ? cls : '' }`;\n            this.$el.attr('class', classStr.trim());\n        },\n        updateAttributes() {\n            const {em, model, $el} = this;\n            const attr = model.get('attributes') || {};\n            const title = em && em.t && em.t(`panels.buttons.titles.${ model.id }`);\n            $el.attr(attr);\n            title && $el.attr({ title });\n            this.updateClassName();\n        },\n        updateBtnsVis() {\n            if (!this.$buttons)\n                return;\n            if (this.model.get('bntsVis'))\n                this.$buttons.addClass(this.btnsVisCls);\n            else\n                this.$buttons.removeClass(this.btnsVisCls);\n        },\n        updateActive(opts = {}) {\n            const {model, commands, $el, activeCls} = this;\n            const {fromCollection} = opts;\n            const context = model.get('context');\n            const options = model.get('options');\n            const commandName = model.get('command');\n            let command = {};\n            if (commands && a.isString(commandName)) {\n                command = commands.get(commandName) || {};\n            } else if (a.isFunction(commandName)) {\n                command = commands.create({ run: commandName });\n            } else if (commandName !== null && a.isObject(commandName)) {\n                command = commands.create(commandName);\n            }\n            if (model.get('active')) {\n                !fromCollection && model.collection.deactivateAll(context, model);\n                model.set('active', true, { silent: true }).trigger('checkActive');\n                commands.runCommand(command, {\n                    ...options,\n                    sender: model\n                });\n                command.noStop && model.set('active', false);\n            } else {\n                $el.removeClass(activeCls);\n                commands.stopCommand(command, {\n                    ...options,\n                    sender: model,\n                    force: 1\n                });\n            }\n        },\n        updateDisable() {\n            const {disableCls, model} = this;\n            const disable = model.get('disable');\n            this.$el[disable ? 'addClass' : 'removeClass'](disableCls);\n        },\n        checkActive() {\n            const {model, $el, activeCls} = this;\n            model.get('active') ? $el.addClass(activeCls) : $el.removeClass(activeCls);\n        },\n        clicked(e) {\n            if (this.model.get('bntsVis'))\n                return;\n            if (this.model.get('disable'))\n                return;\n            this.toggleActive();\n        },\n        toggleActive() {\n            const {model} = this;\n            const {active, togglable} = model.attributes;\n            if (active && !togglable)\n                return;\n            model.set('active', !active);\n            var command = this.em.get('Commands').get('select-comp');\n            if (active) {\n                if (model.get('runDefaultCommand'))\n                    this.em.runDefault();\n            } else {\n                if (model.get('stopDefaultCommand'))\n                    this.em.stopDefault();\n            }\n        },\n        render() {\n            const label = this.model.get('label');\n            const {$el} = this;\n            $el.empty();\n            this.updateAttributes();\n            label && $el.append(label);\n            this.checkActive();\n            this.updateDisable();\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/panels/view/ButtonsView',[\n    'skylark-backbone',\n    './ButtonView',\n    'skylark-underscore'\n], function (Backbone, ButtonView, a) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize(o) {\n            this.opt = o || {};\n            this.config = this.opt.config || {};\n            this.pfx = this.config.stylePrefix || '';\n            this.parentM = this.opt.parentM || null;\n            this.listenTo(this.collection, 'add', this.addTo);\n            this.listenTo(this.collection, 'reset remove', this.render);\n            this.className = this.pfx + 'buttons';\n        },\n        addTo(model) {\n            this.addToCollection(model);\n        },\n        addToCollection(model, fragmentEl) {\n            var fragment = fragmentEl || null;\n            var viewObject = ButtonView;\n            var view = new viewObject({\n                model,\n                config: this.config,\n                parentM: this.parentM\n            });\n            var rendered = view.render().el;\n            if (fragment) {\n                fragment.appendChild(rendered);\n            } else {\n                this.$el.append(rendered);\n            }\n            return rendered;\n        },\n        render() {\n            var fragment = document.createDocumentFragment();\n            this.$el.empty();\n            this.collection.each(function (model) {\n                this.addToCollection(model, fragment);\n            }, this);\n            this.$el.append(fragment);\n            this.$el.attr('class', a.result(this, 'className'));\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/panels/view/PanelView',[\n    'skylark-backbone',\n    './ButtonsView'\n], function (Backbone, ButtonsView) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize(o) {\n            const config = o.config || {};\n            const model = this.model;\n            this.config = config;\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.buttons = model.get('buttons');\n            this.className = this.pfx + 'panel';\n            this.id = this.pfx + model.get('id');\n            this.listenTo(model, 'change:appendContent', this.appendContent);\n            this.listenTo(model, 'change:content', this.updateContent);\n            this.listenTo(model, 'change:visible', this.toggleVisible);\n            model.view = this;\n        },\n        appendContent() {\n            this.$el.append(this.model.get('appendContent'));\n        },\n        updateContent() {\n            this.$el.html(this.model.get('content'));\n        },\n        toggleVisible() {\n            if (!this.model.get('visible')) {\n                this.$el.addClass(`${ this.ppfx }hidden`);\n                return;\n            }\n            this.$el.removeClass(`${ this.ppfx }hidden`);\n        },\n        attributes() {\n            return this.model.get('attributes');\n        },\n        initResize() {\n            const em = this.config.em;\n            const editor = em ? em.get('Editor') : '';\n            const resizable = this.model.get('resizable');\n            if (editor && resizable) {\n                var resz = resizable === true ? [\n                    1,\n                    1,\n                    1,\n                    1\n                ] : resizable;\n                var resLen = resz.length;\n                var tc, cr, bc, cl = 0;\n                if (resLen == 2) {\n                    tc = resz[0];\n                    bc = resz[0];\n                    cr = resz[1];\n                    cl = resz[1];\n                } else if (resLen == 4) {\n                    tc = resz[0];\n                    cr = resz[1];\n                    bc = resz[2];\n                    cl = resz[3];\n                }\n                var resizer = editor.Utils.Resizer.init({\n                    tc,\n                    cr,\n                    bc,\n                    cl,\n                    tl: 0,\n                    tr: 0,\n                    bl: 0,\n                    br: 0,\n                    appendTo: this.el,\n                    silentFrames: 1,\n                    avoidContainerUpdate: 1,\n                    prefix: editor.getConfig().stylePrefix,\n                    onEnd() {\n                        em && em.trigger('change:canvasOffset');\n                    },\n                    posFetcher: (el, {target}) => {\n                        const style = el.style;\n                        const config = resizer.getConfig();\n                        const keyWidth = config.keyWidth;\n                        const keyHeight = config.keyHeight;\n                        const rect = el.getBoundingClientRect();\n                        const forContainer = target == 'container';\n                        const styleWidth = style[keyWidth];\n                        const styleHeight = style[keyHeight];\n                        const width = styleWidth && !forContainer ? parseFloat(styleWidth) : rect.width;\n                        const height = styleHeight && !forContainer ? parseFloat(styleHeight) : rect.height;\n                        return {\n                            left: 0,\n                            top: 0,\n                            width,\n                            height\n                        };\n                    },\n                    ...resizable\n                });\n                resizer.blur = () => {\n                };\n                resizer.focus(this.el);\n            }\n        },\n        render() {\n            const $el = this.$el;\n            const ppfx = this.ppfx;\n            const cls = `${ this.className } ${ this.id } ${ ppfx }one-bg ${ ppfx }two-color`;\n            $el.addClass(cls);\n            if (this.buttons.length) {\n                var buttons = new ButtonsView({\n                    collection: this.buttons,\n                    config: this.config\n                });\n                $el.append(buttons.render().el);\n            }\n            $el.append(this.model.get('content'));\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/panels/view/PanelsView',[\n    'skylark-backbone',\n    './PanelView'\n], function (Backbone, PanelView) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize(o) {\n            this.opt = o || {};\n            this.config = this.opt.config || {};\n            this.pfx = this.config.stylePrefix || '';\n            const items = this.collection;\n            this.listenTo(items, 'add', this.addTo);\n            this.listenTo(items, 'reset', this.render);\n            this.listenTo(items, 'remove', this.onRemove);\n            this.className = this.pfx + 'panels';\n        },\n        onRemove(model) {\n            const view = model.view;\n            view && view.remove();\n        },\n        addTo(model) {\n            this.addToCollection(model);\n        },\n        addToCollection(model, fragmentEl) {\n            const fragment = fragmentEl || null;\n            const config = this.config;\n            const el = model.get('el');\n            const view = new PanelView({\n                el,\n                model,\n                config\n            });\n            const rendered = view.render().el;\n            const appendTo = model.get('appendTo');\n            if (el) {\n            } else if (appendTo) {\n                var appendEl = document.querySelector(appendTo);\n                appendEl.appendChild(rendered);\n            } else {\n                if (fragment) {\n                    fragment.appendChild(rendered);\n                } else {\n                    this.$el.append(rendered);\n                }\n            }\n            view.initResize();\n            return rendered;\n        },\n        render() {\n            const $el = this.$el;\n            const frag = document.createDocumentFragment();\n            $el.empty();\n            this.collection.each(model => this.addToCollection(model, frag));\n            $el.append(frag);\n            $el.attr('class', this.className);\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/panels/index',[\n    './config/config',\n    './model/Panel',\n    './model/Panels',\n    './view/PanelView',\n    './view/PanelsView'\n], function (defaults, Panel, Panels, PanelView, PanelsView) {\n    'use strict';\n    return () => {\n        var c = {};\n        var panels, PanelsViewObj;\n        return {\n            name: 'Panels',\n            init(config) {\n                c = config || {};\n                for (var name in defaults) {\n                    if (!(name in c))\n                        c[name] = defaults[name];\n                }\n                var ppfx = c.pStylePrefix;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                panels = new Panels(c.defaults);\n                PanelsViewObj = new PanelsView({\n                    collection: panels,\n                    config: c\n                });\n                return this;\n            },\n            getPanels() {\n                return panels;\n            },\n            getPanelsEl() {\n                return PanelsViewObj.el;\n            },\n            addPanel(panel) {\n                return panels.add(panel);\n            },\n            removePanel(panel) {\n                return panels.remove(panel);\n            },\n            getPanel(id) {\n                var res = panels.where({ id });\n                return res.length ? res[0] : null;\n            },\n            addButton(panelId, button) {\n                var pn = this.getPanel(panelId);\n                return pn ? pn.get('buttons').add(button) : null;\n            },\n            removeButton(panelId, button) {\n                var pn = this.getPanel(panelId);\n                return pn && pn.get('buttons').remove(button);\n            },\n            getButton(panelId, id) {\n                var pn = this.getPanel(panelId);\n                if (pn) {\n                    var res = pn.get('buttons').where({ id });\n                    return res.length ? res[0] : null;\n                }\n                return null;\n            },\n            render() {\n                return PanelsViewObj.render().el;\n            },\n            active() {\n                this.getPanels().each(p => {\n                    p.get('buttons').each(btn => {\n                        btn.get('active') && btn.trigger('updateActive');\n                    });\n                });\n            },\n            disableButtons() {\n                this.getPanels().each(p => {\n                    p.get('buttons').each(btn => {\n                        if (btn.get('disable'))\n                            btn.trigger('change:disable');\n                    });\n                });\n            },\n            Panel\n        };\n    };\n});\ndefine('skylark-grapejs/rich_text_editor/model/RichTextEditor',['../../utils/mixins'], function (a) {\n    'use strict';\n    const RTE_KEY = '_rte';\n    const btnState = {\n        ACTIVE: 1,\n        INACTIVE: 0,\n        DISABLED: -1\n    };\n    const isValidAnchor = rte => {\n        const anchor = rte.selection().anchorNode;\n        const parentNode = anchor && anchor.parentNode;\n        const nextSibling = anchor && anchor.nextSibling;\n        return parentNode && parentNode.nodeName == 'A' || nextSibling && nextSibling.nodeName == 'A';\n    };\n    const defActions = {\n        bold: {\n            name: 'bold',\n            icon: '<b>B</b>',\n            attributes: { title: 'Bold' },\n            result: rte => rte.exec('bold')\n        },\n        italic: {\n            name: 'italic',\n            icon: '<i>I</i>',\n            attributes: { title: 'Italic' },\n            result: rte => rte.exec('italic')\n        },\n        underline: {\n            name: 'underline',\n            icon: '<u>U</u>',\n            attributes: { title: 'Underline' },\n            result: rte => rte.exec('underline')\n        },\n        strikethrough: {\n            name: 'strikethrough',\n            icon: '<strike>S</strike>',\n            attributes: { title: 'Strike-through' },\n            result: rte => rte.exec('strikeThrough')\n        },\n        link: {\n            icon: `<span style=\"transform:rotate(45deg)\">&supdsub;</span>`,\n            name: 'link',\n            attributes: {\n                style: 'font-size:1.4rem;padding:0 4px 2px;',\n                title: 'Link'\n            },\n            state: (rte, doc) => {\n                if (rte && rte.selection()) {\n                    return isValidAnchor(rte) ? btnState.ACTIVE : btnState.INACTIVE;\n                } else {\n                    return btnState.INACTIVE;\n                }\n            },\n            result: rte => {\n                if (isValidAnchor(rte)) {\n                    rte.exec('unlink');\n                } else {\n                    rte.insertHTML(`<a class=\"link\" href=\"\">${ rte.selection() }</a>`);\n                }\n            }\n        }\n    };\n    return class RichTextEditor {\n        constructor(settings = {}) {\n            const el = settings.el;\n            if (el[RTE_KEY]) {\n                return el[RTE_KEY];\n            }\n            el[RTE_KEY] = this;\n            this.setEl(el);\n            this.updateActiveActions = this.updateActiveActions.bind(this);\n            const settAct = settings.actions || [];\n            settAct.forEach((action, i) => {\n                if (typeof action === 'string') {\n                    action = defActions[action];\n                } else if (defActions[action.name]) {\n                    action = {\n                        ...defActions[action.name],\n                        ...action\n                    };\n                }\n                settAct[i] = action;\n            });\n            const actions = settAct.length ? settAct : Object.keys(defActions).map(action => defActions[action]);\n            settings.classes = {\n                ...{\n                    actionbar: 'actionbar',\n                    button: 'action',\n                    active: 'active',\n                    disabled: 'disabled',\n                    inactive: 'inactive'\n                },\n                ...settings.classes\n            };\n            const classes = settings.classes;\n            let actionbar = settings.actionbar;\n            this.actionbar = actionbar;\n            this.settings = settings;\n            this.classes = classes;\n            this.actions = actions;\n            if (!actionbar) {\n                const actionbarCont = settings.actionbarContainer;\n                actionbar = document.createElement('div');\n                actionbar.className = classes.actionbar;\n                actionbarCont.appendChild(actionbar);\n                this.actionbar = actionbar;\n                actions.forEach(action => this.addAction(action));\n            }\n            settings.styleWithCSS && this.exec('styleWithCSS');\n            this.syncActions();\n            return this;\n        }\n        destroy() {\n            this.el = 0;\n            this.doc = 0;\n            this.actionbar = 0;\n            this.settings = {};\n            this.classes = {};\n            this.actions = [];\n        }\n        setEl(el) {\n            this.el = el;\n            this.doc = el.ownerDocument;\n        }\n        updateActiveActions() {\n            this.getActions().forEach(action => {\n                const btn = action.btn;\n                const update = action.update;\n                const {active, inactive, disabled} = { ...this.classes };\n                const state = action.state;\n                const name = action.name;\n                const doc = this.doc;\n                btn.className = btn.className.replace(active, '').trim();\n                btn.className = btn.className.replace(inactive, '').trim();\n                btn.className = btn.className.replace(disabled, '').trim();\n                if (state) {\n                    switch (state(this, doc)) {\n                    case btnState.ACTIVE:\n                        btn.className += ` ${ active }`;\n                        break;\n                    case btnState.INACTIVE:\n                        btn.className += ` ${ inactive }`;\n                        break;\n                    case btnState.DISABLED:\n                        btn.className += ` ${ disabled }`;\n                        break;\n                    }\n                } else {\n                    if (doc.queryCommandSupported(name) && doc.queryCommandState(name)) {\n                        btn.className += ` ${ active }`;\n                    }\n                }\n                update && update(this, action);\n            });\n        }\n        enable() {\n            if (this.enabled) {\n                return this;\n            }\n            this.actionbarEl().style.display = '';\n            this.el.contentEditable = true;\n            a.on(this.el, 'mouseup keyup', this.updateActiveActions);\n            this.syncActions();\n            this.updateActiveActions();\n            this.el.focus();\n            this.enabled = 1;\n            return this;\n        }\n        disable() {\n            this.actionbarEl().style.display = 'none';\n            this.el.contentEditable = false;\n            a.off(this.el, 'mouseup keyup', this.updateActiveActions);\n            this.enabled = 0;\n            return this;\n        }\n        syncActions() {\n            this.getActions().forEach(action => {\n                if (this.settings.actionbar) {\n                    if (!action.state || action.state && action.state(this, this.doc) >= 0) {\n                        const event = action.event || 'click';\n                        action.btn[`on${ event }`] = e => {\n                            action.result(this, action);\n                            this.updateActiveActions();\n                        };\n                    }\n                }\n            });\n        }\n        addAction(action, opts = {}) {\n            const sync = opts.sync;\n            const btn = document.createElement('span');\n            const icon = action.icon;\n            const attr = action.attributes || {};\n            btn.className = this.classes.button;\n            action.btn = btn;\n            for (let key in attr) {\n                btn.setAttribute(key, attr[key]);\n            }\n            if (typeof icon == 'string') {\n                btn.innerHTML = icon;\n            } else {\n                btn.appendChild(icon);\n            }\n            this.actionbarEl().appendChild(btn);\n            if (sync) {\n                this.actions.push(action);\n                this.syncActions();\n            }\n        }\n        getActions() {\n            return this.actions;\n        }\n        selection() {\n            return this.doc.getSelection();\n        }\n        exec(command, value = null) {\n            this.doc.execCommand(command, false, value);\n        }\n        actionbarEl() {\n            return this.actionbar;\n        }\n        insertHTML(value) {\n            let lastNode;\n            const doc = this.doc;\n            const sel = doc.getSelection();\n            if (sel && sel.rangeCount) {\n                const node = doc.createElement('div');\n                const range = sel.getRangeAt(0);\n                range.deleteContents();\n                node.innerHTML = value;\n                Array.prototype.slice.call(node.childNodes).forEach(nd => {\n                    range.insertNode(nd);\n                    lastNode = nd;\n                });\n                sel.removeAllRanges();\n                sel.addRange(range);\n                this.el.focus();\n            }\n        }\n    };\n});\ndefine('skylark-grapejs/rich_text_editor/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: 'rte-',\n        adjustToolbar: 1,\n        actions: [\n            'bold',\n            'italic',\n            'underline',\n            'strikethrough',\n            'link'\n        ]\n    };\n});\ndefine('skylark-grapejs/rich_text_editor/index',[\n    './model/RichTextEditor',\n    '../../utils/mixins',\n    './config/config'\n], function (RichTextEditor, a, defaults) {\n    'use strict';\n    return () => {\n        let config = {};\n        let toolbar, actions, lastEl, lastElPos, globalRte;\n        const hideToolbar = () => {\n            const style = toolbar.style;\n            const size = '-1000px';\n            style.top = size;\n            style.left = size;\n            style.display = 'none';\n        };\n        return {\n            customRte: null,\n            name: 'RichTextEditor',\n            getConfig() {\n                return config;\n            },\n            init(opts = {}) {\n                config = {\n                    ...defaults,\n                    ...opts\n                };\n                const ppfx = config.pStylePrefix;\n                if (ppfx) {\n                    config.stylePrefix = ppfx + config.stylePrefix;\n                }\n                this.pfx = config.stylePrefix;\n                actions = config.actions || [];\n                toolbar = document.createElement('div');\n                toolbar.className = `${ ppfx }rte-toolbar ${ ppfx }one-bg`;\n                globalRte = this.initRte(document.createElement('div'));\n                a.on(toolbar, 'mousedown', e => e.stopPropagation());\n                return this;\n            },\n            destroy() {\n                const {customRte} = this;\n                globalRte && globalRte.destroy();\n                customRte && customRte.destroy && customRte.destroy();\n                toolbar = 0;\n                globalRte = 0;\n                this.actionbar = 0;\n                this.actions = 0;\n            },\n            postRender(ev) {\n                const canvas = ev.model.get('Canvas');\n                toolbar.style.pointerEvents = 'all';\n                hideToolbar();\n                canvas.getToolsEl().appendChild(toolbar);\n            },\n            initRte(el) {\n                const pfx = this.pfx;\n                const actionbarContainer = toolbar;\n                const actionbar = this.actionbar;\n                const actions = this.actions || [...config.actions];\n                const classes = {\n                    actionbar: `${ pfx }actionbar`,\n                    button: `${ pfx }action`,\n                    active: `${ pfx }active`,\n                    inactive: `${ pfx }inactive`,\n                    disabled: `${ pfx }disabled`\n                };\n                const rte = new RichTextEditor({\n                    el,\n                    classes,\n                    actions,\n                    actionbar,\n                    actionbarContainer\n                });\n                globalRte && globalRte.setEl(el);\n                if (rte.actionbar) {\n                    this.actionbar = rte.actionbar;\n                }\n                if (rte.actions) {\n                    this.actions = rte.actions;\n                }\n                return rte;\n            },\n            add(name, action = {}) {\n                action.name = name;\n                globalRte.addAction(action, { sync: 1 });\n            },\n            get(name) {\n                let result;\n                globalRte.getActions().forEach(action => {\n                    if (action.name == name) {\n                        result = action;\n                    }\n                });\n                return result;\n            },\n            getAll() {\n                return globalRte.getActions();\n            },\n            remove(name) {\n                const actions = this.getAll();\n                const action = this.get(name);\n                if (action) {\n                    const btn = action.btn;\n                    const index = actions.indexOf(action);\n                    btn.parentNode.removeChild(btn);\n                    actions.splice(index, 1);\n                }\n                return action;\n            },\n            getToolbarEl() {\n                return toolbar;\n            },\n            updatePosition() {\n                const un = 'px';\n                const canvas = config.em.get('Canvas');\n                const {style} = toolbar;\n                const pos = canvas.getTargetToElementFixed(lastEl, toolbar, { event: 'rteToolbarPosUpdate' });\n                style.top = pos.top + un;\n                style.left = 0 + un;\n            },\n            enable(view, rte) {\n                lastEl = view.el;\n                const canvas = config.em.get('Canvas');\n                const em = config.em;\n                const el = view.getChildrenContainer();\n                const customRte = this.customRte;\n                lastElPos = canvas.getElementPos(lastEl);\n                toolbar.style.display = '';\n                rte = customRte ? customRte.enable(el, rte) : this.initRte(el).enable();\n                if (em) {\n                    setTimeout(this.updatePosition.bind(this), 0);\n                    const event = 'change:canvasOffset canvasScroll frame:scroll component:update';\n                    em.undefined(event, this.updatePosition, this);\n                    em.undefined(event, this.updatePosition, this);\n                    em.trigger('rte:enable', view, rte);\n                }\n                return rte;\n            },\n            disable(view, rte) {\n                const em = config.em;\n                const customRte = this.customRte;\n                var el = view.getChildrenContainer();\n                if (customRte) {\n                    customRte.disable(el, rte);\n                } else {\n                    rte && rte.disable();\n                }\n                hideToolbar();\n                em && em.trigger('rte:disable', view, rte);\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/asset_manager/config/config',[],function () {\n    'use strict';\n    return {\n        assets: [],\n        noAssets: '',\n        stylePrefix: 'am-',\n        upload: 0,\n        uploadName: 'files',\n        headers: {},\n        params: {},\n        credentials: 'include',\n        multiUpload: true,\n        autoAdd: 1,\n        customFetch: '',\n        uploadFile: '',\n        embedAsBase64: 1,\n        handleAdd: '',\n        dropzone: 0,\n        openAssetsOnDrop: 1,\n        dropzoneContent: '',\n        beforeUpload: null,\n        showUrlInput: true\n    };\n});\ndefine('skylark-grapejs/asset_manager/model/Asset',[\n    'skylark-backbone/Model'\n], function (Model) {\n    'use strict';\n    return Model.extend({\n        idAttribute: 'src',\n        defaults: {\n            type: '',\n            src: ''\n        },\n        getFilename() {\n            return this.get('src').split('/').pop();\n        },\n        getExtension() {\n            return this.getFilename().split('.').pop();\n        }\n    });\n});\ndefine('skylark-grapejs/asset_manager/model/AssetImage',[\n    \"skylark-langx/langx\",\n    './Asset'\n], function (langx,Asset) {\n    'use strict';\n    return Asset.extend({\n        defaults: langx.mixin({},Asset.prototype.defaults,{\n            type: 'image',\n            unitDim: 'px',\n            height: 0,\n            width: 0\n        })\n    });\n});\ndefine('skylark-grapejs/asset_manager/view/AssetView',[\n    'skylark-backbone',\n    'skylark-underscore'\n], function (Backbone, _) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize(o = {}) {\n            this.options = o;\n            this.collection = o.collection;\n            const config = o.config || {};\n            this.config = config;\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.em = config.em;\n            this.className = this.pfx + 'asset';\n            this.listenTo(this.model, 'destroy remove', this.remove);\n            this.model.view = this;\n            const init = this.init && this.init.bind(this);\n            init && init(o);\n        },\n        template() {\n            const pfx = this.pfx;\n            return `\n      <div class=\"${ pfx }preview-cont\">\n        ${ this.getPreview() }\n      </div>\n      <div class=\"${ pfx }meta\">\n        ${ this.getInfo() }\n      </div>\n      <div class=\"${ pfx }close\" data-toggle=\"asset-remove\">\n        &Cross;\n      </div>\n    `;\n        },\n        updateTarget(target) {\n            if (target && target.set) {\n                target.set('attributes', _.clone(target.get('attributes')));\n                target.set('src', this.model.get('src'));\n            }\n        },\n        getPreview() {\n            return '';\n        },\n        getInfo() {\n            return '';\n        },\n        render() {\n            const el = this.el;\n            el.innerHTML = this.template(this, this.model);\n            el.className = this.className;\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/asset_manager/view/AssetImageView',[\n    'skylark-underscore',\n    './AssetView'\n], function (a, AssetView) {\n    'use strict';\n    return AssetView.extend({\n        events: {\n            'click [data-toggle=asset-remove]': 'onRemove',\n            click: 'onClick',\n            dblclick: 'onDblClick'\n        },\n        getPreview() {\n            const pfx = this.pfx;\n            const src = this.model.get('src');\n            return `\n      <div class=\"${ pfx }preview\" style=\"background-image: url('${ src }');\"></div>\n      <div class=\"${ pfx }preview-bg ${ this.ppfx }checker-bg\"></div>\n    `;\n        },\n        getInfo() {\n            const pfx = this.pfx;\n            const model = this.model;\n            let name = model.get('name');\n            let width = model.get('width');\n            let height = model.get('height');\n            let unit = model.get('unitDim');\n            let dim = width && height ? `${ width }x${ height }${ unit }` : '';\n            name = name || model.getFilename();\n            return `\n      <div class=\"${ pfx }name\">${ name }</div>\n      <div class=\"${ pfx }dimensions\">${ dim }</div>\n    `;\n        },\n        init(o) {\n            const pfx = this.pfx;\n            this.className += ` ${ pfx }asset-image`;\n        },\n        onClick() {\n            var onClick = this.config.onClick;\n            var model = this.model;\n            this.collection.trigger('deselectAll');\n            this.$el.addClass(this.pfx + 'highlight');\n            if (a.isFunction(onClick)) {\n                onClick(model);\n            } else {\n                this.updateTarget(this.collection.target);\n            }\n        },\n        onDblClick() {\n            const {em, model} = this;\n            const onDblClick = this.config.onDblClick;\n            if (a.isFunction(onDblClick)) {\n                onDblClick(model);\n            } else {\n                this.updateTarget(this.collection.target);\n                em && em.get('Modal').close();\n            }\n            var onSelect = this.collection.onSelect;\n            a.isFunction(onSelect) && onSelect(model);\n        },\n        onRemove(e) {\n            e.stopImmediatePropagation();\n            this.model.collection.remove(this.model);\n        }\n    });\n});\ndefine('skylark-grapejs/asset_manager/model/Assets',[\n    'skylark-backbone/Collection',\n    './AssetImage',\n    './../view/AssetImageView',\n    '../../domain_abstract/model/TypeableCollection'\n], function (Collection, AssetImage, AssetImageView, TypeableCollection) {\n    'use strict';\n    return Collection.extend(TypeableCollection).extend({\n        types: [{\n                id: 'image',\n                model: AssetImage,\n                view: AssetImageView,\n                isType(value) {\n                    if (typeof value == 'string') {\n                        return {\n                            type: 'image',\n                            src: value\n                        };\n                    }\n                    return value;\n                }\n            }]\n    });\n});\ndefine('skylark-grapejs/asset_manager/view/AssetsView',[\n    'skylark-backbone'\n], function (Backbone) {\n    'use strict';\n    return Backbone.View.extend({\n        events: { submit: 'handleSubmit' },\n        //template({\n        //    pfx,\n        //    ppfx,\n        //    em,\n        //    ...view\n        //}) {\n        template() {\n            const {\n                pfx,\n                ppfx,\n                em\n            } = this;  // modified by lwf\n            let form = '';\n            if (this.config.showUrlInput) {\n                form = `\n          <form class=\"${ pfx }add-asset\">\n            <div class=\"${ ppfx }field ${ pfx }add-field\">\n              <input placeholder=\"${ em && em.t('assetManager.inputPlh') }\"/>\n            </div>\n            <button class=\"${ ppfx }btn-prim\">${ em && em.t('assetManager.addButton') }</button>\n            <div style=\"clear:both\"></div>\n          </form>\n      `;\n            }\n            return `\n    <div class=\"${ pfx }assets-cont\">\n      <div class=\"${ pfx }assets-header\">\n        ${ form }\n      </div>\n      <div class=\"${ pfx }assets\" data-el=\"assets\"></div>\n      <div style=\"clear:both\"></div>\n    </div>\n    `;\n        },\n        initialize(o) {\n            this.options = o;\n            this.config = o.config;\n            this.pfx = this.config.stylePrefix || '';\n            this.ppfx = this.config.pStylePrefix || '';\n            this.em = this.config.em;\n            const coll = this.collection;\n            this.listenTo(coll, 'reset', this.renderAssets);\n            this.listenTo(coll, 'add', this.addToAsset);\n            this.listenTo(coll, 'remove', this.removedAsset);\n            this.listenTo(coll, 'deselectAll', this.deselectAll);\n        },\n        handleSubmit(e) {\n            e.preventDefault();\n            const input = this.getAddInput();\n            const url = input && input.value.trim();\n            const handleAdd = this.config.handleAdd;\n            if (!url) {\n                return;\n            }\n            input.value = '';\n            this.getAssetsEl().scrollTop = 0;\n            if (handleAdd) {\n                handleAdd.bind(this)(url);\n            } else {\n                this.options.globalCollection.add(url, { at: 0 });\n            }\n        },\n        getAssetsEl() {\n            return this.el.querySelector(`.${ this.pfx }assets`);\n        },\n        getAddInput() {\n            if (!this.inputUrl || !this.inputUrl.value)\n                this.inputUrl = this.el.querySelector(`.${ this.pfx }add-asset input`);\n            return this.inputUrl;\n        },\n        removedAsset(model) {\n            if (!this.collection.length) {\n                this.toggleNoAssets();\n            }\n        },\n        addToAsset(model) {\n            if (this.collection.length == 1) {\n                this.toggleNoAssets(1);\n            }\n            this.addAsset(model);\n        },\n        addAsset(model, fragmentEl = null) {\n            const fragment = fragmentEl;\n            const collection = this.collection;\n            const config = this.config;\n            const rendered = new model.typeView({\n                model,\n                collection,\n                config\n            }).render().el;\n            if (fragment) {\n                fragment.appendChild(rendered);\n            } else {\n                const assetsEl = this.getAssetsEl();\n                if (assetsEl) {\n                    assetsEl.insertBefore(rendered, assetsEl.firstChild);\n                }\n            }\n            return rendered;\n        },\n        toggleNoAssets(hide) {\n            const assetsEl = this.$el.find(`.${ this.pfx }assets`);\n            if (hide) {\n                assetsEl.empty();\n            } else {\n                const noAssets = this.config.noAssets;\n                noAssets && assetsEl.append(noAssets);\n            }\n        },\n        deselectAll() {\n            const pfx = this.pfx;\n            this.$el.find(`.${ pfx }highlight`).removeClass(`${ pfx }highlight`);\n        },\n        renderAssets() {\n            const fragment = document.createDocumentFragment();\n            const assets = this.$el.find(`.${ this.pfx }assets`);\n            assets.empty();\n            this.toggleNoAssets(this.collection.length);\n            this.collection.each(model => this.addAsset(model, fragment));\n            assets.append(fragment);\n        },\n        render() {\n            const fuRendered = this.options.fu.render().el;\n            this.$el.empty();\n            this.$el.append(fuRendered).append(this.template(this));\n            this.el.className = `${ this.ppfx }asset-manager`;\n            this.renderAssets();\n            this.rendered = 1;\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/asset_manager/view/FileUploader',[\n    'skylark-underscore',\n    'skylark-backbone',\n    '../../utils/fetch'\n], function (_, Backbone, fetch) {\n    'use strict';\n    return Backbone.View.extend({\n        template: _.template(`\n  <form>\n    <div id=\"<%= pfx %>title\"><%= title %></div>\n    <input type=\"file\" id=\"<%= uploadId %>\" name=\"file\" accept=\"*/*\" <%= disabled ? 'disabled' : '' %> <%= multiUpload ? 'multiple' : '' %>/>\n    <div style=\"clear:both;\"></div>\n  </form>\n  `),\n        events: {},\n        initialize(opts = {}) {\n            this.options = opts;\n            const c = opts.config || {};\n            this.config = c;\n            this.em = this.config.em;\n            this.pfx = c.stylePrefix || '';\n            this.ppfx = c.pStylePrefix || '';\n            this.target = this.options.globalCollection || {};\n            this.uploadId = this.pfx + 'uploadFile';\n            this.disabled = c.disableUpload !== undefined ? c.disableUpload : !c.upload && !c.embedAsBase64;\n            this.multiUpload = c.multiUpload !== undefined ? c.multiUpload : true;\n            this.events['change #' + this.uploadId] = 'uploadFile';\n            let uploadFile = c.uploadFile;\n            if (uploadFile) {\n                this.uploadFile = uploadFile.bind(this);\n            } else if (!c.upload && c.embedAsBase64) {\n                this.uploadFile = this.constructor.embedAsBase64;\n            }\n            this.delegateEvents();\n        },\n        onUploadStart() {\n            const em = this.config.em;\n            em && em.trigger('asset:upload:start');\n        },\n        onUploadEnd(res) {\n            const {$el, config} = this;\n            const em = config.em;\n            em && em.trigger('asset:upload:end', res);\n            const input = $el.find('input');\n            input && input.val('');\n        },\n        onUploadError(err) {\n            const em = this.config.em;\n            console.error(err);\n            this.onUploadEnd(err);\n            em && em.trigger('asset:upload:error', err);\n        },\n        onUploadResponse(text, clb) {\n            const em = this.config.em;\n            const config = this.config;\n            const target = this.target;\n            let json;\n            try {\n                json = typeof text === 'string' ? JSON.parse(text) : text;\n            } catch (e) {\n                json = text;\n            }\n            em && em.trigger('asset:upload:response', json);\n            if (config.autoAdd && target) {\n                target.add(json.data, { at: 0 });\n            }\n            this.onUploadEnd(text);\n            clb && clb(json);\n        },\n        uploadFile(e, clb) {\n            const files = e.dataTransfer ? e.dataTransfer.files : e.target.files;\n            const {config} = this;\n            const {beforeUpload} = config;\n            const beforeUploadResponse = beforeUpload && beforeUpload(files);\n            if (beforeUploadResponse === false)\n                return;\n            const body = new FormData();\n            const {params, customFetch} = config;\n            for (let param in params) {\n                body.append(param, params[param]);\n            }\n            if (this.multiUpload) {\n                for (let i = 0; i < files.length; i++) {\n                    body.append(`${ config.uploadName }[]`, files[i]);\n                }\n            } else if (files.length) {\n                body.append(config.uploadName, files[0]);\n            }\n            var target = this.target;\n            const url = config.upload;\n            const headers = config.headers;\n            const reqHead = 'X-Requested-With';\n            if (typeof headers[reqHead] == 'undefined') {\n                headers[reqHead] = 'XMLHttpRequest';\n            }\n            if (url) {\n                this.onUploadStart();\n                const fetchOpts = {\n                    method: 'post',\n                    credentials: config.credentials || 'include',\n                    headers,\n                    body\n                };\n                const fetchResult = customFetch ? customFetch(url, fetchOpts) : fetch(url, fetchOpts).then(res => (res.status / 200 | 0) == 1 ? res.text() : res.text().then(text => Promise.reject(text)));\n                return fetchResult.then(text => this.onUploadResponse(text, clb)).catch(err => this.onUploadError(err));\n            }\n        },\n        initDrop() {\n            var that = this;\n            if (!this.uploadForm) {\n                this.uploadForm = this.$el.find('form').get(0);\n                if ('draggable' in this.uploadForm) {\n                    var uploadFile = this.uploadFile;\n                    this.uploadForm.ondragover = function () {\n                        this.className = that.pfx + 'hover';\n                        return false;\n                    };\n                    this.uploadForm.ondragleave = function () {\n                        this.className = '';\n                        return false;\n                    };\n                    this.uploadForm.ondrop = function (e) {\n                        this.className = '';\n                        e.preventDefault();\n                        that.uploadFile(e);\n                        return;\n                    };\n                }\n            }\n        },\n        initDropzone(ev) {\n            let addedCls = 0;\n            const c = this.config;\n            const em = ev.model;\n            const edEl = ev.el;\n            const editor = em.get('Editor');\n            const container = em.get('Config').el;\n            const frameEl = em.get('Canvas').getBody();\n            const ppfx = this.ppfx;\n            const updatedCls = `${ ppfx }dropzone-active`;\n            const dropzoneCls = `${ ppfx }dropzone`;\n            const cleanEditorElCls = () => {\n                edEl.className = edEl.className.replace(updatedCls, '').trim();\n                addedCls = 0;\n            };\n            const onDragOver = () => {\n                if (!addedCls) {\n                    edEl.className += ` ${ updatedCls }`;\n                    addedCls = 1;\n                }\n                return false;\n            };\n            const onDragLeave = () => {\n                cleanEditorElCls();\n                return false;\n            };\n            const onDrop = e => {\n                cleanEditorElCls();\n                e.preventDefault();\n                e.stopPropagation();\n                this.uploadFile(e);\n                if (c.openAssetsOnDrop && editor) {\n                    const target = editor.getSelected();\n                    editor.runCommand('open-assets', {\n                        target,\n                        onSelect() {\n                            editor.Modal.close();\n                            editor.AssetManager.setTarget(null);\n                        }\n                    });\n                }\n                return false;\n            };\n            ev.$el.append(`<div class=\"${ dropzoneCls }\">${ c.dropzoneContent }</div>`);\n            cleanEditorElCls();\n            if ('draggable' in edEl) {\n                [\n                    edEl,\n                    frameEl\n                ].forEach(item => {\n                    item.ondragover = onDragOver;\n                    item.ondragleave = onDragLeave;\n                    item.ondrop = onDrop;\n                });\n            }\n        },\n        render() {\n            const {$el, pfx, em} = this;\n            $el.html(this.undefined({\n                title: em && em.t('assetManager.uploadTitle'),\n                uploadId: this.uploadId,\n                disabled: this.disabled,\n                multiUpload: this.multiUpload,\n                pfx\n            }));\n            this.initDrop();\n            $el.attr('class', pfx + 'file-uploader');\n            return this;\n        }\n    }, {\n        embedAsBase64: function (e, clb) {\n            const files = e.dataTransfer ? e.dataTransfer.files : e.target.files;\n            const response = { data: [] };\n            if (!FileReader) {\n                this.onUploadError(new Error('Unsupported platform, FileReader is not defined'));\n                return;\n            }\n            const promises = [];\n            const mimeTypeMatcher = /^(.+)\\/(.+)$/;\n            for (const file of files) {\n                const promise = new Promise((resolve, reject) => {\n                    const reader = new FileReader();\n                    reader.addEventListener('load', event => {\n                        let type;\n                        const name = file.name;\n                        const match = mimeTypeMatcher.exec(file.type);\n                        if (match) {\n                            type = match[1];\n                        } else {\n                            type = file.type;\n                        }\n                        if (type === 'image') {\n                            const data = {\n                                src: reader.result,\n                                name,\n                                type,\n                                height: 0,\n                                width: 0\n                            };\n                            const image = new Image();\n                            image.addEventListener('error', error => {\n                                reject(error);\n                            });\n                            image.addEventListener('load', () => {\n                                data.height = image.height;\n                                data.width = image.width;\n                                resolve(data);\n                            });\n                            image.src = data.src;\n                        } else if (type) {\n                            resolve({\n                                src: reader.result,\n                                name,\n                                type\n                            });\n                        } else {\n                            resolve(reader.result);\n                        }\n                    });\n                    reader.addEventListener('error', error => {\n                        reject(error);\n                    });\n                    reader.addEventListener('abort', error => {\n                        reject('Aborted');\n                    });\n                    reader.readAsDataURL(file);\n                });\n                promises.push(promise);\n            }\n            Promise.all(promises).then(data => {\n                response.data = data;\n                this.onUploadResponse(response, clb);\n            }, error => {\n                this.onUploadError(error);\n            });\n        }\n    });\n});\ndefine('skylark-grapejs/asset_manager/index',[\n    './config/config',\n    './model/Assets',\n    './view/AssetsView',\n    './view/FileUploader'\n], function (defaults, Assets, AssetsView, FileUpload) {\n    'use strict';\n    return () => {\n        let c = {};\n        let assets, am, fu;\n        return {\n            name: 'AssetManager',\n            storageKey: 'assets',\n            getConfig() {\n                return c;\n            },\n            init(config) {\n                c = config || {};\n                for (let name in defaults) {\n                    if (!(name in c))\n                        c[name] = defaults[name];\n                }\n                const ppfx = c.pStylePrefix;\n                const em = c.em;\n                if (ppfx) {\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                }\n                assets = new Assets([]);\n                const obj = {\n                    collection: new Assets([]),\n                    globalCollection: assets,\n                    config: c\n                };\n                fu = new FileUpload(obj);\n                obj.fu = fu;\n                am = new AssetsView(obj);\n                assets.listenTo(assets, 'add', model => {\n                    this.getAllVisible().add(model);\n                    em && em.trigger('asset:add', model);\n                });\n                assets.listenTo(assets, 'remove', model => {\n                    this.getAllVisible().remove(model);\n                    em && em.trigger('asset:remove', model);\n                });\n                return this;\n            },\n            add(asset, opts = {}) {\n                if (typeof opts.at == 'undefined') {\n                    opts.at = 0;\n                }\n                return assets.add(asset, opts);\n            },\n            get(src) {\n                return assets.where({ src })[0];\n            },\n            getAll() {\n                return assets;\n            },\n            getAllVisible() {\n                return am.collection;\n            },\n            remove(src) {\n                var asset = this.get(src);\n                this.getAll().remove(asset);\n                return this;\n            },\n            store(noStore) {\n                var obj = {};\n                var assets = JSON.stringify(this.getAll().toJSON());\n                obj[this.storageKey] = assets;\n                if (!noStore && c.stm)\n                    c.stm.store(obj);\n                return obj;\n            },\n            load(data = {}) {\n                const name = this.storageKey;\n                let assets = data[name] || [];\n                if (typeof assets == 'string') {\n                    try {\n                        assets = JSON.parse(data[name]);\n                    } catch (err) {\n                    }\n                }\n                if (assets && assets.length) {\n                    this.getAll().reset(assets);\n                }\n                return assets;\n            },\n            getContainer() {\n                return am.el;\n            },\n            getAssetsEl() {\n                return am.el.querySelector('[data-el=assets]');\n            },\n            render(assets) {\n                const toRender = assets || this.getAll().models;\n                if (!am.rendered) {\n                    am.render();\n                }\n                am.collection.reset(toRender);\n                return this.getContainer();\n            },\n            addType(id, definition) {\n                this.getAll().addType(id, definition);\n            },\n            getType(id) {\n                return this.getAll().getType(id);\n            },\n            getTypes() {\n                return this.getAll().getTypes();\n            },\n            AssetsView() {\n                return am;\n            },\n            FileUploader() {\n                return fu;\n            },\n            onLoad() {\n                this.getAll().reset(c.assets);\n            },\n            postRender(editorView) {\n                c.dropzone && fu.initDropzone(editorView);\n            },\n            setTarget(m) {\n                am.collection.target = m;\n            },\n            onSelect(f) {\n                am.collection.onSelect = f;\n            },\n            onClick(func) {\n                c.onClick = func;\n            },\n            onDblClick(func) {\n                c.onDblClick = func;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/css_composer/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: 'css-',\n        staticRules: '',\n        rules: []\n    };\n});\ndefine('skylark-grapejs/domain_abstract/model/Styleable',[\n    'skylark-underscore',\n    '../../utils/mixins',\n    '../../parser/model/ParserHtml'\n], function (a, b, ParserHtml) {\n    'use strict';\n    const parseStyle = ParserHtml().parseStyle;\n    return {\n        parseStyle,\n        extendStyle(prop) {\n            return {\n                ...this.getStyle(),\n                ...prop\n            };\n        },\n        getStyle() {\n            const style = this.get('style') || {};\n            return { ...style };\n        },\n        setStyle(prop = {}, opts = {}) {\n            if (a.isString(prop)) {\n                prop = parseStyle(prop);\n            }\n            const propOrig = this.getStyle();\n            const propNew = { ...prop };\n            this.set('style', propNew, opts);\n            const diff = b.shallowDiff(propOrig, propNew);\n            a.keys(diff).forEach(pr => {\n                const em = this.em;\n                this.trigger(`change:style:${ pr }`);\n                if (em) {\n                    em.trigger(`styleable:change`, this, pr);\n                    em.trigger(`styleable:change:${ pr }`, this, pr);\n                }\n            });\n            return propNew;\n        },\n        addStyle(prop, value = '', opts = {}) {\n            if (typeof prop == 'string') {\n                prop = { prop: value };\n            } else {\n                opts = value || {};\n            }\n            prop = this.extendStyle(prop);\n            this.setStyle(prop, opts);\n        },\n        removeStyle(prop) {\n            let style = this.getStyle();\n            delete style[prop];\n            this.setStyle(style);\n        },\n        styleToString(opts = {}) {\n            const result = [];\n            const style = this.getStyle();\n            for (let prop in style) {\n                const imp = opts.important;\n                const important = a.isArray(imp) ? imp.indexOf(prop) >= 0 : imp;\n                const value = `${ style[prop] }${ important ? ' !important' : '' }`;\n                const propPrv = prop.substr(0, 2) == '__';\n                value && !propPrv && result.push(`${ prop }:${ value };`);\n            }\n            return result.join('');\n        },\n        getSelectors() {\n            return this.get('selectors') || this.get('classes');\n        },\n        getSelectorsString() {\n            return this.selectorsToString ? this.selectorsToString() : this.getSelectors().getFullString();\n        }\n    };\n});\ndefine('skylark-grapejs/css_composer/model/CssRule',[\n    'skylark-underscore',\n    'skylark-backbone',\n    '../../domain_abstract/model/Styleable',\n    '../../selector_manager/model/Selectors'\n], function (a, Backbone, Styleable, Selectors) {\n    'use strict';\n    const {CSS} = window;\n    return Backbone.Model.extend(Styleable).extend({\n        defaults: {\n            selectors: {},\n            selectorsAdd: '',\n            style: {},\n            mediaText: '',\n            state: '',\n            stylable: true,\n            atRuleType: '',\n            singleAtRule: 0,\n            important: 0\n        },\n        initialize(c, opt = {}) {\n            this.config = c || {};\n            const em = opt.em;\n            let selectors = this.config.selectors || [];\n            this.em = em;\n            if (em) {\n                const sm = em.get('SelectorManager');\n                const slct = [];\n                selectors.undefined(selector => {\n                    slct.push(sm.add(selector));\n                });\n                selectors = slct;\n            }\n            this.set('selectors', new Selectors(selectors));\n        },\n        getAtRule() {\n            const type = this.get('atRuleType');\n            const condition = this.get('mediaText');\n            const typeStr = type ? `@${ type }` : condition ? '@media' : '';\n            return typeStr + (condition && typeStr ? ` ${ condition }` : '');\n        },\n        selectorsToString(opts = {}) {\n            const result = [];\n            const {em} = this;\n            const state = this.get('state');\n            const wrapper = this.get('wrapper');\n            const addSelector = this.get('selectorsAdd');\n            const isBody = wrapper && em && em.getConfig('wrapperIsBody');\n            const selOpts = { escape: str => CSS && CSS.escape ? CSS.escape(str) : str };\n            const selectors = isBody ? 'body' : this.get('selectors').getFullString(0, selOpts);\n            const stateStr = state && !opts.skipState ? `:${ state }` : '';\n            selectors && result.push(`${ selectors }${ stateStr }`);\n            addSelector && !opts.skipAdd && result.push(addSelector);\n            return result.join(', ');\n        },\n        getDeclaration(opts = {}) {\n            let result = '';\n            const selectors = this.selectorsToString();\n            const style = this.styleToString(opts);\n            const singleAtRule = this.get('singleAtRule');\n            if ((selectors || singleAtRule) && style) {\n                result = singleAtRule ? style : `${ selectors }{${ style }}`;\n            }\n            return result;\n        },\n        toCSS(opts = {}) {\n            let result = '';\n            const atRule = this.getAtRule();\n            const block = this.getDeclaration(opts);\n            block && (result = block);\n            if (atRule && result) {\n                result = `${ atRule }{${ result }}`;\n            }\n            return result;\n        },\n        toJSON(...args) {\n            const obj = Backbone.Model.prototype.toJSON.apply(this, args);\n            if (this.em.getConfig('avoidDefaults')) {\n                const defaults = this.defaults;\n                a.forEach(defaults, (value, key) => {\n                    if (obj[key] === value) {\n                        delete obj[key];\n                    }\n                });\n                if (a.isEmpty(obj.selectors))\n                    delete obj.selectors;\n                if (a.isEmpty(obj.style))\n                    delete obj.style;\n            }\n            return obj;\n        },\n        compare(selectors, state, width, ruleProps = {}) {\n            var st = state || '';\n            var wd = width || '';\n            var selectorsAdd = ruleProps.selectorsAdd || '';\n            var atRuleType = ruleProps.atRuleType || '';\n            var cId = 'cid';\n            if (!(selectors instanceof Array) && !selectors.models)\n                selectors = [selectors];\n            var a1 = a.map(selectors.models || selectors, model => model.get('name'));\n            var a2 = a.map(this.get('selectors').models, model => model.get('name'));\n            var f = false;\n            if (a1.length !== a2.length)\n                return f;\n            for (var i = 0; i < a1.length; i++) {\n                var re = 0;\n                for (var j = 0; j < a2.length; j++) {\n                    if (a1[i] === a2[j])\n                        re = 1;\n                }\n                if (re === 0)\n                    return f;\n            }\n            if (this.get('state') !== st || this.get('mediaText') !== wd || this.get('selectorsAdd') !== selectorsAdd || this.get('atRuleType') !== atRuleType) {\n                return f;\n            }\n            return true;\n        }\n    });\n});\ndefine('skylark-grapejs/css_composer/model/CssRules',[\n    'skylark-backbone',\n    './CssRule'\n], function (Backbone, CssRule) {\n    'use strict';\n    return Backbone.Collection.extend({\n        initialize(models, opt) {\n            if (opt && opt.em)\n                this.editor = opt.em;\n            this.model = (attrs, options) => {\n                var model;\n                if (!options.em && opt && opt.em)\n                    options.em = opt.em;\n                switch (1) {\n                default:\n                    model = new CssRule(attrs, options);\n                }\n                return model;\n            };\n        },\n        add(models, opt = {}) {\n            if (typeof models === 'string') {\n                models = this.editor.get('Parser').parseCss(models);\n            }\n            opt.em = this.editor;\n            return Backbone.Collection.prototype.add.apply(this, [\n                models,\n                opt\n            ]);\n        }\n    });\n});\ndefine('skylark-grapejs/css_composer/view/CssRuleView',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    return Backbone.View.extend({\n        tagName: 'style',\n        initialize(o = {}) {\n            this.config = o.config || {};\n            const model = this.model;\n            const toTrack = 'change:style change:state change:mediaText';\n            this.listenTo(model, toTrack, this.render);\n            this.listenTo(model, 'destroy remove', this.remove);\n            this.listenTo(model.get('selectors'), 'change', this.render);\n        },\n        render() {\n            const model = this.model;\n            const important = model.get('important');\n            this.el.innerHTML = this.model.toCSS({ important });\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/css_composer/view/CssGroupRuleView',['./CssRuleView'], function (CssRuleView) {\n    'use strict';\n    return CssRuleView.extend({\n        _createElement: function (tagName) {\n            return document.createTextNode('');\n        },\n        render() {\n            const model = this.model;\n            const important = model.get('important');\n            this.el.textContent = model.getDeclaration({ important });\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/css_composer/view/CssRulesView',[\n    'skylark-backbone',\n    './CssRuleView',\n    './CssGroupRuleView'\n], function (Backbone, CssRuleView, CssGroupRuleView) {\n    'use strict';\n    const $ = Backbone.$;\n    const getBlockId = (pfx, order) => `${ pfx }${ order ? `-${ parseFloat(order) }` : '' }`;\n    return Backbone.View.extend({\n        initialize(o) {\n            const config = o.config || {};\n            this.atRules = {};\n            this.config = config;\n            this.em = config.em;\n            this.pfx = config.stylePrefix || '';\n            this.className = this.pfx + 'rules';\n            const coll = this.collection;\n            this.listenTo(coll, 'add', this.addTo);\n            this.listenTo(coll, 'reset', this.render);\n        },\n        addTo(model) {\n            this.addToCollection(model);\n        },\n        addToCollection(model, fragmentEl) {\n            if (!this.renderStarted) {\n                return;\n            }\n            const fragment = fragmentEl || null;\n            const {config} = this;\n            const opts = {\n                model,\n                config\n            };\n            let rendered, view;\n            if (model.get('atRuleType') === 'keyframes') {\n                const atRule = model.getAtRule();\n                let atRuleEl = this.atRules[atRule];\n                if (!atRuleEl) {\n                    const styleEl = document.createElement('style');\n                    atRuleEl = document.createTextNode('');\n                    styleEl.appendChild(document.createTextNode(`${ atRule }{`));\n                    styleEl.appendChild(atRuleEl);\n                    styleEl.appendChild(document.createTextNode(`}`));\n                    this.atRules[atRule] = atRuleEl;\n                    rendered = styleEl;\n                }\n                view = new CssGroupRuleView(opts);\n                atRuleEl.appendData(view.render().el.textContent);\n            } else {\n                view = new CssRuleView(opts);\n                rendered = view.render().el;\n            }\n            const clsName = this.className;\n            const mediaText = model.get('mediaText');\n            const defaultBlockId = getBlockId(clsName);\n            let blockId = defaultBlockId;\n            if (mediaText) {\n                blockId = getBlockId(clsName, this.getMediaWidth(mediaText));\n            }\n            if (rendered) {\n                const container = fragment || this.el;\n                let contRules;\n                try {\n                    contRules = container.querySelector(`#${ blockId }`);\n                } catch (e) {\n                }\n                if (!contRules) {\n                    contRules = container.querySelector(`#${ defaultBlockId }`);\n                }\n                contRules.appendChild(rendered);\n            }\n            return rendered;\n        },\n        getMediaWidth(mediaText) {\n            return mediaText && mediaText.replace(`(${ this.em.getConfig('mediaCondition') }: `, '').replace(')', '');\n        },\n        render() {\n            this.renderStarted = 1;\n            this.atRules = {};\n            const {em, $el, className, collection} = this;\n            const frag = document.createDocumentFragment();\n            $el.empty();\n            const prs = em.get('DeviceManager').getAll().pluck('priority');\n            prs.every(pr => pr) && prs.unshift(0);\n            prs.forEach(pr => $(`<div id=\"${ getBlockId(className, pr) }\"></div>`).appendTo(frag));\n            collection.each(model => this.addToCollection(model, frag));\n            $el.append(frag);\n            $el.attr('class', className);\n            return this;\n        }\n    });\n});\ndefine('selector_manager/model/Selector',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    const TYPE_CLASS = 1;\n    const TYPE_ID = 2;\n    const Selector = Backbone.Model.extend({\n        idAttribute: 'name',\n        defaults: {\n            name: '',\n            label: '',\n            type: TYPE_CLASS,\n            active: true,\n            private: false,\n            protected: false\n        },\n        initialize(props, opts = {}) {\n            const {\n                config = {}\n            } = opts;\n            const name = this.get('name');\n            const label = this.get('label');\n            if (!name) {\n                this.set('name', label);\n            } else if (!label) {\n                this.set('label', name);\n            }\n            const namePreEsc = this.get('name');\n            const {escapeName} = config;\n            const nameEsc = escapeName ? escapeName(namePreEsc) : Selector.escapeName(namePreEsc);\n            this.set('name', nameEsc);\n        },\n        getFullName(opts = {}) {\n            const {escape} = opts;\n            const name = this.get('name');\n            let init = '';\n            switch (this.get('type')) {\n            case TYPE_CLASS:\n                init = '.';\n                break;\n            case TYPE_ID:\n                init = '#';\n                break;\n            }\n            return init + (escape ? escape(name) : name);\n        }\n    }, {\n        TYPE_CLASS,\n        TYPE_ID,\n        escapeName(name) {\n            return `${ name }`.trim().replace(/([^a-z0-9\\w-\\:]+)/gi, '-');\n        }\n    });\n    return Selector;\n});\ndefine('selector_manager/model/Selectors',[\n    'skylark-underscore',\n    'skylark-backbone',\n    './Selector'\n], function (a, Backbone, Selector) {\n    'use strict';\n    return Backbone.Collection.extend({\n        model: Selector,\n        modelId: attr => `${ attr.name }_${ attr.type || Selector.TYPE_CLASS }`,\n        getStyleable() {\n            return a.filter(this.models, item => item.get('active') && !item.get('private'));\n        },\n        getValid({noDisabled} = {}) {\n            return a.filter(this.models, item => !item.get('private')).undefined(item => noDisabled ? item.get('active') : 1);\n        },\n        getFullString(collection, opts = {}) {\n            const result = [];\n            const coll = collection || this;\n            coll.forEach(selector => result.push(selector.getFullName(opts)));\n            return result.join('').trim();\n        }\n    });\n});\ndefine('skylark-grapejs/css_composer/index',[\n    'skylark-underscore',\n    './config/config',\n    './model/CssRule',\n    './model/CssRules',\n    './view/CssRulesView',\n    '../../selector_manager/model/Selectors',\n    '../../selector_manager/model/Selector'\n], function (a, defaults, CssRule, CssRules, CssRulesView, Selectors, Selector) {\n    'use strict';\n    return () => {\n        let em;\n        var c = {};\n        var rules, rulesView;\n        return {\n            Selectors,\n            name: 'CssComposer',\n            getConfig() {\n                return c;\n            },\n            storageKey() {\n                var keys = [];\n                var smc = c.stm && c.stm.getConfig() || {};\n                if (smc.storeCss)\n                    keys.push('css');\n                if (smc.storeStyles)\n                    keys.push('styles');\n                return keys;\n            },\n            init(config) {\n                c = config || {};\n                for (var name in defaults) {\n                    if (!(name in c))\n                        c[name] = defaults[name];\n                }\n                var ppfx = c.pStylePrefix;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                var elStyle = c.em && c.em.config.style || '';\n                c.rules = elStyle || c.rules;\n                em = c.em;\n                rules = new CssRules([], c);\n                rulesView = new CssRulesView({\n                    collection: rules,\n                    config: c\n                });\n                return this;\n            },\n            onLoad() {\n                rules.add(c.rules);\n            },\n            postLoad(em) {\n                const ev = 'add remove';\n                const rules = this.getAll();\n                const um = em.get('UndoManager');\n                um && um.add(rules);\n                em.stopListening(rules, ev, this.handleChange);\n                em.listenTo(rules, ev, this.handleChange);\n                rules.each(rule => this.handleChange(rule, { avoidStore: 1 }));\n            },\n            handleChange(model, opts = {}) {\n                const ev = 'change:style';\n                const um = em.get('UndoManager');\n                um && um.add(model);\n                const handleUpdates = em.handleUpdates.bind(em);\n                em.stopListening(model, ev, handleUpdates);\n                em.listenTo(model, ev, handleUpdates);\n                !opts.avoidStore && handleUpdates('', '', opts);\n            },\n            load(data) {\n                var d = data || '';\n                if (!d && c.stm) {\n                    d = c.em.getCacheLoad();\n                }\n                var obj = d.styles || '';\n                if (d.styles) {\n                    try {\n                        obj = JSON.parse(d.styles);\n                    } catch (err) {\n                    }\n                } else if (d.css) {\n                    obj = c.em.get('Parser').parseCss(d.css);\n                }\n                if (a.isArray(obj)) {\n                    obj.length && rules.reset(obj);\n                } else if (obj) {\n                    rules.reset(obj);\n                }\n                return obj;\n            },\n            store(noStore) {\n                if (!c.stm)\n                    return;\n                var obj = {};\n                var keys = this.storageKey();\n                if (keys.indexOf('css') >= 0)\n                    obj.css = c.em.getCss();\n                if (keys.indexOf('styles') >= 0)\n                    obj.styles = JSON.stringify(rules);\n                if (!noStore)\n                    c.stm.store(obj);\n                return obj;\n            },\n            add(selectors, state, width, opts = {}) {\n                var s = state || '';\n                var w = width || '';\n                var opt = { ...opts };\n                var rule = this.get(selectors, s, w, opt);\n                if (rule && rule.config && !rule.config.singleAtRule) {\n                    return rule;\n                } else {\n                    opt.state = s;\n                    opt.mediaText = w;\n                    opt.selectors = '';\n                    rule = new CssRule(opt, c);\n                    rule.get('selectors').add(selectors);\n                    rules.add(rule);\n                    return rule;\n                }\n            },\n            get(selectors, state, width, ruleProps) {\n                var rule = null;\n                rules.each(m => {\n                    if (rule)\n                        return;\n                    if (m.compare(selectors, state, width, ruleProps))\n                        rule = m;\n                });\n                return rule;\n            },\n            getAll() {\n                return rules;\n            },\n            clear() {\n                this.getAll().reset();\n                return this;\n            },\n            addCollection(data, opts = {}) {\n                var result = [];\n                var d = data instanceof Array ? data : [data];\n                for (var i = 0, l = d.length; i < l; i++) {\n                    var rule = d[i] || {};\n                    if (!rule.selectors)\n                        continue;\n                    var sm = c.em && c.em.get('SelectorManager');\n                    if (!sm)\n                        console.warn('Selector Manager not found');\n                    var sl = rule.selectors;\n                    var sels = sl instanceof Array ? sl : [sl];\n                    var newSels = [];\n                    for (var j = 0, le = sels.length; j < le; j++) {\n                        var selec = sm.add(sels[j]);\n                        newSels.push(selec);\n                    }\n                    var modelExists = this.get(newSels, rule.state, rule.mediaText, rule);\n                    var model = this.add(newSels, rule.state, rule.mediaText, rule);\n                    var updateStyle = !modelExists || !opts.avoidUpdateStyle;\n                    const style = rule.style || {};\n                    if (updateStyle) {\n                        let styleUpdate = opts.extend ? {\n                            ...model.get('style'),\n                            ...style\n                        } : style;\n                        model.set('style', styleUpdate);\n                    }\n                    result.push(model);\n                }\n                return result;\n            },\n            setRule(selectors, style, opts = {}) {\n                const {atRuleType, atRuleParams} = opts;\n                const node = em.get('Parser').parserCss.checkNode({\n                    selectors,\n                    style\n                })[0];\n                const {state, selectorsAdd} = node;\n                const sm = em.get('SelectorManager');\n                const selector = sm.add(node.selectors);\n                const rule = this.add(selector, state, atRuleParams, {\n                    selectorsAdd,\n                    atRule: atRuleType\n                });\n                rule.setStyle(style, opts);\n                return rule;\n            },\n            getRule(selectors, opts = {}) {\n                const sm = em.get('SelectorManager');\n                const node = em.get('Parser').parserCss.checkNode({ selectors })[0];\n                const selector = sm.get(node.selectors);\n                const {state, selectorsAdd} = node;\n                const {atRuleType, atRuleParams} = opts;\n                return selector && this.get(selector, state, atRuleParams, {\n                    selectorsAdd,\n                    atRule: atRuleType\n                });\n            },\n            setIdRule(name, style = {}, opts = {}) {\n                const state = opts.state || '';\n                const media = opts.mediaText || em.getCurrentMedia();\n                const sm = em.get('SelectorManager');\n                const selector = sm.add({\n                    name,\n                    type: Selector.TYPE_ID\n                });\n                const rule = this.add(selector, state, media);\n                rule.setStyle(style, opts);\n                return rule;\n            },\n            getIdRule(name, opts = {}) {\n                const state = opts.state || '';\n                const media = opts.mediaText || em.getCurrentMedia();\n                const selector = em.get('SelectorManager').get(name, Selector.TYPE_ID);\n                return selector && this.get(selector, state, media);\n            },\n            setClassRule(name, style = {}, opts = {}) {\n                const state = opts.state || '';\n                const media = opts.mediaText || em.getCurrentMedia();\n                const sm = em.get('SelectorManager');\n                const selector = sm.add({\n                    name,\n                    type: Selector.TYPE_CLASS\n                });\n                const rule = this.add(selector, state, media);\n                rule.setStyle(style, opts);\n                return rule;\n            },\n            getClassRule(name, opts = {}) {\n                const state = opts.state || '';\n                const media = opts.mediaText || em.getCurrentMedia();\n                const selector = em.get('SelectorManager').get(name, Selector.TYPE_CLASS);\n                return selector && this.get(selector, state, media);\n            },\n            render() {\n                return rulesView.render().el;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/trait_manager/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: 'trt-',\n        appendTo: '',\n        optionsTarget: [\n            { value: false },\n            { value: '_blank' }\n        ]\n    };\n});\ndefine('domain_abstract/view/DomainViews',[\n    'skylark-underscore',\n    'skylark-backbone'\n], function (a, Backbone) {\n    'use strict';\n    return Backbone.View.extend({\n        itemView: '',\n        itemsView: '',\n        itemType: 'type',\n        autoAdd: 0,\n        initialize(opts = {}, config) {\n            this.config = config || opts.config || {};\n            this.autoAdd && this.listenTo(this.collection, 'add', this.addTo);\n            this.init();\n        },\n        init() {\n        },\n        addTo(model) {\n            this.add(model);\n        },\n        itemViewNotFound(type) {\n            const {config, ns} = this;\n            const {em} = config;\n            const warn = `${ ns ? `[${ ns }]: ` : '' }'${ type }' type not found`;\n            em && em.logWarning(warn);\n        },\n        add(model, fragment) {\n            const {config, reuseView, itemsView = {}} = this;\n            const inputTypes = [\n                'button',\n                'checkbox',\n                'color',\n                'date',\n                'datetime-local',\n                'email',\n                'file',\n                'hidden',\n                'image',\n                'month',\n                'number',\n                'password',\n                'radio',\n                'range',\n                'reset',\n                'search',\n                'submit',\n                'tel',\n                'text',\n                'time',\n                'url',\n                'week'\n            ];\n            var frag = fragment || null;\n            var itemView = this.itemView;\n            var typeField = model.get(this.itemType);\n            let view;\n            if (itemsView[typeField]) {\n                itemView = itemsView[typeField];\n            } else if (typeField && !itemsView[typeField] && !a.includes(inputTypes, typeField)) {\n                this.itemViewNotFound(typeField);\n            }\n            if (model.view && reuseView) {\n                view = model.view;\n            } else {\n                view = new itemView({\n                    model,\n                    config\n                }, config);\n            }\n            var rendered = view.render().el;\n            if (frag)\n                frag.appendChild(rendered);\n            else\n                this.$el.append(rendered);\n        },\n        render() {\n            var frag = document.createDocumentFragment();\n            this.$el.empty();\n            if (this.collection.length)\n                this.collection.each(function (model) {\n                    this.add(model, frag);\n                }, this);\n            this.$el.append(frag);\n            this.onRender();\n            return this;\n        },\n        onRender() {\n        }\n    });\n});\ndefine('skylark-grapejs/trait_manager/view/TraitView',[\n    'skylark-backbone',\n    'skylark-underscore',\n    'utils/mixins'\n], function (Backbone, a, b) {\n    'use strict';\n    const $ = Backbone.$;\n    return Backbone.View.extend({\n        events: {},\n        eventCapture: ['change'],\n        appendInput: 1,\n        attributes() {\n            return this.model.get('attributes');\n        },\n        templateLabel() {\n            const {ppfx} = this;\n            const label = this.getLabel();\n            return `<div class=\"${ ppfx }label\" title=\"${ label }\">${ label }</div>`;\n        },\n        templateInput() {\n            const {clsField} = this;\n            return `<div class=\"${ clsField }\" data-input></div>`;\n        },\n        initialize(o = {}) {\n            const {\n                config = {}\n            } = o;\n            const {model, eventCapture} = this;\n            const {target} = model;\n            const {type} = model.attributes;\n            this.config = config;\n            this.em = config.em;\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.target = target;\n            const {ppfx} = this;\n            this.clsField = `${ ppfx }field ${ ppfx }field-${ type }`;\n            [\n                [\n                    'change:value',\n                    this.onValueChange\n                ],\n                [\n                    'remove',\n                    this.removeView\n                ]\n            ].forEach(([event, clb]) => {\n                model.off(event, clb);\n                this.listenTo(model, event, clb);\n            });\n            model.view = this;\n            this.listenTo(model, 'change:label', this.render);\n            this.listenTo(model, 'change:placeholder', this.rerender);\n            eventCapture.forEach(event => this.events[event] = 'onChange');\n            this.delegateEvents();\n            this.init();\n        },\n        getClbOpts() {\n            return {\n                component: this.target,\n                trait: this.model,\n                elInput: this.getInputElem()\n            };\n        },\n        removeView() {\n            this.remove();\n            this.removed();\n        },\n        init() {\n        },\n        removed() {\n        },\n        onRender() {\n        },\n        onUpdate() {\n        },\n        onEvent() {\n        },\n        onChange(event) {\n            const el = this.getInputElem();\n            if (el && !a.isUndefined(el.value)) {\n                this.model.set('value', el.value);\n            }\n            this.onEvent({\n                ...this.getClbOpts(),\n                event\n            });\n        },\n        getValueForTarget() {\n            return this.model.get('value');\n        },\n        setInputValue(value) {\n            const el = this.getInputElem();\n            el && (el.value = value);\n        },\n        onValueChange(model, value, opts = {}) {\n            if (opts.fromTarget) {\n                this.setInputValue(model.get('value'));\n                this.postUpdate();\n            } else {\n                const val = this.getValueForTarget();\n                model.setTargetValue(val, opts);\n            }\n        },\n        renderLabel() {\n            const {$el, target} = this;\n            const label = this.getLabel();\n            let tpl = this.templateLabel(target);\n            if (this.createLabel) {\n                tpl = this.createLabel({\n                    label,\n                    component: target,\n                    trait: this\n                }) || '';\n            }\n            $el.find('[data-label]').append(tpl);\n        },\n        getLabel() {\n            const {em} = this;\n            const {label, name} = this.model.attributes;\n            return em.t(`traitManager.traits.labels.${ name }`) || b.capitalize(label || name).replace(/-/g, ' ');\n        },\n        getComponent() {\n            return this.target;\n        },\n        getInputEl() {\n            if (!this.$input) {\n                const {em, model} = this;\n                const md = model;\n                const {name} = model.attributes;\n                const plh = md.get('placeholder') || md.get('default') || '';\n                const type = md.get('type') || 'text';\n                const min = md.get('min');\n                const max = md.get('max');\n                const value = this.getModelValue();\n                const input = $(`<input type=\"${ type }\" placeholder=\"${ plh }\">`);\n                const i18nAttr = em.t(`traitManager.traits.attributes.${ name }`) || {};\n                input.attr(i18nAttr);\n                if (!a.isUndefined(value)) {\n                    md.set({ value }, { silent: true });\n                    input.prop('value', value);\n                }\n                if (min) {\n                    input.prop('min', min);\n                }\n                if (max) {\n                    input.prop('max', max);\n                }\n                this.$input = input;\n            }\n            return this.$input.get(0);\n        },\n        getInputElem() {\n            const {input, $input} = this;\n            return input || $input && $input.get && $input.get(0) || this.getElInput();\n        },\n        getModelValue() {\n            let value;\n            const model = this.model;\n            const target = this.target;\n            const name = model.get('name');\n            if (model.get('changeProp')) {\n                value = target.get(name);\n            } else {\n                const attrs = target.get('attributes');\n                value = model.get('value') || attrs[name];\n            }\n            return !a.isUndefined(value) ? value : '';\n        },\n        getElInput() {\n            return this.elInput;\n        },\n        renderField() {\n            const {$el, appendInput, model} = this;\n            const inputs = $el.find('[data-input]');\n            const el = inputs[inputs.length - 1];\n            let tpl = model.el;\n            if (!tpl) {\n                tpl = this.createInput ? this.createInput(this.getClbOpts()) : this.getInputEl();\n            }\n            if (a.isString(tpl)) {\n                el.innerHTML = tpl;\n                this.elInput = el.firstChild;\n            } else {\n                appendInput ? el.appendChild(tpl) : el.insertBefore(tpl, el.firstChild);\n                this.elInput = tpl;\n            }\n            model.el = this.elInput;\n        },\n        hasLabel() {\n            const {label} = this.model.attributes;\n            return !this.noLabel && label !== false;\n        },\n        rerender() {\n            this.model.el = null;\n            this.render();\n        },\n        postUpdate() {\n            this.onUpdate(this.getClbOpts());\n        },\n        render() {\n            const {$el, pfx, ppfx, model} = this;\n            const {type} = model.attributes;\n            const hasLabel = this.hasLabel && this.hasLabel();\n            const cls = `${ pfx }trait`;\n            this.$input = null;\n            let tmpl = `<div class=\"${ cls }\">\n      ${ hasLabel ? `<div class=\"${ ppfx }label-wrp\" data-label></div>` : '' }\n      <div class=\"${ ppfx }field-wrp ${ ppfx }field-wrp--${ type }\" data-input>\n        ${ this.templateInput ? a.isFunction(this.templateInput) ? this.templateInput(this.getClbOpts()) : this.templateInput : '' }\n      </div>\n    </div>`;\n            $el.empty().append(tmpl);\n            hasLabel && this.renderLabel();\n            this.renderField();\n            this.el.className = `${ cls }__wrp`;\n            this.postUpdate();\n            this.onRender(this.getClbOpts());\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/trait_manager/view/TraitSelectView',[\n    'skylark-backbone',\n    'skylark-underscore',\n    './TraitView'\n], function (Backbone, a, TraitView) {\n    'use strict';\n    const $ = Backbone.$;\n    return TraitView.extend({\n        init() {\n            this.listenTo(this.model, 'change:options', this.rerender);\n        },\n        templateInput() {\n            const {ppfx, clsField} = this;\n            return `<div class=\"${ clsField }\">\n      <div data-input></div>\n      <div class=\"${ ppfx }sel-arrow\">\n        <div class=\"${ ppfx }d-s-arrow\"></div>\n      </div>\n    </div>`;\n        },\n        getInputEl() {\n            if (!this.$input) {\n                const {model, em} = this;\n                const propName = model.get('name');\n                const opts = model.get('options') || [];\n                let input = '<select>';\n                opts.forEach(el => {\n                    let attrs = '';\n                    let name, value, style;\n                    if (a.isString(el)) {\n                        name = el;\n                        value = el;\n                    } else {\n                        name = el.name || el.label || el.value;\n                        value = `${ a.isUndefined(el.value) ? el.id : el.value }`.replace(/\"/g, '&quot;');\n                        style = el.style ? el.style.replace(/\"/g, '&quot;') : '';\n                        attrs += style ? ` style=\"${ style }\"` : '';\n                    }\n                    const resultName = em.t(`traitManager.traits.options.${ propName }.${ value }`) || name;\n                    input += `<option value=\"${ value }\"${ attrs }>${ resultName }</option>`;\n                });\n                input += '</select>';\n                this.$input = $(input);\n                const val = model.getTargetValue();\n                !a.isUndefined(val) && this.$input.val(val);\n            }\n            return this.$input.get(0);\n        }\n    });\n});\ndefine('skylark-grapejs/trait_manager/view/TraitCheckboxView',[\n    'skylark-underscore',\n    './TraitView'\n], function (a, TraitView) {\n    'use strict';\n    return TraitView.extend({\n        appendInput: 0,\n        templateInput() {\n            const {ppfx, clsField} = this;\n            return `<label class=\"${ clsField }\" data-input>\n    <i class=\"${ ppfx }chk-icon\"></i>\n  </label>`;\n        },\n        onChange() {\n            const value = this.getInputElem().checked;\n            this.model.set('value', this.getCheckedValue(value));\n        },\n        getCheckedValue(checked) {\n            let result = checked;\n            const {valueTrue, valueFalse} = this.model.attributes;\n            if (result && !a.isUndefined(valueTrue)) {\n                result = valueTrue;\n            }\n            if (!result && !a.isUndefined(valueFalse)) {\n                result = valueFalse;\n            }\n            return result;\n        },\n        getInputEl(...args) {\n            const toInit = !this.$input;\n            const el = TraitView.prototype.getInputEl.apply(this, args);\n            if (toInit) {\n                let checked, targetValue;\n                const {model, target} = this;\n                const {valueTrue, valueFalse} = model.attributes;\n                const name = model.get('name');\n                if (model.get('changeProp')) {\n                    checked = target.get(name);\n                    targetValue = checked;\n                } else {\n                    targetValue = target.get('attributes')[name];\n                    checked = targetValue || targetValue === '' ? !0 : !1;\n                }\n                if (!a.isUndefined(valueFalse) && targetValue === valueFalse) {\n                    checked = !1;\n                }\n                el.checked = checked;\n            }\n            return el;\n        }\n    });\n});\ndefine('domain_abstract/ui/Input',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    const $ = Backbone.$;\n    return Backbone.View.extend({\n        events: { change: 'handleChange' },\n        template() {\n            return `<span class=\"${ this.holderClass() }\"></span>`;\n        },\n        inputClass() {\n            return `${ this.ppfx }field`;\n        },\n        holderClass() {\n            return `${ this.ppfx }input-holder`;\n        },\n        initialize(opts = {}) {\n            const ppfx = opts.ppfx || '';\n            this.opts = opts;\n            this.ppfx = ppfx;\n            this.em = opts.target || {};\n            this.listenTo(this.model, 'change:value', this.handleModelChange);\n        },\n        elementUpdated() {\n            this.model.trigger('el:change');\n        },\n        setValue(value) {\n            const model = this.model;\n            let val = value || model.get('defaults');\n            const input = this.getInputEl();\n            input && (input.value = val);\n        },\n        handleModelChange(model, value, opts) {\n            this.setValue(value, opts);\n        },\n        handleChange(e) {\n            e.stopPropagation();\n            const value = this.getInputEl().value;\n            this.model.set({ value }, { fromInput: 1 });\n            this.elementUpdated();\n        },\n        getInputEl() {\n            if (!this.inputEl) {\n                const {model} = this;\n                const plh = model.get('placeholder') || model.get('defaults') || '';\n                this.inputEl = $(`<input type=\"text\" placeholder=\"${ plh }\">`);\n            }\n            return this.inputEl.get(0);\n        },\n        render() {\n            this.inputEl = null;\n            const el = this.$el;\n            el.addClass(this.inputClass());\n            el.html(this.template());\n            el.find(`.${ this.holderClass() }`).append(this.getInputEl());\n            return this;\n        }\n    });\n});\ndefine('domain_abstract/ui/InputNumber',[\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins',\n    './Input'\n], function (Backbone, a, b, Input) {\n    'use strict';\n    const $ = Backbone.$;\n    return Input.extend({\n        events: {\n            'change input': 'handleChange',\n            'change select': 'handleUnitChange',\n            'click [data-arrow-up]': 'upArrowClick',\n            'click [data-arrow-down]': 'downArrowClick',\n            'mousedown [data-arrows]': 'downIncrement'\n        },\n        template() {\n            const ppfx = this.ppfx;\n            return `\n      <span class=\"${ ppfx }input-holder\"></span>\n      <span class=\"${ ppfx }field-units\"></span>\n      <div class=\"${ ppfx }field-arrows\" data-arrows>\n        <div class=\"${ ppfx }field-arrow-u\" data-arrow-up></div>\n        <div class=\"${ ppfx }field-arrow-d\" data-arrow-down></div>\n      </div>\n    `;\n        },\n        inputClass() {\n            const ppfx = this.ppfx;\n            return this.opts.contClass || `${ ppfx }field ${ ppfx }field-integer`;\n        },\n        initialize(opts = {}) {\n            Input.prototype.initialize.apply(this, arguments);\n            a.bindAll(this, 'moveIncrement', 'upIncrement');\n            this.doc = document;\n            this.listenTo(this.model, 'change:unit', this.handleModelChange);\n        },\n        setValue(value, opts) {\n            var opt = opts || {};\n            var valid = this.validateInputValue(value, { deepCheck: 1 });\n            var validObj = { value: valid.value };\n            if (valid.unit || valid.force) {\n                validObj.unit = valid.unit;\n            }\n            this.model.set(validObj, opt);\n            if (opt.silent) {\n                this.handleModelChange();\n            }\n        },\n        handleChange(e) {\n            e.stopPropagation();\n            this.setValue(this.getInputEl().value);\n            this.elementUpdated();\n        },\n        handleUnitChange(e) {\n            e.stopPropagation();\n            var value = this.getUnitEl().value;\n            this.model.set('unit', value);\n            this.elementUpdated();\n        },\n        elementUpdated() {\n            this.model.trigger('el:change');\n        },\n        handleModelChange() {\n            const model = this.model;\n            this.getInputEl().value = model.get('value');\n            const unitEl = this.getUnitEl();\n            unitEl && (unitEl.value = model.get('unit') || '');\n        },\n        getUnitEl() {\n            if (!this.unitEl) {\n                const model = this.model;\n                const units = model.get('units') || [];\n                if (units.length) {\n                    const options = [];\n                    units.forEach(unit => {\n                        const selected = unit == model.get('unit') ? 'selected' : '';\n                        options.push(`<option ${ selected }>${ unit }</option>`);\n                    });\n                    const temp = document.createElement('div');\n                    temp.innerHTML = `<select class=\"${ this.ppfx }input-unit\">${ options.join('') }</select>`;\n                    this.unitEl = temp.firstChild;\n                }\n            }\n            return this.unitEl;\n        },\n        upArrowClick() {\n            const model = this.model;\n            const step = model.get('step');\n            let value = parseInt(model.get('value'), 10);\n            value = this.normalizeValue(value + step);\n            var valid = this.validateInputValue(value);\n            model.set('value', valid.value);\n            this.elementUpdated();\n        },\n        downArrowClick() {\n            const model = this.model;\n            const step = model.get('step');\n            const value = parseInt(model.get('value'), 10);\n            const val = this.normalizeValue(value - step);\n            var valid = this.validateInputValue(val);\n            model.set('value', valid.value);\n            this.elementUpdated();\n        },\n        downIncrement(e) {\n            e.preventDefault();\n            this.moved = 0;\n            var value = this.model.get('value');\n            value = this.normalizeValue(value);\n            this.current = {\n                y: e.pageY,\n                val: value\n            };\n            b.on(this.doc, 'mousemove', this.moveIncrement);\n            b.on(this.doc, 'mouseup', this.upIncrement);\n        },\n        moveIncrement(ev) {\n            this.moved = 1;\n            const model = this.model;\n            const step = model.get('step');\n            const data = this.current;\n            var pos = this.normalizeValue(data.val + (data.y - ev.pageY) * step);\n            this.prValue = this.validateInputValue(pos).value;\n            model.set('value', this.prValue, { avoidStore: 1 });\n            return false;\n        },\n        upIncrement() {\n            const model = this.model;\n            const step = model.get('step');\n            b.off(this.doc, 'mouseup', this.upIncrement);\n            b.off(this.doc, 'mousemove', this.moveIncrement);\n            if (this.prValue && this.moved) {\n                var value = this.prValue - step;\n                model.set('value', value, { avoidStore: 1 }).set('value', value + step);\n                this.elementUpdated();\n            }\n        },\n        normalizeValue(value, defValue = 0) {\n            const model = this.model;\n            const step = model.get('step');\n            let stepDecimals = 0;\n            if (isNaN(value)) {\n                return defValue;\n            }\n            value = parseFloat(value);\n            if (Math.floor(value) !== value) {\n                const side = step.toString().split('.')[1];\n                stepDecimals = side ? side.length : 0;\n            }\n            return stepDecimals ? parseFloat(value.toFixed(stepDecimals)) : value;\n        },\n        validateInputValue(value, opts) {\n            var force = 0;\n            var opt = opts || {};\n            var model = this.model;\n            const defValue = '';\n            var val = !a.isUndefined(value) ? value : defValue;\n            var units = model.get('units') || [];\n            var unit = model.get('unit') || units.length && units[0] || '';\n            var max = model.get('max');\n            var min = model.get('min');\n            if (opt.deepCheck) {\n                var fixed = model.get('fixedValues') || [];\n                if (val) {\n                    var regFixed = new RegExp('^' + fixed.join('|'), 'g');\n                    if (fixed.length && regFixed.test(val)) {\n                        val = val.match(regFixed)[0];\n                        unit = '';\n                        force = 1;\n                    } else {\n                        var valCopy = val + '';\n                        val += '';\n                        val = parseFloat(val.replace(',', '.'));\n                        val = !isNaN(val) ? val : defValue;\n                        var uN = valCopy.replace(val, '');\n                        if (a.indexOf(units, uN) >= 0)\n                            unit = uN;\n                    }\n                }\n            }\n            if (!a.isUndefined(max) && max !== '')\n                val = val > max ? max : val;\n            if (!a.isUndefined(min) && min !== '')\n                val = val < min ? min : val;\n            return {\n                force,\n                value: val,\n                unit\n            };\n        },\n        render() {\n            Input.prototype.render.call(this);\n            this.unitEl = null;\n            const unit = this.getUnitEl();\n            unit && this.$el.find(`.${ this.ppfx }field-units`).get(0).appendChild(unit);\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/trait_manager/view/TraitNumberView',[\n    './TraitView',\n    'domain_abstract/ui/InputNumber'\n], function (TraitView, InputNumber) {\n    'use strict';\n    return TraitView.extend({\n        getValueForTarget() {\n            const {model} = this;\n            const {value, unit} = model.attributes;\n            return value ? value + unit : '';\n        },\n        getInputEl() {\n            if (!this.input) {\n                var value = this.getModelValue();\n                var inputNumber = new InputNumber({\n                    contClass: this.ppfx + 'field-int',\n                    model: this.model,\n                    ppfx: this.ppfx\n                });\n                this.input = inputNumber.render();\n                this.$input = this.input.inputEl;\n                this.$unit = this.input.unitEl;\n                this.model.set('value', value);\n                this.$input.val(value);\n                this.input = inputNumber.el;\n            }\n            return this.input;\n        }\n    });\n});\ndefine('utils/ColorPicker',[],function () {\n    'use strict';\n    return function ($, undefined) {\n        'use strict';\n        var defaultOpts = {\n                beforeShow: noop,\n                move: noop,\n                change: noop,\n                show: noop,\n                hide: noop,\n                color: false,\n                flat: false,\n                showInput: false,\n                allowEmpty: false,\n                showButtons: true,\n                clickoutFiresChange: true,\n                showInitial: false,\n                showPalette: false,\n                showPaletteOnly: false,\n                hideAfterPaletteSelect: false,\n                togglePaletteOnly: false,\n                showSelectionPalette: true,\n                localStorageKey: false,\n                appendTo: 'body',\n                maxSelectionSize: 7,\n                cancelText: 'cancel',\n                chooseText: 'choose',\n                togglePaletteMoreText: 'more',\n                togglePaletteLessText: 'less',\n                clearText: 'Clear Color Selection',\n                noColorSelectedText: 'No Color Selected',\n                preferredFormat: false,\n                className: '',\n                containerClassName: '',\n                replacerClassName: '',\n                showAlpha: false,\n                theme: 'sp-light',\n                palette: [[\n                        '#ffffff',\n                        '#000000',\n                        '#ff0000',\n                        '#ff8000',\n                        '#ffff00',\n                        '#008000',\n                        '#0000ff',\n                        '#4b0082',\n                        '#9400d3'\n                    ]],\n                selectionPalette: [],\n                disabled: false,\n                offset: null\n            }, spectrums = [], IE = !!/msie/i.exec(window.navigator.userAgent), rgbaSupport = function () {\n                function contains(str, substr) {\n                    return !!~('' + str).indexOf(substr);\n                }\n                var elem = document.createElement('div');\n                var style = elem.style;\n                style.cssText = 'background-color:rgba(0,0,0,.5)';\n                return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');\n            }(), replaceInput = [\n                \"<div class='sp-replacer'>\",\n                \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\n                \"<div class='sp-dd'>&#9660;</div>\",\n                '</div>'\n            ].join(''), markup = function () {\n                var gradientFix = '';\n                if (IE) {\n                    for (var i = 1; i <= 6; i++) {\n                        gradientFix += \"<div class='sp-\" + i + \"'></div>\";\n                    }\n                }\n                return [\n                    \"<div class='sp-container sp-hidden'>\",\n                    \"<div class='sp-palette-container'>\",\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\n                    \"<div class='sp-palette-button-container sp-cf'>\",\n                    \"<button type='button' class='sp-palette-toggle'></button>\",\n                    '</div>',\n                    '</div>',\n                    \"<div class='sp-picker-container'>\",\n                    \"<div class='sp-top sp-cf'>\",\n                    \"<div class='sp-fill'></div>\",\n                    \"<div class='sp-top-inner'>\",\n                    \"<div class='sp-color'>\",\n                    \"<div class='sp-sat'>\",\n                    \"<div class='sp-val'>\",\n                    \"<div class='sp-dragger'></div>\",\n                    '</div>',\n                    '</div>',\n                    '</div>',\n                    \"<div class='sp-clear sp-clear-display'>\",\n                    '</div>',\n                    \"<div class='sp-hue'>\",\n                    \"<div class='sp-slider'></div>\",\n                    gradientFix,\n                    '</div>',\n                    '</div>',\n                    \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\n                    '</div>',\n                    \"<div class='sp-input-container sp-cf'>\",\n                    \"<input class='sp-input' type='text' spellcheck='false'  />\",\n                    '</div>',\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\n                    \"<div class='sp-button-container sp-cf'>\",\n                    \"<a class='sp-cancel' href='#'></a>\",\n                    \"<button type='button' class='sp-choose'></button>\",\n                    '</div>',\n                    '</div>',\n                    '</div>'\n                ].join('');\n            }();\n        function paletteTemplate(p, color, className, opts) {\n            var html = [];\n            for (var i = 0; i < p.length; i++) {\n                var current = p[i];\n                if (current) {\n                    var tiny = tinycolor(current);\n                    var c = tiny.toHsl().l < 0.5 ? 'sp-thumb-el sp-thumb-dark' : 'sp-thumb-el sp-thumb-light';\n                    c += tinycolor.equals(color, current) ? ' sp-thumb-active' : '';\n                    var formattedString = tiny.toString(opts.preferredFormat || 'rgb');\n                    var swatchStyle = rgbaSupport ? 'background-color:' + tiny.toRgbString() : 'filter:' + tiny.toFilter();\n                    html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\"></span></span>');\n                } else {\n                    var cls = 'sp-clear-display';\n                    html.push($('<div />').append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>').attr('title', opts.noColorSelectedText)).html());\n                }\n            }\n            return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + '</div>';\n        }\n        function hideAll() {\n            for (var i = 0; i < spectrums.length; i++) {\n                if (spectrums[i]) {\n                    spectrums[i].hide();\n                }\n            }\n        }\n        function instanceOptions(o, callbackContext) {\n            var opts = $.extend({}, defaultOpts, o);\n            opts.callbacks = {\n                move: bind(opts.move, callbackContext),\n                change: bind(opts.change, callbackContext),\n                show: bind(opts.show, callbackContext),\n                hide: bind(opts.hide, callbackContext),\n                beforeShow: bind(opts.beforeShow, callbackContext)\n            };\n            return opts;\n        }\n        function spectrum(element, o) {\n            var opts = instanceOptions(o, element), flat = opts.flat, showSelectionPalette = opts.showSelectionPalette, localStorageKey = opts.localStorageKey, theme = opts.theme, callbacks = opts.callbacks, resize = throttle(reflow, 10), visible = false, isDragging = false, dragWidth = 0, dragHeight = 0, dragHelperHeight = 0, slideHeight = 0, slideWidth = 0, alphaWidth = 0, alphaSlideHelperWidth = 0, slideHelperHeight = 0, currentHue = 0, currentSaturation = 0, currentValue = 0, currentAlpha = 1, palette = [], paletteArray = [], paletteLookup = {}, selectionPalette = opts.selectionPalette.slice(0), maxSelectionSize = opts.maxSelectionSize, draggingClass = 'sp-dragging', shiftMovementDirection = null;\n            var doc = element.ownerDocument, body = doc.body, boundElement = $(element), disabled = false, container = $(markup, doc).addClass(theme), pickerContainer = container.find('.sp-picker-container'), dragger = container.find('.sp-color'), dragHelper = container.find('.sp-dragger'), slider = container.find('.sp-hue'), slideHelper = container.find('.sp-slider'), alphaSliderInner = container.find('.sp-alpha-inner'), alphaSlider = container.find('.sp-alpha'), alphaSlideHelper = container.find('.sp-alpha-handle'), textInput = container.find('.sp-input'), paletteContainer = container.find('.sp-palette'), initialColorContainer = container.find('.sp-initial'), cancelButton = container.find('.sp-cancel'), clearButton = container.find('.sp-clear'), chooseButton = container.find('.sp-choose'), toggleButton = container.find('.sp-palette-toggle'), isInput = boundElement.is('input'), isInputTypeColor = isInput && boundElement.attr('type') === 'color' && inputTypeColorSupport(), shouldReplace = isInput && !flat, replacer = shouldReplace ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]), offsetElement = shouldReplace ? replacer : boundElement, previewElement = replacer.find('.sp-preview-inner'), initialColor = opts.color || isInput && boundElement.val(), colorOnShow = false, currentPreferredFormat = opts.preferredFormat, clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange, isEmpty = !initialColor, allowEmpty = opts.allowEmpty && !isInputTypeColor;\n            function applyOptions() {\n                if (opts.showPaletteOnly) {\n                    opts.showPalette = true;\n                }\n                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\n                if (opts.palette) {\n                    palette = opts.palette.slice(0);\n                    paletteArray = $.isArray(palette[0]) ? palette : [palette];\n                    paletteLookup = {};\n                    for (var i = 0; i < paletteArray.length; i++) {\n                        for (var j = 0; j < paletteArray[i].length; j++) {\n                            var rgb = tinycolor(paletteArray[i][j]).toRgbString();\n                            paletteLookup[rgb] = true;\n                        }\n                    }\n                }\n                container.toggleClass('sp-flat', flat);\n                container.toggleClass('sp-input-disabled', !opts.showInput);\n                container.toggleClass('sp-alpha-enabled', opts.showAlpha);\n                container.toggleClass('sp-clear-enabled', allowEmpty);\n                container.toggleClass('sp-buttons-disabled', !opts.showButtons);\n                container.toggleClass('sp-palette-buttons-disabled', !opts.togglePaletteOnly);\n                container.toggleClass('sp-palette-disabled', !opts.showPalette);\n                container.toggleClass('sp-palette-only', opts.showPaletteOnly);\n                container.toggleClass('sp-initial-disabled', !opts.showInitial);\n                container.addClass(opts.className).addClass(opts.containerClassName);\n                reflow();\n            }\n            function initialize() {\n                if (IE) {\n                    container.find('*:not(input)').attr('unselectable', 'on');\n                }\n                applyOptions();\n                if (shouldReplace) {\n                    boundElement.after(replacer).hide();\n                }\n                if (!allowEmpty) {\n                    clearButton.hide();\n                }\n                if (flat) {\n                    boundElement.after(container).hide();\n                } else {\n                    var appendTo = opts.appendTo === 'parent' ? boundElement.parent() : $(opts.appendTo);\n                    if (appendTo.length !== 1) {\n                        appendTo = $('body');\n                    }\n                    appendTo.append(container);\n                }\n                updateSelectionPaletteFromStorage();\n                offsetElement.bind('click.spectrum touchstart.spectrum', function (e) {\n                    if (!disabled) {\n                        toggle();\n                    }\n                    e.stopPropagation();\n                    if (!$(e.target).is('input')) {\n                        e.preventDefault();\n                    }\n                });\n                if (boundElement.is(':disabled') || opts.disabled === true) {\n                    disable();\n                }\n                container.click(stopPropagation);\n                textInput.change(setFromTextInput);\n                textInput.bind('paste', function () {\n                    setTimeout(setFromTextInput, 1);\n                });\n                textInput.keydown(function (e) {\n                    if (e.keyCode == 13) {\n                        setFromTextInput();\n                    }\n                });\n                cancelButton.text(opts.cancelText);\n                cancelButton.bind('click.spectrum', function (e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    revert();\n                    hide();\n                });\n                clearButton.attr('title', opts.clearText);\n                clearButton.bind('click.spectrum', function (e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    isEmpty = true;\n                    move();\n                    if (flat) {\n                        updateOriginalInput(true);\n                    }\n                });\n                chooseButton.text(opts.chooseText);\n                chooseButton.bind('click.spectrum', function (e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    if (IE && textInput.is(':focus')) {\n                        textInput.trigger('change');\n                    }\n                    if (isValid()) {\n                        updateOriginalInput(true);\n                        hide();\n                    }\n                });\n                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\n                toggleButton.bind('click.spectrum', function (e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    opts.showPaletteOnly = !opts.showPaletteOnly;\n                    if (!opts.showPaletteOnly && !flat) {\n                        container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));\n                    }\n                    applyOptions();\n                });\n                draggable(alphaSlider, function (dragX, dragY, e) {\n                    currentAlpha = dragX / alphaWidth;\n                    isEmpty = false;\n                    if (e.shiftKey) {\n                        currentAlpha = Math.round(currentAlpha * 10) / 10;\n                    }\n                    move();\n                }, dragStart, dragStop);\n                draggable(slider, function (dragX, dragY) {\n                    currentHue = parseFloat(dragY / slideHeight);\n                    isEmpty = false;\n                    if (!opts.showAlpha) {\n                        currentAlpha = 1;\n                    }\n                    move();\n                }, dragStart, dragStop);\n                draggable(dragger, function (dragX, dragY, e) {\n                    if (!e.shiftKey) {\n                        shiftMovementDirection = null;\n                    } else if (!shiftMovementDirection) {\n                        var oldDragX = currentSaturation * dragWidth;\n                        var oldDragY = dragHeight - currentValue * dragHeight;\n                        var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\n                        shiftMovementDirection = furtherFromX ? 'x' : 'y';\n                    }\n                    var setSaturation = !shiftMovementDirection || shiftMovementDirection === 'x';\n                    var setValue = !shiftMovementDirection || shiftMovementDirection === 'y';\n                    if (setSaturation) {\n                        currentSaturation = parseFloat(dragX / dragWidth);\n                    }\n                    if (setValue) {\n                        currentValue = parseFloat((dragHeight - dragY) / dragHeight);\n                    }\n                    isEmpty = false;\n                    if (!opts.showAlpha) {\n                        currentAlpha = 1;\n                    }\n                    move();\n                }, dragStart, dragStop);\n                if (!!initialColor) {\n                    set(initialColor);\n                    updateUI();\n                    currentPreferredFormat = opts.preferredFormat || tinycolor(initialColor).format;\n                    addColorToSelectionPalette(initialColor);\n                } else {\n                    updateUI();\n                }\n                if (flat) {\n                    show();\n                }\n                function paletteElementClick(e) {\n                    if (e.data && e.data.ignore) {\n                        set($(e.target).closest('.sp-thumb-el').data('color'));\n                        move();\n                    } else {\n                        set($(e.target).closest('.sp-thumb-el').data('color'));\n                        move();\n                        updateOriginalInput(true);\n                        if (opts.hideAfterPaletteSelect) {\n                            hide();\n                        }\n                    }\n                    return false;\n                }\n                var paletteEvent = IE ? 'mousedown.spectrum' : 'click.spectrum touchstart.spectrum';\n                paletteContainer.delegate('.sp-thumb-el', paletteEvent, paletteElementClick);\n                initialColorContainer.delegate('.sp-thumb-el:nth-child(1)', paletteEvent, { ignore: true }, paletteElementClick);\n            }\n            function updateSelectionPaletteFromStorage() {\n                if (localStorageKey && window.localStorage) {\n                    try {\n                        var oldPalette = window.localStorage[localStorageKey].split(',#');\n                        if (oldPalette.length > 1) {\n                            delete window.localStorage[localStorageKey];\n                            $.each(oldPalette, function (i, c) {\n                                addColorToSelectionPalette(c);\n                            });\n                        }\n                    } catch (e) {\n                    }\n                    try {\n                        selectionPalette = window.localStorage[localStorageKey].split(';');\n                    } catch (e) {\n                    }\n                }\n            }\n            function addColorToSelectionPalette(color) {\n                if (showSelectionPalette) {\n                    var rgb = tinycolor(color).toRgbString();\n                    if (!paletteLookup[rgb] && $.inArray(rgb, selectionPalette) === -1) {\n                        selectionPalette.push(rgb);\n                        while (selectionPalette.length > maxSelectionSize) {\n                            selectionPalette.shift();\n                        }\n                    }\n                    if (localStorageKey && window.localStorage) {\n                        try {\n                            window.localStorage[localStorageKey] = selectionPalette.join(';');\n                        } catch (e) {\n                        }\n                    }\n                }\n            }\n            function getUniqueSelectionPalette() {\n                var unique = [];\n                if (opts.showPalette) {\n                    for (var i = 0; i < selectionPalette.length; i++) {\n                        var rgb = tinycolor(selectionPalette[i]).toRgbString();\n                        if (!paletteLookup[rgb]) {\n                            unique.push(selectionPalette[i]);\n                        }\n                    }\n                }\n                return unique.reverse().slice(0, opts.maxSelectionSize);\n            }\n            function drawPalette() {\n                var currentColor = get();\n                var html = $.map(paletteArray, function (palette, i) {\n                    return paletteTemplate(palette, currentColor, 'sp-palette-row sp-palette-row-' + i, opts);\n                });\n                updateSelectionPaletteFromStorage();\n                if (selectionPalette) {\n                    html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, 'sp-palette-row sp-palette-row-selection', opts));\n                }\n                paletteContainer.html(html.join(''));\n            }\n            function drawInitial() {\n                if (opts.showInitial) {\n                    var initial = colorOnShow;\n                    var current = get();\n                    initialColorContainer.html(paletteTemplate([\n                        initial,\n                        current\n                    ], current, 'sp-palette-row-initial', opts));\n                }\n            }\n            function dragStart() {\n                if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {\n                    reflow();\n                }\n                isDragging = true;\n                container.addClass(draggingClass);\n                shiftMovementDirection = null;\n                boundElement.trigger('dragstart.spectrum', [get()]);\n            }\n            function dragStop() {\n                isDragging = false;\n                container.removeClass(draggingClass);\n                boundElement.trigger('dragstop.spectrum', [get()]);\n            }\n            function setFromTextInput() {\n                var value = textInput.val();\n                if ((value === null || value === '') && allowEmpty) {\n                    set(null);\n                    updateOriginalInput(true);\n                } else {\n                    var tiny = tinycolor(value);\n                    if (tiny.isValid()) {\n                        set(tiny);\n                        updateOriginalInput(true);\n                    } else {\n                        textInput.addClass('sp-validation-error');\n                    }\n                }\n            }\n            function toggle() {\n                if (visible) {\n                    hide();\n                } else {\n                    show();\n                }\n            }\n            function show() {\n                var event = $.Event('beforeShow.spectrum');\n                if (visible) {\n                    reflow();\n                    return;\n                }\n                boundElement.trigger('beforeShow.spectrum', [get()]);\n                if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {\n                    return;\n                }\n                hideAll();\n                visible = true;\n                var $doc = $(doc);\n                $doc.bind('keydown.spectrum', onkeydown);\n                $doc.bind('click.spectrum', clickout);\n                $(window).bind('resize.spectrum', resize);\n                replacer.addClass('sp-active');\n                container.removeClass('sp-hidden');\n                reflow();\n                updateUI();\n                colorOnShow = get();\n                drawInitial();\n                callbacks.show(colorOnShow);\n                boundElement.trigger('show.spectrum', [colorOnShow]);\n            }\n            function onkeydown(e) {\n                if (e.keyCode === 27) {\n                    hide();\n                }\n            }\n            function clickout(e) {\n                if (e.button == 2) {\n                    return;\n                }\n                if (isDragging) {\n                    return;\n                }\n                if (clickoutFiresChange) {\n                    updateOriginalInput(true);\n                } else {\n                    revert();\n                }\n                hide();\n            }\n            function hide() {\n                if (!visible || flat) {\n                    return;\n                }\n                visible = false;\n                $(doc).unbind('keydown.spectrum', onkeydown);\n                $(doc).unbind('click.spectrum', clickout);\n                $(window).unbind('resize.spectrum', resize);\n                replacer.removeClass('sp-active');\n                container.addClass('sp-hidden');\n                callbacks.hide(get());\n                boundElement.trigger('hide.spectrum', [get()]);\n            }\n            function revert() {\n                set(colorOnShow, true);\n            }\n            function set(color, ignoreFormatChange) {\n                if (tinycolor.equals(color, get())) {\n                    updateUI();\n                    return;\n                }\n                var newColor, newHsv;\n                if (!color && allowEmpty) {\n                    isEmpty = true;\n                } else {\n                    isEmpty = false;\n                    newColor = tinycolor(color);\n                    newHsv = newColor.toHsv();\n                    currentHue = newHsv.h % 360 / 360;\n                    currentSaturation = newHsv.s;\n                    currentValue = newHsv.v;\n                    currentAlpha = newHsv.a;\n                }\n                updateUI();\n                if (newColor && newColor.isValid() && !ignoreFormatChange) {\n                    currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\n                }\n            }\n            function get(opts) {\n                opts = opts || {};\n                if (allowEmpty && isEmpty) {\n                    return null;\n                }\n                return tinycolor.fromRatio({\n                    h: currentHue,\n                    s: currentSaturation,\n                    v: currentValue,\n                    a: Math.round(currentAlpha * 100) / 100\n                }, { format: opts.format || currentPreferredFormat });\n            }\n            function isValid() {\n                return !textInput.hasClass('sp-validation-error');\n            }\n            function move() {\n                updateUI();\n                callbacks.move(get());\n                boundElement.trigger('move.spectrum', [get()]);\n            }\n            function updateUI() {\n                textInput.removeClass('sp-validation-error');\n                updateHelperLocations();\n                var flatColor = tinycolor.fromRatio({\n                    h: currentHue,\n                    s: 1,\n                    v: 1\n                });\n                dragger.css('background-color', flatColor.toHexString());\n                var format = currentPreferredFormat;\n                if (currentAlpha < 1 && !(currentAlpha === 0 && format === 'name')) {\n                    if (format === 'hex' || format === 'hex3' || format === 'hex6' || format === 'name') {\n                        format = 'rgb';\n                    }\n                }\n                var realColor = get({ format: format }), displayColor = '';\n                previewElement.removeClass('sp-clear-display');\n                previewElement.css('background-color', 'transparent');\n                if (!realColor && allowEmpty) {\n                    previewElement.addClass('sp-clear-display');\n                } else {\n                    var realHex = realColor.toHexString(), realRgb = realColor.toRgbString();\n                    if (rgbaSupport || realColor.alpha === 1) {\n                        previewElement.css('background-color', realRgb);\n                    } else {\n                        previewElement.css('background-color', 'transparent');\n                        previewElement.css('filter', realColor.toFilter());\n                    }\n                    if (opts.showAlpha) {\n                        var rgb = realColor.toRgb();\n                        rgb.a = 0;\n                        var realAlpha = tinycolor(rgb).toRgbString();\n                        var gradient = 'linear-gradient(left, ' + realAlpha + ', ' + realHex + ')';\n                        if (IE) {\n                            alphaSliderInner.css('filter', tinycolor(realAlpha).toFilter({ gradientType: 1 }, realHex));\n                        } else {\n                            alphaSliderInner.css('background', '-webkit-' + gradient);\n                            alphaSliderInner.css('background', '-moz-' + gradient);\n                            alphaSliderInner.css('background', '-ms-' + gradient);\n                            alphaSliderInner.css('background', 'linear-gradient(to right, ' + realAlpha + ', ' + realHex + ')');\n                        }\n                    }\n                    displayColor = realColor.toString(format);\n                }\n                if (opts.showInput) {\n                    textInput.val(displayColor);\n                }\n                if (opts.showPalette) {\n                    drawPalette();\n                }\n                drawInitial();\n            }\n            function updateHelperLocations() {\n                var s = currentSaturation;\n                var v = currentValue;\n                if (allowEmpty && isEmpty) {\n                    alphaSlideHelper.hide();\n                    slideHelper.hide();\n                    dragHelper.hide();\n                } else {\n                    alphaSlideHelper.show();\n                    slideHelper.show();\n                    dragHelper.show();\n                    var dragX = s * dragWidth;\n                    var dragY = dragHeight - v * dragHeight;\n                    dragX = Math.max(-dragHelperHeight, Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight));\n                    dragY = Math.max(-dragHelperHeight, Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight));\n                    dragHelper.css({\n                        top: dragY + 'px',\n                        left: dragX + 'px'\n                    });\n                    var alphaX = currentAlpha * alphaWidth;\n                    alphaSlideHelper.css({ left: alphaX - alphaSlideHelperWidth / 2 + 'px' });\n                    var slideY = currentHue * slideHeight;\n                    slideHelper.css({ top: slideY - slideHelperHeight + 'px' });\n                }\n            }\n            function updateOriginalInput(fireCallback) {\n                var color = get(), displayColor = '', hasChanged = !tinycolor.equals(color, colorOnShow);\n                if (color) {\n                    displayColor = color.toString(currentPreferredFormat);\n                    addColorToSelectionPalette(color);\n                }\n                if (isInput) {\n                    boundElement.val(displayColor);\n                }\n                if (fireCallback && hasChanged) {\n                    callbacks.change(color);\n                    boundElement.trigger('change', [color]);\n                }\n            }\n            function reflow() {\n                if (!visible) {\n                    return;\n                }\n                dragWidth = dragger.width();\n                dragHeight = dragger.height();\n                dragHelperHeight = dragHelper.height();\n                slideWidth = slider.width();\n                slideHeight = slider.height();\n                slideHelperHeight = slideHelper.height();\n                alphaWidth = alphaSlider.width();\n                alphaSlideHelperWidth = alphaSlideHelper.width();\n                if (!flat) {\n                    container.css('position', 'absolute');\n                    if (opts.offset) {\n                        container.offset(opts.offset);\n                    } else {\n                        container.offset(getOffset(container, offsetElement));\n                    }\n                }\n                updateHelperLocations();\n                if (opts.showPalette) {\n                    drawPalette();\n                }\n                boundElement.trigger('reflow.spectrum');\n            }\n            function destroy() {\n                boundElement.show();\n                offsetElement.unbind('click.spectrum touchstart.spectrum');\n                container.remove();\n                replacer.remove();\n                spectrums[spect.id] = null;\n            }\n            function option(optionName, optionValue) {\n                if (optionName === undefined) {\n                    return $.extend({}, opts);\n                }\n                if (optionValue === undefined) {\n                    return opts[optionName];\n                }\n                opts[optionName] = optionValue;\n                if (optionName === 'preferredFormat') {\n                    currentPreferredFormat = opts.preferredFormat;\n                }\n                applyOptions();\n            }\n            function enable() {\n                disabled = false;\n                boundElement.attr('disabled', false);\n                offsetElement.removeClass('sp-disabled');\n            }\n            function disable() {\n                hide();\n                disabled = true;\n                boundElement.attr('disabled', true);\n                offsetElement.addClass('sp-disabled');\n            }\n            function setOffset(coord) {\n                opts.offset = coord;\n                reflow();\n            }\n            initialize();\n            var spect = {\n                show: show,\n                hide: hide,\n                toggle: toggle,\n                reflow: reflow,\n                option: option,\n                enable: enable,\n                disable: disable,\n                offset: setOffset,\n                set: function (c) {\n                    set(c);\n                    updateOriginalInput();\n                },\n                get: get,\n                destroy: destroy,\n                container: container\n            };\n            spect.id = spectrums.push(spect) - 1;\n            return spect;\n        }\n        function getOffset(picker, input) {\n            var extraY = 0;\n            var dpWidth = picker.outerWidth();\n            var dpHeight = picker.outerHeight();\n            var inputHeight = input.outerHeight();\n            var doc = picker[0].ownerDocument;\n            var docElem = doc.documentElement;\n            var cW = docElem.clientWidth;\n            var cH = docElem.clientHeight;\n            var scL = $(doc).scrollLeft();\n            var scT = $(doc).scrollTop();\n            var viewWidth = cW + scL;\n            var viewHeight = cH + scT;\n            var offset = input.offset();\n            offset.top += inputHeight;\n            offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);\n            offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight - extraY) : extraY);\n            return offset;\n        }\n        function noop() {\n        }\n        function stopPropagation(e) {\n            e.stopPropagation();\n        }\n        function bind(func, obj) {\n            var slice = Array.prototype.slice;\n            var args = slice.call(arguments, 2);\n            return function () {\n                return func.apply(obj, args.concat(slice.call(arguments)));\n            };\n        }\n        function draggable(element, onmove, onstart, onstop) {\n            onmove = onmove || function () {\n            };\n            onstart = onstart || function () {\n            };\n            onstop = onstop || function () {\n            };\n            var doc = document;\n            var dragging = false;\n            var offset = {};\n            var maxHeight = 0;\n            var maxWidth = 0;\n            var hasTouch = 'ontouchstart' in window;\n            var duringDragEvents = {};\n            duringDragEvents['selectstart'] = prevent;\n            duringDragEvents['dragstart'] = prevent;\n            duringDragEvents['touchmove mousemove'] = move;\n            duringDragEvents['touchend mouseup'] = stop;\n            function prevent(e) {\n                if (e.stopPropagation) {\n                    e.stopPropagation();\n                }\n                if (e.preventDefault) {\n                    e.preventDefault();\n                }\n                e.returnValue = false;\n            }\n            function move(e) {\n                if (dragging) {\n                    if (IE && doc.documentMode < 9 && !e.button) {\n                        return stop();\n                    }\n                    var t0 = e && e.touches && e.touches[0];\n                    var pageX = t0 && t0.pageX || e.pageX;\n                    var pageY = t0 && t0.pageY || e.pageY;\n                    var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\n                    var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\n                    if (hasTouch) {\n                        prevent(e);\n                    }\n                    onmove.apply(element, [\n                        dragX,\n                        dragY,\n                        e\n                    ]);\n                }\n            }\n            function start(e) {\n                var rightclick = e.which ? e.which == 3 : e.button == 2;\n                if (!rightclick && !dragging) {\n                    if (onstart.apply(element, arguments) !== false) {\n                        dragging = true;\n                        maxHeight = $(element).height();\n                        maxWidth = $(element).width();\n                        offset = $(element).offset();\n                        $(doc).bind(duringDragEvents);\n                        $(doc.body).addClass('sp-dragging');\n                        move(e);\n                        prevent(e);\n                    }\n                }\n            }\n            function stop() {\n                if (dragging) {\n                    $(doc).unbind(duringDragEvents);\n                    $(doc.body).removeClass('sp-dragging');\n                    setTimeout(function () {\n                        onstop.apply(element, arguments);\n                    }, 0);\n                }\n                dragging = false;\n            }\n            $(element).bind('touchstart mousedown', start);\n        }\n        function throttle(func, wait, debounce) {\n            var timeout;\n            return function () {\n                var context = this, args = arguments;\n                var throttler = function () {\n                    timeout = null;\n                    func.apply(context, args);\n                };\n                if (debounce)\n                    clearTimeout(timeout);\n                if (debounce || !timeout)\n                    timeout = setTimeout(throttler, wait);\n            };\n        }\n        function inputTypeColorSupport() {\n            return $.fn.spectrum.inputTypeColorSupport();\n        }\n        var dataID = 'spectrum.id';\n        $.fn.spectrum = function (opts, extra) {\n            if (typeof opts == 'string') {\n                var returnValue = this;\n                var args = Array.prototype.slice.call(arguments, 1);\n                this.each(function () {\n                    var spect = spectrums[$(this).data(dataID)];\n                    if (spect) {\n                        var method = spect[opts];\n                        if (!method) {\n                            throw new Error(\"Spectrum: no such method: '\" + opts + \"'\");\n                        }\n                        if (opts == 'get') {\n                            returnValue = spect.get();\n                        } else if (opts == 'container') {\n                            returnValue = spect.container;\n                        } else if (opts == 'option') {\n                            returnValue = spect.option.apply(spect, args);\n                        } else if (opts == 'destroy') {\n                            spect.destroy();\n                            $(this).removeData(dataID);\n                        } else {\n                            method.apply(spect, args);\n                        }\n                    }\n                });\n                return returnValue;\n            }\n            return this.spectrum('destroy').each(function () {\n                var options = $.extend({}, opts, $(this).data());\n                var spect = spectrum(this, options);\n                $(this).data(dataID, spect.id);\n            });\n        };\n        $.fn.spectrum.load = true;\n        $.fn.spectrum.loadOpts = {};\n        $.fn.spectrum.draggable = draggable;\n        $.fn.spectrum.defaults = defaultOpts;\n        $.fn.spectrum.inputTypeColorSupport = function inputTypeColorSupport() {\n            if (typeof inputTypeColorSupport._cachedResult === 'undefined') {\n                var colorInput = $(\"<input type='color'/>\")[0];\n                inputTypeColorSupport._cachedResult = colorInput.type === 'color' && colorInput.value !== '';\n            }\n            return inputTypeColorSupport._cachedResult;\n        };\n        $.spectrum = {};\n        $.spectrum.localization = {};\n        $.spectrum.palettes = {};\n        $.fn.spectrum.processNativeColorInputs = function () {\n            var colorInputs = $('input[type=color]');\n            if (colorInputs.length && !inputTypeColorSupport()) {\n                colorInputs.spectrum({ preferredFormat: 'hex6' });\n            }\n        };\n        var trimLeft = /^[\\s,#]+/, trimRight = /\\s+$/, tinyCounter = 0, math = Math, mathRound = math.round, mathMin = math.min, mathMax = math.max, mathRandom = math.random;\n        var tinycolor = function (color, opts) {\n            color = color ? color : '';\n            opts = opts || {};\n            if (color instanceof tinycolor) {\n                return color;\n            }\n            if (!(this instanceof tinycolor)) {\n                return new tinycolor(color, opts);\n            }\n            var rgb = inputToRGB(color);\n            this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;\n            this._gradientType = opts.gradientType;\n            if (this._r < 1) {\n                this._r = mathRound(this._r);\n            }\n            if (this._g < 1) {\n                this._g = mathRound(this._g);\n            }\n            if (this._b < 1) {\n                this._b = mathRound(this._b);\n            }\n            this._ok = rgb.ok;\n            this._tc_id = tinyCounter++;\n        };\n        tinycolor.prototype = {\n            isDark: function () {\n                return this.getBrightness() < 128;\n            },\n            isLight: function () {\n                return !this.isDark();\n            },\n            isValid: function () {\n                return this._ok;\n            },\n            getOriginalInput: function () {\n                return this._originalInput;\n            },\n            getFormat: function () {\n                return this._format;\n            },\n            getAlpha: function () {\n                return this._a;\n            },\n            getBrightness: function () {\n                var rgb = this.toRgb();\n                return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n            },\n            setAlpha: function (value) {\n                this._a = boundAlpha(value);\n                this._roundA = mathRound(100 * this._a) / 100;\n                return this;\n            },\n            toHsv: function () {\n                var hsv = rgbToHsv(this._r, this._g, this._b);\n                return {\n                    h: hsv.h * 360,\n                    s: hsv.s,\n                    v: hsv.v,\n                    a: this._a\n                };\n            },\n            toHsvString: function () {\n                var hsv = rgbToHsv(this._r, this._g, this._b);\n                var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n                return this._a == 1 ? 'hsv(' + h + ', ' + s + '%, ' + v + '%)' : 'hsva(' + h + ', ' + s + '%, ' + v + '%, ' + this._roundA + ')';\n            },\n            toHsl: function () {\n                var hsl = rgbToHsl(this._r, this._g, this._b);\n                return {\n                    h: hsl.h * 360,\n                    s: hsl.s,\n                    l: hsl.l,\n                    a: this._a\n                };\n            },\n            toHslString: function () {\n                var hsl = rgbToHsl(this._r, this._g, this._b);\n                var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n                return this._a == 1 ? 'hsl(' + h + ', ' + s + '%, ' + l + '%)' : 'hsla(' + h + ', ' + s + '%, ' + l + '%, ' + this._roundA + ')';\n            },\n            toHex: function (allow3Char) {\n                return rgbToHex(this._r, this._g, this._b, allow3Char);\n            },\n            toHexString: function (allow3Char) {\n                return '#' + this.toHex(allow3Char);\n            },\n            toHex8: function () {\n                return rgbaToHex(this._r, this._g, this._b, this._a);\n            },\n            toHex8String: function () {\n                return '#' + this.toHex8();\n            },\n            toRgb: function () {\n                return {\n                    r: mathRound(this._r),\n                    g: mathRound(this._g),\n                    b: mathRound(this._b),\n                    a: this._a\n                };\n            },\n            toRgbString: function () {\n                return this._a == 1 ? 'rgb(' + mathRound(this._r) + ', ' + mathRound(this._g) + ', ' + mathRound(this._b) + ')' : 'rgba(' + mathRound(this._r) + ', ' + mathRound(this._g) + ', ' + mathRound(this._b) + ', ' + this._roundA + ')';\n            },\n            toPercentageRgb: function () {\n                return {\n                    r: mathRound(bound01(this._r, 255) * 100) + '%',\n                    g: mathRound(bound01(this._g, 255) * 100) + '%',\n                    b: mathRound(bound01(this._b, 255) * 100) + '%',\n                    a: this._a\n                };\n            },\n            toPercentageRgbString: function () {\n                return this._a == 1 ? 'rgb(' + mathRound(bound01(this._r, 255) * 100) + '%, ' + mathRound(bound01(this._g, 255) * 100) + '%, ' + mathRound(bound01(this._b, 255) * 100) + '%)' : 'rgba(' + mathRound(bound01(this._r, 255) * 100) + '%, ' + mathRound(bound01(this._g, 255) * 100) + '%, ' + mathRound(bound01(this._b, 255) * 100) + '%, ' + this._roundA + ')';\n            },\n            toName: function () {\n                if (this._a === 0) {\n                    return 'transparent';\n                }\n                if (this._a < 1) {\n                    return false;\n                }\n                return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n            },\n            toFilter: function (secondColor) {\n                var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);\n                var secondHex8String = hex8String;\n                var gradientType = this._gradientType ? 'GradientType = 1, ' : '';\n                if (secondColor) {\n                    var s = tinycolor(secondColor);\n                    secondHex8String = s.toHex8String();\n                }\n                return 'progid:DXImageTransform.Microsoft.gradient(' + gradientType + 'startColorstr=' + hex8String + ',endColorstr=' + secondHex8String + ')';\n            },\n            toString: function (format) {\n                var formatSet = !!format;\n                format = format || this._format;\n                var formattedString = false;\n                var hasAlpha = this._a < 1 && this._a >= 0;\n                var needsAlphaFormat = !formatSet && hasAlpha && (format === 'hex' || format === 'hex6' || format === 'hex3' || format === 'name');\n                if (needsAlphaFormat) {\n                    if (format === 'name' && this._a === 0) {\n                        return this.toName();\n                    }\n                    return this.toRgbString();\n                }\n                if (format === 'rgb') {\n                    formattedString = this.toRgbString();\n                }\n                if (format === 'prgb') {\n                    formattedString = this.toPercentageRgbString();\n                }\n                if (format === 'hex' || format === 'hex6') {\n                    formattedString = this.toHexString();\n                }\n                if (format === 'hex3') {\n                    formattedString = this.toHexString(true);\n                }\n                if (format === 'hex8') {\n                    formattedString = this.toHex8String();\n                }\n                if (format === 'name') {\n                    formattedString = this.toName();\n                }\n                if (format === 'hsl') {\n                    formattedString = this.toHslString();\n                }\n                if (format === 'hsv') {\n                    formattedString = this.toHsvString();\n                }\n                return formattedString || this.toHexString();\n            },\n            _applyModification: function (fn, args) {\n                var color = fn.apply(null, [this].concat([].slice.call(args)));\n                this._r = color._r;\n                this._g = color._g;\n                this._b = color._b;\n                this.setAlpha(color._a);\n                return this;\n            },\n            lighten: function () {\n                return this._applyModification(lighten, arguments);\n            },\n            brighten: function () {\n                return this._applyModification(brighten, arguments);\n            },\n            darken: function () {\n                return this._applyModification(darken, arguments);\n            },\n            desaturate: function () {\n                return this._applyModification(desaturate, arguments);\n            },\n            saturate: function () {\n                return this._applyModification(saturate, arguments);\n            },\n            greyscale: function () {\n                return this._applyModification(greyscale, arguments);\n            },\n            spin: function () {\n                return this._applyModification(spin, arguments);\n            },\n            _applyCombination: function (fn, args) {\n                return fn.apply(null, [this].concat([].slice.call(args)));\n            },\n            analogous: function () {\n                return this._applyCombination(analogous, arguments);\n            },\n            complement: function () {\n                return this._applyCombination(complement, arguments);\n            },\n            monochromatic: function () {\n                return this._applyCombination(monochromatic, arguments);\n            },\n            splitcomplement: function () {\n                return this._applyCombination(splitcomplement, arguments);\n            },\n            triad: function () {\n                return this._applyCombination(triad, arguments);\n            },\n            tetrad: function () {\n                return this._applyCombination(tetrad, arguments);\n            }\n        };\n        tinycolor.fromRatio = function (color, opts) {\n            if (typeof color == 'object') {\n                var newColor = {};\n                for (var i in color) {\n                    if (color.hasOwnProperty(i)) {\n                        if (i === 'a') {\n                            newColor[i] = color[i];\n                        } else {\n                            newColor[i] = convertToPercentage(color[i]);\n                        }\n                    }\n                }\n                color = newColor;\n            }\n            return tinycolor(color, opts);\n        };\n        function inputToRGB(color) {\n            var rgb = {\n                r: 0,\n                g: 0,\n                b: 0\n            };\n            var a = 1;\n            var ok = false;\n            var format = false;\n            if (typeof color == 'string') {\n                color = stringInputToObject(color);\n            }\n            if (typeof color == 'object') {\n                if (color.hasOwnProperty('r') && color.hasOwnProperty('g') && color.hasOwnProperty('b')) {\n                    rgb = rgbToRgb(color.r, color.g, color.b);\n                    ok = true;\n                    format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\n                } else if (color.hasOwnProperty('h') && color.hasOwnProperty('s') && color.hasOwnProperty('v')) {\n                    color.s = convertToPercentage(color.s);\n                    color.v = convertToPercentage(color.v);\n                    rgb = hsvToRgb(color.h, color.s, color.v);\n                    ok = true;\n                    format = 'hsv';\n                } else if (color.hasOwnProperty('h') && color.hasOwnProperty('s') && color.hasOwnProperty('l')) {\n                    color.s = convertToPercentage(color.s);\n                    color.l = convertToPercentage(color.l);\n                    rgb = hslToRgb(color.h, color.s, color.l);\n                    ok = true;\n                    format = 'hsl';\n                }\n                if (color.hasOwnProperty('a')) {\n                    a = color.a;\n                }\n            }\n            a = boundAlpha(a);\n            return {\n                ok: ok,\n                format: color.format || format,\n                r: mathMin(255, mathMax(rgb.r, 0)),\n                g: mathMin(255, mathMax(rgb.g, 0)),\n                b: mathMin(255, mathMax(rgb.b, 0)),\n                a: a\n            };\n        }\n        function rgbToRgb(r, g, b) {\n            return {\n                r: bound01(r, 255) * 255,\n                g: bound01(g, 255) * 255,\n                b: bound01(b, 255) * 255\n            };\n        }\n        function rgbToHsl(r, g, b) {\n            r = bound01(r, 255);\n            g = bound01(g, 255);\n            b = bound01(b, 255);\n            var max = mathMax(r, g, b), min = mathMin(r, g, b);\n            var h, s, l = (max + min) / 2;\n            if (max == min) {\n                h = s = 0;\n            } else {\n                var d = max - min;\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n                }\n                h /= 6;\n            }\n            return {\n                h: h,\n                s: s,\n                l: l\n            };\n        }\n        function hslToRgb(h, s, l) {\n            var r, g, b;\n            h = bound01(h, 360);\n            s = bound01(s, 100);\n            l = bound01(l, 100);\n            function hue2rgb(p, q, t) {\n                if (t < 0)\n                    t += 1;\n                if (t > 1)\n                    t -= 1;\n                if (t < 1 / 6)\n                    return p + (q - p) * 6 * t;\n                if (t < 1 / 2)\n                    return q;\n                if (t < 2 / 3)\n                    return p + (q - p) * (2 / 3 - t) * 6;\n                return p;\n            }\n            if (s === 0) {\n                r = g = b = l;\n            } else {\n                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                var p = 2 * l - q;\n                r = hue2rgb(p, q, h + 1 / 3);\n                g = hue2rgb(p, q, h);\n                b = hue2rgb(p, q, h - 1 / 3);\n            }\n            return {\n                r: r * 255,\n                g: g * 255,\n                b: b * 255\n            };\n        }\n        function rgbToHsv(r, g, b) {\n            r = bound01(r, 255);\n            g = bound01(g, 255);\n            b = bound01(b, 255);\n            var max = mathMax(r, g, b), min = mathMin(r, g, b);\n            var h, s, v = max;\n            var d = max - min;\n            s = max === 0 ? 0 : d / max;\n            if (max == min) {\n                h = 0;\n            } else {\n                switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n                }\n                h /= 6;\n            }\n            return {\n                h: h,\n                s: s,\n                v: v\n            };\n        }\n        function hsvToRgb(h, s, v) {\n            h = bound01(h, 360) * 6;\n            s = bound01(s, 100);\n            v = bound01(v, 100);\n            var i = math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [\n                    v,\n                    q,\n                    p,\n                    p,\n                    t,\n                    v\n                ][mod], g = [\n                    t,\n                    v,\n                    v,\n                    q,\n                    p,\n                    p\n                ][mod], b = [\n                    p,\n                    p,\n                    t,\n                    v,\n                    v,\n                    q\n                ][mod];\n            return {\n                r: r * 255,\n                g: g * 255,\n                b: b * 255\n            };\n        }\n        function rgbToHex(r, g, b, allow3Char) {\n            var hex = [\n                pad2(mathRound(r).toString(16)),\n                pad2(mathRound(g).toString(16)),\n                pad2(mathRound(b).toString(16))\n            ];\n            if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n            }\n            return hex.join('');\n        }\n        function rgbaToHex(r, g, b, a) {\n            var hex = [\n                pad2(convertDecimalToHex(a)),\n                pad2(mathRound(r).toString(16)),\n                pad2(mathRound(g).toString(16)),\n                pad2(mathRound(b).toString(16))\n            ];\n            return hex.join('');\n        }\n        tinycolor.equals = function (color1, color2) {\n            if (!color1 || !color2) {\n                return false;\n            }\n            return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n        };\n        tinycolor.random = function () {\n            return tinycolor.fromRatio({\n                r: mathRandom(),\n                g: mathRandom(),\n                b: mathRandom()\n            });\n        };\n        function desaturate(color, amount) {\n            amount = amount === 0 ? 0 : amount || 10;\n            var hsl = tinycolor(color).toHsl();\n            hsl.s -= amount / 100;\n            hsl.s = clamp01(hsl.s);\n            return tinycolor(hsl);\n        }\n        function saturate(color, amount) {\n            amount = amount === 0 ? 0 : amount || 10;\n            var hsl = tinycolor(color).toHsl();\n            hsl.s += amount / 100;\n            hsl.s = clamp01(hsl.s);\n            return tinycolor(hsl);\n        }\n        function greyscale(color) {\n            return tinycolor(color).desaturate(100);\n        }\n        function lighten(color, amount) {\n            amount = amount === 0 ? 0 : amount || 10;\n            var hsl = tinycolor(color).toHsl();\n            hsl.l += amount / 100;\n            hsl.l = clamp01(hsl.l);\n            return tinycolor(hsl);\n        }\n        function brighten(color, amount) {\n            amount = amount === 0 ? 0 : amount || 10;\n            var rgb = tinycolor(color).toRgb();\n            rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));\n            rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));\n            rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));\n            return tinycolor(rgb);\n        }\n        function darken(color, amount) {\n            amount = amount === 0 ? 0 : amount || 10;\n            var hsl = tinycolor(color).toHsl();\n            hsl.l -= amount / 100;\n            hsl.l = clamp01(hsl.l);\n            return tinycolor(hsl);\n        }\n        function spin(color, amount) {\n            var hsl = tinycolor(color).toHsl();\n            var hue = (mathRound(hsl.h) + amount) % 360;\n            hsl.h = hue < 0 ? 360 + hue : hue;\n            return tinycolor(hsl);\n        }\n        function complement(color) {\n            var hsl = tinycolor(color).toHsl();\n            hsl.h = (hsl.h + 180) % 360;\n            return tinycolor(hsl);\n        }\n        function triad(color) {\n            var hsl = tinycolor(color).toHsl();\n            var h = hsl.h;\n            return [\n                tinycolor(color),\n                tinycolor({\n                    h: (h + 120) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                tinycolor({\n                    h: (h + 240) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        }\n        function tetrad(color) {\n            var hsl = tinycolor(color).toHsl();\n            var h = hsl.h;\n            return [\n                tinycolor(color),\n                tinycolor({\n                    h: (h + 90) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                tinycolor({\n                    h: (h + 180) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                tinycolor({\n                    h: (h + 270) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        }\n        function splitcomplement(color) {\n            var hsl = tinycolor(color).toHsl();\n            var h = hsl.h;\n            return [\n                tinycolor(color),\n                tinycolor({\n                    h: (h + 72) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                }),\n                tinycolor({\n                    h: (h + 216) % 360,\n                    s: hsl.s,\n                    l: hsl.l\n                })\n            ];\n        }\n        function analogous(color, results, slices) {\n            results = results || 6;\n            slices = slices || 30;\n            var hsl = tinycolor(color).toHsl();\n            var part = 360 / slices;\n            var ret = [tinycolor(color)];\n            for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n                hsl.h = (hsl.h + part) % 360;\n                ret.push(tinycolor(hsl));\n            }\n            return ret;\n        }\n        function monochromatic(color, results) {\n            results = results || 6;\n            var hsv = tinycolor(color).toHsv();\n            var h = hsv.h, s = hsv.s, v = hsv.v;\n            var ret = [];\n            var modification = 1 / results;\n            while (results--) {\n                ret.push(tinycolor({\n                    h: h,\n                    s: s,\n                    v: v\n                }));\n                v = (v + modification) % 1;\n            }\n            return ret;\n        }\n        tinycolor.mix = function (color1, color2, amount) {\n            amount = amount === 0 ? 0 : amount || 50;\n            var rgb1 = tinycolor(color1).toRgb();\n            var rgb2 = tinycolor(color2).toRgb();\n            var p = amount / 100;\n            var w = p * 2 - 1;\n            var a = rgb2.a - rgb1.a;\n            var w1;\n            if (w * a == -1) {\n                w1 = w;\n            } else {\n                w1 = (w + a) / (1 + w * a);\n            }\n            w1 = (w1 + 1) / 2;\n            var w2 = 1 - w1;\n            var rgba = {\n                r: rgb2.r * w1 + rgb1.r * w2,\n                g: rgb2.g * w1 + rgb1.g * w2,\n                b: rgb2.b * w1 + rgb1.b * w2,\n                a: rgb2.a * p + rgb1.a * (1 - p)\n            };\n            return tinycolor(rgba);\n        };\n        tinycolor.readability = function (color1, color2) {\n            var c1 = tinycolor(color1);\n            var c2 = tinycolor(color2);\n            var rgb1 = c1.toRgb();\n            var rgb2 = c2.toRgb();\n            var brightnessA = c1.getBrightness();\n            var brightnessB = c2.getBrightness();\n            var colorDiff = Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) + Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) + Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b);\n            return {\n                brightness: Math.abs(brightnessA - brightnessB),\n                color: colorDiff\n            };\n        };\n        tinycolor.isReadable = function (color1, color2) {\n            var readability = tinycolor.readability(color1, color2);\n            return readability.brightness > 125 && readability.color > 500;\n        };\n        tinycolor.mostReadable = function (baseColor, colorList) {\n            var bestColor = null;\n            var bestScore = 0;\n            var bestIsReadable = false;\n            for (var i = 0; i < colorList.length; i++) {\n                var readability = tinycolor.readability(baseColor, colorList[i]);\n                var readable = readability.brightness > 125 && readability.color > 500;\n                var score = 3 * (readability.brightness / 125) + readability.color / 500;\n                if (readable && !bestIsReadable || readable && bestIsReadable && score > bestScore || !readable && !bestIsReadable && score > bestScore) {\n                    bestIsReadable = readable;\n                    bestScore = score;\n                    bestColor = tinycolor(colorList[i]);\n                }\n            }\n            return bestColor;\n        };\n        var names = tinycolor.names = {\n            aliceblue: 'f0f8ff',\n            antiquewhite: 'faebd7',\n            aqua: '0ff',\n            aquamarine: '7fffd4',\n            azure: 'f0ffff',\n            beige: 'f5f5dc',\n            bisque: 'ffe4c4',\n            black: '000',\n            blanchedalmond: 'ffebcd',\n            blue: '00f',\n            blueviolet: '8a2be2',\n            brown: 'a52a2a',\n            burlywood: 'deb887',\n            burntsienna: 'ea7e5d',\n            cadetblue: '5f9ea0',\n            chartreuse: '7fff00',\n            chocolate: 'd2691e',\n            coral: 'ff7f50',\n            cornflowerblue: '6495ed',\n            cornsilk: 'fff8dc',\n            crimson: 'dc143c',\n            cyan: '0ff',\n            darkblue: '00008b',\n            darkcyan: '008b8b',\n            darkgoldenrod: 'b8860b',\n            darkgray: 'a9a9a9',\n            darkgreen: '006400',\n            darkgrey: 'a9a9a9',\n            darkkhaki: 'bdb76b',\n            darkmagenta: '8b008b',\n            darkolivegreen: '556b2f',\n            darkorange: 'ff8c00',\n            darkorchid: '9932cc',\n            darkred: '8b0000',\n            darksalmon: 'e9967a',\n            darkseagreen: '8fbc8f',\n            darkslateblue: '483d8b',\n            darkslategray: '2f4f4f',\n            darkslategrey: '2f4f4f',\n            darkturquoise: '00ced1',\n            darkviolet: '9400d3',\n            deeppink: 'ff1493',\n            deepskyblue: '00bfff',\n            dimgray: '696969',\n            dimgrey: '696969',\n            dodgerblue: '1e90ff',\n            firebrick: 'b22222',\n            floralwhite: 'fffaf0',\n            forestgreen: '228b22',\n            fuchsia: 'f0f',\n            gainsboro: 'dcdcdc',\n            ghostwhite: 'f8f8ff',\n            gold: 'ffd700',\n            goldenrod: 'daa520',\n            gray: '808080',\n            green: '008000',\n            greenyellow: 'adff2f',\n            grey: '808080',\n            honeydew: 'f0fff0',\n            hotpink: 'ff69b4',\n            indianred: 'cd5c5c',\n            indigo: '4b0082',\n            ivory: 'fffff0',\n            khaki: 'f0e68c',\n            lavender: 'e6e6fa',\n            lavenderblush: 'fff0f5',\n            lawngreen: '7cfc00',\n            lemonchiffon: 'fffacd',\n            lightblue: 'add8e6',\n            lightcoral: 'f08080',\n            lightcyan: 'e0ffff',\n            lightgoldenrodyellow: 'fafad2',\n            lightgray: 'd3d3d3',\n            lightgreen: '90ee90',\n            lightgrey: 'd3d3d3',\n            lightpink: 'ffb6c1',\n            lightsalmon: 'ffa07a',\n            lightseagreen: '20b2aa',\n            lightskyblue: '87cefa',\n            lightslategray: '789',\n            lightslategrey: '789',\n            lightsteelblue: 'b0c4de',\n            lightyellow: 'ffffe0',\n            lime: '0f0',\n            limegreen: '32cd32',\n            linen: 'faf0e6',\n            magenta: 'f0f',\n            maroon: '800000',\n            mediumaquamarine: '66cdaa',\n            mediumblue: '0000cd',\n            mediumorchid: 'ba55d3',\n            mediumpurple: '9370db',\n            mediumseagreen: '3cb371',\n            mediumslateblue: '7b68ee',\n            mediumspringgreen: '00fa9a',\n            mediumturquoise: '48d1cc',\n            mediumvioletred: 'c71585',\n            midnightblue: '191970',\n            mintcream: 'f5fffa',\n            mistyrose: 'ffe4e1',\n            moccasin: 'ffe4b5',\n            navajowhite: 'ffdead',\n            navy: '000080',\n            oldlace: 'fdf5e6',\n            olive: '808000',\n            olivedrab: '6b8e23',\n            orange: 'ffa500',\n            orangered: 'ff4500',\n            orchid: 'da70d6',\n            palegoldenrod: 'eee8aa',\n            palegreen: '98fb98',\n            paleturquoise: 'afeeee',\n            palevioletred: 'db7093',\n            papayawhip: 'ffefd5',\n            peachpuff: 'ffdab9',\n            peru: 'cd853f',\n            pink: 'ffc0cb',\n            plum: 'dda0dd',\n            powderblue: 'b0e0e6',\n            purple: '800080',\n            rebeccapurple: '663399',\n            red: 'f00',\n            rosybrown: 'bc8f8f',\n            royalblue: '4169e1',\n            saddlebrown: '8b4513',\n            salmon: 'fa8072',\n            sandybrown: 'f4a460',\n            seagreen: '2e8b57',\n            seashell: 'fff5ee',\n            sienna: 'a0522d',\n            silver: 'c0c0c0',\n            skyblue: '87ceeb',\n            slateblue: '6a5acd',\n            slategray: '708090',\n            slategrey: '708090',\n            snow: 'fffafa',\n            springgreen: '00ff7f',\n            steelblue: '4682b4',\n            tan: 'd2b48c',\n            teal: '008080',\n            thistle: 'd8bfd8',\n            tomato: 'ff6347',\n            turquoise: '40e0d0',\n            violet: 'ee82ee',\n            wheat: 'f5deb3',\n            white: 'fff',\n            whitesmoke: 'f5f5f5',\n            yellow: 'ff0',\n            yellowgreen: '9acd32'\n        };\n        var hexNames = tinycolor.hexNames = flip(names);\n        function flip(o) {\n            var flipped = {};\n            for (var i in o) {\n                if (o.hasOwnProperty(i)) {\n                    flipped[o[i]] = i;\n                }\n            }\n            return flipped;\n        }\n        function boundAlpha(a) {\n            a = parseFloat(a);\n            if (isNaN(a) || a < 0 || a > 1) {\n                a = 1;\n            }\n            return a;\n        }\n        function bound01(n, max) {\n            if (isOnePointZero(n)) {\n                n = '100%';\n            }\n            var processPercent = isPercentage(n);\n            n = mathMin(max, mathMax(0, parseFloat(n)));\n            if (processPercent) {\n                n = parseInt(n * max, 10) / 100;\n            }\n            if (math.abs(n - max) < 0.000001) {\n                return 1;\n            }\n            return n % max / parseFloat(max);\n        }\n        function clamp01(val) {\n            return mathMin(1, mathMax(0, val));\n        }\n        function parseIntFromHex(val) {\n            return parseInt(val, 16);\n        }\n        function isOnePointZero(n) {\n            return typeof n == 'string' && n.indexOf('.') != -1 && parseFloat(n) === 1;\n        }\n        function isPercentage(n) {\n            return typeof n === 'string' && n.indexOf('%') != -1;\n        }\n        function pad2(c) {\n            return c.length == 1 ? '0' + c : '' + c;\n        }\n        function convertToPercentage(n) {\n            if (n <= 1) {\n                n = n * 100 + '%';\n            }\n            return n;\n        }\n        function convertDecimalToHex(d) {\n            return Math.round(parseFloat(d) * 255).toString(16);\n        }\n        function convertHexToDecimal(h) {\n            return parseIntFromHex(h) / 255;\n        }\n        var matchers = function () {\n            var CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n            var CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n            var CSS_UNIT = '(?:' + CSS_NUMBER + ')|(?:' + CSS_INTEGER + ')';\n            var PERMISSIVE_MATCH3 = '[\\\\s|\\\\(]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')\\\\s*\\\\)?';\n            var PERMISSIVE_MATCH4 = '[\\\\s|\\\\(]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')\\\\s*\\\\)?';\n            return {\n                rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\n                rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\n                hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\n                hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\n                hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\n                hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\n                hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n                hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n                hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n            };\n        }();\n        function stringInputToObject(color) {\n            color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();\n            var named = false;\n            if (names[color]) {\n                color = names[color];\n                named = true;\n            } else if (color == 'transparent') {\n                return {\n                    r: 0,\n                    g: 0,\n                    b: 0,\n                    a: 0,\n                    format: 'name'\n                };\n            }\n            var match;\n            if (match = matchers.rgb.exec(color)) {\n                return {\n                    r: match[1],\n                    g: match[2],\n                    b: match[3]\n                };\n            }\n            if (match = matchers.rgba.exec(color)) {\n                return {\n                    r: match[1],\n                    g: match[2],\n                    b: match[3],\n                    a: match[4]\n                };\n            }\n            if (match = matchers.hsl.exec(color)) {\n                return {\n                    h: match[1],\n                    s: match[2],\n                    l: match[3]\n                };\n            }\n            if (match = matchers.hsla.exec(color)) {\n                return {\n                    h: match[1],\n                    s: match[2],\n                    l: match[3],\n                    a: match[4]\n                };\n            }\n            if (match = matchers.hsv.exec(color)) {\n                return {\n                    h: match[1],\n                    s: match[2],\n                    v: match[3]\n                };\n            }\n            if (match = matchers.hsva.exec(color)) {\n                return {\n                    h: match[1],\n                    s: match[2],\n                    v: match[3],\n                    a: match[4]\n                };\n            }\n            if (match = matchers.hex8.exec(color)) {\n                return {\n                    a: convertHexToDecimal(match[1]),\n                    r: parseIntFromHex(match[2]),\n                    g: parseIntFromHex(match[3]),\n                    b: parseIntFromHex(match[4]),\n                    format: named ? 'name' : 'hex8'\n                };\n            }\n            if (match = matchers.hex6.exec(color)) {\n                return {\n                    r: parseIntFromHex(match[1]),\n                    g: parseIntFromHex(match[2]),\n                    b: parseIntFromHex(match[3]),\n                    format: named ? 'name' : 'hex'\n                };\n            }\n            if (match = matchers.hex3.exec(color)) {\n                return {\n                    r: parseIntFromHex(match[1] + '' + match[1]),\n                    g: parseIntFromHex(match[2] + '' + match[2]),\n                    b: parseIntFromHex(match[3] + '' + match[3]),\n                    format: named ? 'name' : 'hex'\n                };\n            }\n            return false;\n        }\n        window.tinycolor = tinycolor;\n        $(function () {\n            if ($.fn.spectrum.load) {\n                $.fn.spectrum.processNativeColorInputs();\n            }\n        });\n    };\n});\ndefine('domain_abstract/ui/InputColor',[\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/ColorPicker',\n    './Input'\n], function (Backbone, a, ColorPicker, Input) {\n    'use strict';\n    const $ = Backbone.$;\n    ColorPicker($);\n    return Input.extend({\n        template() {\n            const ppfx = this.ppfx;\n            return `\n      <div class=\"${ this.holderClass() }\"></div>\n      <div class=\"${ ppfx }field-colorp\">\n        <div class=\"${ ppfx }field-colorp-c\" data-colorp-c>\n          <div class=\"${ ppfx }checker-bg\"></div>\n        </div>\n      </div>\n    `;\n        },\n        inputClass() {\n            const ppfx = this.ppfx;\n            return `${ ppfx }field ${ ppfx }field-color`;\n        },\n        holderClass() {\n            return `${ this.ppfx }input-holder`;\n        },\n        setValue(val, opts = {}) {\n            const model = this.model;\n            const def = model.get('defaults');\n            const value = !a.isUndefined(val) ? val : !a.isUndefined(def) ? def : '';\n            const inputEl = this.getInputEl();\n            const colorEl = this.getColorEl();\n            const valueClr = value != 'none' ? value : '';\n            inputEl.value = value;\n            colorEl.get(0).style.backgroundColor = valueClr;\n            if (opts.fromTarget) {\n                colorEl.spectrum('set', valueClr);\n                this.noneColor = value == 'none';\n            }\n        },\n        getColorEl() {\n            if (!this.colorEl) {\n                const self = this;\n                const ppfx = this.ppfx;\n                var model = this.model;\n                var colorEl = $(`<div class=\"${ this.ppfx }field-color-picker\"></div>`);\n                var cpStyle = colorEl.get(0).style;\n                var elToAppend = this.em && this.em.config ? this.em.config.el : '';\n                var colorPickerConfig = this.em && this.em.getConfig && this.em.getConfig('colorPicker') || {};\n                const getColor = color => {\n                    let cl = color.getAlpha() == 1 ? color.toHexString() : color.toRgbString();\n                    return cl.replace(/ /g, '');\n                };\n                let changed = 0;\n                let previousColor;\n                this.$el.find(`[data-colorp-c]`).append(colorEl);\n                colorEl.spectrum({\n                    containerClassName: `${ ppfx }one-bg ${ ppfx }two-color`,\n                    appendTo: elToAppend || 'body',\n                    maxSelectionSize: 8,\n                    showPalette: true,\n                    showAlpha: true,\n                    chooseText: 'Ok',\n                    cancelText: '\\u2A2F',\n                    palette: [],\n                    ...colorPickerConfig,\n                    move(color) {\n                        const cl = getColor(color);\n                        cpStyle.backgroundColor = cl;\n                        model.setValueFromInput(cl, 0);\n                    },\n                    change(color) {\n                        changed = 1;\n                        const cl = getColor(color);\n                        cpStyle.backgroundColor = cl;\n                        model.setValueFromInput(0, 0);\n                        model.setValueFromInput(cl);\n                        self.noneColor = 0;\n                    },\n                    show(color) {\n                        changed = 0;\n                        previousColor = getColor(color);\n                    },\n                    hide(color) {\n                        if (!changed && previousColor) {\n                            if (self.noneColor) {\n                                previousColor = '';\n                            }\n                            cpStyle.backgroundColor = previousColor;\n                            colorEl.spectrum('set', previousColor);\n                            model.setValueFromInput(previousColor, 0);\n                        }\n                    }\n                });\n                this.colorEl = colorEl;\n            }\n            return this.colorEl;\n        },\n        render() {\n            Input.prototype.render.call(this);\n            this.getColorEl();\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/trait_manager/view/TraitColorView',[\n    './TraitView',\n    'domain_abstract/ui/InputColor'\n], function (TraitView, InputColor) {\n    'use strict';\n    return TraitView.extend({\n        templateInput: '',\n        getInputEl() {\n            if (!this.input) {\n                const model = this.model;\n                const value = this.getModelValue();\n                const inputColor = new InputColor({\n                    model,\n                    target: this.config.em,\n                    contClass: this.ppfx + 'field-color',\n                    ppfx: this.ppfx\n                });\n                const input = inputColor.render();\n                input.setValue(value, { fromTarget: 1 });\n                this.input = input.el;\n            }\n            return this.input;\n        }\n    });\n});\ndefine('skylark-grapejs/trait_manager/view/TraitButtonView',[\n    'skylark-underscore',\n    './TraitView'\n], function (a, TraitView) {\n    'use strict';\n    return TraitView.extend({\n        events: { 'click button': 'handleClick' },\n        templateInput: '',\n        handleClick() {\n            const {model, em} = this;\n            const command = model.get('command');\n            if (command) {\n                if (a.isString(command)) {\n                    em.get('Commands').run(command);\n                } else {\n                    command(em.get('Editor'), model);\n                }\n            }\n        },\n        renderLabel() {\n            if (this.model.get('label')) {\n                TraitView.prototype.renderLabel.apply(this, arguments);\n            }\n        },\n        getInputEl() {\n            const {model, ppfx} = this;\n            const {labelButton, text, full} = model.props();\n            const label = labelButton || text;\n            const className = `${ ppfx }btn`;\n            const input = `<button type=\"button\" class=\"${ className }-prim${ full ? ` ${ className }--full` : '' }\">${ label }</button>`;\n            return input;\n        }\n    });\n});\ndefine('skylark-grapejs/trait_manager/view/TraitsView',[\n    'domain_abstract/view/DomainViews',\n    './TraitView',\n    './TraitSelectView',\n    './TraitCheckboxView',\n    './TraitNumberView',\n    './TraitColorView',\n    './TraitButtonView'\n], function (DomainViews, TraitView, TraitSelectView, TraitCheckboxView, TraitNumberView, TraitColorView, TraitButtonView) {\n    'use strict';\n    return DomainViews.extend({\n        ns: 'Traits',\n        itemView: TraitView,\n        reuseView: 1,\n        itemsView: {\n            text: TraitView,\n            number: TraitNumberView,\n            select: TraitSelectView,\n            checkbox: TraitCheckboxView,\n            color: TraitColorView,\n            button: TraitButtonView\n        },\n        initialize(o = {}) {\n            const config = o.config || {};\n            this.config = config;\n            this.em = o.editor;\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.className = this.pfx + 'traits';\n            const toListen = 'component:toggled';\n            this.listenTo(this.em, toListen, this.updatedCollection);\n            this.updatedCollection();\n        },\n        updatedCollection() {\n            const ppfx = this.ppfx;\n            const comp = this.em.getSelected();\n            this.el.className = `${ this.className } ${ ppfx }one-bg ${ ppfx }two-color`;\n            this.collection = comp ? comp.get('traits') : [];\n            this.render();\n        }\n    });\n});\ndefine('skylark-grapejs/trait_manager/index',[\n    'skylark-underscore',\n    './config/config',\n    './view/TraitsView'\n], function (a, defaultOpts, TraitsView) {\n    'use strict';\n    return () => {\n        let c = {};\n        let TraitsViewer;\n        return {\n            TraitsView,\n            name: 'TraitManager',\n            getConfig() {\n                return c;\n            },\n            init(config = {}) {\n                c = config;\n                a.defaults(c, defaultOpts);\n                const ppfx = c.pStylePrefix;\n                ppfx && (c.stylePrefix = `${ ppfx }${ c.stylePrefix }`);\n                TraitsViewer = new TraitsView({\n                    collection: [],\n                    editor: c.em,\n                    config: c\n                });\n                return this;\n            },\n            postRender() {\n                const elTo = this.getConfig().appendTo;\n                if (elTo) {\n                    const el = a.isElement(elTo) ? elTo : document.querySelector(elTo);\n                    el.appendChild(this.render());\n                }\n            },\n            getTraitsViewer() {\n                return TraitsViewer;\n            },\n            addType(name, trait) {\n                var itemView = TraitsViewer.itemView;\n                TraitsViewer.itemsView[name] = itemView.extend(trait);\n            },\n            getType(name) {\n                return TraitsViewer.itemsView[name];\n            },\n            render() {\n                return TraitsViewer.render().el;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/dom_components/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: 'comp-',\n        wrapperId: 'wrapper',\n        wrapperName: 'Body',\n        wrapper: {\n            removable: false,\n            copyable: false,\n            draggable: false,\n            components: [],\n            traits: [],\n            stylable: [\n                'background',\n                'background-color',\n                'background-image',\n                'background-repeat',\n                'background-attachment',\n                'background-position',\n                'background-size'\n            ]\n        },\n        components: [],\n        draggableComponents: 1,\n        storeWrapper: 0,\n        processor: 0,\n        voidElements: [\n            'area',\n            'base',\n            'br',\n            'col',\n            'embed',\n            'hr',\n            'img',\n            'input',\n            'keygen',\n            'link',\n            'menuitem',\n            'meta',\n            'param',\n            'source',\n            'track',\n            'wbr'\n        ]\n    };\n});\ndefine('skylark-grapejs/dom_components/model/Components',[\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    'skylark-underscore'\n], function (langx,Backbone, _) {\n    'use strict';\n    let Component;\n    return Backbone.Collection.extend({\n        initialize(models, opt = {}) {\n            this.opt = opt;\n            this.listenTo(this, 'add', this.onAdd);\n            this.config = opt.config;\n            this.em = opt.em;\n            const {em} = this;\n            this.model = (attrs, options) => {\n                var model;\n                const df = opt.em.get('DomComponents').componentTypes;\n                options.em = opt.em;\n                options.config = opt.config;\n                options.componentTypes = df;\n                options.domc = opt.domc;\n                for (var it = 0; it < df.length; it++) {\n                    var dfId = df[it].id;\n                    if (dfId == attrs.type) {\n                        model = df[it].model;\n                        break;\n                    }\n                }\n                if (!model) {\n                    model = df[df.length - 1].model;\n                    em && attrs.type && em.logWarning(`Component type '${ attrs.type }' not found`, {\n                        attrs,\n                        options\n                    });\n                }\n                return new model(attrs, options);\n            };\n        },\n        parseString(value, opt = {}) {\n            const {em} = this;\n            const {domc} = this.opt;\n            const cssc = em.get('CssComposer');\n            const parsed = em.get('Parser').parseHtml(value);\n            if (!Component)\n                Component = require('./Component').default;\n            Component.checkId(parsed.html, parsed.css, domc.componentsById);\n            if (parsed.css && cssc && !opt.temporary) {\n                cssc.addCollection(parsed.css, langx.mixin({},opt,{\n                    extend: 1\n                }));\n            }\n            return parsed.html;\n        },\n        add(models, opt = {}) {\n            if (_.isString(models)) {\n                models = this.parseString(models, opt);\n            } else if (_.isArray(models)) {\n                models.forEach((item, index) => {\n                    if (_.isString(item)) {\n                        models[index] = this.parseString(item, opt);\n                    }\n                });\n            }\n            const isMult = _.isArray(models);\n            models = (isMult ? models : [models]).filter(i => i).map(model => this.processDef(model));\n            models = isMult ? models : models[0];\n            return Backbone.Collection.prototype.add.apply(this, [\n                models,\n                opt\n            ]);\n        },\n        processDef(mdl) {\n            if (mdl.cid && mdl.ccid)\n                return mdl;\n            const {em, config = {}} = this;\n            const {processor} = config;\n            let model = mdl;\n            if (processor) {\n                model = { ...model };\n                const modelPr = processor(model);\n                if (modelPr) {\n                    _.each(model, (val, key) => delete model[key]);\n                    _.extend(model, modelPr);\n                }\n            }\n            if (model.$$typeof && typeof model.props == 'object') {\n                model = { ...model };\n                model.props = { ...model.props };\n                const domc = em.get('DomComponents');\n                const parser = em.get('Parser');\n                const {parserHtml} = parser;\n                _.each(model, (value, key) => {\n                    if (!_.includes([\n                            'props',\n                            'type'\n                        ], key))\n                        delete model[key];\n                });\n                const {props} = model;\n                const comps = props.children;\n                delete props.children;\n                delete model.props;\n                const res = parserHtml.splitPropsFromAttr(props);\n                model.attributes = res.attrs;\n                if (comps) {\n                    model.components = comps;\n                }\n                if (!model.type) {\n                    model.type = 'textnode';\n                } else if (!domc.getType(model.type)) {\n                    model.tagName = model.type;\n                    delete model.type;\n                }\n                _.extend(model, res.props);\n            }\n            return model;\n        },\n        onAdd(model, c, opts = {}) {\n            const em = this.em;\n            const style = model.getStyle();\n            const avoidInline = em && em.getConfig('avoidInlineStyle');\n            if (!_.isEmpty(style) && !avoidInline && em && em.get && em.getConfig('forceClass') && !opts.temporary) {\n                const name = model.cid;\n                const rule = em.get('CssComposer').setClassRule(name, style);\n                model.setStyle({});\n                model.addClass(name);\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/trait_manager/model/Trait',[\n    'skylark-backbone',\n    'skylark-underscore'\n], function (Backbone, a) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            type: 'text',\n            label: '',\n            name: '',\n            min: '',\n            max: '',\n            unit: '',\n            step: 1,\n            value: '',\n            target: '',\n            default: '',\n            placeholder: '',\n            changeProp: 0,\n            options: []\n        },\n        initialize() {\n            const target = this.get('target');\n            const name = this.get('name');\n            const changeProp = this.get('changeProp');\n            if (target) {\n                this.target = target;\n                this.unset('target');\n                const targetEvent = changeProp ? `change:${ name }` : `change:attributes:${ name }`;\n                this.listenTo(target, targetEvent, this.targetUpdated);\n            }\n        },\n        props() {\n            return this.attributes;\n        },\n        targetUpdated() {\n            const value = this.getTargetValue();\n            this.set({ value }, { fromTarget: 1 });\n        },\n        getTargetValue() {\n            const name = this.get('name');\n            const target = this.target;\n            let value;\n            if (this.get('changeProp')) {\n                value = target.get(name);\n            } else {\n                value = target.getAttributes()[name];\n            }\n            return !a.isUndefined(value) ? value : '';\n        },\n        setTargetValue(value, opts = {}) {\n            const target = this.target;\n            const name = this.get('name');\n            if (a.isUndefined(value))\n                return;\n            let valueToSet = value;\n            if (value === 'false') {\n                valueToSet = false;\n            } else if (value === 'true') {\n                valueToSet = true;\n            }\n            if (this.get('changeProp')) {\n                target.set(name, valueToSet, opts);\n            } else {\n                const attrs = { ...target.get('attributes') };\n                attrs[name] = valueToSet;\n                target.set('attributes', attrs, opts);\n            }\n        },\n        setValueFromInput(value, final = 1, opts = {}) {\n            const toSet = { value };\n            this.set(toSet, {\n                ...opts,\n                avoidStore: 1\n            });\n            if (final) {\n                this.set('value', '', opts);\n                this.set(toSet, opts);\n            }\n        },\n        getInitValue() {\n            const target = this.target;\n            const name = this.get('name');\n            let value;\n            if (target) {\n                const attrs = target.get('attributes');\n                value = this.get('changeProp') ? target.get(name) : attrs[name];\n            }\n            return value || this.get('value') || this.get('default');\n        }\n    });\n});\ndefine('skylark-grapejs/trait_manager/model/TraitFactory',[],function () {\n    'use strict';\n    return (config = {}) => ({\n        build(props) {\n            var objs = [];\n            if (typeof props === 'string')\n                props = [props];\n            for (var i = 0; i < props.length; i++) {\n                var obj = {};\n                var prop = props[i];\n                obj.name = prop;\n                switch (prop) {\n                case 'target':\n                    obj.type = 'select';\n                    break;\n                }\n                switch (prop) {\n                case 'target':\n                    obj.options = config.optionsTarget;\n                    break;\n                }\n                objs.push(obj);\n            }\n            return objs;\n        }\n    });\n});\ndefine('skylark-grapejs/trait_manager/model/Traits',[\n    'skylark-backbone',\n    'skylark-underscore',\n    './Trait',\n    './TraitFactory'\n], function (Backbone, a, Trait, TraitFactory) {\n    'use strict';\n    return Backbone.Collection.extend({\n        model: Trait,\n        initialize(coll, options = {}) {\n            this.em = options.em || '';\n            this.listenTo(this, 'add', this.handleAdd);\n            this.listenTo(this, 'reset', this.handleReset);\n        },\n        handleReset(coll, {\n            previousModels = []\n        } = {}) {\n            previousModels.forEach(model => model.trigger('remove'));\n        },\n        handleAdd(model) {\n            const target = this.target;\n            if (target) {\n                model.target = target;\n            }\n        },\n        setTarget(target) {\n            this.target = target;\n        },\n        add(models, opt) {\n            const em = this.em;\n            if (a.isString(models) || a.isArray(models)) {\n                const tm = em && em.get && em.get('TraitManager');\n                const tmOpts = tm && tm.getConfig();\n                const tf = TraitFactory(tmOpts);\n                if (a.isString(models)) {\n                    models = [models];\n                }\n                for (var i = 0, len = models.length; i < len; i++) {\n                    const str = models[i];\n                    const model = a.isString(str) ? tf.build(str)[0] : str;\n                    model.target = this.target;\n                    models[i] = model;\n                }\n            }\n            return Backbone.Collection.prototype.add.apply(this, [\n                models,\n                opt\n            ]);\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/Component',[\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    '../../utils/mixins',\n    '../../domain_abstract/model/Styleable',\n    'skylark-backbone',\n    './Components',\n    '../../selector_manager/model/Selector',\n    '../../selector_manager/model/Selectors',\n    '../../trait_manager/model/Traits'\n], function (langx,_, b, Styleable, Backbone, Components, Selector, Selectors, Traits) {\n    'use strict';\n    const componentList = {};\n    let componentIndex = 0;\n    const escapeRegExp = str => {\n        return str.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n    };\n    const avoidInline = em => em && em.getConfig('avoidInlineStyle');\n    const eventDrag = 'component:drag';\n    const Component = Backbone.Model.extend(Styleable).extend({\n        defaults: {\n            tagName: 'div',\n            type: '',\n            name: '',\n            removable: true,\n            draggable: true,\n            droppable: true,\n            badgable: true,\n            stylable: true,\n            'stylable-require': '',\n            'style-signature': '',\n            unstylable: '',\n            highlightable: true,\n            copyable: true,\n            resizable: false,\n            editable: false,\n            layerable: true,\n            selectable: true,\n            hoverable: true,\n            void: false,\n            state: '',\n            status: '',\n            content: '',\n            icon: '',\n            style: '',\n            classes: '',\n            script: '',\n            'script-export': '',\n            attributes: '',\n            traits: [\n                'id',\n                'title'\n            ],\n            propagate: '',\n            dmode: '',\n            toolbar: null\n        },\n        init() {\n        },\n        updated(property, value, previous) {\n        },\n        removed() {\n        },\n        initialize(props = {}, opt = {}) {\n            const em = opt.em;\n            const parent = this.parent();\n            const parentAttr = parent && parent.attributes;\n            if (parentAttr && parentAttr.propagate) {\n                let newAttr = {};\n                const toPropagate = parentAttr.propagate;\n                toPropagate.undefined(prop => newAttr[prop] = parent.get(prop));\n                newAttr.propagate = toPropagate;\n                newAttr = langx.mixin({},newAttr,props);\n                this.set(newAttr);\n            }\n            const propagate = this.get('propagate');\n            propagate && this.set('propagate', _.isArray(propagate) ? propagate : [propagate]);\n            if (opt && opt.config && opt.config.voidElements.indexOf(this.get('tagName')) >= 0) {\n                this.set('void', true);\n            }\n            opt.em = em;\n            this.opt = opt;\n            this.em = em;\n            this.frame = opt.frame;\n            this.config = opt.config || {};\n            this.set('attributes', langx.mixin({},this.defaults.attributes ,this.get('attributes') ));\n            this.ccid = Component.createId(this);\n            this.initClasses();\n            this.initTraits();\n            this.initComponents();\n            this.initToolbar();\n            this.listenTo(this, 'change:script', this.scriptUpdated);\n            this.listenTo(this, 'change:tagName', this.tagUpdated);\n            this.listenTo(this, 'change:attributes', this.attrUpdated);\n            this.listenTo(this, 'change:attributes:id', this._idUpdated);\n            this.set('status', '');\n            this.views = [];\n            [\n                'classes',\n                'traits',\n                'components'\n            ].undefined(name => {\n                const events = `add remove ${ name !== 'components' ? 'change' : '' }`;\n                this.listenTo(this.get(name), events.trim(), (...args) => this.emitUpdate(name, ...args));\n            });\n            if (!opt.temporary) {\n                this.init();\n                em && em.trigger('component:create', this);\n            }\n        },\n        is(type) {\n            return !!(this.get('type') == type);\n        },\n        props() {\n            return this.attributes;\n        },\n        index() {\n            const {collection} = this;\n            return collection && collection.indexOf(this);\n        },\n        setDragMode(value) {\n            return this.set('dmode', value);\n        },\n        find(query) {\n            const result = [];\n            const $els = this.view.$el.find(query);\n            $els.each(i => {\n                const $el = $els.eq(i);\n                const model = $el.data('model');\n                model && result.push(model);\n            });\n            return result;\n        },\n        findType(id) {\n            const result = [];\n            const find = components => components.undefined(item => {\n                item.is(id) && result.push(item);\n                find(item.components());\n            });\n            find(this.components());\n            return result;\n        },\n        closest(query) {\n            const result = this.view.$el.closest(query);\n            return result.length && result.data('model');\n        },\n        tagUpdated() {\n            const coll = this.collection;\n            const at = coll.indexOf(this);\n            coll.remove(this);\n            coll.add(this, { at });\n        },\n        replaceWith(el) {\n            const coll = this.collection;\n            const at = coll.indexOf(this);\n            coll.remove(this);\n            return coll.add(el, { at });\n        },\n        attrUpdated(m, v, opts = {}) {\n            const attrs = this.get('attributes');\n            const classes = attrs.class;\n            classes && this.setClass(classes);\n            delete attrs.class;\n            const style = attrs.style;\n            style && this.setStyle(style);\n            delete attrs.style;\n            const attrPrev = { ...this.previous('attributes') };\n            const diff = b.shallowDiff(attrPrev, this.get('attributes'));\n            _.keys(diff).undefined(pr => this.trigger(`change:attributes:${ pr }`, this, diff[pr], opts));\n        },\n        setAttributes(attrs, opts = {}) {\n            this.set('attributes', { ...attrs }, opts);\n            return this;\n        },\n        addAttributes(attrs) {\n            const newAttrs = {\n                ...this.getAttributes(),\n                ...attrs\n            };\n            this.setAttributes(newAttrs);\n            return this;\n        },\n        getStyle() {\n            const em = this.em;\n            if (em && em.getConfig('avoidInlineStyle')) {\n                const state = em.get('state');\n                const cc = em.get('CssComposer');\n                const rule = cc.getIdRule(this.getId(), { state });\n                this.rule = rule;\n                if (rule) {\n                    return rule.getStyle();\n                }\n            }\n            return Styleable.getStyle.call(this);\n        },\n        setStyle(prop = {}, opts = {}) {\n            const em = this.em;\n            const {opt} = this;\n            if (em && em.getConfig('avoidInlineStyle') && !opt.temporary) {\n                const style = this.get('style') || {};\n                prop = _.isString(prop) ? this.parseStyle(prop) : prop;\n                prop = {\n                    ...prop,\n                    ...style\n                };\n                const state = em.get('state');\n                const cc = em.get('CssComposer');\n                const propOrig = this.getStyle();\n                this.rule = cc.setIdRule(this.getId(), prop, {\n                    ...opts,\n                    state\n                });\n                const diff = b.shallowDiff(propOrig, prop);\n                this.set('style', {}, { silent: 1 });\n                _.keys(diff).undefined(pr => this.trigger(`change:style:${ pr }`));\n            } else {\n                prop = Styleable.setStyle.apply(this, arguments);\n            }\n            return prop;\n        },\n        getAttributes() {\n            const {em} = this;\n            const classes = [];\n            const attributes = { ...this.get('attributes') };\n            const sm = em && em.get('SelectorManager');\n            const id = this.getId();\n            this.get('classes').undefined(cls => classes.push(_.isString(cls) ? cls : cls.get('name')));\n            classes.length && (attributes.class = classes.join(' '));\n            if (!_.has(attributes, 'id')) {\n                let hasStyle;\n                if (avoidInline(em)) {\n                    hasStyle = sm && sm.get(id, sm.Selector.TYPE_ID);\n                } else if (!_.isEmpty(this.getStyle())) {\n                    hasStyle = 1;\n                }\n                if (hasStyle) {\n                    attributes.id = this.getId();\n                }\n            }\n            return attributes;\n        },\n        addClass(classes) {\n            const added = this.em.get('SelectorManager').addClass(classes);\n            return this.get('classes').add(added);\n        },\n        setClass(classes) {\n            this.get('classes').reset();\n            return this.addClass(classes);\n        },\n        removeClass(classes) {\n            const removed = [];\n            classes = _.isArray(classes) ? classes : [classes];\n            const selectors = this.get('classes');\n            const type = Selector.TYPE_CLASS;\n            classes.undefined(classe => {\n                const classes = classe.split(' ');\n                classes.undefined(name => {\n                    const selector = selectors.where({\n                        name,\n                        type\n                    })[0];\n                    selector && removed.push(selectors.remove(selector));\n                });\n            });\n            return removed;\n        },\n        getClasses() {\n            const attr = this.getAttributes();\n            const classStr = attr.class;\n            return classStr ? classStr.split(' ') : [];\n        },\n        initClasses() {\n            const event = 'change:classes';\n            const toListen = [\n                this,\n                event,\n                this.initClasses\n            ];\n            const cls = this.get('classes') || [];\n            const clsArr = _.isString(cls) ? cls.split(' ') : cls;\n            this.stopListening(...toListen);\n            const classes = this.normalizeClasses(clsArr);\n            const selectors = new Selectors([]);\n            this.set('classes', selectors);\n            selectors.add(classes);\n            this.listenTo(...toListen);\n            return this;\n        },\n        initComponents() {\n            const event = 'change:components';\n            const toListen = [\n                this,\n                event,\n                this.initComponents\n            ];\n            this.stopListening(...toListen);\n            const comps = new Components(null, this.opt);\n            comps.parent = this;\n            const components = this.get('components');\n            const addChild = !this.opt.avoidChildren;\n            this.set('components', comps);\n            addChild && comps.add(_.isFunction(components) ? components(this) : components);\n            this.listenTo(...toListen);\n            return this;\n        },\n        initTraits(changed) {\n            const {em} = this;\n            const event = 'change:traits';\n            const toListen = [\n                this,\n                event,\n                this.initTraits\n            ];\n            this.stopListening(...toListen);\n            this.loadTraits();\n            const attrs = { ...this.get('attributes') };\n            const traits = this.get('traits');\n            traits.each(trait => {\n                if (!trait.get('changeProp')) {\n                    const name = trait.get('name');\n                    const value = trait.getInitValue();\n                    if (name && value)\n                        attrs[name] = value;\n                }\n            });\n            traits.length && this.set('attributes', attrs);\n            this.listenTo(...toListen);\n            changed && em && em.trigger('component:toggled');\n            return this;\n        },\n        append(components, opts = {}) {\n            const result = this.components().add(components, opts);\n            return _.isArray(result) ? result : [result];\n        },\n        components(components) {\n            const coll = this.get('components');\n            if (_.isUndefined(components)) {\n                return coll;\n            } else {\n                coll.reset();\n                return components && this.append(components);\n            }\n        },\n        parent() {\n            const coll = this.collection;\n            return coll && coll.parent;\n        },\n        scriptUpdated() {\n            this.set('scriptUpdated', 1);\n        },\n        initToolbar() {\n            const {em} = this;\n            const model = this;\n            const ppfx = em && em.getConfig('stylePrefix') || '';\n            if (!model.get('toolbar')) {\n                var tb = [];\n                if (model.collection) {\n                    tb.push({\n                        attributes: { class: 'fa fa-arrow-up' },\n                        command: ed => ed.runCommand('core:component-exit', { force: 1 })\n                    });\n                }\n                if (model.get('draggable')) {\n                    tb.push({\n                        attributes: {\n                            class: `fa fa-arrows ${ ppfx }no-touch-actions`,\n                            draggable: true\n                        },\n                        command: 'tlb-move'\n                    });\n                }\n                if (model.get('copyable')) {\n                    tb.push({\n                        attributes: { class: 'fa fa-clone' },\n                        command: 'tlb-clone'\n                    });\n                }\n                if (model.get('removable')) {\n                    tb.push({\n                        attributes: { class: 'fa fa-trash-o' },\n                        command: 'tlb-delete'\n                    });\n                }\n                model.set('toolbar', tb);\n            }\n        },\n        loadTraits(traits, opts = {}) {\n            traits = traits || this.get('traits');\n            traits = _.isFunction(traits) ? traits(this) : traits;\n            if (!(traits instanceof Traits)) {\n                const trt = new Traits([], this.opt);\n                trt.setTarget(this);\n                if (traits.length) {\n                    traits.undefined(tr => tr.attributes && delete tr.attributes.value);\n                    trt.add(traits);\n                }\n                this.set('traits', trt, opts);\n            }\n            return this;\n        },\n        getTrait(id) {\n            return this.get('traits').filter(trait => {\n                return trait.get('id') === id || trait.get('name') === id;\n            })[0];\n        },\n        updateTrait(id, props) {\n            const {em} = this;\n            const trait = this.getTrait(id);\n            trait && trait.set(props);\n            em && em.trigger('component:toggled');\n            return this;\n        },\n        getTraitIndex(id) {\n            const trait = this.getTrait(id);\n            return trait ? this.get('traits').indexOf(trait) : trait;\n        },\n        removeTrait(id) {\n            const {em} = this;\n            const ids = _.isArray(id) ? id : [id];\n            const toRemove = ids.map(id => this.getTrait(id));\n            const removed = this.get('traits').remove(toRemove);\n            em && em.trigger('component:toggled');\n            return removed;\n        },\n        addTrait(trait, opts = {}) {\n            const {em} = this;\n            const added = this.get('traits').add(trait, opts);\n            em && em.trigger('component:toggled');\n            return added;\n        },\n        normalizeClasses(arr) {\n            var res = [];\n            const em = this.em;\n            if (!em)\n                return;\n            var clm = em.get('SelectorManager');\n            if (!clm)\n                return;\n            arr.undefined(val => {\n                var name = '';\n                if (typeof val === 'string')\n                    name = val;\n                else\n                    name = val.name;\n                var model = clm.add(name);\n                res.push(model);\n            });\n            return res;\n        },\n        clone() {\n            const em = this.em;\n            const style = this.getStyle();\n            const attr = { ...this.attributes };\n            const opts = { ...this.opt };\n            attr.attributes = { ...attr.attributes };\n            delete attr.attributes.id;\n            attr.components = [];\n            attr.classes = [];\n            attr.traits = [];\n            this.get('components').each((md, i) => {\n                attr.components[i] = md.clone();\n            });\n            this.get('traits').each((md, i) => {\n                attr.traits[i] = md.clone();\n            });\n            this.get('classes').each((md, i) => {\n                attr.classes[i] = md.get('name');\n            });\n            attr.status = '';\n            attr.view = '';\n            opts.collection = null;\n            if (em && em.getConfig('avoidInlineStyle') && !_.isEmpty(style)) {\n                attr.style = style;\n            }\n            const cloned = new this.constructor(attr, opts);\n            const event = 'component:clone';\n            em && em.trigger(event, cloned);\n            this.trigger(event, cloned);\n            return cloned;\n        },\n        getName() {\n            const {em} = this;\n            const {type, tagName} = this.attributes;\n            const cName = this.get('name');\n            const isDiv = tagName == 'div';\n            const tag = isDiv ? 'box' : tagName;\n            const defName = type || tag;\n            const nameTag = !type && tagName && !isDiv && tagName;\n            const i18nPfx = 'domComponents.names.';\n            const i18nName = cName && em && em.t(`${ i18nPfx }${ cName }`);\n            const i18nNameTag = nameTag && em && em.t(`${ i18nPfx }${ nameTag }`);\n            const i18nDefName = em && (em.t(`${ i18nPfx }${ type }`) || em.t(`${ i18nPfx }${ tagName }`));\n            return this.get('custom-name') || i18nName || cName || i18nNameTag || b.capitalize(nameTag) || i18nDefName || b.capitalize(defName);\n        },\n        getIcon() {\n            let icon = this.get('icon');\n            return icon ? icon + ' ' : '';\n        },\n        toHTML(opts = {}) {\n            const model = this;\n            const attrs = [];\n            const customTag = opts.tag;\n            const tag = customTag || model.get('tagName');\n            const sTag = model.get('void');\n            const customAttr = opts.attributes;\n            let attributes = this.getAttrToHTML();\n            delete opts.tag;\n            if (customAttr) {\n                if (_.isFunction(customAttr)) {\n                    attributes = customAttr(model, attributes) || {};\n                } else if (_.isObject(customAttr)) {\n                    attributes = customAttr;\n                }\n            }\n            for (let attr in attributes) {\n                const val = attributes[attr];\n                const value = _.isString(val) ? val.replace(/\"/g, '&quot;') : val;\n                if (!_.isUndefined(value)) {\n                    if (_.isBoolean(value)) {\n                        value && attrs.push(attr);\n                    } else {\n                        attrs.push(`${ attr }=\"${ value }\"`);\n                    }\n                }\n            }\n            let attrString = attrs.length ? ` ${ attrs.join(' ') }` : '';\n            let code = `<${ tag }${ attrString }${ sTag ? '/' : '' }>${ model.get('content') }`;\n            model.get('components').each(comp => code += comp.toHTML(opts));\n            !sTag && (code += `</${ tag }>`);\n            return code;\n        },\n        getAttrToHTML() {\n            var attr = this.getAttributes();\n            delete attr.style;\n            return attr;\n        },\n        toJSON(...args) {\n            const obj = Backbone.Model.prototype.toJSON.apply(this, args);\n            obj.attributes = this.getAttributes();\n            delete obj.attributes.class;\n            delete obj.toolbar;\n            delete obj.traits;\n            if (this.em.getConfig('avoidDefaults')) {\n                const defaults = _.result(this, 'defaults');\n                _.forEach(defaults, (value, key) => {\n                    if ([\n                            'type',\n                            'content'\n                        ].indexOf(key) === -1 && obj[key] === value) {\n                        delete obj[key];\n                    }\n                });\n                if (_.isEmpty(obj.type)) {\n                    delete obj.type;\n                }\n                _.forEach([\n                    'attributes',\n                    'style'\n                ], prop => {\n                    if (_.isEmpty(defaults[prop]) && _.isEmpty(obj[prop])) {\n                        delete obj[prop];\n                    }\n                });\n                _.forEach([\n                    'classes',\n                    'components'\n                ], prop => {\n                    if (_.isEmpty(defaults[prop]) && !obj[prop].length) {\n                        delete obj[prop];\n                    }\n                });\n            }\n            return obj;\n        },\n        getId() {\n            let attrs = this.get('attributes') || {};\n            return attrs.id || this.ccid || this.cid;\n        },\n        setId(id, opts) {\n            const attrs = { ...this.get('attributes') };\n            attrs.id = id;\n            this.set('attributes', attrs, opts);\n            return this;\n        },\n        getEl(frame) {\n            const view = this.getView(frame);\n            return view && view.el;\n        },\n        getView(frame) {\n            let {view, views} = this;\n            if (frame) {\n                view = views.filter(view => view._getFrame() === frame.view)[0];\n            }\n            return view;\n        },\n        getCurrentView() {\n            const frame = (this.em.get('currentFrame') || {}).model;\n            return this.getView(frame);\n        },\n        getScriptString(script) {\n            var scr = script || this.get('script');\n            if (!scr) {\n                return scr;\n            }\n            if (typeof scr == 'function') {\n                var scrStr = scr.toString().trim();\n                scrStr = scrStr.replace(/^function[\\s\\w]*\\(\\)\\s?\\{/, '').replace(/\\}$/, '');\n                scr = scrStr.trim();\n            }\n            var config = this.em.getConfig();\n            var tagVarStart = escapeRegExp(config.tagVarStart || '{[ ');\n            var tagVarEnd = escapeRegExp(config.tagVarEnd || ' ]}');\n            var reg = new RegExp(`${ tagVarStart }([\\\\w\\\\d-]*)${ tagVarEnd }`, 'g');\n            scr = scr.replace(reg, (match, v) => {\n                this.scriptUpdated();\n                const result = this.attributes[v] || '';\n                return _.isArray(result) || typeof result == 'object' ? JSON.stringify(result) : result;\n            });\n            return scr;\n        },\n        emitUpdate(property, ...args) {\n            const em = this.em;\n            const event = 'component:update' + (property ? `:${ property }` : '');\n            property && this.updated(property, property && this.get(property), property && this.previous(property), ...args);\n            this.trigger(event, ...args);\n            em && em.trigger(event, this, ...args);\n        },\n        onAll(clb) {\n            if (_.isFunction(clb)) {\n                clb(this);\n                this.components().undefined(model => model.onAll(clb));\n            }\n            return this;\n        },\n        remove() {\n            const coll = this.collection;\n            return coll && coll.remove(this);\n        },\n        resetId(opts = {}) {\n            const {em} = this;\n            const oldId = this.getId();\n            if (!oldId)\n                return;\n            const newId = Component.createId(this);\n            this.setId(newId);\n            const rule = em && em.get('CssComposer').getIdRule(oldId);\n            const selector = rule && rule.get('selectors').at(0);\n            selector && selector.set('name', newId);\n            return this;\n        },\n        _getStyleRule({id} = {}) {\n            const {em} = this;\n            const idS = id || this.getId();\n            return em && em.get('CssComposer').getIdRule(idS);\n        },\n        _getStyleSelector(opts) {\n            const rule = this._getStyleRule(opts);\n            return rule && rule.get('selectors').at(0);\n        },\n        _idUpdated(m, v, opts = {}) {\n            if (opts.idUpdate)\n                return;\n            const {ccid} = this;\n            const {id} = this.get('attributes') || {};\n            const idPrev = (this.previous('attributes') || {}).id || ccid;\n            const list = Component.getList(this);\n            if (list[id]) {\n                return this.setId(idPrev, { idUpdate: 1 });\n            }\n            delete list[idPrev];\n            list[id] = this;\n            this.ccid = id;\n            const selector = this._getStyleSelector({ id: idPrev });\n            selector && selector.set({\n                name: id,\n                label: id\n            });\n        }\n    }, {\n        isComponent(el) {\n            return { tagName: el.tagName ? el.tagName.toLowerCase() : '' };\n        },\n        createId(model) {\n            const list = Component.getList(model);\n            let {id} = model.get('attributes');\n            let nextId;\n            if (id) {\n                nextId = Component.getIncrementId(id, list);\n                model.setId(nextId);\n            } else {\n                nextId = Component.getNewId(list);\n            }\n            list[nextId] = model;\n            return nextId;\n        },\n        getNewId(list) {\n            const count = Object.undefined(list).length;\n            const ilen = count.toString().length + 2;\n            const uid = (Math.random() + 1.1).toString(36).slice(-ilen);\n            let newId = `i${ uid }`;\n            while (list[newId]) {\n                newId = Component.getNewId(list);\n            }\n            return newId;\n        },\n        getIncrementId(id, list) {\n            let counter = 1;\n            let newId = id;\n            while (list[newId]) {\n                counter++;\n                newId = `${ id }-${ counter }`;\n            }\n            return newId;\n        },\n        getList(model) {\n            const domc = model.opt && model.opt.domc;\n            return domc ? domc.componentsById : {};\n        },\n        checkId(components, styles = [], list = {}) {\n            const comps = _.isArray(components) ? components : [components];\n            comps.undefined(comp => {\n                const {attributes = {}, components} = comp;\n                const {id} = attributes;\n                if (id && list[id]) {\n                    const newId = Component.getIncrementId(id, list);\n                    attributes.id = newId;\n                    _.isArray(styles) && styles.undefined(style => {\n                        const {selectors} = style;\n                        selectors.undefined((sel, idx) => {\n                            if (sel === `#${ id }`)\n                                selectors[idx] = `#${ newId }`;\n                        });\n                    });\n                }\n                components && Component.checkId(components, styles, list);\n            });\n        }\n    });\n    \n    Component.eventDrag = eventDrag;\n    \n    return Component;\n});\ndefine('skylark-grapejs/dom_components/view/ComponentsView',[\n    'skylark-backbone',\n    'skylark-underscore'\n], function (Backbone, a) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize(o) {\n            this.opts = o || {};\n            this.config = o.config || {};\n            this.em = this.config.em;\n            const coll = this.collection;\n            this.listenTo(coll, 'add', this.addTo);\n            this.listenTo(coll, 'reset', this.resetChildren);\n            this.listenTo(coll, 'remove', this.removeChildren);\n        },\n        removeChildren(removed, coll, opts = {}) {\n            const {em} = this.config;\n            const tempRemove = opts.temporary;\n            removed.views.forEach(view => {\n                if (!view)\n                    return;\n                view.remove.apply(view);\n                const {childrenView, scriptContainer} = view;\n                childrenView && childrenView.stopListening();\n                scriptContainer && scriptContainer.remove();\n            });\n            removed.components().forEach(it => this.removeChildren(it, coll, opts));\n            if (em && !tempRemove) {\n                const id = removed.getId();\n                const domc = em.get('DomComponents');\n                delete domc.componentsById[id];\n                const allRules = em.get('CssComposer').getAll();\n                allRules.remove(allRules.filter(rule => rule.getSelectors().getFullString() === `#${ id }`));\n                if (!removed.opt.temporary) {\n                    const cm = em.get('Commands');\n                    const hasSign = removed.get('style-signature');\n                    const optStyle = { target: removed };\n                    hasSign && cm.run('core:component-style-clear', optStyle);\n                    removed.removed();\n                    em.trigger('component:remove', removed);\n                }\n            }\n        },\n        addTo(model, coll = {}, opts = {}) {\n            const em = this.config.em;\n            const i = this.collection.indexOf(model);\n            this.addToCollection(model, null, i);\n            if (em && !opts.temporary) {\n                const triggerAdd = model => {\n                    em.trigger('component:add', model);\n                    model.components().forEach(comp => triggerAdd(comp));\n                };\n                triggerAdd(model);\n            }\n        },\n        addToCollection(model, fragmentEl, index) {\n            if (!this.compView)\n                this.compView = require('./ComponentView').default;\n            const {config, opts, em} = this;\n            const fragment = fragmentEl || null;\n            const dt = opts.componentTypes || em && em.get('DomComponents').getTypes();\n            const type = model.get('type');\n            let viewObject = this.compView;\n            for (let it = 0; it < dt.length; it++) {\n                if (dt[it].id == type) {\n                    viewObject = dt[it].view;\n                    break;\n                }\n            }\n            const view = new viewObject({\n                model,\n                config,\n                componentTypes: dt\n            });\n            let rendered = view.render().el;\n            if (fragment) {\n                fragment.appendChild(rendered);\n            } else {\n                const parent = this.parentEl;\n                const children = parent.childNodes;\n                if (!a.isUndefined(index)) {\n                    const lastIndex = children.length == index;\n                    if (lastIndex) {\n                        index--;\n                    }\n                    if (lastIndex || !children.length) {\n                        parent.appendChild(rendered);\n                    } else {\n                        parent.insertBefore(rendered, children[index]);\n                    }\n                } else {\n                    parent.appendChild(rendered);\n                }\n            }\n            return rendered;\n        },\n        resetChildren() {\n            this.parentEl.innerHTML = '';\n            this.collection.each(model => this.addToCollection(model));\n        },\n        render(parent) {\n            const el = this.el;\n            const frag = document.createDocumentFragment();\n            this.parentEl = parent || this.el;\n            this.collection.each(model => this.addToCollection(model, frag));\n            el.innerHTML = '';\n            el.appendChild(frag);\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentView',[\n    'skylark-backbone',\n    'skylark-underscore',\n    '../model/Components',\n    './ComponentsView',\n    '../../selector_manager/model/Selectors',\n    '../../utils/dom',\n    '../../utils/mixins'\n], function (Backbone, a, Components, ComponentsView, Selectors, b, c) {\n    'use strict';\n    return Backbone.View.extend({\n        className() {\n            return this.getClasses();\n        },\n        tagName() {\n            return this.model.get('tagName');\n        },\n        initialize(opt = {}) {\n            const model = this.model;\n            const config = opt.config || {};\n            const em = config.em;\n            const modelOpt = model.opt || {};\n            const {$el, el} = this;\n            const {draggableComponents} = config;\n            this.opts = opt;\n            this.modelOpt = modelOpt;\n            this.config = config;\n            this.em = em || '';\n            this.pfx = config.stylePrefix || '';\n            this.ppfx = config.pStylePrefix || '';\n            this.attr = model.get('attributes');\n            this.classe = this.attr.class || [];\n            this.listenTo(model, 'change:style', this.updateStyle);\n            this.listenTo(model, 'change:attributes change:_innertext', this.renderAttributes);\n            this.listenTo(model, 'change:highlightable', this.updateHighlight);\n            this.listenTo(model, 'change:status', this.updateStatus);\n            this.listenTo(model, 'change:script', this.reset);\n            this.listenTo(model, 'change:content', this.updateContent);\n            this.listenTo(model, 'change', this.handleChange);\n            this.listenTo(model, 'active', this.onActive);\n            this.listenTo(model, 'disable', this.onDisable);\n            $el.data('model', model);\n            c.setViewEl(el, this);\n            model.view = this;\n            this._getFrame() && model.views.push(this);\n            this.initClasses();\n            this.initComponents({ avoidRender: 1 });\n            this.events = {\n                ...this.events,\n                ...draggableComponents && { dragstart: 'handleDragStart' }\n            };\n            this.delegateEvents();\n            !modelOpt.temporary && this.init(this._clbObj());\n        },\n        _clbObj() {\n            const {em, model, el} = this;\n            return {\n                editor: em && em.getEditor(),\n                model,\n                el\n            };\n        },\n        init() {\n        },\n        removed() {\n        },\n        onActive() {\n        },\n        onDisable() {\n        },\n        remove() {\n            Backbone.View.prototype.remove.apply(this, arguments);\n            const {model} = this;\n            const frame = this._getFrame() || {};\n            const frameM = frame.model;\n            model.components().forEach(comp => {\n                const view = comp.getView(frameM);\n                view && view.remove();\n            });\n            const {views} = model;\n            views.splice(views.indexOf(this), 1);\n            this.removed(this._clbObj());\n            return this;\n        },\n        handleDragStart(event) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.em.get('Commands').run('tlb-move', {\n                target: this.model,\n                event\n            });\n        },\n        initClasses() {\n            const {model} = this;\n            const event = 'change:classes';\n            const classes = model.get('classes');\n            if (classes instanceof Selectors) {\n                this.stopListening(model, event, this.initClasses);\n                this.listenTo(model, event, this.initClasses);\n                this.listenTo(classes, 'add remove change', this.updateClasses);\n                classes.length && this.importClasses();\n            }\n        },\n        initComponents(opts = {}) {\n            const {model, $el, childrenView} = this;\n            const event = 'change:components';\n            const comps = model.get('components');\n            const toListen = [\n                model,\n                event,\n                this.initComponents\n            ];\n            if (comps instanceof Components) {\n                $el.data('collection', comps);\n                childrenView && childrenView.remove();\n                this.stopListening(...toListen);\n                !opts.avoidRender && this.renderChildren();\n                this.listenTo(...toListen);\n            }\n        },\n        handleChange() {\n            const {model} = this;\n            const chgArr = a.keys(model.changed);\n            if (chgArr.length === 1 && chgArr[0] === 'status')\n                return;\n            model.emitUpdate();\n            for (let prop in model.changed) {\n                model.emitUpdate(prop);\n            }\n        },\n        importClasses() {\n            var clm = this.config.em.get('SelectorManager');\n            if (clm) {\n                this.model.get('classes').undefined(m => {\n                    clm.add(m.get('name'));\n                });\n            }\n        },\n        updateStatus(opts = {}) {\n            const em = this.em;\n            const el = this.el;\n            const status = this.model.get('status');\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            const selectedCls = `${ ppfx }selected`;\n            const selectedParentCls = `${ selectedCls }-parent`;\n            const freezedCls = `${ ppfx }freezed`;\n            const hoveredCls = `${ ppfx }hovered`;\n            const toRemove = [\n                selectedCls,\n                selectedParentCls,\n                freezedCls,\n                hoveredCls\n            ];\n            this.$el.removeClass(toRemove.join(' '));\n            var actualCls = el.getAttribute('class') || '';\n            var cls = '';\n            switch (status) {\n            case 'selected':\n                cls = `${ actualCls } ${ selectedCls }`;\n                break;\n            case 'selected-parent':\n                cls = `${ actualCls } ${ selectedParentCls }`;\n                break;\n            case 'freezed':\n                cls = `${ actualCls } ${ freezedCls }`;\n                break;\n            case 'freezed-selected':\n                cls = `${ actualCls } ${ freezedCls } ${ selectedCls }`;\n                break;\n            case 'hovered':\n                cls = !opts.avoidHover ? `${ actualCls } ${ hoveredCls }` : '';\n                break;\n            }\n            cls = cls.trim();\n            cls && el.setAttribute('class', cls);\n        },\n        updateHighlight() {\n            const hl = this.model.get('highlightable');\n            this.setAttribute('data-highlightable', hl ? 1 : '');\n        },\n        updateStyle() {\n            const {model, em, el} = this;\n            if (em && em.getConfig('avoidInlineStyle')) {\n                if (model.get('_innertext')) {\n                    el.removeAttribute('id');\n                } else {\n                    el.id = model.getId();\n                }\n                const style = model.getStyle();\n                !a.isEmpty(style) && model.setStyle(style);\n            } else {\n                this.setAttribute('style', model.styleToString());\n            }\n        },\n        updateClasses() {\n            const str = this.model.get('classes').pluck('name').join(' ');\n            this.setAttribute('class', str);\n            this.updateStatus();\n        },\n        setAttribute(name, value) {\n            const el = this.$el;\n            value ? el.attr(name, value) : el.removeAttr(name);\n        },\n        getClasses() {\n            return this.model.getClasses().join(' ');\n        },\n        updateAttributes() {\n            const attrs = [];\n            const {model, $el, el, config} = this;\n            const {highlightable, textable, type, _innertext} = model.attributes;\n            const {draggableComponents} = config;\n            const defaultAttr = {\n                'data-gjs-type': type || 'default',\n                ...draggableComponents && !_innertext ? { draggable: true } : {},\n                ...highlightable ? { 'data-highlightable': 1 } : {},\n                ...textable ? {\n                    contenteditable: 'false',\n                    'data-gjs-textable': 'true'\n                } : {}\n            };\n            a.each(el.attributes, attr => attrs.push(attr.nodeName));\n            attrs.forEach(attr => $el.removeAttr(attr));\n            const attr = {\n                ...defaultAttr,\n                ...model.getAttributes()\n            };\n            a.keys(attr).forEach(key => attr[key] === false && delete attr[key]);\n            $el.attr(attr);\n            this.updateStyle();\n        },\n        updateContent() {\n            this.getChildrenContainer().innerHTML = this.model.get('content');\n        },\n        prevDef(e) {\n            e.preventDefault();\n        },\n        updateScript() {\n            const {model, em} = this;\n            if (!model.get('script'))\n                return;\n            em && em.get('Canvas').getCanvasView().updateScript(this);\n        },\n        getChildrenContainer() {\n            var container = this.el;\n            if (typeof this.getChildrenSelector == 'function') {\n                container = this.el.querySelector(this.getChildrenSelector());\n            } else if (typeof this.getTemplate == 'function') {\n            }\n            return container;\n        },\n        getOffsetRect() {\n            const rect = {};\n            const target = this.el;\n            let gtop = 0;\n            let gleft = 0;\n            const assignRect = el => {\n                const {offsetParent} = el;\n                if (offsetParent) {\n                    gtop += offsetParent.offsetTop;\n                    gleft += offsetParent.offsetLeft;\n                    assignRect(offsetParent);\n                } else {\n                    rect.top = target.offsetTop + gtop;\n                    rect.left = target.offsetLeft + gleft;\n                    rect.bottom = rect.top + target.offsetHeight;\n                    rect.right = rect.left + target.offsetWidth;\n                }\n            };\n            assignRect(target);\n            return rect;\n        },\n        isInViewport({rect} = {}) {\n            const {el} = this;\n            const elDoc = el.ownerDocument;\n            const {body} = elDoc;\n            const {frameElement} = elDoc.defaultView;\n            const {top, left} = rect || this.getOffsetRect();\n            const frame = this._getFrame().getOffsetRect();\n            return top >= frame.scrollTop && left >= frame.scrollLeft && top <= frame.scrollBottom && left <= frameElement.offsetWidth + body.scrollLeft;\n        },\n        scrollIntoView(opts = {}) {\n            const rect = this.getOffsetRect();\n            const isInViewport = this.isInViewport({ rect });\n            if (!isInViewport || opts.force) {\n                const {el} = this;\n                if (opts.behavior !== 'smooth') {\n                    el.ownerDocument.defaultView.scrollTo(0, rect.top);\n                } else {\n                    el.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'nearest',\n                        ...opts\n                    });\n                }\n            }\n        },\n        reset() {\n            const {el} = this;\n            this.el = '';\n            this._ensureElement();\n            this._setData();\n            b.replaceWith(el, this.el);\n            this.render();\n        },\n        _setData() {\n            const {model} = this;\n            const collection = model.components();\n            const view = this;\n            this.$el.data({\n                model,\n                collection,\n                view\n            });\n        },\n        _getFrame() {\n            return this.config.frameView;\n        },\n        renderChildren() {\n            this.updateContent();\n            const container = this.getChildrenContainer();\n            const view = new ComponentsView({\n                collection: this.model.get('components'),\n                config: this.config,\n                componentTypes: this.opts.componentTypes\n            });\n            view.render(container);\n            this.childrenView = view;\n            const childNodes = Array.prototype.slice.call(view.el.childNodes);\n            for (var i = 0, len = childNodes.length; i < len; i++) {\n                container.appendChild(childNodes.shift());\n            }\n        },\n        renderAttributes() {\n            this.updateAttributes();\n            this.updateClasses();\n        },\n        render() {\n            this.renderAttributes();\n            if (this.modelOpt.temporary)\n                return this;\n            this.renderChildren();\n            this.updateScript();\n            this.postRender();\n            return this;\n        },\n        postRender() {\n            const {em, model, modelOpt} = this;\n            if (!modelOpt.temporary) {\n                this.onRender(this._clbObj());\n                em && em.trigger('component:mount', model);\n            }\n        },\n        onRender() {\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentTableCell',['./Component'], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            type: 'cell',\n            tagName: 'td',\n            draggable: ['tr']\n        }\n    }, {\n        isComponent(el) {\n            let result = '';\n            const tag = el.tagName;\n            if (tag == 'TD' || tag == 'TH') {\n                result = {\n                    type: 'cell',\n                    tagName: tag.toLowerCase()\n                };\n            }\n            return result;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentTableCellView',['./ComponentView'], function (ComponentView) {\n    'use strict';\n    return ComponentView.extend({});\n});\ndefine('skylark-grapejs/dom_components/model/ComponentTableRow',['./Component'], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            type: 'row',\n            tagName: 'tr',\n            draggable: [\n                'thead',\n                'tbody',\n                'tfoot'\n            ],\n            droppable: [\n                'th',\n                'td'\n            ]\n        },\n        initialize(o, opt) {\n            Component.prototype.initialize.apply(this, arguments);\n            const cells = [];\n            const components = this.get('components');\n            components.each(model => model.is('cell') && cells.push(model));\n            components.reset(cells);\n        }\n    }, {\n        isComponent(el) {\n            let result = '';\n            if (el.tagName == 'TR') {\n                result = { type: 'row' };\n            }\n            return result;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentTableRowView',['./ComponentView'], function (ComponentView) {\n    'use strict';\n    return ComponentView.extend({});\n});\ndefine('skylark-grapejs/dom_components/model/ComponentTable',['./Component'], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            type: 'table',\n            tagName: 'table',\n            droppable: [\n                'tbody',\n                'thead',\n                'tfoot'\n            ]\n        },\n        initialize(o, opt) {\n            Component.prototype.initialize.apply(this, arguments);\n            const components = this.get('components');\n            !components.length && components.add({ type: 'tbody' });\n        }\n    }, {\n        isComponent(el) {\n            let result = '';\n            if (el.tagName == 'TABLE') {\n                result = { type: 'table' };\n            }\n            return result;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentTableView',['./ComponentView'], function (ComponentView) {\n    'use strict';\n    return ComponentView.extend({ events: {} });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentTableBody',['./Component'], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            type: 'tbody',\n            tagName: 'tbody',\n            draggable: ['table'],\n            droppable: ['tr'],\n            columns: 1,\n            rows: 1\n        },\n        initialize(o, opt) {\n            Component.prototype.initialize.apply(this, arguments);\n            const components = this.get('components');\n            let columns = this.get('columns');\n            let rows = this.get('rows');\n            if (!components.length) {\n                const rowsToAdd = [];\n                while (rows--) {\n                    const columnsToAdd = [];\n                    let clm = columns;\n                    while (clm--) {\n                        columnsToAdd.push({\n                            type: 'cell',\n                            classes: ['cell']\n                        });\n                    }\n                    rowsToAdd.push({\n                        type: 'row',\n                        classes: ['row'],\n                        components: columnsToAdd\n                    });\n                }\n                components.add(rowsToAdd);\n            }\n        }\n    }, {\n        isComponent(el) {\n            let result = '';\n            if (el.tagName == 'TBODY') {\n                result = { type: 'tbody' };\n            }\n            return result;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentTableHead',['./ComponentTableBody'], function (ComponentTableBody) {\n    'use strict';\n    return ComponentTableBody.extend({\n        defaults: {\n            ...ComponentTableBody.prototype.defaults,\n            type: 'thead',\n            tagName: 'thead'\n        }\n    }, {\n        isComponent(el) {\n            let result = '';\n            if (el.tagName == 'THEAD') {\n                result = { type: 'thead' };\n            }\n            return result;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentTableHeadView',['./ComponentView'], function (ComponentView) {\n    'use strict';\n    return ComponentView.extend({});\n});\ndefine('skylark-grapejs/dom_components/view/ComponentTableBodyView',['./ComponentView'], function (ComponentView) {\n    'use strict';\n    return ComponentView.extend({});\n});\ndefine('skylark-grapejs/dom_components/model/ComponentTableFoot',['./ComponentTableBody'], function (ComponentTableBody) {\n    'use strict';\n    return ComponentTableBody.extend({\n        defaults: {\n            ...ComponentTableBody.prototype.defaults,\n            type: 'tfoot',\n            tagName: 'tfoot'\n        }\n    }, {\n        isComponent(el) {\n            let result = '';\n            if (el.tagName == 'TFOOT') {\n                result = { type: 'tfoot' };\n            }\n            return result;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentTableFootView',['./ComponentView'], function (ComponentView) {\n    'use strict';\n    return ComponentView.extend({});\n});\ndefine('skylark-grapejs/dom_components/model/ComponentImage',[\n    \"skylark-langx\",\n    'skylark-underscore',\n    './Component'\n], function (langx,_, Component) {\n    'use strict';\n    const svgAttrs = 'xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" viewBox=\"0 0 24 24\" style=\"fill: rgba(0,0,0,0.15); transform: scale(0.75)\"';\n    return Component.extend({\n        defaults: langx.mixin({},Component.prototype.defaults,{\n            type: 'image',\n            tagName: 'img',\n            void: 1,\n            droppable: 0,\n            editable: 1,\n            highlightable: 0,\n            resizable: { ratioDefault: 1 },\n            traits: ['alt'],\n            src: `<svg ${ svgAttrs }>\n        <path d=\"M8.5 13.5l2.5 3 3.5-4.5 4.5 6H5m16 1V5a2 2 0 0 0-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2z\"></path>\n      </svg>`,\n            fallback: `<svg ${ svgAttrs }>\n        <path d=\"M2.28 3L1 4.27l2 2V19c0 1.1.9 2 2 2h12.73l2 2L21 21.72 2.28 3m2.55 0L21 19.17V5a2 2 0 0 0-2-2H4.83M8.5 13.5l2.5 3 1-1.25L14.73 18H5l3.5-4.5z\"></path>\n      </svg>`,\n            file: ''\n        }),\n        initialize(o, opt) {\n            Component.prototype.initialize.apply(this, arguments);\n            var attr = this.get('attributes');\n            if (attr.src)\n                this.set('src', attr.src);\n        },\n        initToolbar(...args) {\n            Component.prototype.initToolbar.apply(this, args);\n            const em = this.em;\n            if (em) {\n                var cmd = em.get('Commands');\n                var cmdName = 'image-editor';\n                if (cmd.has(cmdName)) {\n                    let hasButtonBool = false;\n                    var tb = this.get('toolbar');\n                    for (let i = 0; i < tb.length; i++) {\n                        if (tb[i].command === 'image-editor') {\n                            hasButtonBool = true;\n                            break;\n                        }\n                    }\n                    if (!hasButtonBool) {\n                        tb.push({\n                            attributes: { class: 'fa fa-pencil' },\n                            command: cmdName\n                        });\n                        this.set('toolbar', tb);\n                    }\n                }\n            }\n        },\n        getAttrToHTML(...args) {\n            const attr = Component.prototype.getAttrToHTML.apply(this, args);\n            const src = this.getSrcResult();\n            if (src)\n                attr.src = src;\n            return attr;\n        },\n        getSrcResult(opt = {}) {\n            const src = this.get(opt.fallback ? 'fallback' : 'src') || '';\n            let result = src;\n            if (src && src.substr(0, 4) === '<svg') {\n                result = `data:image/svg+xml;base64,${ window.btoa(src) }`;\n            }\n            return result;\n        },\n        isDefaultSrc() {\n            return this.get('src') === _.result(this, 'defaults').src;\n        },\n        parseUri(uri) {\n            var el = document.createElement('a');\n            el.href = uri;\n            var query = {};\n            var qrs = el.search.substring(1).split('&');\n            for (var i = 0; i < qrs.length; i++) {\n                var pair = qrs[i].split('=');\n                var name = decodeURIComponent(pair[0]);\n                if (name)\n                    query[name] = decodeURIComponent(pair[1]);\n            }\n            return {\n                hostname: el.hostname,\n                pathname: el.pathname,\n                protocol: el.protocol,\n                search: el.search,\n                hash: el.hash,\n                port: el.port,\n                query\n            };\n        }\n    }, {\n        isComponent(el) {\n            var result = '';\n            if (el.tagName == 'IMG') {\n                result = { type: 'image' };\n            }\n            return result;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentMap',[\n    './ComponentImage',\n    './Component'\n], function (Component, OComponent) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            type: 'map',\n            src: '',\n            void: 0,\n            mapUrl: 'https://maps.google.com/maps',\n            tagName: 'iframe',\n            mapType: 'q',\n            address: '',\n            zoom: '1',\n            attributes: { frameborder: 0 },\n            toolbar: OComponent.prototype.defaults.toolbar,\n            traits: [\n                {\n                    label: 'Address',\n                    name: 'address',\n                    placeholder: 'eg. London, UK',\n                    changeProp: 1\n                },\n                {\n                    type: 'select',\n                    label: 'Map type',\n                    name: 'mapType',\n                    changeProp: 1,\n                    options: [\n                        {\n                            value: 'q',\n                            name: 'Roadmap'\n                        },\n                        {\n                            value: 'w',\n                            name: 'Satellite'\n                        }\n                    ]\n                },\n                {\n                    label: 'Zoom',\n                    name: 'zoom',\n                    type: 'range',\n                    min: '1',\n                    max: '20',\n                    changeProp: 1\n                }\n            ]\n        },\n        initialize(o, opt) {\n            if (this.get('src'))\n                this.parseFromSrc();\n            else\n                this.updateSrc();\n            Component.prototype.initialize.apply(this, arguments);\n            this.listenTo(this, 'change:address change:zoom change:mapType', this.updateSrc);\n        },\n        updateSrc() {\n            this.set('src', this.getMapUrl());\n        },\n        getMapUrl() {\n            var md = this;\n            var addr = md.get('address');\n            var zoom = md.get('zoom');\n            var type = md.get('mapType');\n            var size = '';\n            addr = addr ? '&q=' + addr : '';\n            zoom = zoom ? '&z=' + zoom : '';\n            type = type ? '&t=' + type : '';\n            var result = md.get('mapUrl') + '?' + addr + zoom + type;\n            result += '&output=embed';\n            return result;\n        },\n        parseFromSrc() {\n            var uri = this.parseUri(this.get('src'));\n            var qr = uri.query;\n            if (qr.q)\n                this.set('address', qr.q);\n            if (qr.z)\n                this.set('zoom', qr.z);\n            if (qr.t)\n                this.set('mapType', qr.t);\n        }\n    }, {\n        isComponent(el) {\n            var result = '';\n            if (el.tagName == 'IFRAME' && /maps\\.google\\.com/.test(el.src)) {\n                result = {\n                    type: 'map',\n                    src: el.src\n                };\n            }\n            return result;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentImageView',[\n    'skylark-underscore',\n    './ComponentView'\n], function (a, ComponentView) {\n    'use strict';\n    return ComponentView.extend({\n        tagName: 'img',\n        events: {\n            dblclick: 'onActive',\n            click: 'initResize',\n            error: 'onError',\n            dragstart: 'noDrag'\n        },\n        initialize(o) {\n            const model = this.model;\n            ComponentView.prototype.initialize.apply(this, arguments);\n            this.listenTo(model, 'change:src', this.updateSrc);\n            this.classEmpty = `${ this.ppfx }plh-image`;\n            const config = this.config;\n            config.modal && (this.modal = config.modal);\n            config.am && (this.am = config.am);\n            this.fetchFile();\n        },\n        fetchFile() {\n            if (this.modelOpt.temporary)\n                return;\n            const model = this.model;\n            const file = model.get('file');\n            if (file) {\n                const fu = this.em.get('AssetManager').FileUploader();\n                fu.uploadFile({ dataTransfer: { files: [file] } }, res => {\n                    const obj = res && res.data && res.data[0];\n                    const src = obj && (a.isString(obj) ? obj : obj.src);\n                    src && model.set({ src });\n                });\n                model.set('file', '');\n            }\n        },\n        updateSrc() {\n            const {model, classEmpty, $el} = this;\n            const src = model.getSrcResult();\n            const srcExists = src && !model.isDefaultSrc();\n            model.addAttributes({ src });\n            $el[srcExists ? 'removeClass' : 'addClass'](classEmpty);\n        },\n        onActive(ev) {\n            ev && ev.stopPropagation();\n            var em = this.opts.config.em;\n            var editor = em ? em.get('Editor') : '';\n            if (editor && this.model.get('editable')) {\n                editor.runCommand('open-assets', {\n                    target: this.model,\n                    types: ['image'],\n                    accept: 'image/*',\n                    onSelect() {\n                        editor.Modal.close();\n                        editor.AssetManager.setTarget(null);\n                    }\n                });\n            }\n        },\n        onError() {\n            const fallback = this.model.getSrcResult({ fallback: 1 });\n            if (fallback)\n                this.el.src = fallback;\n        },\n        noDrag(ev) {\n            ev.preventDefault();\n            return false;\n        },\n        render() {\n            this.renderAttributes();\n            this.updateSrc();\n            const {$el, model} = this;\n            const cls = $el.attr('class') || '';\n            !model.get('src') && $el.attr('class', `${ cls } ${ this.classEmpty }`.trim());\n            this.postRender();\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentMapView',[\n    'skylark-backbone',\n    './ComponentImageView'\n], function (Backbone, ComponentView) {\n    'use strict';\n    return ComponentView.extend({\n        tagName: 'div',\n        events: {},\n        initialize(o) {\n            ComponentView.prototype.initialize.apply(this, arguments);\n            this.classEmpty = this.ppfx + 'plh-map';\n        },\n        updateSrc() {\n            this.getIframe().src = this.model.get('src');\n        },\n        getIframe() {\n            if (!this.iframe) {\n                var ifrm = document.createElement('iframe');\n                ifrm.src = this.model.get('src');\n                ifrm.frameBorder = 0;\n                ifrm.style.height = '100%';\n                ifrm.style.width = '100%';\n                ifrm.className = this.ppfx + 'no-pointer';\n                this.iframe = ifrm;\n            }\n            return this.iframe;\n        },\n        render(...args) {\n            ComponentView.prototype.render.apply(this, args);\n            this.updateClasses();\n            this.el.appendChild(this.getIframe());\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentText',['./Component'], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            type: 'text',\n            droppable: false,\n            editable: true\n        },\n        toHTML() {\n            this.trigger('sync:content', { silent: 1 });\n            return Component.prototype.toHTML.apply(this, arguments);\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentLink',[    \n    \"skylark-langx/langx\",\n    './ComponentText'\n], function (langx,Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            type: 'link',\n            tagName: 'a',\n            traits: [\n                'title',\n                'href',\n                'target'\n            ]\n        },\n        getAttrToHTML(...args) {\n            const attr = Component.prototype.getAttrToHTML.apply(this, args);\n            delete attr.onmousedown;\n            return attr;\n        }\n    }, {\n        isComponent(el) {\n            let result;\n            let avoidEdit;\n            if (el.tagName == 'A') {\n                result = {\n                    type: 'link',\n                    editable: 0\n                };\n                const children = el.childNodes;\n                const len = children.length;\n                if (!len)\n                    delete result.editable;\n                for (let i = 0; i < len; i++) {\n                    const child = children[i];\n                    if (child.nodeType == 3 && child.textContent.trim() != '') {\n                        delete result.editable;\n                        break;\n                    }\n                }\n            }\n            return result;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentTextView',[\n    '../../utils/mixins',\n    './ComponentView'\n], function (mixins, ComponentView) {\n    'use strict';\n    const compProt = ComponentView.prototype;\n    return ComponentView.extend({\n        events: {\n            dblclick: 'onActive',\n            input: 'onInput'\n        },\n        initialize(o) {\n            compProt.initialize.apply(this, arguments);\n            this.disableEditing = this.disableEditing.bind(this);\n            const model = this.model;\n            const em = this.em;\n            this.listenTo(model, 'focus', this.onActive);\n            this.listenTo(model, 'change:content', this.updateContentText);\n            this.listenTo(model, 'sync:content', this.syncContent);\n            this.rte = em && em.get('RichTextEditor');\n        },\n        updateContentText(m, v, opts = {}) {\n            !opts.fromDisable && this.disableEditing();\n        },\n        onActive(e) {\n            if (this.rteEnabled || !this.model.get('editable')) {\n                return;\n            }\n            e && e.stopPropagation && e.stopPropagation();\n            const {rte, em} = this;\n            if (rte) {\n                try {\n                    this.activeRte = rte.enable(this, this.activeRte);\n                } catch (err) {\n                    em.logError(err);\n                }\n            }\n            this.toggleEvents(1);\n        },\n        onDisable() {\n            this.disableEditing();\n        },\n        disableEditing() {\n            const {model, rte, activeRte, em} = this;\n            const editable = model.get('editable');\n            if (rte && editable) {\n                try {\n                    rte.disable(this, activeRte);\n                } catch (err) {\n                    em.logError(err);\n                }\n                this.syncContent();\n            }\n            this.toggleEvents();\n        },\n        getContent() {\n            const {rte} = this;\n            const {activeRte} = rte || {};\n            let content = '';\n            if (activeRte && typeof activeRte.getContent === 'function') {\n                content = activeRte.getContent();\n            } else {\n                content = this.getChildrenContainer().innerHTML;\n            }\n            return content;\n        },\n        syncContent(opts = {}) {\n            const {model, rte, rteEnabled} = this;\n            if (!rteEnabled && !opts.force)\n                return;\n            const content = this.getContent();\n            const comps = model.components();\n            const contentOpt = {\n                fromDisable: 1,\n                ...opts\n            };\n            comps.length && comps.reset(null, opts);\n            model.set('content', '', contentOpt);\n            if (rte.customRte) {\n                model.set('content', content, contentOpt);\n            } else {\n                const clean = model => {\n                    const textable = !!model.get('textable');\n                    const selectable = ![\n                        'text',\n                        'default',\n                        ''\n                    ].some(type => model.is(type)) || textable;\n                    model.set({\n                        _innertext: !selectable,\n                        editable: selectable && model.get('editable'),\n                        selectable: selectable,\n                        hoverable: selectable,\n                        removable: textable,\n                        draggable: textable,\n                        highlightable: 0,\n                        copyable: textable,\n                        ...!textable && { toolbar: '' }\n                    }, opts);\n                    model.get('components').each(model => clean(model));\n                };\n                !opts.silent && model.trigger('change:content', model, '', contentOpt);\n                comps.add(content, opts);\n                comps.each(model => clean(model));\n                comps.trigger('resetNavigator');\n            }\n        },\n        onInput() {\n            const {em} = this;\n            em && em.trigger('component:update', this.model);\n        },\n        disablePropagation(e) {\n            e.stopPropagation();\n        },\n        toggleEvents(enable) {\n            const {em} = this;\n\n            const method = enable ? 'on' : 'off';\n            em.setEditing(enable);\n            this.rteEnabled = !!enable;\n            var elDocs = [\n                this.el.ownerDocument,\n                document\n            ];\n            mixins.off(elDocs, 'mousedown', this.disableEditing);\n            mixins[method](elDocs, 'mousedown', this.disableEditing);\n            em[method]('toolbar:run:before', this.disableEditing);\n            this.$el.off('mousedown', this.disablePropagation);\n            this.$el[method]('mousedown', this.disablePropagation);\n            if (this.config.draggableComponents) {\n                let {el} = this;\n                while (el) {\n                    el.draggable = enable ? !1 : !0;\n                    el = el.parentNode;\n                    el && el.tagName == 'BODY' && (el = 0);\n                }\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentLinkView',['./ComponentTextView'], function (ComponentView) {\n    'use strict';\n    return ComponentView.extend({\n        render(...args) {\n            ComponentView.prototype.render.apply(this, args);\n            this.el.addEventListener('click', this.prevDef, true);\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentLabel',[    \n    \"skylark-langx/langx\",\n    './ComponentText'\n], function (langx,Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            tagName: 'label',\n            traits: [\n                'id',\n                'title',\n                'for'\n            ]\n        }\n    }, {\n        isComponent(el) {\n            if (el.tagName == 'LABEL') {\n                return { type: 'label' };\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentLabelView',['./ComponentLinkView'], function (ComponentLinkView) {\n    'use strict';\n    return ComponentLinkView.extend({ tagName: 'span' });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentVideo',[\n    './ComponentImage',\n    './Component'\n], function (Component, OComponent) {\n    'use strict';\n    const yt = 'yt';\n    const vi = 'vi';\n    const ytnc = 'ytnc';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            type: 'video',\n            tagName: 'video',\n            videoId: '',\n            void: 0,\n            provider: 'so',\n            ytUrl: 'https://www.youtube.com/embed/',\n            ytncUrl: 'https://www.youtube-nocookie.com/embed/',\n            viUrl: 'https://player.vimeo.com/video/',\n            loop: 0,\n            poster: '',\n            muted: 0,\n            autoplay: 0,\n            controls: 1,\n            color: '',\n            rel: 1,\n            modestbranding: 0,\n            sources: [],\n            attributes: { allowfullscreen: 'allowfullscreen' },\n            toolbar: OComponent.prototype.defaults.toolbar\n        },\n        initialize(o, opt) {\n            var traits = [];\n            var prov = this.get('provider');\n            switch (prov) {\n            case yt:\n            case ytnc:\n                traits = this.getYoutubeTraits();\n                break;\n            case vi:\n                traits = this.getVimeoTraits();\n                break;\n            default:\n                traits = this.getSourceTraits();\n            }\n            if (this.get('src'))\n                this.parseFromSrc();\n            this.set('traits', traits);\n            Component.prototype.initialize.apply(this, arguments);\n            this.listenTo(this, 'change:provider', this.updateTraits);\n            this.listenTo(this, 'change:videoId change:provider', this.updateSrc);\n        },\n        initToolbar(...args) {\n            OComponent.prototype.initToolbar.apply(this, args);\n        },\n        parseFromSrc() {\n            var prov = this.get('provider');\n            var uri = this.parseUri(this.get('src'));\n            var qr = uri.query;\n            switch (prov) {\n            case yt:\n            case ytnc:\n            case vi:\n                var videoId = uri.pathname.split('/').pop();\n                this.set('videoId', videoId);\n                if (qr.autoplay)\n                    this.set('autoplay', 1);\n                if (qr.loop)\n                    this.set('loop', 1);\n                if (parseInt(qr.controls) === 0)\n                    this.set('controls', 0);\n                if (qr.color)\n                    this.set('color', qr.color);\n                if (qr.rel === '0')\n                    this.set('rel', 0);\n                if (qr.modestbranding === '1')\n                    this.set('modestbranding', 1);\n                break;\n            default:\n            }\n        },\n        updateSrc() {\n            var prov = this.get('provider');\n            switch (prov) {\n            case yt:\n                this.set('src', this.getYoutubeSrc());\n                break;\n            case ytnc:\n                this.set('src', this.getYoutubeNoCookieSrc());\n                break;\n            case vi:\n                this.set('src', this.getVimeoSrc());\n                break;\n            }\n        },\n        getAttrToHTML(...args) {\n            var attr = Component.prototype.getAttrToHTML.apply(this, args);\n            var prov = this.get('provider');\n            switch (prov) {\n            case yt:\n            case ytnc:\n            case vi:\n                break;\n            default:\n                if (this.get('loop'))\n                    attr.loop = 'loop';\n                if (this.get('autoplay'))\n                    attr.autoplay = 'autoplay';\n                if (this.get('controls'))\n                    attr.controls = 'controls';\n            }\n            return attr;\n        },\n        updateTraits() {\n            var prov = this.get('provider');\n            var traits = this.getSourceTraits();\n            switch (prov) {\n            case yt:\n            case ytnc:\n                this.set('tagName', 'iframe');\n                traits = this.getYoutubeTraits();\n                break;\n            case vi:\n                this.set('tagName', 'iframe');\n                traits = this.getVimeoTraits();\n                break;\n            default:\n                this.set('tagName', 'video');\n            }\n            this.loadTraits(traits);\n            this.em.trigger('component:toggled');\n        },\n        getProviderTrait() {\n            return {\n                type: 'select',\n                label: 'Provider',\n                name: 'provider',\n                changeProp: 1,\n                options: [\n                    {\n                        value: 'so',\n                        name: 'HTML5 Source'\n                    },\n                    {\n                        value: yt,\n                        name: 'Youtube'\n                    },\n                    {\n                        value: ytnc,\n                        name: 'Youtube (no cookie)'\n                    },\n                    {\n                        value: vi,\n                        name: 'Vimeo'\n                    }\n                ]\n            };\n        },\n        getSourceTraits() {\n            return [\n                this.getProviderTrait(),\n                {\n                    label: 'Source',\n                    name: 'src',\n                    placeholder: 'eg. ./media/video.mp4',\n                    changeProp: 1\n                },\n                {\n                    label: 'Poster',\n                    name: 'poster',\n                    placeholder: 'eg. ./media/image.jpg'\n                },\n                this.getAutoplayTrait(),\n                this.getLoopTrait(),\n                this.getControlsTrait()\n            ];\n        },\n        getYoutubeTraits() {\n            return [\n                this.getProviderTrait(),\n                {\n                    label: 'Video ID',\n                    name: 'videoId',\n                    placeholder: 'eg. jNQXAC9IVRw',\n                    changeProp: 1\n                },\n                this.getAutoplayTrait(),\n                this.getLoopTrait(),\n                this.getControlsTrait(),\n                {\n                    type: 'checkbox',\n                    label: 'Related',\n                    name: 'rel',\n                    changeProp: 1\n                },\n                {\n                    type: 'checkbox',\n                    label: 'Modest',\n                    name: 'modestbranding',\n                    changeProp: 1\n                }\n            ];\n        },\n        getVimeoTraits() {\n            return [\n                this.getProviderTrait(),\n                {\n                    label: 'Video ID',\n                    name: 'videoId',\n                    placeholder: 'eg. 123456789',\n                    changeProp: 1\n                },\n                {\n                    label: 'Color',\n                    name: 'color',\n                    placeholder: 'eg. FF0000',\n                    changeProp: 1\n                },\n                this.getAutoplayTrait(),\n                this.getLoopTrait()\n            ];\n        },\n        getAutoplayTrait() {\n            return {\n                type: 'checkbox',\n                label: 'Autoplay',\n                name: 'autoplay',\n                changeProp: 1\n            };\n        },\n        getLoopTrait() {\n            return {\n                type: 'checkbox',\n                label: 'Loop',\n                name: 'loop',\n                changeProp: 1\n            };\n        },\n        getControlsTrait() {\n            return {\n                type: 'checkbox',\n                label: 'Controls',\n                name: 'controls',\n                changeProp: 1\n            };\n        },\n        getYoutubeSrc() {\n            const id = this.get('videoId');\n            let url = this.get('ytUrl');\n            url += id + '?';\n            url += this.get('autoplay') ? '&autoplay=1' : '';\n            url += !this.get('controls') ? '&controls=0&showinfo=0' : '';\n            url += this.get('loop') ? `&loop=1&playlist=${ id }` : '';\n            url += this.get('rel') ? '' : '&rel=0';\n            url += this.get('modestbranding') ? '&modestbranding=1' : '';\n            return url;\n        },\n        getYoutubeNoCookieSrc() {\n            let url = this.getYoutubeSrc();\n            url = url.replace(this.get('ytUrl'), this.get('ytncUrl'));\n            return url;\n        },\n        getVimeoSrc() {\n            var url = this.get('viUrl');\n            url += this.get('videoId') + '?';\n            url += this.get('autoplay') ? '&autoplay=1' : '';\n            url += this.get('loop') ? '&loop=1' : '';\n            url += !this.get('controls') ? '&title=0&portrait=0&badge=0' : '';\n            url += this.get('color') ? '&color=' + this.get('color') : '';\n            return url;\n        }\n    }, {\n        isComponent(el) {\n            var result = '';\n            var isYtProv = /youtube\\.com\\/embed/.test(el.src);\n            var isYtncProv = /youtube-nocookie\\.com\\/embed/.test(el.src);\n            var isViProv = /player\\.vimeo\\.com\\/video/.test(el.src);\n            var isExtProv = isYtProv || isYtncProv || isViProv;\n            if (el.tagName == 'VIDEO' || el.tagName == 'IFRAME' && isExtProv) {\n                result = { type: 'video' };\n                if (el.src)\n                    result.src = el.src;\n                if (isExtProv) {\n                    if (isYtProv)\n                        result.provider = yt;\n                    else if (isYtncProv)\n                        result.provider = ytnc;\n                    else if (isViProv)\n                        result.provider = vi;\n                }\n            }\n            return result;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentVideoView',[\n    './ComponentImageView',\n    './ComponentView'\n], function (ComponentView, OComponentView) {\n    'use strict';\n    return ComponentView.extend({\n        tagName: 'div',\n        events: {},\n        initialize(o) {\n            OComponentView.prototype.initialize.apply(this, arguments);\n            const {model} = this;\n            const props = [\n                'loop',\n                'autoplay',\n                'controls',\n                'color',\n                'rel',\n                'modestbranding',\n                'poster'\n            ];\n            const events = props.map(p => `change:${ p }`).join(' ');\n            this.listenTo(model, 'change:provider', this.updateProvider);\n            this.listenTo(model, 'change:src', this.updateSrc);\n            this.listenTo(model, events, this.updateVideo);\n        },\n        updateProvider() {\n            var prov = this.model.get('provider');\n            this.el.innerHTML = '';\n            this.el.appendChild(this.renderByProvider(prov));\n        },\n        updateSrc() {\n            const {model, videoEl} = this;\n            if (!videoEl)\n                return;\n            const prov = model.get('provider');\n            let src = model.get('src');\n            switch (prov) {\n            case 'yt':\n                src = model.getYoutubeSrc();\n                break;\n            case 'ytnc':\n                src = model.getYoutubeNoCookieSrc();\n                break;\n            case 'vi':\n                src = model.getVimeoSrc();\n                break;\n            }\n            videoEl.src = src;\n        },\n        updateVideo() {\n            var prov = this.model.get('provider');\n            var videoEl = this.videoEl;\n            var md = this.model;\n            switch (prov) {\n            case 'yt':\n            case 'ytnc':\n            case 'vi':\n                this.model.trigger('change:videoId');\n                break;\n            default:\n                videoEl.loop = md.get('loop');\n                videoEl.autoplay = md.get('autoplay');\n                videoEl.controls = md.get('controls');\n                videoEl.poster = md.get('poster');\n            }\n        },\n        renderByProvider(prov) {\n            var videoEl;\n            switch (prov) {\n            case 'yt':\n                videoEl = this.renderYoutube();\n                break;\n            case 'ytnc':\n                videoEl = this.renderYoutubeNoCookie();\n                break;\n            case 'vi':\n                videoEl = this.renderVimeo();\n                break;\n            default:\n                videoEl = this.renderSource();\n            }\n            this.videoEl = videoEl;\n            return videoEl;\n        },\n        renderSource() {\n            var el = document.createElement('video');\n            el.src = this.model.get('src');\n            this.initVideoEl(el);\n            return el;\n        },\n        renderYoutube() {\n            var el = document.createElement('iframe');\n            el.src = this.model.getYoutubeSrc();\n            el.frameBorder = 0;\n            el.setAttribute('allowfullscreen', true);\n            this.initVideoEl(el);\n            return el;\n        },\n        renderYoutubeNoCookie() {\n            var el = document.createElement('iframe');\n            el.src = this.model.getYoutubeNoCookieSrc();\n            el.frameBorder = 0;\n            el.setAttribute('allowfullscreen', true);\n            this.initVideoEl(el);\n            return el;\n        },\n        renderVimeo() {\n            var el = document.createElement('iframe');\n            el.src = this.model.getVimeoSrc();\n            el.frameBorder = 0;\n            el.setAttribute('allowfullscreen', true);\n            this.initVideoEl(el);\n            return el;\n        },\n        initVideoEl(el) {\n            el.className = this.ppfx + 'no-pointer';\n            el.style.height = '100%';\n            el.style.width = '100%';\n        },\n        render(...args) {\n            ComponentView.prototype.render.apply(this, args);\n            this.updateClasses();\n            var prov = this.model.get('provider');\n            this.el.appendChild(this.renderByProvider(prov));\n            this.updateVideo();\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentScript',['./Component'], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            type: 'script',\n            droppable: false,\n            draggable: false,\n            layerable: false\n        }\n    }, {\n        isComponent(el) {\n            if (el.tagName == 'SCRIPT') {\n                var result = { type: 'script' };\n                if (el.src) {\n                    result.src = el.src;\n                    result.onload = el.onload;\n                }\n                return result;\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentScriptView',[\n    'skylark-backbone',\n    './ComponentImageView'\n], function (Backbone, ComponentView) {\n    'use strict';\n    return ComponentView.extend({\n        tagName: 'script',\n        events: {},\n        render() {\n            var model = this.model;\n            var src = model.get('src');\n            var em = this.em;\n            var scriptCount = em && em.get('scriptCount') ? em.get('scriptCount') : 0;\n            var content = '';\n            if (src) {\n                var onload = model.get('onload');\n                var svar = 'script' + scriptCount;\n                var svarNext = 'script' + (scriptCount + 1);\n                content = 'var ' + svar + \" = document.createElement('script');\\n\" + svar + '.onload = function(){\\n' + (onload ? onload + '();\\n' : '') + 'typeof ' + svarNext + \"Start == 'function' && \" + svarNext + 'Start();\\n' + '};\\n' + svar + \".src = '\" + src + \"';\\n\" + 'function ' + svar + 'Start() { document.body.appendChild(' + svar + '); };\\n' + (!scriptCount ? svar + 'Start();' : '');\n                if (em) {\n                    em.set('scriptCount', scriptCount + 1);\n                }\n            } else {\n                content = model.get('content');\n            }\n            this.el.innerHTML = content;\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentSvg',['./Component'], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            resizable: { ratioDefault: 1 },\n            highlightable: 0\n        },\n        getName() {\n            let name = this.get('tagName');\n            let customName = this.get('custom-name');\n            name = name.charAt(0).toUpperCase() + name.slice(1);\n            return customName || name;\n        }\n    }, {\n        isComponent(el) {\n            if (SVGElement && el instanceof SVGElement) {\n                return {\n                    tagName: el.tagName,\n                    type: 'svg'\n                };\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentSvgIn',['./ComponentSvg'], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            selectable: false,\n            hoverable: false,\n            layerable: false\n        }\n    }, {\n        isComponent(el) {\n            if (Component.isComponent(el) && el.tagName.toLowerCase() !== 'svg') {\n                return {\n                    tagName: el.tagName,\n                    type: 'svg-in'\n                };\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentSvgView',['./ComponentView'], function (ComponentView) {\n    'use strict';\n    return ComponentView.extend({\n        _createElement: function (tagName) {\n            return document.createElementNS('http://www.w3.org/2000/svg', tagName);\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentTextNode',['./Component'], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            ...Component.prototype.defaults,\n            droppable: false,\n            layerable: false,\n            editable: true\n        },\n        toHTML() {\n            return this.get('content').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n        }\n    }, {\n        isComponent(el) {\n            var result = '';\n            if (el.nodeType === 3) {\n                result = {\n                    type: 'textnode',\n                    content: el.textContent\n                };\n            }\n            return result;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentComment',[\n    \"skylark-langx/langx\",\n    './ComponentTextNode'\n], function (langx,Component) {\n    'use strict';\n    return Component.extend({\n        defaults: { ...Component.prototype.defaults },\n        toHTML() {\n            return `<!--${ this.get('content') }-->`;\n        }\n    }, {\n        isComponent(el) {\n            if (el.nodeType == 8) {\n                return {\n                    tagName: 'NULL',\n                    type: 'comment',\n                    content: el.textContent\n                };\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentTextNodeView',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize() {\n            const {$el, model} = this;\n            $el.data('model', model);\n            model.view = this;\n        },\n        _createElement() {\n            return document.createTextNode(this.model.get('content'));\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/view/ComponentCommentView',['./ComponentTextNodeView'], function (ComponentView) {\n    'use strict';\n    return ComponentView.extend({\n        _createElement() {\n            return document.createComment(this.model.get('content'));\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/model/ComponentWrapper',['./Component'], function (Component) {\n    'use strict';\n    return Component.extend({}, {\n        isComponent() {\n            return false;\n        }\n    });\n});\ndefine('skylark-grapejs/dom_components/index',[\n    'skylark-backbone',\n    'skylark-underscore',\n    './config/config',\n    './model/Component',\n    './model/Components',\n    './view/ComponentView',\n    './view/ComponentsView',\n    './model/ComponentTableCell',\n    './view/ComponentTableCellView',\n    './model/ComponentTableRow',\n    './view/ComponentTableRowView',\n    './model/ComponentTable',\n    './view/ComponentTableView',\n    './model/ComponentTableHead',\n    './view/ComponentTableHeadView',\n    './model/ComponentTableBody',\n    './view/ComponentTableBodyView',\n    './model/ComponentTableFoot',\n    './view/ComponentTableFootView',\n    './model/ComponentMap',\n    './view/ComponentMapView',\n    './model/ComponentLink',\n    './view/ComponentLinkView',\n    './model/ComponentLabel',\n    './view/ComponentLabelView',\n    './model/ComponentVideo',\n    './view/ComponentVideoView',\n    './model/ComponentImage',\n    './view/ComponentImageView',\n    './model/ComponentScript',\n    './view/ComponentScriptView',\n    './model/ComponentSvg',\n    './model/ComponentSvgIn',\n    './view/ComponentSvgView',\n    './model/ComponentComment',\n    './view/ComponentCommentView',\n    './model/ComponentTextNode',\n    './view/ComponentTextNodeView',\n    './model/ComponentText',\n    './view/ComponentTextView',\n    './model/ComponentWrapper'\n], function (Backbone, _, defaults, Component, Components, ComponentView, ComponentsView, ComponentTableCell, ComponentTableCellView, ComponentTableRow, ComponentTableRowView, ComponentTable, ComponentTableView, ComponentTableHead, ComponentTableHeadView, ComponentTableBody, ComponentTableBodyView, ComponentTableFoot, ComponentTableFootView, ComponentMap, ComponentMapView, ComponentLink, ComponentLinkView, ComponentLabel, ComponentLabelView, ComponentVideo, ComponentVideoView, ComponentImage, ComponentImageView, ComponentScript, ComponentScriptView, ComponentSvg, ComponentSvgIn, ComponentSvgView, ComponentComment, ComponentCommentView, ComponentTextNode, ComponentTextNodeView, ComponentText, ComponentTextView, ComponentWrapper) {\n    'use strict';\n    return () => {\n        var c = {};\n        let em;\n        const componentsById = {};\n        var component, componentView;\n        var componentTypes = [\n            {\n                id: 'cell',\n                model: ComponentTableCell,\n                view: ComponentTableCellView\n            },\n            {\n                id: 'row',\n                model: ComponentTableRow,\n                view: ComponentTableRowView\n            },\n            {\n                id: 'table',\n                model: ComponentTable,\n                view: ComponentTableView\n            },\n            {\n                id: 'thead',\n                model: ComponentTableHead,\n                view: ComponentTableHeadView\n            },\n            {\n                id: 'tbody',\n                model: ComponentTableBody,\n                view: ComponentTableBodyView\n            },\n            {\n                id: 'tfoot',\n                model: ComponentTableFoot,\n                view: ComponentTableFootView\n            },\n            {\n                id: 'map',\n                model: ComponentMap,\n                view: ComponentMapView\n            },\n            {\n                id: 'link',\n                model: ComponentLink,\n                view: ComponentLinkView\n            },\n            {\n                id: 'label',\n                model: ComponentLabel,\n                view: ComponentLabelView\n            },\n            {\n                id: 'video',\n                model: ComponentVideo,\n                view: ComponentVideoView\n            },\n            {\n                id: 'image',\n                model: ComponentImage,\n                view: ComponentImageView\n            },\n            {\n                id: 'script',\n                model: ComponentScript,\n                view: ComponentScriptView\n            },\n            {\n                id: 'svg-in',\n                model: ComponentSvgIn,\n                view: ComponentSvgView\n            },\n            {\n                id: 'svg',\n                model: ComponentSvg,\n                view: ComponentSvgView\n            },\n            {\n                id: 'comment',\n                model: ComponentComment,\n                view: ComponentCommentView\n            },\n            {\n                id: 'textnode',\n                model: ComponentTextNode,\n                view: ComponentTextNodeView\n            },\n            {\n                id: 'text',\n                model: ComponentText,\n                view: ComponentTextView\n            },\n            {\n                id: 'wrapper',\n                model: ComponentWrapper,\n                view: ComponentView\n            },\n            {\n                id: 'default',\n                model: Component,\n                view: ComponentView\n            }\n        ];\n        return {\n            Component,\n            Components,\n            ComponentsView,\n            componentTypes,\n            componentsById,\n            name: 'DomComponents',\n            getConfig() {\n                return c;\n            },\n            storageKey() {\n                var keys = [];\n                var smc = c.stm && c.stm.getConfig() || {};\n                if (smc.storeHtml)\n                    keys.push('html');\n                if (smc.storeComponents)\n                    keys.push('components');\n                return keys;\n            },\n            init(config) {\n                c = config || {};\n                em = c.em;\n                this.em = em;\n                if (em) {\n                    c.components = em.config.components || c.components;\n                }\n                for (var name in defaults) {\n                    if (!(name in c))\n                        c[name] = defaults[name];\n                }\n                var ppfx = c.pStylePrefix;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                if (em) {\n                    c.modal = em.get('Modal') || '';\n                    c.am = em.get('AssetManager') || '';\n                    em.get('Parser').compTypes = componentTypes;\n                    em.on('change:componentHovered', this.componentHovered, this);\n                    const selected = em.get('selected');\n                    em.listenTo(selected, 'add', (sel, c, opts) => this.selectAdd(sel, opts));\n                    em.listenTo(selected, 'remove', (sel, c, opts) => this.selectRemove(sel, opts));\n                }\n                let components = c.components;\n                let wrapper = { ...c.wrapper };\n                wrapper['custom-name'] = c.wrapperName;\n                wrapper.wrapper = 1;\n                wrapper.type = 'wrapper';\n                if (components && components.constructor === Object && components.wrapper) {\n                    wrapper = { ...components };\n                    components = components.components || [];\n                    wrapper.components = [];\n                    if (em) {\n                        em.config.components = components;\n                        c.components = components;\n                    }\n                }\n                component = new Component(wrapper, {\n                    em,\n                    config: c,\n                    componentTypes,\n                    domc: this\n                });\n                component.set({ attributes: { id: 'wrapper' } });\n                componentView = new ComponentView({\n                    model: component,\n                    config: c,\n                    componentTypes\n                });\n                return this;\n            },\n            onLoad() {\n                this.setComponents(c.components);\n            },\n            postLoad(em) {\n                this.handleChanges(this.getWrapper(), null, { avoidStore: 1 });\n            },\n            handleChanges(model, value, opts = {}) {\n                const comps = model.components();\n                const um = em.get('UndoManager');\n                const handleUpdates = em.handleUpdates.bind(em);\n                const handleChanges = this.handleChanges.bind(this);\n                const handleChangesColl = this.handleChangesColl.bind(this);\n                const handleRemoves = this.handleRemoves.bind(this);\n                um && um.add(model);\n                um && comps && um.add(comps);\n                const evn = 'change:style change:content change:attributes change:src';\n                [\n                    [\n                        model,\n                        evn,\n                        handleUpdates\n                    ],\n                    [\n                        model,\n                        'change:components',\n                        handleChangesColl\n                    ],\n                    [\n                        comps,\n                        'add',\n                        handleChanges\n                    ],\n                    [\n                        comps,\n                        'remove',\n                        handleRemoves\n                    ],\n                    [\n                        model.get('classes'),\n                        'add remove',\n                        handleUpdates\n                    ]\n                ].forEach(els => {\n                    em.stopListening(els[0], els[1], els[2]);\n                    em.listenTo(els[0], els[1], els[2]);\n                });\n                !opts.avoidStore && handleUpdates('', '', opts);\n                comps.each(model => this.handleChanges(model, value, opts));\n            },\n            handleChangesColl(model, coll) {\n                const um = em.get('UndoManager');\n                if (um && coll instanceof Backbone.Collection) {\n                    const handleChanges = this.handleChanges.bind(this);\n                    const handleRemoves = this.handleRemoves.bind(this);\n                    um.add(coll);\n                    [\n                        [\n                            coll,\n                            'add',\n                            handleChanges\n                        ],\n                        [\n                            coll,\n                            'remove',\n                            handleRemoves\n                        ]\n                    ].forEach(els => {\n                        em.stopListening(els[0], els[1], els[2]);\n                        em.listenTo(els[0], els[1], els[2]);\n                    });\n                }\n            },\n            handleRemoves(model, value, opts = {}) {\n                !opts.avoidStore && em.handleUpdates(model, value, opts);\n            },\n            load(data = '') {\n                const {em} = this;\n                let result = '';\n                if (!data && c.stm) {\n                    data = c.em.getCacheLoad();\n                }\n                const {components, html} = data;\n                if (components) {\n                    if (_.isObject(components) || _.isArray(components)) {\n                        result = components;\n                    } else {\n                        try {\n                            result = JSON.parse(components);\n                        } catch (err) {\n                            em && em.logError(err);\n                        }\n                    }\n                } else if (html) {\n                    result = html;\n                }\n                const isObj = result && result.constructor === Object;\n                if (result && result.length || isObj) {\n                    this.clear();\n                    if (isObj) {\n                        this.getWrapper().set(result);\n                    } else {\n                        this.getComponents().add(result);\n                    }\n                }\n                return result;\n            },\n            store(noStore) {\n                if (!c.stm) {\n                    return;\n                }\n                var obj = {};\n                var keys = this.storageKey();\n                if (keys.indexOf('html') >= 0) {\n                    obj.html = c.em.getHtml();\n                }\n                if (keys.indexOf('components') >= 0) {\n                    const {em} = this;\n                    const storeWrap = c.storeWrapper;\n                    const toStore = storeWrap ? this.getWrapper() : this.getComponents();\n                    obj.components = JSON.stringify(toStore);\n                }\n                if (!noStore) {\n                    c.stm.store(obj);\n                }\n                return obj;\n            },\n            getComponent() {\n                return component;\n            },\n            getWrapper() {\n                return this.getComponent();\n            },\n            getComponents() {\n                return this.getWrapper().get('components');\n            },\n            addComponent(component) {\n                return this.getComponents().add(component);\n            },\n            render() {\n                return componentView.render().el;\n            },\n            clear() {\n                this.getComponents().map(i => i).forEach(i => i.remove());\n                return this;\n            },\n            setComponents(components) {\n                this.clear().addComponent(components);\n            },\n            addType(type, methods) {\n                const {em} = this;\n                const {model = {}, view = {}, isComponent, extend, extendView, extendFn = [], extendFnView = []} = methods;\n                const compType = this.getType(type);\n                const extendType = this.getType(extend);\n                const extendViewType = this.getType(extendView);\n                const typeToExtend = extendType ? extendType : compType ? compType : this.getType('default');\n                const modelToExt = typeToExtend.model;\n                const viewToExt = extendViewType ? extendViewType.view : typeToExtend.view;\n                const getExtendedObj = (fns, target, srcToExt) => fns.reduce((res, next) => {\n                    const fn = target[next];\n                    const parentFn = srcToExt.prototype[next];\n                    if (fn && parentFn) {\n                        res[next] = function (...args) {\n                            parentFn.bind(this)(...args);\n                            fn.bind(this)(...args);\n                        };\n                    }\n                    return res;\n                }, {});\n                if (typeof model === 'object') {\n                    methods.model = modelToExt.extend({\n                        ...model,\n                        ...getExtendedObj(extendFn, model, modelToExt),\n                        defaults: langx.mixin({},\n                            modelToExt.prototype.defaults,\n                            _.result(model, 'defaults') \n                        )\n                    }, { isComponent: compType && !extendType && !isComponent ? modelToExt.isComponent : isComponent || (() => 0) });\n                }\n                if (typeof view === 'object') {\n                    methods.view = viewToExt.extend(langx.mixin({},\n                        view,\n                        getExtendedObj(extendFnView, view, viewToExt)\n                    ));\n                }\n                if (compType) {\n                    compType.model = methods.model;\n                    compType.view = methods.view;\n                } else {\n                    methods.id = type;\n                    componentTypes.unshift(methods);\n                }\n                const event = `component:type:${ compType ? 'update' : 'add' }`;\n                em && em.trigger(event, compType || methods);\n                return this;\n            },\n            getType(type) {\n                var df = componentTypes;\n                for (var it = 0; it < df.length; it++) {\n                    var dfId = df[it].id;\n                    if (dfId == type) {\n                        return df[it];\n                    }\n                }\n                return;\n            },\n            removeType(id) {\n                const df = componentTypes;\n                const type = this.getType(id);\n                if (!type)\n                    return;\n                const index = df.indexOf(type);\n                df.splice(index, 1);\n                return type;\n            },\n            getTypes() {\n                return componentTypes;\n            },\n            selectAdd(component, opts = {}) {\n                if (component) {\n                    component.set({ status: 'selected' });\n                    [\n                        'component:selected',\n                        'component:toggled'\n                    ].forEach(event => this.em.trigger(event, component, opts));\n                }\n            },\n            selectRemove(component, opts = {}) {\n                if (component) {\n                    const {em} = this;\n                    component.set({\n                        status: '',\n                        state: ''\n                    });\n                    [\n                        'component:deselected',\n                        'component:toggled'\n                    ].forEach(event => this.em.trigger(event, component, opts));\n                }\n            },\n            componentHovered() {\n                const em = c.em;\n                const model = em.get('componentHovered');\n                const previous = em.previous('componentHovered');\n                const state = 'hovered';\n                previous && previous.get('status') == state && previous.set({\n                    status: '',\n                    state: ''\n                });\n                model && _.isEmpty(model.get('status')) && model.set('status', state);\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/navigator/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: '',\n        appendTo: '',\n        sortable: 1,\n        hidable: 1,\n        hideTextnode: 1,\n        root: '',\n        showWrapper: 1,\n        showHover: 1,\n        scrollCanvas: {\n            behavior: 'smooth',\n            block: 'nearest'\n        },\n        scrollLayers: {\n            behavior: 'auto',\n            block: 'nearest'\n        },\n        highlightHover: 1\n    };\n});\ndefine('skylark-grapejs/navigator/view/ItemView',[\n    'skylark-underscore',\n    '../../utils/mixins',\n    'skylark-backbone',\n    '../../dom_components/view/ComponentView',\n    '../../dom_components/model/Component'\n], function (_, b, Backbone, ComponentView, Component) {\n    'use strict';\n    const inputProp = 'contentEditable';\n    const $ = Backbone.$;\n    let ItemsView;\n    return Backbone.View.extend({\n        events: {\n            'mousedown [data-toggle-move]': 'startSort',\n            'touchstart [data-toggle-move]': 'startSort',\n            'click [data-toggle-visible]': 'toggleVisibility',\n            'click [data-toggle-select]': 'handleSelect',\n            'mouseover [data-toggle-select]': 'handleHover',\n            'click [data-toggle-open]': 'toggleOpening',\n            'dblclick [data-name]': 'handleEdit',\n            'focusout [data-name]': 'handleEditEnd'\n        },\n        template(model) {\n            const {pfx, ppfx, config, clsNoEdit} = this;\n            const {hidable} = config;\n            const count = this.countChildren(model);\n            const addClass = !count ? this.clsNoChild : '';\n            const clsTitle = `${ this.clsTitle } ${ addClass }`;\n            const clsTitleC = `${ this.clsTitleC } ${ ppfx }one-bg`;\n            const clsCaret = `${ this.clsCaret } fa fa-chevron-right`;\n            const clsInput = `${ this.inputNameCls } ${ clsNoEdit } ${ ppfx }no-app`;\n            const level = this.level + 1;\n            const gut = `${ 30 + level * 10 }px`;\n            const name = model.getName();\n            const icon = model.getIcon();\n            const clsBase = `${ pfx }layer`;\n            return `\n      ${ hidable ? `<i class=\"${ pfx }layer-vis fa fa-eye ${ this.isVisible() ? '' : 'fa-eye-slash' }\" data-toggle-visible></i>` : '' }\n      <div class=\"${ clsTitleC }\">\n        <div class=\"${ clsTitle }\" style=\"padding-left: ${ gut }\" data-toggle-select>\n          <div class=\"${ pfx }layer-title-inn\">\n            <i class=\"${ clsCaret }\" data-toggle-open></i>\n            ${ icon ? `<span class=\"${ clsBase }__icon\">${ icon }</span>` : '' }\n            <span class=\"${ clsInput }\" data-name>${ name }</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"${ this.clsCount }\" data-count>${ count || '' }</div>\n      <div class=\"${ this.clsMove }\" data-toggle-move>\n        <i class=\"fa fa-arrows\"></i>\n      </div>\n      <div class=\"${ this.clsChildren }\"></div>`;\n        },\n        initialize(o = {}) {\n            this.opt = o;\n            this.level = o.level;\n            this.config = o.config;\n            this.em = o.config.em;\n            this.ppfx = this.em.get('Config').stylePrefix;\n            this.sorter = o.sorter || '';\n            this.pfx = this.config.stylePrefix;\n            this.parentView = o.parentView;\n            const pfx = this.pfx;\n            const ppfx = this.ppfx;\n            const model = this.model;\n            const components = model.get('components');\n            const type = model.get('type') || 'default';\n            model.set('open', false);\n            this.listenTo(components, 'remove add reset', this.checkChildren);\n            this.listenTo(model, 'change:status', this.updateStatus);\n            this.listenTo(model, 'change:open', this.updateOpening);\n            this.listenTo(model, 'change:layerable', this.updateLayerable);\n            this.listenTo(model, 'change:style:display', this.updateVisibility);\n            this.className = `${ pfx }layer ${ pfx }layer__t-${ type } no-select ${ ppfx }two-color`;\n            this.inputNameCls = `${ ppfx }layer-name`;\n            this.clsTitleC = `${ pfx }layer-title-c`;\n            this.clsTitle = `${ pfx }layer-title`;\n            this.clsCaret = `${ pfx }layer-caret`;\n            this.clsCount = `${ pfx }layer-count`;\n            this.clsMove = `${ pfx }layer-move`;\n            this.clsChildren = `${ pfx }layer-children`;\n            this.clsNoChild = `${ pfx }layer-no-chld`;\n            this.clsEdit = `${ this.inputNameCls }--edit`;\n            this.clsNoEdit = `${ this.inputNameCls }--no-edit`;\n            this.$el.data('model', model);\n            this.$el.data('collection', components);\n            model.viewLayer = this;\n        },\n        getVisibilityEl() {\n            if (!this.eyeEl) {\n                this.eyeEl = this.$el.children(`.${ this.pfx }layer-vis`);\n            }\n            return this.eyeEl;\n        },\n        updateVisibility() {\n            const pfx = this.pfx;\n            const model = this.model;\n            const hClass = `${ pfx }layer-hidden`;\n            const hideIcon = 'fa-eye-slash';\n            const hidden = model.getStyle().display == 'none';\n            const method = hidden ? 'addClass' : 'removeClass';\n            this.$el[method](hClass);\n            this.getVisibilityEl()[method](hideIcon);\n        },\n        toggleVisibility(e) {\n            e && e.stopPropagation();\n            const {model} = this;\n            const prevDspKey = '__prev-display';\n            const prevDisplay = model.get(prevDspKey);\n            const style = model.getStyle();\n            const {display} = style;\n            const hidden = display == 'none';\n            if (hidden) {\n                delete style.display;\n                if (prevDisplay) {\n                    style.display = prevDisplay;\n                    model.unset(prevDspKey);\n                }\n            } else {\n                display && model.set(prevDspKey, display);\n                style.display = 'none';\n            }\n            model.setStyle(style);\n        },\n        handleEdit(e) {\n            e && e.stopPropagation();\n            const {em, $el, clsNoEdit, clsEdit} = this;\n            const inputEl = this.getInputName();\n            inputEl[inputProp] = true;\n            inputEl.focus();\n            em && em.setEditing(1);\n            $el.find(`.${ this.inputNameCls }`).removeClass(clsNoEdit).addClass(clsEdit);\n        },\n        handleEditEnd(e) {\n            e && e.stopPropagation();\n            const {em, $el, clsNoEdit, clsEdit} = this;\n            const inputEl = this.getInputName();\n            const name = inputEl.textContent;\n            inputEl.scrollLeft = 0;\n            inputEl[inputProp] = false;\n            this.model.set({ 'custom-name': name });\n            em && em.setEditing(0);\n            $el.find(`.${ this.inputNameCls }`).addClass(clsNoEdit).removeClass(clsEdit);\n        },\n        getInputName() {\n            if (!this.inputName) {\n                this.inputName = this.el.querySelector(`.${ this.inputNameCls }`);\n            }\n            return this.inputName;\n        },\n        updateOpening() {\n            var opened = this.opt.opened || {};\n            var model = this.model;\n            const chvDown = 'fa-chevron-down';\n            if (model.get('open')) {\n                this.$el.addClass('open');\n                this.getCaret().addClass(chvDown);\n                opened[model.cid] = model;\n            } else {\n                this.$el.removeClass('open');\n                this.getCaret().removeClass(chvDown);\n                delete opened[model.cid];\n            }\n        },\n        toggleOpening(e) {\n            e.stopPropagation();\n            if (!this.model.get('components').length)\n                return;\n            this.model.set('open', !this.model.get('open'));\n        },\n        handleSelect(e) {\n            e.stopPropagation();\n            const {em, config} = this;\n            if (em) {\n                const model = this.model;\n                em.setSelected(model, { fromLayers: 1 });\n                const scroll = config.scrollCanvas;\n                scroll && model.views.forEach(view => view.scrollIntoView(scroll));\n            }\n        },\n        handleHover(e) {\n            e.stopPropagation();\n            const {em, config, model} = this;\n            em && config.showHover && em.setHovered(model, { fromLayers: 1 });\n        },\n        startSort(e) {\n            e.stopPropagation();\n            const {em, sorter} = this;\n            if (e.button && e.button !== 0)\n                return;\n            if (sorter) {\n                sorter.onStart = data => em.trigger(`${ Component.eventDrag }:start`, data);\n                sorter.onMoveClb = data => em.trigger(Component.eventDrag, data);\n                sorter.startSort(e.target);\n            }\n        },\n        freeze() {\n            this.$el.addClass(this.pfx + 'opac50');\n            this.model.set('open', 0);\n        },\n        unfreeze() {\n            this.$el.removeClass(this.pfx + 'opac50');\n        },\n        updateStatus(e) {\n            ComponentView.prototype.updateStatus.apply(this, [{ avoidHover: !this.config.highlightHover }]);\n        },\n        isVisible() {\n            var css = this.model.get('style'), pr = css.display;\n            if (pr && pr == 'none')\n                return;\n            return 1;\n        },\n        checkChildren() {\n            const {model, clsNoChild} = this;\n            const count = this.countChildren(model);\n            const title = this.$el.children(`.${ this.clsTitleC }`).children(`.${ this.clsTitle }`);\n            let {cnt} = this;\n            if (!cnt) {\n                cnt = this.$el.children('[data-count]').get(0);\n                this.cnt = cnt;\n            }\n            title[count ? 'removeClass' : 'addClass'](clsNoChild);\n            if (cnt)\n                cnt.innerHTML = count || '';\n            !count && model.set('open', 0);\n        },\n        countChildren(model) {\n            var count = 0;\n            model.get('components').each(function (m) {\n                var isCountable = this.opt.isCountable;\n                var hide = this.config.hideTextnode;\n                if (isCountable && !isCountable(m, hide))\n                    return;\n                count++;\n            }, this);\n            return count;\n        },\n        getCaret() {\n            if (!this.caret || !this.caret.length) {\n                const pfx = this.pfx;\n                this.caret = this.$el.children(`.${ this.clsTitleC }`).find(`.${ this.clsCaret }`);\n            }\n            return this.caret;\n        },\n        setRoot(el) {\n            el = _.isString(el) ? this.em.getWrapper().find(el)[0] : el;\n            const model = b.getModel(el, $);\n            if (!model)\n                return;\n            this.stopListening();\n            this.model = model;\n            this.initialize(this.opt);\n            this.render();\n        },\n        updateLayerable() {\n            const {parentView} = this;\n            const toRerender = parentView || this;\n            toRerender.render();\n        },\n        render() {\n            const {model, config, pfx, ppfx, opt} = this;\n            const {isCountable} = opt;\n            const hidden = isCountable && !isCountable(model, config.hideTextnode);\n            const vis = this.isVisible();\n            const el = this.$el.empty();\n            const level = this.level + 1;\n            if (_.isUndefined(ItemsView)) {\n                ItemsView = require('./ItemsView').default;\n            }\n            const children = new ItemsView({\n                collection: model.get('components'),\n                config: this.config,\n                sorter: this.sorter,\n                opened: this.opt.opened,\n                parentView: this,\n                parent: model,\n                level\n            }).render().$el;\n            if (!this.config.showWrapper && level === 1) {\n                el.append(children);\n            } else {\n                el.html(this.template(model));\n                el.find(`.${ this.clsChildren }`).append(children);\n            }\n            if (!model.get('draggable') || !this.config.sortable) {\n                el.children(`.${ this.clsMove }`).remove();\n            }\n            !vis && (this.className += ` ${ pfx }hide`);\n            hidden && (this.className += ` ${ ppfx }hidden`);\n            el.attr('class', this.className);\n            this.updateOpening();\n            this.updateStatus();\n            this.updateVisibility();\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/navigator/index',[\n    './config/config',\n    './view/ItemView',\n    'skylark-underscore'\n], function (defaults, ItemView, a) {\n    'use strict';\n    return () => {\n        let em;\n        let layers;\n        let config = {};\n        return {\n            name: 'LayerManager',\n            init(opts = {}) {\n                config = {\n                    ...defaults,\n                    ...opts\n                };\n                config.stylePrefix = opts.pStylePrefix;\n                em = config.em;\n                return this;\n            },\n            getConfig() {\n                return config;\n            },\n            onLoad() {\n                layers = new ItemView({\n                    level: 0,\n                    config,\n                    opened: config.opened || {},\n                    model: em.get('DomComponents').getWrapper()\n                });\n                em && em.on('component:selected', this.componentChanged);\n                this.componentChanged();\n            },\n            postRender() {\n                const elTo = config.appendTo;\n                const root = config.root;\n                root && this.setRoot(root);\n                if (elTo) {\n                    const el = a.isElement(elTo) ? elTo : document.querySelector(elTo);\n                    el.appendChild(this.render());\n                }\n            },\n            setRoot(el) {\n                layers.setRoot(el);\n                return this;\n            },\n            getRoot() {\n                return layers.model;\n            },\n            getAll() {\n                return layers;\n            },\n            componentChanged(selected, opts = {}) {\n                if (opts.fromLayers)\n                    return;\n                const opened = em.get('opened');\n                const model = em.getSelected();\n                const scroll = config.scrollLayers;\n                let parent = model && model.collection ? model.collection.parent : null;\n                for (let cid in opened)\n                    opened[cid].set('open', 0);\n                while (parent) {\n                    parent.set('open', 1);\n                    opened[parent.cid] = parent;\n                    parent = parent.collection ? parent.collection.parent : null;\n                }\n                if (model && scroll) {\n                    const el = model.viewLayer && model.viewLayer.el;\n                    el && el.scrollIntoView(scroll);\n                }\n            },\n            render() {\n                return layers.render().el;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/utils/Droppable',[\n    './mixins',\n    'skylark-underscore'\n], function (mixins, _) {\n    'use strict';\n    return class Droppable {\n        constructor(em, rootEl) {\n            this.em = em;\n            const el = rootEl || em.get('Canvas').getFrames().map(frame => frame.get('root').getEl());\n            const els = Array.isArray(el) ? el : [el];\n            this.el = el;\n            this.counter = 0;\n            _.bindAll(this, 'handleDragEnter', 'handleDragOver', 'handleDrop', 'handleDragLeave');\n            els.forEach(el => this.toggleEffects(el, 1));\n            return this;\n        }\n        toggleEffects(el, enable) {\n\n            const method = enable ? 'on' : 'off';\n            mixins[method](el, 'dragenter', this.handleDragEnter);\n            mixins[method](el, 'dragover', this.handleDragOver);\n            mixins[method](el, 'drop', this.handleDrop);\n            mixins[method](el, 'dragleave', this.handleDragLeave);\n        }\n        endDrop(cancel, ev) {\n            const {em, dragStop} = this;\n            this.counter = 0;\n            this.over = 0;\n            dragStop && dragStop(cancel);\n            em.runDefault({ preserveSelected: 1 });\n            em.trigger('canvas:dragend', ev);\n        }\n        handleDragLeave(ev) {\n            this.updateCounter(-1, ev);\n        }\n        updateCounter(value, ev) {\n            this.counter += value;\n            this.counter === 0 && this.endDrop(1, ev);\n        }\n        handleDragEnter(ev) {\n            const {em} = this;\n            const dt = ev.dataTransfer;\n            this.updateCounter(1, ev);\n            if (this.over)\n                return;\n            this.over = 1;\n            const utils = em.get('Utils');\n            const canvas = em.get('Canvas');\n            const container = canvas.getBody();\n            let content = em.get('dragContent') || '<br>';\n            let dragStop, dragContent;\n            em.stopDefault();\n            if (em.inAbsoluteMode()) {\n                const wrapper = em.get('DomComponents').getWrapper();\n                const target = wrapper.append({})[0];\n                const dragger = em.get('Commands').run('core:component-drag', {\n                    event: ev,\n                    guidesInfo: 1,\n                    center: 1,\n                    target,\n                    onEnd: (ev, dragger, {cancelled}) => {\n                        if (!cancelled) {\n                            const comp = wrapper.append(content)[0];\n                            const {left, top, position} = target.getStyle();\n                            comp.addStyle({\n                                left,\n                                top,\n                                position\n                            });\n                            this.handleDragEnd(comp, dt);\n                        }\n                        target.remove();\n                    }\n                });\n                dragStop = cancel => dragger.stop(ev, { cancel });\n                dragContent = cnt => content = cnt;\n            } else {\n                const sorter = new utils.Sorter({\n                    em,\n                    wmargin: 1,\n                    nested: 1,\n                    canvasRelative: 1,\n                    direction: 'a',\n                    container,\n                    placer: canvas.getPlacerEl(),\n                    containerSel: '*',\n                    itemSel: '*',\n                    pfx: 'gjs-',\n                    onEndMove: model => this.handleDragEnd(model, dt),\n                    document: canvas.getFrameEl().contentDocument\n                });\n                sorter.setDropContent(content);\n                sorter.startSort();\n                this.sorter = sorter;\n                dragStop = cancel => {\n                    cancel && (sorter.moved = 0);\n                    sorter.endMove();\n                };\n                dragContent = content => sorter.setDropContent(content);\n            }\n            this.dragStop = dragStop;\n            this.dragContent = dragContent;\n            em.trigger('canvas:dragenter', dt, content);\n        }\n        handleDragEnd(model, dt) {\n            if (!model)\n                return;\n            const {em} = this;\n            em.set('dragResult', model);\n            em.trigger('canvas:drop', dt, model);\n        }\n        handleDragOver(ev) {\n            ev.preventDefault();\n            this.em.trigger('canvas:dragover', ev);\n        }\n        handleDrop(ev) {\n            ev.preventDefault();\n            const {dragContent} = this;\n            const dt = ev.dataTransfer;\n            const content = this.getContentByData(dt).content;\n            ev.target.style.border = '';\n            content && dragContent && dragContent(content);\n            this.endDrop(!content, ev);\n        }\n        getContentByData(dataTransfer) {\n            const em = this.em;\n            const types = dataTransfer.types;\n            const files = dataTransfer.files || [];\n            const dragContent = em.get('dragContent');\n            let content = dataTransfer.getData('text');\n            if (files.length) {\n                content = [];\n                for (let i = 0; i < files.length; i++) {\n                    const file = files[i];\n                    const type = file.type.split('/')[0];\n                    if (type == 'image') {\n                        content.push({\n                            type,\n                            file,\n                            attributes: { alt: file.name }\n                        });\n                    }\n                }\n            } else if (dragContent) {\n                content = dragContent;\n            } else if (_.indexOf(types, 'text/html') >= 0) {\n                content = dataTransfer.getData('text/html').replace(/<\\/?meta[^>]*>/g, '');\n            } else if (_.indexOf(types, 'text/uri-list') >= 0) {\n                content = {\n                    type: 'link',\n                    attributes: { href: content },\n                    content: content\n                };\n            } else if (_.indexOf(types, 'text/json') >= 0) {\n                const json = dataTransfer.getData('text/json');\n                json && (content = JSON.parse(json));\n            }\n            const result = { content };\n            em.trigger('canvas:dragdata', dataTransfer, result);\n            return result;\n        }\n    };\n});\ndefine('skylark-grapejs/canvas/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: 'cv-',\n        scripts: [],\n        styles: [],\n        customBadgeLabel: '',\n        autoscrollLimit: 50,\n        notTextable: [\n            'button',\n            'a',\n            'input[type=checkbox]',\n            'input[type=radio]'\n        ]\n    };\n});\ndefine('skylark-grapejs/canvas/model/Frame',[\n    'skylark-backbone',\n    '../../dom_components/model/Component',\n    '../../css_composer/model/CssRules',\n    'skylark-underscore'\n], function (Backbone, Component, CssRules, a) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            wrapper: '',\n            width: null,\n            height: null,\n            head: '',\n            x: 0,\n            y: 0,\n            root: 0,\n            components: 0,\n            styles: 0,\n            attributes: {}\n        },\n        initialize(props, opts = {}) {\n            const {root, styles, components} = this.attributes;\n            this.set('head', []);\n            this.em = opts.em;\n            const modOpts = {\n                em: opts.em,\n                config: opts.em.get('DomComponents').getConfig(),\n                frame: this\n            };\n            !root && this.set('root', new Component({\n                type: 'wrapper',\n                components: components || []\n            }, modOpts));\n            (!styles || a.isString(styles)) && this.set('styles', new CssRules(styles, modOpts));\n        },\n        remove() {\n            this.view = 0;\n            const coll = this.collection;\n            return coll && coll.remove(this);\n        },\n        getHead() {\n            return [...this.get('head')];\n        },\n        setHead(value) {\n            return this.set('head', [...value]);\n        },\n        addHeadItem(item) {\n            const head = this.getHead();\n            head.push(item);\n            this.setHead(head);\n        },\n        getHeadByAttr(attr, value, tag) {\n            const head = this.getHead();\n            return head.filter(item => item.attributes && item.attributes[attr] == value && (!tag || tag === item.tag))[0];\n        },\n        removeHeadByAttr(attr, value, tag) {\n            const head = this.getHead();\n            const item = this.getHeadByAttr(attr, value, tag);\n            const index = head.indexOf(item);\n            if (index >= 0) {\n                head.splice(index, 1);\n                this.setHead(head);\n            }\n        },\n        addLink(href) {\n            const tag = 'link';\n            !this.getHeadByAttr('href', href, tag) && this.addHeadItem({\n                tag,\n                attributes: {\n                    href,\n                    rel: 'stylesheet'\n                }\n            });\n        },\n        removeLink(href) {\n            this.removeHeadByAttr('href', href, 'link');\n        },\n        addScript(src) {\n            const tag = 'script';\n            !this.getHeadByAttr('src', src, tag) && this.addHeadItem({\n                tag,\n                attributes: { src }\n            });\n        },\n        removeScript(src) {\n            this.removeHeadByAttr('src', src, 'script');\n        },\n        _emitUpdated(data = {}) {\n            this.em.trigger('frame:updated', {\n                frame: this,\n                ...data\n            });\n        }\n    });\n});\ndefine('skylark-grapejs/canvas/model/Frames',[\n    'skylark-underscore',\n    'skylark-backbone',\n    './Frame'\n], function (a, Backbone, model) {\n    'use strict';\n    return Backbone.Collection.extend({\n        model,\n        initialize() {\n            a.bindAll(this, 'itemLoaded');\n        },\n        itemLoaded() {\n            this.loadedItems++;\n            if (this.loadedItems >= this.itemsToLoad) {\n                this.trigger('loaded:all');\n                this.listenToLoadItems(0);\n            }\n        },\n        listenToLoad() {\n            this.loadedItems = 0;\n            this.itemsToLoad = this.length;\n            this.listenToLoadItems(1);\n        },\n        listenToLoadItems(on) {\n            this.forEach(item => item[on ? 'on' : 'off']('loaded', this.itemLoaded));\n        }\n    });\n});\ndefine('skylark-grapejs/canvas/model/Canvas',[\n    'skylark-backbone',\n    './Frame',\n    './Frames'\n], function (Backbone, Frame, Frames) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            frame: '',\n            frames: '',\n            wrapper: '',\n            rulers: false,\n            zoom: 100,\n            x: 0,\n            y: 0\n        },\n        initialize(config = {}) {\n            const {em} = config;\n            const {styles = [], scripts = []} = config;\n            const frame = new Frame({}, config);\n            styles.forEach(style => frame.addLink(style));\n            scripts.forEach(script => frame.addScript(script));\n            this.em = em;\n            this.set('frame', frame);\n            this.set('frames', new Frames([frame], config));\n            this.listenTo(this, 'change:zoom', this.onZoomChange);\n            this.listenTo(em, 'change:device', this.updateDevice);\n        },\n        updateDevice() {\n            const {em} = this;\n            const device = em.getDeviceModel();\n            const model = em.getCurrentFrameModel();\n            if (model && device) {\n                const {width, height} = device.attributes;\n                model.set({\n                    width,\n                    height\n                });\n            }\n        },\n        onZoomChange() {\n            const zoom = this.get('zoom');\n            zoom < 1 && this.set('zoom', 1);\n        }\n    });\n});\ndefine('skylark-grapejs/domain_abstract/view/DomainViews',[\n    'skylark-underscore',\n    'skylark-backbone'\n], function (a, Backbone) {\n    'use strict';\n    return Backbone.View.extend({\n        itemView: '',\n        itemsView: '',\n        itemType: 'type',\n        autoAdd: 0,\n        initialize(opts = {}, config) {\n            this.config = config || opts.config || {};\n            this.autoAdd && this.listenTo(this.collection, 'add', this.addTo);\n            this.init();\n        },\n        init() {\n        },\n        addTo(model) {\n            this.add(model);\n        },\n        itemViewNotFound(type) {\n            const {config, ns} = this;\n            const {em} = config;\n            const warn = `${ ns ? `[${ ns }]: ` : '' }'${ type }' type not found`;\n            em && em.logWarning(warn);\n        },\n        add(model, fragment) {\n            const {config, reuseView, itemsView = {}} = this;\n            const inputTypes = [\n                'button',\n                'checkbox',\n                'color',\n                'date',\n                'datetime-local',\n                'email',\n                'file',\n                'hidden',\n                'image',\n                'month',\n                'number',\n                'password',\n                'radio',\n                'range',\n                'reset',\n                'search',\n                'submit',\n                'tel',\n                'text',\n                'time',\n                'url',\n                'week'\n            ];\n            var frag = fragment || null;\n            var itemView = this.itemView;\n            var typeField = model.get(this.itemType);\n            let view;\n            if (itemsView[typeField]) {\n                itemView = itemsView[typeField];\n            } else if (typeField && !itemsView[typeField] && !a.includes(inputTypes, typeField)) {\n                this.itemViewNotFound(typeField);\n            }\n            if (model.view && reuseView) {\n                view = model.view;\n            } else {\n                view = new itemView({\n                    model,\n                    config\n                }, config);\n            }\n            var rendered = view.render().el;\n            if (frag)\n                frag.appendChild(rendered);\n            else\n                this.$el.append(rendered);\n        },\n        render() {\n            var frag = document.createDocumentFragment();\n            this.$el.empty();\n            if (this.collection.length)\n                this.collection.each(function (model) {\n                    this.add(model, frag);\n                }, this);\n            this.$el.append(frag);\n            this.onRender();\n            return this;\n        },\n        onRender() {\n        }\n    });\n});\ndefine('skylark-grapejs/canvas/view/FrameView',[\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../css_composer/view/CssRulesView',\n    '../../dom_components/view/ComponentView',\n    '../../utils/dom',\n    '../../utils/mixins'\n], function (langx,Backbone, _, CssRulesView, ComponentView, dom, mixins) {\n    'use strict';\n    return Backbone.View.extend({\n        tagName: 'iframe',\n        attributes: {\n            allowfullscreen: 'allowfullscreen',\n            'data-frame-el': true\n        },\n        initialize(o) {\n            _.bindAll(this, 'updateClientY', 'stopAutoscroll', 'autoscroll', '_emitUpdate');\n            const {model, el} = this;\n            this.config = langx.mixin({},\n                ...o.config ,{\n                frameView: this\n            });\n            this.ppfx = this.config.pStylePrefix || '';\n            this.em = this.config.em;\n            this.listenTo(model, 'change:head', this.updateHead);\n            model.view = this;\n            mixins.setViewEl(el, this);\n        },\n        updateHead() {\n            const headEl = this.getHead();\n            dom.empty(headEl);\n            dom.appendVNodes(headEl, this.model.getHead());\n        },\n        getEl() {\n            return this.el;\n        },\n        getWindow() {\n            return this.getEl().contentWindow;\n        },\n        getDoc() {\n            return this.getEl().contentDocument;\n        },\n        getHead() {\n            return this.getDoc().querySelector('head');\n        },\n        getBody() {\n            return this.getDoc().querySelector('body');\n        },\n        getWrapper() {\n            return this.getBody().querySelector('[data-gjs-type=wrapper]');\n        },\n        getJsContainer() {\n            if (!this.jsContainer) {\n                this.jsContainer = dom.createEl('div', { class: `${ this.ppfx }js-cont` });\n            }\n            return this.jsContainer;\n        },\n        getToolsEl() {\n            const {frameWrapView} = this.config;\n            return frameWrapView && frameWrapView.elTools;\n        },\n        getGlobalToolsEl() {\n            return this.em.get('Canvas').getGlobalToolsEl();\n        },\n        getHighlighter() {\n            return this._getTool('[data-hl]');\n        },\n        getBadgeEl() {\n            return this._getTool('[data-badge]');\n        },\n        getOffsetViewerEl() {\n            return this._getTool('[data-offset]');\n        },\n        getRect() {\n            if (!this.rect) {\n                this.rect = this.el.getBoundingClientRect();\n            }\n            return this.rect;\n        },\n        getOffsetRect() {\n            const {el} = this;\n            const {scrollTop, scrollLeft} = this.getBody();\n            const height = el.offsetHeight;\n            const width = el.offsetWidth;\n            return {\n                top: el.offsetTop,\n                left: el.offsetLeft,\n                height,\n                width,\n                scrollTop,\n                scrollLeft,\n                scrollBottom: scrollTop + height,\n                scrollRight: scrollLeft + width\n            };\n        },\n        _getTool(name) {\n            const toolsEl = this.getToolsEl();\n            if (!this[name]) {\n                this[name] = toolsEl.querySelector(name);\n            }\n            return this[name];\n        },\n        remove() {\n            const {root, model} = this;\n            this._toggleEffects();\n            Backbone.View.prototype.remove.apply(this, arguments);\n            root.remove();\n            model.remove();\n        },\n        startAutoscroll() {\n            this.lastMaxHeight = this.getWrapper().offsetHeight - this.el.offsetHeight;\n            setTimeout(() => {\n                this._toggleAutoscrollFx(1);\n                requestAnimationFrame(this.autoscroll);\n            }, 0);\n        },\n        autoscroll() {\n            if (this.dragging) {\n                const canvas = this.em.get('Canvas');\n                const win = this.getWindow();\n                const body = this.getBody();\n                const actualTop = body.scrollTop;\n                const clientY = this.lastClientY || 0;\n                const limitTop = canvas.getConfig().autoscrollLimit;\n                const limitBottom = this.getRect().height - limitTop;\n                let nextTop = actualTop;\n                if (clientY < limitTop) {\n                    nextTop -= limitTop - clientY;\n                }\n                if (clientY > limitBottom) {\n                    nextTop += clientY - limitBottom;\n                }\n                if (nextTop !== actualTop && nextTop > 0 && nextTop < this.lastMaxHeight) {\n                    const toolsEl = this.getGlobalToolsEl();\n                    toolsEl.style.opacity = 0;\n                    this.showGlobalTools();\n                    win.scrollTo(0, nextTop);\n                }\n                requestAnimationFrame(this.autoscroll);\n            }\n        },\n        updateClientY(ev) {\n            ev.preventDefault();\n            this.lastClientY = mixins.getPointerEvent(ev).clientY * this.em.getZoomDecimal();\n        },\n        showGlobalTools: _.debounce(function () {\n            this.getGlobalToolsEl().style.opacity = '';\n        }, 50),\n        stopAutoscroll() {\n            this.dragging && this._toggleAutoscrollFx();\n        },\n        _toggleAutoscrollFx(enable) {\n            this.dragging = enable;\n            const win = this.getWindow();\n            const method = enable ? 'on' : 'off';\n            mixins[method](win, 'mousemove dragover', this.updateClientY);\n            mixins[method](win, 'mouseup', this.stopAutoscroll);\n        },\n        render() {\n            const {el, $el, ppfx, config} = this;\n            $el.attr({ class: ppfx + 'frame' });\n            if (config.scripts.length) {\n                this.renderScripts();\n            } else if (config.renderContent) {\n                el.onload = this.renderBody.bind(this);\n            }\n            return this;\n        },\n        renderScripts() {\n            const {el, config} = this;\n            const appendScript = scripts => {\n                if (scripts.length > 0) {\n                    const src = scripts.shift();\n                    const scriptEl = dom.createEl('script', langx.mixin({\n                                            type: 'text/javascript'\n                                        },_.isString(src) ? { src } : src\n                    ));\n                    scriptEl.onerror = scriptEl.onload = appendScript.bind(null, scripts);\n                    el.contentDocument.head.appendChild(scriptEl);\n                } else {\n                    this.renderBody();\n                }\n            };\n            el.onload = () => appendScript([...config.scripts]);\n        },\n        renderBody() {\n            const {config, model, ppfx} = this;\n            const root = model.get('root');\n            const styles = model.get('styles');\n            const {em} = config;\n            const doc = this.getDoc();\n            const head = this.getHead();\n            const body = this.getBody();\n            const win = this.getWindow();\n            const conf = em.get('Config');\n            const extStyles = [];\n            config.styles.forEach(href => extStyles.push(_.isString(href) ? {\n                tag: 'link',\n                attributes: {\n                    href,\n                    rel: 'stylesheet'\n                }\n            } : {\n                tag: 'link',\n                attributes: {\n                    rel: 'stylesheet',\n                    ...href\n                }\n            }));\n            extStyles.length && dom.appendVNodes(head, extStyles);\n            const colorWarn = '#ffca6f';\n            dom.append(body, `<style>\n      ${ conf.baseCss || '' }\n\n      .${ ppfx }dashed *[data-highlightable] {\n        outline: 1px dashed rgba(170,170,170,0.7);\n        outline-offset: -2px;\n      }\n\n      .${ ppfx }selected {\n        outline: 3px solid #3b97e3 !important;\n        outline-offset: -3px;\n      }\n\n      .${ ppfx }selected-parent {\n        outline: 2px solid ${ colorWarn } !important\n      }\n\n      .${ ppfx }no-select {\n        user-select: none;\n        -webkit-user-select:none;\n        -moz-user-select: none;\n      }\n\n      .${ ppfx }freezed {\n        opacity: 0.5;\n        pointer-events: none;\n      }\n\n      .${ ppfx }no-pointer {\n        pointer-events: none;\n      }\n\n      .${ ppfx }plh-image {\n        background: #f5f5f5;\n        border: none;\n        height: 100px;\n        width: 100px;\n        display: block;\n        outline: 3px solid #ffca6f;\n        cursor: pointer;\n        outline-offset: -2px\n      }\n\n      .${ ppfx }grabbing {\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n      }\n\n      .${ ppfx }is__grabbing {\n        overflow-x: hidden;\n      }\n\n      .${ ppfx }is__grabbing,\n      .${ ppfx }is__grabbing * {\n        cursor: grabbing !important;\n      }\n\n      ${ conf.canvasCss || '' }\n      ${ conf.protectedCss || '' }\n    </style>`);\n            this.root = new ComponentView({\n                model: root,\n                config: {\n                    ...root.config,\n                    frameView: this\n                }\n            }).render();\n            dom.append(body, this.root.el);\n            dom.append(body, new CssRulesView({\n                collection: styles,\n                config: {\n                    ...em.get('CssComposer').getConfig(),\n                    frameView: this\n                }\n            }).render().el);\n            dom.append(body, this.getJsContainer());\n            mixins.on(body, 'click', ev => ev && ev.target.tagName == 'A' && ev.preventDefault());\n            mixins.on(body, 'submit', ev => ev && ev.preventDefault());\n            [\n                {\n                    event: 'keydown keyup keypress',\n                    class: 'KeyboardEvent'\n                },\n                {\n                    event: 'wheel',\n                    class: 'WheelEvent'\n                }\n            ].forEach(obj => obj.event.split(' ').forEach(event => {\n                doc.addEventListener(event, ev => this.el.dispatchEvent(dom.createCustomEvent(ev, obj.class)));\n            }));\n            this._toggleEffects(1);\n            model.trigger('loaded');\n        },\n        _toggleEffects(enable) {\n            const method = enable ? mixins.on : mixins.off;\n            const win = this.getWindow();\n            method(win, `${ dom.motionsEv } resize`, this._emitUpdate);\n        },\n        _emitUpdate() {\n            this.model._emitUpdated();\n        }\n    });\n});\ndefine('skylark-grapejs/canvas/view/FrameWrapView',[\n    'skylark-backbone',\n    './FrameView',\n    'skylark-underscore',\n    '../../utils/dom',\n    '../../utils/Dragger'\n], function (Backbone, FrameView, a, b, Dragger) {\n    'use strict';\n    return Backbone.View.extend({\n        events: {\n            'click [data-action-remove]': 'remove',\n            'mousedown [data-action-move]': 'startDrag'\n        },\n        initialize(opts = {}, conf = {}) {\n            a.bindAll(this, 'onScroll', 'frameLoaded', 'updateOffset', 'remove', 'startDrag');\n            const {model} = this;\n            const config = {\n                ...opts.config || conf,\n                frameWrapView: this\n            };\n            const {canvasView, em} = config;\n            this.cv = canvasView;\n            this.config = config;\n            this.em = em;\n            this.canvas = em && em.get('Canvas');\n            this.ppfx = config.pStylePrefix || '';\n            this.frame = new FrameView({\n                model,\n                config\n            });\n            this.classAnim = `${ this.ppfx }frame-wrapper--anim`;\n            this.listenTo(model, 'loaded', this.frameLoaded);\n            this.listenTo(model, 'change:x change:y', this.updatePos);\n            this.listenTo(model, 'change:width change:height', this.updateSize);\n            this.updatePos();\n            this.setupDragger();\n        },\n        setupDragger() {\n            const {canvas, model} = this;\n            let dragX, dragY, zoom;\n            const toggleEffects = on => {\n                canvas.toggleFramesEvents(on);\n            };\n            this.dragger = new Dragger({\n                onStart: () => {\n                    const {x, y} = model.attributes;\n                    zoom = this.em.getZoomMultiplier();\n                    dragX = x;\n                    dragY = y;\n                    toggleEffects();\n                },\n                onEnd: () => toggleEffects(1),\n                setPosition: posOpts => {\n                    model.set({\n                        x: dragX + posOpts.x * zoom,\n                        y: dragY + posOpts.y * zoom\n                    });\n                }\n            });\n        },\n        startDrag(ev) {\n            ev && this.dragger.start(ev);\n        },\n        remove() {\n            Backbone.View.prototype.remove.apply(this, arguments);\n            this.frame.remove();\n            return this;\n        },\n        updateOffset: a.debounce(function () {\n            const {em, $el, frame} = this;\n            em.runDefault({ preserveSelected: 1 });\n            $el.removeClass(this.classAnim);\n            frame.model._emitUpdated();\n        }),\n        updatePos(md) {\n            const {model, el} = this;\n            const {x, y} = model.attributes;\n            const {style} = el;\n            this.frame.rect = 0;\n            style.left = isNaN(x) ? x : `${ x }px`;\n            style.top = isNaN(y) ? y : `${ y }px`;\n            md && this.updateOffset();\n        },\n        updateSize: a.debounce(function () {\n            this.updateDim();\n        }),\n        updateDim() {\n            const {em, el, $el, model, classAnim} = this;\n            const {width, height} = model.attributes;\n            const {style} = el;\n            const currW = style.width || '';\n            const currH = style.height || '';\n            const newW = width || '';\n            const newH = height || '';\n            const noChanges = currW == newW && currH == newH;\n            const un = 'px';\n            this.frame.rect = 0;\n            $el.addClass(classAnim);\n            style.width = a.isNumber(newW) ? `${ newW }${ un }` : newW;\n            style.height = a.isNumber(newH) ? `${ newH }${ un }` : newH;\n            if (a.isNull(width) || a.isNull(height)) {\n                const newDims = {\n                    ...!width ? { width: el.offsetWidth } : {},\n                    ...!height ? { height: el.offsetHeight } : {}\n                };\n                model.set(newDims, { silent: 1 });\n            }\n            em.stopDefault({ preserveSelected: 1 });\n            noChanges ? this.updateOffset() : $el.one(b.motionsEv, this.updateOffset);\n        },\n        onScroll() {\n            const {frame, em} = this;\n            em.trigger('frame:scroll', {\n                frame,\n                body: frame.getBody(),\n                target: frame.getWindow()\n            });\n        },\n        frameLoaded() {\n            const {frame} = this;\n            frame.getWindow().onscroll = this.onScroll;\n            this.updateDim();\n        },\n        render() {\n            const {frame, $el, ppfx, cv, model, el} = this;\n            const {onRender} = model.attributes;\n            frame.render();\n            $el.empty().attr({ class: `${ ppfx }frame-wrapper` }).append(`\n      <div class=\"${ ppfx }frame-wrapper__top gjs-two-color\" data-frame-top>\n        <div class=\"${ ppfx }frame-wrapper__name\" data-action-move>\n          ${ model.get('name') || '' }\n        </div>\n        <div class=\"${ ppfx }frame-wrapper__top-r\">\n          <div class=\"${ ppfx }frame-wrapper__icon\" data-action-remove style=\"display: none\">\n            <svg viewBox=\"0 0 24 24\"><path d=\"M19 4h-3.5l-1-1h-5l-1 1H5v2h14M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12z\"></path></svg>\n          </div>\n        </div>\n      </div>\n      <div class=\"${ ppfx }frame-wrapper__right\" data-frame-right></div>\n      <div class=\"${ ppfx }frame-wrapper__left\" data-frame-left></div>\n      <div class=\"${ ppfx }frame-wrapper__bottom\" data-frame-bottom></div>\n      `).append(frame.el);\n            const elTools = b.createEl('div', {\n                class: `${ ppfx }tools`,\n                style: 'pointer-events:none; opacity: 0'\n            }, `\n      <div class=\"${ ppfx }highlighter\" data-hl></div>\n      <div class=\"${ ppfx }badge\" data-badge></div>\n      <div class=\"${ ppfx }placeholder\">\n        <div class=\"${ ppfx }placeholder-int\"></div>\n      </div>\n      <div class=\"${ ppfx }ghost\"></div>\n      <div class=\"${ ppfx }toolbar\" style=\"pointer-events:all\"></div>\n      <div class=\"${ ppfx }resizer\"></div>\n      <div class=\"${ ppfx }offset-v\" data-offset>\n        <div class=\"gjs-marginName\" data-offset-m>\n          <div class=\"gjs-margin-v-el gjs-margin-v-top\" data-offset-m-t></div>\n          <div class=\"gjs-margin-v-el gjs-margin-v-bottom\" data-offset-m-b></div>\n          <div class=\"gjs-margin-v-el gjs-margin-v-left\" data-offset-m-l></div>\n          <div class=\"gjs-margin-v-el gjs-margin-v-right\" data-offset-m-r></div>\n        </div>\n        <div class=\"gjs-paddingName\" data-offset-m>\n          <div class=\"gjs-padding-v-el gjs-padding-v-top\" data-offset-p-t></div>\n          <div class=\"gjs-padding-v-el gjs-padding-v-bottom\" data-offset-p-b></div>\n          <div class=\"gjs-padding-v-el gjs-padding-v-left\" data-offset-p-l></div>\n          <div class=\"gjs-padding-v-el gjs-padding-v-right\" data-offset-p-r></div>\n        </div>\n      </div>\n      <div class=\"${ ppfx }offset-fixed-v\"></div>\n    `);\n            this.elTools = elTools;\n            cv.toolsWrapper.appendChild(elTools);\n            onRender && onRender({\n                el,\n                elTop: el.querySelector('[data-frame-top]'),\n                elRight: el.querySelector('[data-frame-right]'),\n                elBottom: el.querySelector('[data-frame-bottom]'),\n                elLeft: el.querySelector('[data-frame-left]'),\n                frame: model,\n                frameWrapperView: this,\n                remove: this.remove,\n                startDrag: this.startDrag\n            });\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/canvas/view/FramesView',[\n    '../../domain_abstract/view/DomainViews',\n    './FrameWrapView'\n], function (DomainViews, FrameWrapView) {\n    'use strict';\n    return DomainViews.extend({\n        itemView: FrameWrapView,\n        autoAdd: 1,\n        init() {\n            this.listenTo(this.collection, 'reset', this.render);\n        },\n        onRender() {\n            const {config, $el} = this;\n            const {em} = config;\n            em && $el.attr({ class: `${ em.getConfig('stylePrefix') }frames` });\n        }\n    });\n});\ndefine('skylark-grapejs/canvas/view/CanvasView',[\n    \"skylark-langx/langx\",\n    \"skylark-jquery\",\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins',\n    './FramesView'\n], function (langx,$,Backbone, _, mixins, FramesView) {\n    'use strict';\n    let timerZoom;\n    return Backbone.View.extend({\n        events: { wheel: 'onWheel' },\n        template() {\n            const {pfx} = this;\n            return `\n      <div class=\"${ pfx }canvas__frames\" data-frames></div>\n      <div id=\"${ pfx }tools\" class=\"${ pfx }canvas__tools\" data-tools></div>\n    `;\n        },\n        initialize(o) {\n            _.bindAll(this, 'clearOff', 'onKeyPress');\n            mixins.on(window, 'scroll resize', this.clearOff);\n            const {model} = this;\n            const frames = model.get('frames');\n            this.config = o.config || {};\n            this.em = this.config.em || {};\n            this.pfx = this.config.stylePrefix || '';\n            this.ppfx = this.config.pStylePrefix || '';\n            this.className = this.config.stylePrefix + 'canvas';\n            const {em, config} = this;\n            this.frames = new FramesView({\n                collection: frames,\n                config: langx.mixin({},config,{\n                    canvasView: this,\n                    renderContent: 1\n                })\n            });\n            this.listenTo(em, 'change:canvasOffset', this.clearOff);\n            this.listenTo(em, 'component:selected', this.checkSelected);\n            this.listenTo(model, 'change:zoom change:x change:y', this.updateFrames);\n            this.listenTo(frames, 'loaded:all', () => em.trigger('loaded'));\n            this.toggleListeners(1);\n        },\n        checkSelected(component, opts = {}) {\n            const {scroll} = opts;\n            const currFrame = this.em.get('currentFrame');\n            scroll && component.views.forEach(view => {\n                view._getFrame() !== currFrame && view.scrollIntoView(scroll);\n            });\n        },\n        remove() {\n            Backbone.View.prototype.remove.apply(this, arguments);\n            this.toggleListeners();\n        },\n        preventDefault(ev) {\n            if (ev) {\n                ev.preventDefault();\n                ev._parentEvent && ev._parentEvent.preventDefault();\n            }\n        },\n        toggleListeners(enable) {\n            const method = enable ? 'on' : 'off';\n\n            mixins[method](document, 'keypress', this.onKeyPress);\n        },\n        onKeyPress(ev) {\n            const {em} = this;\n            const key = mixins.getKeyChar(ev);\n            if (key === ' ' && em.getZoomDecimal() !== 1) {\n                this.preventDefault(ev);\n                em.get('Editor').runCommand('core:canvas-move');\n            }\n        },\n        onWheel(ev) {\n            if ((ev.ctrlKey || ev.metaKey) && this.em.getConfig('multiFrames')) {\n                this.preventDefault(ev);\n                const {model} = this;\n                const delta = Math.max(-1, Math.min(1, ev.wheelDelta || -ev.detail));\n                const zoom = model.get('zoom');\n                model.set('zoom', zoom + delta * 2);\n            }\n        },\n        updateFrames(ev) {\n            const {em, model} = this;\n            const {x, y} = model.attributes;\n            const zoom = this.getZoom();\n            const defOpts = { preserveSelected: 1 };\n            const mpl = zoom ? 1 / zoom : 1;\n            this.framesArea.style.transform = `scale(${ zoom }) translate(${ x * mpl }px, ${ y * mpl }px)`;\n            this.clearOff();\n            em.stopDefault(defOpts);\n            em.trigger('canvas:update', ev);\n            timerZoom && clearTimeout(timerZoom);\n            timerZoom = setTimeout(() => em.runDefault(defOpts), 300);\n        },\n        getZoom() {\n            return this.em.getZoomDecimal();\n        },\n        isElInViewport(el) {\n            const elem = mixins.getElement(el);\n            const rect = mixins.getElRect(elem);\n            const frameRect = this.getFrameOffset(elem);\n            const rTop = rect.top;\n            const rLeft = rect.left;\n            return rTop >= 0 && rLeft >= 0 && rTop <= frameRect.height && rLeft <= frameRect.width;\n        },\n        offset(el, opts = {}) {\n            const rect = mixins.getElRect(el);\n            const docBody = el.ownerDocument.body;\n            const {noScroll} = opts;\n            return {\n                top: rect.top + (noScroll ? 0 : docBody.scrollTop),\n                left: rect.left + (noScroll ? 0 : docBody.scrollLeft),\n                width: rect.width,\n                height: rect.height\n            };\n        },\n        clearOff() {\n            this.frmOff = null;\n            this.cvsOff = null;\n        },\n        getFrameOffset(el) {\n            if (!this.frmOff || el) {\n                const frEl = el ? el.ownerDocument.defaultView.frameElement : this.frame.el;\n                this.frmOff = this.offset(frEl);\n            }\n            return this.frmOff;\n        },\n        getCanvasOffset() {\n            if (!this.cvsOff)\n                this.cvsOff = this.offset(this.el);\n            return this.cvsOff;\n        },\n        getElementPos(el, opts) {\n            const zoom = this.getZoom();\n            var opt = opts || {};\n            var frmOff = this.getFrameOffset(el);\n            var cvsOff = this.getCanvasOffset();\n            var eo = this.offset(el, opts);\n            var frmTop = opt.avoidFrameOffset ? 0 : frmOff.top;\n            var frmLeft = opt.avoidFrameOffset ? 0 : frmOff.left;\n            const top = eo.top * zoom + frmTop - cvsOff.top;\n            const left = eo.left * zoom + frmLeft - cvsOff.left;\n            const height = eo.height * zoom;\n            const width = eo.width * zoom;\n            return {\n                top,\n                left,\n                height,\n                width,\n                zoom,\n                rect: eo\n            };\n        },\n        getElementOffsets(el) {\n            if (!el || mixins.isTextNode(el))\n                return {};\n            const result = {};\n            const styles = window.getComputedStyle(el);\n            [\n                'marginTop',\n                'marginRight',\n                'marginBottom',\n                'marginLeft',\n                'paddingTop',\n                'paddingRight',\n                'paddingBottom',\n                'paddingLeft'\n            ].forEach(offset => {\n                result[offset] = parseFloat(styles[offset]) * this.getZoom();\n            });\n            return result;\n        },\n        getPosition(opts = {}) {\n            const doc = this.frame.el.contentDocument;\n            if (!doc)\n                return;\n            const bEl = doc.body;\n            const zoom = this.getZoom();\n            const fo = this.getFrameOffset();\n            const co = this.getCanvasOffset();\n            const {noScroll} = opts;\n            return {\n                top: fo.top + (noScroll ? 0 : bEl.scrollTop) * zoom - co.top,\n                left: fo.left + (noScroll ? 0 : bEl.scrollLeft) * zoom - co.left,\n                width: co.width,\n                height: co.height\n            };\n        },\n        updateScript(view) {\n            const model = view.model;\n            const id = model.getId();\n            if (!view.scriptContainer) {\n                view.scriptContainer = $(`<div data-id=\"${ id }\">`);\n                this.getJsContainer().appendChild(view.scriptContainer.get(0));\n            }\n            view.el.id = id;\n            view.scriptContainer.html('');\n            const script = document.createElement('script');\n            script.innerHTML = `\n        setTimeout(function() {\n          var item = document.getElementById('${ id }');\n          if (!item) return;\n          (function(){\n            ${ model.getScriptString() };\n          }.bind(item))()\n        }, 1);`;\n            setTimeout(() => view.scriptContainer.get(0).appendChild(script), 0);\n        },\n        getJsContainer(view) {\n            const frameView = this.getFrameView(view);\n            return frameView && frameView.getJsContainer();\n        },\n        getFrameView(view) {\n            return view && view._getFrame() || this.em.get('currentFrame');\n        },\n        render() {\n            const {el, $el, ppfx, model, em, frames} = this;\n            const cssc = em.get('CssComposer');\n            const wrapper = model.get('wrapper');\n            $el.html(this.template());\n            const $frames = $el.find('[data-frames]');\n            this.framesArea = $frames.get(0);\n            this.wrapper = wrapper;\n            if (wrapper && typeof wrapper.render == 'function') {\n                model.get('frame').set({\n                    wrapper,\n                    root: wrapper.getWrapper(),\n                    styles: cssc.getAll()\n                });\n            }\n            const toolsWrp = $el.find('[data-tools]');\n            this.toolsWrapper = toolsWrp.get(0);\n            toolsWrp.append(`\n      <div class=\"${ ppfx }tools ${ ppfx }tools-gl\" style=\"pointer-events:none\">\n        <div class=\"${ ppfx }placeholder\">\n          <div class=\"${ ppfx }placeholder-int\"></div>\n        </div>\n      </div>\n      <div id=\"${ ppfx }tools\" style=\"pointer-events:none\">\n        <div class=\"${ ppfx }badge\"></div>\n        <div class=\"${ ppfx }ghost\"></div>\n        <div class=\"${ ppfx }toolbar\" style=\"pointer-events:all\"></div>\n        <div class=\"${ ppfx }resizer\"></div>\n        <div class=\"${ ppfx }offset-v\"></div>\n        <div class=\"${ ppfx }offset-fixed-v\"></div>\n      </div>\n    `);\n            const toolsEl = el.querySelector(`#${ ppfx }tools`);\n            this.hlEl = el.querySelector(`.${ ppfx }highlighter`);\n            this.badgeEl = el.querySelector(`.${ ppfx }badge`);\n            this.placerEl = el.querySelector(`.${ ppfx }placeholder`);\n            this.ghostEl = el.querySelector(`.${ ppfx }ghost`);\n            this.toolbarEl = el.querySelector(`.${ ppfx }toolbar`);\n            this.resizerEl = el.querySelector(`.${ ppfx }resizer`);\n            this.offsetEl = el.querySelector(`.${ ppfx }offset-v`);\n            this.fixedOffsetEl = el.querySelector(`.${ ppfx }offset-fixed-v`);\n            this.toolsGlobEl = el.querySelector(`.${ ppfx }tools-gl`);\n            this.toolsEl = toolsEl;\n            this.el.className = this.className;\n            const frms = model.get('frames');\n            frms.listenToLoad();\n            frames.render();\n            em.setCurrentFrame(frms.at(0).view);\n            $frames.append(frames.el);\n            this.frame = frms.at(0).view;\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/canvas/index',[\n    \"skylark-langx/langx\",\n    '../utils/mixins',\n    'skylark-underscore',\n    '../utils/Droppable',\n    './config/config',\n    './model/Canvas',\n    './view/CanvasView'\n], function (langx,mixins, _, Droppable, defaults, Canvas, canvasView) {\n    'use strict';\n    const {requestAnimationFrame} = window;\n    return () => {\n        let c = {};\n        let canvas;\n        let frameRect;\n        let CanvasView;\n        return {\n            getCanvasView() {\n                return CanvasView;\n            },\n            name: 'Canvas',\n            init(config = {}) {\n                c = langx.mixin({},defaults,config, { module: this});\n                this.em = c.em;\n                const ppfx = c.pStylePrefix;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                canvas = new Canvas(config);\n                CanvasView = new canvasView({\n                    model: canvas,\n                    config: c\n                });\n                var cm = c.em.get('DomComponents');\n                if (cm)\n                    this.setWrapper(cm);\n                this.model = canvas;\n                this.startAutoscroll = this.startAutoscroll.bind(this);\n                this.stopAutoscroll = this.stopAutoscroll.bind(this);\n                return this;\n            },\n            getConfig() {\n                return c;\n            },\n            setWrapper(wrp) {\n                canvas.set('wrapper', wrp);\n            },\n            getElement() {\n                return CanvasView.el;\n            },\n            getFrame() {\n                return canvas.get('frame');\n            },\n            getFrameEl() {\n                const {frame} = CanvasView;\n                return frame && frame.el;\n            },\n            getFramesEl() {\n                return CanvasView.framesArea;\n            },\n            getWindow() {\n                return this.getFrameEl().contentWindow;\n            },\n            getDocument() {\n                const frame = this.getFrameEl();\n                return frame && frame.contentDocument;\n            },\n            getBody() {\n                const doc = this.getDocument();\n                return doc && doc.body;\n            },\n            getWrapperEl() {\n                const body = this.getBody();\n                return body && body.querySelector('#wrapper');\n            },\n            _getCompFrame(compView) {\n                return compView && compView._getFrame();\n            },\n            _getLocalEl(globalEl, compView, method) {\n                let result = globalEl;\n                const frameView = this._getCompFrame(compView);\n                result = frameView ? frameView[method]() : result;\n                return result;\n            },\n            getGlobalToolsEl() {\n                return CanvasView.toolsGlobEl;\n            },\n            getToolsEl(compView) {\n                return this._getLocalEl(CanvasView.toolsEl, compView, 'getToolsEl');\n            },\n            getHighlighter(compView) {\n                return this._getLocalEl(CanvasView.hlEl, compView, 'getHighlighter');\n            },\n            getBadgeEl(compView) {\n                return this._getLocalEl(CanvasView.badgeEl, compView, 'getBadgeEl');\n            },\n            getPlacerEl() {\n                return CanvasView.placerEl;\n            },\n            getGhostEl() {\n                return CanvasView.ghostEl;\n            },\n            getToolbarEl() {\n                return CanvasView.toolbarEl;\n            },\n            getResizerEl() {\n                return CanvasView.resizerEl;\n            },\n            getOffsetViewerEl(compView) {\n                return this._getLocalEl(CanvasView.offsetEl, compView, 'getOffsetViewerEl');\n            },\n            getFixedOffsetViewerEl() {\n                return CanvasView.fixedOffsetEl;\n            },\n            render() {\n                return CanvasView.render().el;\n            },\n            getOffset() {\n                var frameOff = this.offset(this.getFrameEl());\n                var canvasOff = this.offset(this.undefined());\n                return {\n                    top: frameOff.top - canvasOff.top,\n                    left: frameOff.left - canvasOff.left\n                };\n            },\n            offset(el) {\n                return CanvasView.offset(el);\n            },\n            setCustomBadgeLabel(f) {\n                c.customBadgeLabel = f;\n            },\n            getElementPos(el, opts) {\n                return CanvasView.getElementPos(el, opts);\n            },\n            getElementOffsets(el) {\n                return CanvasView.getElementOffsets(el);\n            },\n            getRect() {\n                const {top, left} = CanvasView.getPosition();\n                return {\n                    ...CanvasView.getCanvasOffset(),\n                    topScroll: top,\n                    leftScroll: left\n                };\n            },\n            getTargetToElementDim(target, element, options = {}) {\n                var opts = options || {};\n                var canvasPos = CanvasView.getPosition();\n                if (!canvasPos)\n                    return;\n                var pos = opts.elPos || CanvasView.getElementPos(element);\n                var toRight = options.toRight || 0;\n                var targetHeight = opts.targetHeight || target.offsetHeight;\n                var targetWidth = opts.targetWidth || target.offsetWidth;\n                var eventToTrigger = opts.event || null;\n                var elTop = pos.top - targetHeight;\n                var elLeft = pos.left;\n                elLeft += toRight ? pos.width : 0;\n                elLeft = toRight ? elLeft - targetWidth : elLeft;\n                var leftPos = elLeft < canvasPos.left ? canvasPos.left : elLeft;\n                var topPos = elTop < canvasPos.top ? canvasPos.top : elTop;\n                topPos = topPos > pos.top + pos.height ? pos.top + pos.height : topPos;\n                var result = {\n                    top: topPos,\n                    left: leftPos,\n                    elementTop: pos.top,\n                    elementLeft: pos.left,\n                    elementWidth: pos.width,\n                    elementHeight: pos.height,\n                    targetWidth: target.offsetWidth,\n                    targetHeight: target.offsetHeight,\n                    canvasTop: canvasPos.top,\n                    canvasLeft: canvasPos.left,\n                    canvasWidth: canvasPos.width,\n                    canvasHeight: canvasPos.height\n                };\n                if (eventToTrigger && c.em) {\n                    c.em.trigger(eventToTrigger, result);\n                }\n                return result;\n            },\n            canvasRectOffset(el, pos, opts = {}) {\n                const getFrameElFromDoc = doc => {\n                    const {defaultView} = doc;\n                    return defaultView && defaultView.frameElement;\n                };\n                const rectOff = (el, top = 1, pos) => {\n                    const zoom = this.em.getZoomDecimal();\n                    const side = top ? 'top' : 'left';\n                    const doc = el.ownerDocument;\n                    const {offsetTop = 0, offsetLeft = 0} = opts.offset ? getFrameElFromDoc(doc) : {};\n                    const {scrollTop = 0, scrollLeft = 0} = doc.body || {};\n                    const scroll = top ? scrollTop : scrollLeft;\n                    const offset = top ? offsetTop : offsetLeft;\n                    return pos[side] - (scroll - offset) * zoom;\n                };\n                return {\n                    top: rectOff(el, 1, pos),\n                    left: rectOff(el, 0, pos)\n                };\n            },\n            getTargetToElementFixed(el, elToMove, opts = {}) {\n                const pos = opts.pos || this.getElementPos(el);\n                const cvOff = opts.canvasOff || this.canvasRectOffset(el, pos);\n                const toolbarH = elToMove.offsetHeight || 0;\n                const toolbarW = elToMove.offsetWidth || 0;\n                const elRight = pos.left + pos.width;\n                const cv = this.getCanvasView();\n                const frCvOff = cv.getPosition();\n                const frameOffset = cv.getFrameOffset(el);\n                const {event} = opts;\n                let top = -toolbarH;\n                let left = pos.width - toolbarW;\n                left = pos.left < -left ? -pos.left : left;\n                left = elRight > frCvOff.width ? left - (elRight - frCvOff.width) : left;\n                const fullHeight = pos.height + toolbarH;\n                const elIsShort = fullHeight < frameOffset.height;\n                if (cvOff.top < toolbarH) {\n                    if (elIsShort) {\n                        top = top + fullHeight;\n                    } else {\n                        top = -cvOff.top < pos.height ? -cvOff.top : pos.height;\n                    }\n                }\n                const result = {\n                    top,\n                    left,\n                    canvasOffsetTop: cvOff.top,\n                    canvasOffsetLeft: cvOff.left\n                };\n                event && this.em.trigger(event, result);\n                return result;\n            },\n            getMouseRelativePos(e, options) {\n                var opts = options || {};\n                var addTop = 0;\n                var addLeft = 0;\n                var subWinOffset = opts.subWinOffset;\n                var doc = e.target.ownerDocument;\n                var win = doc.defaultView || doc.parentWindow;\n                var frame = win.frameElement;\n                var yOffset = subWinOffset ? win.pageYOffset : 0;\n                var xOffset = subWinOffset ? win.pageXOffset : 0;\n                if (frame) {\n                    var frameRect = frame.getBoundingClientRect();\n                    addTop = frameRect.top || 0;\n                    addLeft = frameRect.left || 0;\n                }\n                return {\n                    y: e.clientY + addTop - yOffset,\n                    x: e.clientX + addLeft - xOffset\n                };\n            },\n            getMouseRelativeCanvas(ev, opts) {\n                const zoom = this.getZoomDecimal();\n                const {top, left} = CanvasView.getPosition(opts);\n                return {\n                    y: ev.clientY * zoom + top,\n                    x: ev.clientX * zoom + left\n                };\n            },\n            hasFocus() {\n                return this.getDocument().hasFocus();\n            },\n            isInputFocused() {\n                const doc = this.getDocument();\n                const toIgnore = [\n                    'body',\n                    ...this.getConfig().notTextable\n                ];\n                const focused = doc && doc.activeElement;\n                return focused && !toIgnore.some(item => focused.matches(item));\n            },\n            scrollTo(el, opts = {}) {\n                const elem = mixins.getElement(el);\n                const view = elem && mixins.getViewEl(elem);\n                view && view.scrollIntoView(opts);\n            },\n            startAutoscroll(frame) {\n                const fr = frame && frame.view || this.em.getCurrentFrame();\n                fr && fr.startAutoscroll();\n            },\n            stopAutoscroll(frame) {\n                const fr = frame && frame.view || this.em.getCurrentFrame();\n                fr && fr.stopAutoscroll();\n            },\n            postRender() {\n                if (mixins.hasDnd(c.em))\n                    this.droppable = new Droppable(c.em);\n            },\n            setZoom(value) {\n                canvas.set('zoom', parseFloat(value));\n                return this;\n            },\n            getZoom() {\n                return parseFloat(canvas.get('zoom'));\n            },\n            getZoomDecimal() {\n                return this.getZoom() / 100;\n            },\n            getZoomMultiplier() {\n                const zoom = this.getZoomDecimal();\n                return zoom ? 1 / zoom : 1;\n            },\n            toggleFramesEvents(on) {\n                const {style} = this.getFramesEl();\n                style.pointerEvents = on ? '' : 'none';\n            },\n            getFrameWrapperEl() {\n                return CanvasView.frame.getWrapper();\n            },\n            getFrames() {\n                return canvas.get('frames').map(item => item);\n            },\n            addFrame(props = {}, opts = {}) {\n                return canvas.get('frames').add({ ...props }, {\n                    ...opts,\n                    em: this.em\n                });\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/commands/view/CommandAbstract',['skylark-backbone'], function (Backbone) {\n    'use strict';\n    const $ = Backbone.$;\n    return Backbone.View.extend({\n        initialize(o) {\n            this.config = o || {};\n            this.editorModel = this.em = this.config.em || {};\n            this.pfx = this.config.stylePrefix;\n            this.ppfx = this.config.pStylePrefix;\n            this.hoverClass = this.pfx + 'hover';\n            this.badgeClass = this.pfx + 'badge';\n            this.plhClass = this.pfx + 'placeholder';\n            this.freezClass = this.ppfx + 'freezed';\n            this.canvas = this.em.get && this.em.get('Canvas');\n            if (this.em.get)\n                this.setElement(this.getCanvas());\n            if (this.canvas) {\n                this.$canvas = this.$el;\n                this.canvasTool = this.getCanvasTools();\n            }\n            this.init(this.config);\n        },\n        onFrameScroll(e) {\n        },\n        getCanvas() {\n            return this.canvas.getElement();\n        },\n        getCanvasBody() {\n            return this.canvas.getBody();\n        },\n        getCanvasWrapper() {\n            return this.canvas.getWrapperEl();\n        },\n        getCanvasTools() {\n            return this.canvas.getToolsEl();\n        },\n        offset(el) {\n            var rect = el.getBoundingClientRect();\n            return {\n                top: rect.top + el.ownerDocument.body.scrollTop,\n                left: rect.left + el.ownerDocument.body.scrollLeft\n            };\n        },\n        init(o) {\n        },\n        callRun(editor, options = {}) {\n            const id = this.id;\n            editor.trigger(`run:${ id }:before`, options);\n            if (options && options.abort) {\n                editor.trigger(`abort:${ id }`, options);\n                return;\n            }\n            const sender = options.sender || editor;\n            const result = this.run(editor, sender, options);\n            editor.trigger(`run:${ id }`, result, options);\n            editor.trigger('run', id, result, options);\n            return result;\n        },\n        callStop(editor, options = {}) {\n            const id = this.id;\n            const sender = options.sender || editor;\n            editor.trigger(`stop:${ id }:before`, options);\n            const result = this.stop(editor, sender, options);\n            editor.trigger(`stop:${ id }`, result, options);\n            editor.trigger('stop', id, result, options);\n            return result;\n        },\n        stopCommand() {\n            this.em.get('Commands').stop(this.id);\n        },\n        run(em, sender) {\n        },\n        stop(em, sender) {\n        }\n    });\n});\ndefine('skylark-grapejs/commands/config/config',[],function () {\n    'use strict';\n    return {\n        stylePrefix: 'com-',\n        defaults: [],\n        strict: 1\n    };\n});\ndefine('parser/model/ParserHtml',['skylark-underscore'], function (a) {\n    'use strict';\n    return config => {\n        var TEXT_NODE = 'span';\n        var c = config;\n        var modelAttrStart = 'data-gjs-';\n        return {\n            compTypes: '',\n            modelAttrStart,\n            splitPropsFromAttr(attr = {}) {\n                const props = {};\n                const attrs = {};\n                a.each(attr, (value, key) => {\n                    if (key.indexOf(this.modelAttrStart) === 0) {\n                        const modelAttr = key.replace(modelAttrStart, '');\n                        const valueLen = value.length;\n                        const valStr = value && a.isString(value);\n                        const firstChar = valStr && value.substr(0, 1);\n                        const lastChar = valStr && value.substr(valueLen - 1);\n                        value = value === 'true' ? true : value;\n                        value = value === 'false' ? false : value;\n                        try {\n                            value = firstChar == '{' && lastChar == '}' || firstChar == '[' && lastChar == ']' ? JSON.parse(value) : value;\n                        } catch (e) {\n                        }\n                        props[modelAttr] = value;\n                    } else {\n                        attrs[key] = value;\n                    }\n                });\n                return {\n                    props,\n                    attrs\n                };\n            },\n            parseStyle(str) {\n                var result = {};\n                var decls = str.split(';');\n                for (var i = 0, len = decls.length; i < len; i++) {\n                    var decl = decls[i].trim();\n                    if (!decl)\n                        continue;\n                    var prop = decl.split(':');\n                    result[prop[0].trim()] = prop.slice(1).join(':').trim();\n                }\n                return result;\n            },\n            parseClass(str) {\n                const result = [];\n                const cls = str.split(' ');\n                for (let i = 0, len = cls.length; i < len; i++) {\n                    const cl = cls[i].trim();\n                    if (!cl)\n                        continue;\n                    result.push(cl);\n                }\n                return result;\n            },\n            parseNode(el) {\n                const result = [];\n                const nodes = el.childNodes;\n                for (var i = 0, len = nodes.length; i < len; i++) {\n                    const node = nodes[i];\n                    const attrs = node.attributes || [];\n                    const attrsLen = attrs.length;\n                    const nodePrev = result[result.length - 1];\n                    const nodeChild = node.childNodes.length;\n                    const ct = this.compTypes;\n                    let model = {};\n                    if (ct) {\n                        let obj = '';\n                        let type = node.getAttribute && node.getAttribute(`${ modelAttrStart }type`);\n                        if (type) {\n                            model = { type };\n                        } else {\n                            for (let it = 0; it < ct.length; it++) {\n                                const compType = ct[it];\n                                obj = compType.model.isComponent(node);\n                                if (obj) {\n                                    if (typeof obj !== 'object') {\n                                        obj = { type: compType.id };\n                                    }\n                                    break;\n                                }\n                            }\n                            model = obj;\n                        }\n                    }\n                    if (!model.tagName) {\n                        model.tagName = node.tagName ? node.tagName.toLowerCase() : '';\n                    }\n                    if (attrsLen) {\n                        model.attributes = {};\n                    }\n                    for (let j = 0; j < attrsLen; j++) {\n                        const nodeName = attrs[j].nodeName;\n                        let nodeValue = attrs[j].nodeValue;\n                        if (nodeName == 'style') {\n                            model.style = this.parseStyle(nodeValue);\n                        } else if (nodeName == 'class') {\n                            model.classes = this.parseClass(nodeValue);\n                        } else if (nodeName == 'contenteditable') {\n                            continue;\n                        } else if (nodeName.indexOf(modelAttrStart) === 0) {\n                            const modelAttr = nodeName.replace(modelAttrStart, '');\n                            const valueLen = nodeValue.length;\n                            const firstChar = nodeValue && nodeValue.substr(0, 1);\n                            const lastChar = nodeValue && nodeValue.substr(valueLen - 1);\n                            nodeValue = nodeValue === 'true' ? true : nodeValue;\n                            nodeValue = nodeValue === 'false' ? false : nodeValue;\n                            try {\n                                nodeValue = firstChar == '{' && lastChar == '}' || firstChar == '[' && lastChar == ']' ? JSON.parse(nodeValue) : nodeValue;\n                            } catch (e) {\n                            }\n                            model[modelAttr] = nodeValue;\n                        } else {\n                            model.attributes[nodeName] = nodeValue;\n                        }\n                    }\n                    if (nodeChild && !model.components) {\n                        const firstChild = node.childNodes[0];\n                        if (nodeChild === 1 && firstChild.nodeType === 3) {\n                            !model.type && (model.type = 'text');\n                            model.content = firstChild.nodeValue;\n                        } else {\n                            model.components = this.parseNode(node);\n                        }\n                    }\n                    if (model.type == 'textnode') {\n                        if (nodePrev && nodePrev.type == 'textnode') {\n                            nodePrev.content += model.content;\n                            continue;\n                        }\n                        if (!config.keepEmptyTextNodes) {\n                            const content = node.nodeValue;\n                            if (content != ' ' && !content.trim()) {\n                                continue;\n                            }\n                        }\n                    }\n                    const comps = model.components;\n                    if (!model.type && comps) {\n                        let allTxt = 1;\n                        let foundTextNode = 0;\n                        for (let ci = 0; ci < comps.length; ci++) {\n                            const comp = comps[ci];\n                            const cType = comp.type;\n                            if ([\n                                    'text',\n                                    'textnode'\n                                ].indexOf(cType) < 0 && c.textTags.indexOf(comp.tagName) < 0) {\n                                allTxt = 0;\n                                break;\n                            }\n                            if (cType == 'textnode') {\n                                foundTextNode = 1;\n                            }\n                        }\n                        if (allTxt && foundTextNode) {\n                            model.type = 'text';\n                        }\n                    }\n                    if (!model.tagName && model.type != 'textnode') {\n                        continue;\n                    }\n                    result.push(model);\n                }\n                return result;\n            },\n            parse(str, parserCss) {\n                var config = c.em && c.em.get('Config') || {};\n                var res = {\n                    html: '',\n                    css: ''\n                };\n                var el = document.createElement('div');\n                el.innerHTML = str;\n                var scripts = el.querySelectorAll('script');\n                var i = scripts.length;\n                if (!config.allowScripts) {\n                    while (i--)\n                        scripts[i].parentNode.removeChild(scripts[i]);\n                }\n                if (parserCss) {\n                    var styleStr = '';\n                    var styles = el.querySelectorAll('style');\n                    var j = styles.length;\n                    while (j--) {\n                        styleStr = styles[j].innerHTML + styleStr;\n                        styles[j].parentNode.removeChild(styles[j]);\n                    }\n                    if (styleStr)\n                        res.css = parserCss.parse(styleStr);\n                }\n                var result = this.parseNode(el);\n                if (result.length == 1)\n                    result = result[0];\n                res.html = result;\n                return res;\n            }\n        };\n    };\n});\ndefine('domain_abstract/model/Styleable',[\n    'skylark-underscore',\n    '../../utils/mixins',\n    '../../parser/model/ParserHtml'\n], function (a, b, ParserHtml) {\n    'use strict';\n    const parseStyle = ParserHtml().parseStyle;\n    return {\n        parseStyle,\n        extendStyle(prop) {\n            return {\n                ...this.getStyle(),\n                ...prop\n            };\n        },\n        getStyle() {\n            const style = this.get('style') || {};\n            return { ...style };\n        },\n        setStyle(prop = {}, opts = {}) {\n            if (a.isString(prop)) {\n                prop = parseStyle(prop);\n            }\n            const propOrig = this.getStyle();\n            const propNew = { ...prop };\n            this.set('style', propNew, opts);\n            const diff = b.shallowDiff(propOrig, propNew);\n            a.keys(diff).forEach(pr => {\n                const em = this.em;\n                this.trigger(`change:style:${ pr }`);\n                if (em) {\n                    em.trigger(`styleable:change`, this, pr);\n                    em.trigger(`styleable:change:${ pr }`, this, pr);\n                }\n            });\n            return propNew;\n        },\n        addStyle(prop, value = '', opts = {}) {\n            if (typeof prop == 'string') {\n                prop = { prop: value };\n            } else {\n                opts = value || {};\n            }\n            prop = this.extendStyle(prop);\n            this.setStyle(prop, opts);\n        },\n        removeStyle(prop) {\n            let style = this.getStyle();\n            delete style[prop];\n            this.setStyle(style);\n        },\n        styleToString(opts = {}) {\n            const result = [];\n            const style = this.getStyle();\n            for (let prop in style) {\n                const imp = opts.important;\n                const important = a.isArray(imp) ? imp.indexOf(prop) >= 0 : imp;\n                const value = `${ style[prop] }${ important ? ' !important' : '' }`;\n                const propPrv = prop.substr(0, 2) == '__';\n                value && !propPrv && result.push(`${ prop }:${ value };`);\n            }\n            return result.join('');\n        },\n        getSelectors() {\n            return this.get('selectors') || this.get('classes');\n        },\n        getSelectorsString() {\n            return this.selectorsToString ? this.selectorsToString() : this.getSelectors().getFullString();\n        }\n    };\n});\ndefine('dom_components/model/Components',[\n    \"skylark-langx/langx\",\n    'skylark-backbone',\n    'skylark-underscore'\n], function (langx,Backbone, _) {\n    'use strict';\n    let Component;\n    return Backbone.Collection.extend({\n        initialize(models, opt = {}) {\n            this.opt = opt;\n            this.listenTo(this, 'add', this.onAdd);\n            this.config = opt.config;\n            this.em = opt.em;\n            const {em} = this;\n            this.model = (attrs, options) => {\n                var model;\n                const df = opt.em.get('DomComponents').componentTypes;\n                options.em = opt.em;\n                options.config = opt.config;\n                options.componentTypes = df;\n                options.domc = opt.domc;\n                for (var it = 0; it < df.length; it++) {\n                    var dfId = df[it].id;\n                    if (dfId == attrs.type) {\n                        model = df[it].model;\n                        break;\n                    }\n                }\n                if (!model) {\n                    model = df[df.length - 1].model;\n                    em && attrs.type && em.logWarning(`Component type '${ attrs.type }' not found`, {\n                        attrs,\n                        options\n                    });\n                }\n                return new model(attrs, options);\n            };\n        },\n        parseString(value, opt = {}) {\n            const {em} = this;\n            const {domc} = this.opt;\n            const cssc = em.get('CssComposer');\n            const parsed = em.get('Parser').parseHtml(value);\n            if (!Component)\n                Component = require('./Component').default;\n            Component.checkId(parsed.html, parsed.css, domc.componentsById);\n            if (parsed.css && cssc && !opt.temporary) {\n                cssc.addCollection(parsed.css, langx.mixin({},opt,{\n                    extend: 1\n                }));\n            }\n            return parsed.html;\n        },\n        add(models, opt = {}) {\n            if (_.isString(models)) {\n                models = this.parseString(models, opt);\n            } else if (_.isArray(models)) {\n                models.forEach((item, index) => {\n                    if (_.isString(item)) {\n                        models[index] = this.parseString(item, opt);\n                    }\n                });\n            }\n            const isMult = _.isArray(models);\n            models = (isMult ? models : [models]).filter(i => i).map(model => this.processDef(model));\n            models = isMult ? models : models[0];\n            return Backbone.Collection.prototype.add.apply(this, [\n                models,\n                opt\n            ]);\n        },\n        processDef(mdl) {\n            if (mdl.cid && mdl.ccid)\n                return mdl;\n            const {em, config = {}} = this;\n            const {processor} = config;\n            let model = mdl;\n            if (processor) {\n                model = { ...model };\n                const modelPr = processor(model);\n                if (modelPr) {\n                    _.each(model, (val, key) => delete model[key]);\n                    _.extend(model, modelPr);\n                }\n            }\n            if (model.$$typeof && typeof model.props == 'object') {\n                model = { ...model };\n                model.props = { ...model.props };\n                const domc = em.get('DomComponents');\n                const parser = em.get('Parser');\n                const {parserHtml} = parser;\n                _.each(model, (value, key) => {\n                    if (!_.includes([\n                            'props',\n                            'type'\n                        ], key))\n                        delete model[key];\n                });\n                const {props} = model;\n                const comps = props.children;\n                delete props.children;\n                delete model.props;\n                const res = parserHtml.splitPropsFromAttr(props);\n                model.attributes = res.attrs;\n                if (comps) {\n                    model.components = comps;\n                }\n                if (!model.type) {\n                    model.type = 'textnode';\n                } else if (!domc.getType(model.type)) {\n                    model.tagName = model.type;\n                    delete model.type;\n                }\n                _.extend(model, res.props);\n            }\n            return model;\n        },\n        onAdd(model, c, opts = {}) {\n            const em = this.em;\n            const style = model.getStyle();\n            const avoidInline = em && em.getConfig('avoidInlineStyle');\n            if (!_.isEmpty(style) && !avoidInline && em && em.get && em.getConfig('forceClass') && !opts.temporary) {\n                const name = model.cid;\n                const rule = em.get('CssComposer').setClassRule(name, style);\n                model.setStyle({});\n                model.addClass(name);\n            }\n        }\n    });\n});\ndefine('trait_manager/model/Trait',[\n    'skylark-backbone',\n    'skylark-underscore'\n], function (Backbone, a) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            type: 'text',\n            label: '',\n            name: '',\n            min: '',\n            max: '',\n            unit: '',\n            step: 1,\n            value: '',\n            target: '',\n            default: '',\n            placeholder: '',\n            changeProp: 0,\n            options: []\n        },\n        initialize() {\n            const target = this.get('target');\n            const name = this.get('name');\n            const changeProp = this.get('changeProp');\n            if (target) {\n                this.target = target;\n                this.unset('target');\n                const targetEvent = changeProp ? `change:${ name }` : `change:attributes:${ name }`;\n                this.listenTo(target, targetEvent, this.targetUpdated);\n            }\n        },\n        props() {\n            return this.attributes;\n        },\n        targetUpdated() {\n            const value = this.getTargetValue();\n            this.set({ value }, { fromTarget: 1 });\n        },\n        getTargetValue() {\n            const name = this.get('name');\n            const target = this.target;\n            let value;\n            if (this.get('changeProp')) {\n                value = target.get(name);\n            } else {\n                value = target.getAttributes()[name];\n            }\n            return !a.isUndefined(value) ? value : '';\n        },\n        setTargetValue(value, opts = {}) {\n            const target = this.target;\n            const name = this.get('name');\n            if (a.isUndefined(value))\n                return;\n            let valueToSet = value;\n            if (value === 'false') {\n                valueToSet = false;\n            } else if (value === 'true') {\n                valueToSet = true;\n            }\n            if (this.get('changeProp')) {\n                target.set(name, valueToSet, opts);\n            } else {\n                const attrs = { ...target.get('attributes') };\n                attrs[name] = valueToSet;\n                target.set('attributes', attrs, opts);\n            }\n        },\n        setValueFromInput(value, final = 1, opts = {}) {\n            const toSet = { value };\n            this.set(toSet, {\n                ...opts,\n                avoidStore: 1\n            });\n            if (final) {\n                this.set('value', '', opts);\n                this.set(toSet, opts);\n            }\n        },\n        getInitValue() {\n            const target = this.target;\n            const name = this.get('name');\n            let value;\n            if (target) {\n                const attrs = target.get('attributes');\n                value = this.get('changeProp') ? target.get(name) : attrs[name];\n            }\n            return value || this.get('value') || this.get('default');\n        }\n    });\n});\ndefine('trait_manager/model/TraitFactory',[],function () {\n    'use strict';\n    return (config = {}) => ({\n        build(props) {\n            var objs = [];\n            if (typeof props === 'string')\n                props = [props];\n            for (var i = 0; i < props.length; i++) {\n                var obj = {};\n                var prop = props[i];\n                obj.name = prop;\n                switch (prop) {\n                case 'target':\n                    obj.type = 'select';\n                    break;\n                }\n                switch (prop) {\n                case 'target':\n                    obj.options = config.optionsTarget;\n                    break;\n                }\n                objs.push(obj);\n            }\n            return objs;\n        }\n    });\n});\ndefine('trait_manager/model/Traits',[\n    'skylark-backbone',\n    'skylark-underscore',\n    './Trait',\n    './TraitFactory'\n], function (Backbone, a, Trait, TraitFactory) {\n    'use strict';\n    return Backbone.Collection.extend({\n        model: Trait,\n        initialize(coll, options = {}) {\n            this.em = options.em || '';\n            this.listenTo(this, 'add', this.handleAdd);\n            this.listenTo(this, 'reset', this.handleReset);\n        },\n        handleReset(coll, {\n            previousModels = []\n        } = {}) {\n            previousModels.forEach(model => model.trigger('remove'));\n        },\n        handleAdd(model) {\n            const target = this.target;\n            if (target) {\n                model.target = target;\n            }\n        },\n        setTarget(target) {\n            this.target = target;\n        },\n        add(models, opt) {\n            const em = this.em;\n            if (a.isString(models) || a.isArray(models)) {\n                const tm = em && em.get && em.get('TraitManager');\n                const tmOpts = tm && tm.getConfig();\n                const tf = TraitFactory(tmOpts);\n                if (a.isString(models)) {\n                    models = [models];\n                }\n                for (var i = 0, len = models.length; i < len; i++) {\n                    const str = models[i];\n                    const model = a.isString(str) ? tf.build(str)[0] : str;\n                    model.target = this.target;\n                    models[i] = model;\n                }\n            }\n            return Backbone.Collection.prototype.add.apply(this, [\n                models,\n                opt\n            ]);\n        }\n    });\n});\ndefine('dom_components/model/Component',[\n    \"skylark-langx/langx\",\n    'skylark-underscore',\n    '../../utils/mixins',\n    '../../domain_abstract/model/Styleable',\n    'skylark-backbone',\n    './Components',\n    '../../selector_manager/model/Selector',\n    '../../selector_manager/model/Selectors',\n    '../../trait_manager/model/Traits'\n], function (langx,_, b, Styleable, Backbone, Components, Selector, Selectors, Traits) {\n    'use strict';\n    const componentList = {};\n    let componentIndex = 0;\n    const escapeRegExp = str => {\n        return str.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n    };\n    const avoidInline = em => em && em.getConfig('avoidInlineStyle');\n    const eventDrag = 'component:drag';\n    const Component = Backbone.Model.extend(Styleable).extend({\n        defaults: {\n            tagName: 'div',\n            type: '',\n            name: '',\n            removable: true,\n            draggable: true,\n            droppable: true,\n            badgable: true,\n            stylable: true,\n            'stylable-require': '',\n            'style-signature': '',\n            unstylable: '',\n            highlightable: true,\n            copyable: true,\n            resizable: false,\n            editable: false,\n            layerable: true,\n            selectable: true,\n            hoverable: true,\n            void: false,\n            state: '',\n            status: '',\n            content: '',\n            icon: '',\n            style: '',\n            classes: '',\n            script: '',\n            'script-export': '',\n            attributes: '',\n            traits: [\n                'id',\n                'title'\n            ],\n            propagate: '',\n            dmode: '',\n            toolbar: null\n        },\n        init() {\n        },\n        updated(property, value, previous) {\n        },\n        removed() {\n        },\n        initialize(props = {}, opt = {}) {\n            const em = opt.em;\n            const parent = this.parent();\n            const parentAttr = parent && parent.attributes;\n            if (parentAttr && parentAttr.propagate) {\n                let newAttr = {};\n                const toPropagate = parentAttr.propagate;\n                toPropagate.undefined(prop => newAttr[prop] = parent.get(prop));\n                newAttr.propagate = toPropagate;\n                newAttr = langx.mixin({},newAttr,props);\n                this.set(newAttr);\n            }\n            const propagate = this.get('propagate');\n            propagate && this.set('propagate', _.isArray(propagate) ? propagate : [propagate]);\n            if (opt && opt.config && opt.config.voidElements.indexOf(this.get('tagName')) >= 0) {\n                this.set('void', true);\n            }\n            opt.em = em;\n            this.opt = opt;\n            this.em = em;\n            this.frame = opt.frame;\n            this.config = opt.config || {};\n            this.set('attributes', langx.mixin({},this.defaults.attributes ,this.get('attributes') ));\n            this.ccid = Component.createId(this);\n            this.initClasses();\n            this.initTraits();\n            this.initComponents();\n            this.initToolbar();\n            this.listenTo(this, 'change:script', this.scriptUpdated);\n            this.listenTo(this, 'change:tagName', this.tagUpdated);\n            this.listenTo(this, 'change:attributes', this.attrUpdated);\n            this.listenTo(this, 'change:attributes:id', this._idUpdated);\n            this.set('status', '');\n            this.views = [];\n            [\n                'classes',\n                'traits',\n                'components'\n            ].undefined(name => {\n                const events = `add remove ${ name !== 'components' ? 'change' : '' }`;\n                this.listenTo(this.get(name), events.trim(), (...args) => this.emitUpdate(name, ...args));\n            });\n            if (!opt.temporary) {\n                this.init();\n                em && em.trigger('component:create', this);\n            }\n        },\n        is(type) {\n            return !!(this.get('type') == type);\n        },\n        props() {\n            return this.attributes;\n        },\n        index() {\n            const {collection} = this;\n            return collection && collection.indexOf(this);\n        },\n        setDragMode(value) {\n            return this.set('dmode', value);\n        },\n        find(query) {\n            const result = [];\n            const $els = this.view.$el.find(query);\n            $els.each(i => {\n                const $el = $els.eq(i);\n                const model = $el.data('model');\n                model && result.push(model);\n            });\n            return result;\n        },\n        findType(id) {\n            const result = [];\n            const find = components => components.undefined(item => {\n                item.is(id) && result.push(item);\n                find(item.components());\n            });\n            find(this.components());\n            return result;\n        },\n        closest(query) {\n            const result = this.view.$el.closest(query);\n            return result.length && result.data('model');\n        },\n        tagUpdated() {\n            const coll = this.collection;\n            const at = coll.indexOf(this);\n            coll.remove(this);\n            coll.add(this, { at });\n        },\n        replaceWith(el) {\n            const coll = this.collection;\n            const at = coll.indexOf(this);\n            coll.remove(this);\n            return coll.add(el, { at });\n        },\n        attrUpdated(m, v, opts = {}) {\n            const attrs = this.get('attributes');\n            const classes = attrs.class;\n            classes && this.setClass(classes);\n            delete attrs.class;\n            const style = attrs.style;\n            style && this.setStyle(style);\n            delete attrs.style;\n            const attrPrev = { ...this.previous('attributes') };\n            const diff = b.shallowDiff(attrPrev, this.get('attributes'));\n            _.keys(diff).undefined(pr => this.trigger(`change:attributes:${ pr }`, this, diff[pr], opts));\n        },\n        setAttributes(attrs, opts = {}) {\n            this.set('attributes', { ...attrs }, opts);\n            return this;\n        },\n        addAttributes(attrs) {\n            const newAttrs = {\n                ...this.getAttributes(),\n                ...attrs\n            };\n            this.setAttributes(newAttrs);\n            return this;\n        },\n        getStyle() {\n            const em = this.em;\n            if (em && em.getConfig('avoidInlineStyle')) {\n                const state = em.get('state');\n                const cc = em.get('CssComposer');\n                const rule = cc.getIdRule(this.getId(), { state });\n                this.rule = rule;\n                if (rule) {\n                    return rule.getStyle();\n                }\n            }\n            return Styleable.getStyle.call(this);\n        },\n        setStyle(prop = {}, opts = {}) {\n            const em = this.em;\n            const {opt} = this;\n            if (em && em.getConfig('avoidInlineStyle') && !opt.temporary) {\n                const style = this.get('style') || {};\n                prop = _.isString(prop) ? this.parseStyle(prop) : prop;\n                prop = {\n                    ...prop,\n                    ...style\n                };\n                const state = em.get('state');\n                const cc = em.get('CssComposer');\n                const propOrig = this.getStyle();\n                this.rule = cc.setIdRule(this.getId(), prop, {\n                    ...opts,\n                    state\n                });\n                const diff = b.shallowDiff(propOrig, prop);\n                this.set('style', {}, { silent: 1 });\n                _.keys(diff).undefined(pr => this.trigger(`change:style:${ pr }`));\n            } else {\n                prop = Styleable.setStyle.apply(this, arguments);\n            }\n            return prop;\n        },\n        getAttributes() {\n            const {em} = this;\n            const classes = [];\n            const attributes = { ...this.get('attributes') };\n            const sm = em && em.get('SelectorManager');\n            const id = this.getId();\n            this.get('classes').undefined(cls => classes.push(_.isString(cls) ? cls : cls.get('name')));\n            classes.length && (attributes.class = classes.join(' '));\n            if (!_.has(attributes, 'id')) {\n                let hasStyle;\n                if (avoidInline(em)) {\n                    hasStyle = sm && sm.get(id, sm.Selector.TYPE_ID);\n                } else if (!_.isEmpty(this.getStyle())) {\n                    hasStyle = 1;\n                }\n                if (hasStyle) {\n                    attributes.id = this.getId();\n                }\n            }\n            return attributes;\n        },\n        addClass(classes) {\n            const added = this.em.get('SelectorManager').addClass(classes);\n            return this.get('classes').add(added);\n        },\n        setClass(classes) {\n            this.get('classes').reset();\n            return this.addClass(classes);\n        },\n        removeClass(classes) {\n            const removed = [];\n            classes = _.isArray(classes) ? classes : [classes];\n            const selectors = this.get('classes');\n            const type = Selector.TYPE_CLASS;\n            classes.undefined(classe => {\n                const classes = classe.split(' ');\n                classes.undefined(name => {\n                    const selector = selectors.where({\n                        name,\n                        type\n                    })[0];\n                    selector && removed.push(selectors.remove(selector));\n                });\n            });\n            return removed;\n        },\n        getClasses() {\n            const attr = this.getAttributes();\n            const classStr = attr.class;\n            return classStr ? classStr.split(' ') : [];\n        },\n        initClasses() {\n            const event = 'change:classes';\n            const toListen = [\n                this,\n                event,\n                this.initClasses\n            ];\n            const cls = this.get('classes') || [];\n            const clsArr = _.isString(cls) ? cls.split(' ') : cls;\n            this.stopListening(...toListen);\n            const classes = this.normalizeClasses(clsArr);\n            const selectors = new Selectors([]);\n            this.set('classes', selectors);\n            selectors.add(classes);\n            this.listenTo(...toListen);\n            return this;\n        },\n        initComponents() {\n            const event = 'change:components';\n            const toListen = [\n                this,\n                event,\n                this.initComponents\n            ];\n            this.stopListening(...toListen);\n            const comps = new Components(null, this.opt);\n            comps.parent = this;\n            const components = this.get('components');\n            const addChild = !this.opt.avoidChildren;\n            this.set('components', comps);\n            addChild && comps.add(_.isFunction(components) ? components(this) : components);\n            this.listenTo(...toListen);\n            return this;\n        },\n        initTraits(changed) {\n            const {em} = this;\n            const event = 'change:traits';\n            const toListen = [\n                this,\n                event,\n                this.initTraits\n            ];\n            this.stopListening(...toListen);\n            this.loadTraits();\n            const attrs = { ...this.get('attributes') };\n            const traits = this.get('traits');\n            traits.each(trait => {\n                if (!trait.get('changeProp')) {\n                    const name = trait.get('name');\n                    const value = trait.getInitValue();\n                    if (name && value)\n                        attrs[name] = value;\n                }\n            });\n            traits.length && this.set('attributes', attrs);\n            this.listenTo(...toListen);\n            changed && em && em.trigger('component:toggled');\n            return this;\n        },\n        append(components, opts = {}) {\n            const result = this.components().add(components, opts);\n            return _.isArray(result) ? result : [result];\n        },\n        components(components) {\n            const coll = this.get('components');\n            if (_.isUndefined(components)) {\n                return coll;\n            } else {\n                coll.reset();\n                return components && this.append(components);\n            }\n        },\n        parent() {\n            const coll = this.collection;\n            return coll && coll.parent;\n        },\n        scriptUpdated() {\n            this.set('scriptUpdated', 1);\n        },\n        initToolbar() {\n            const {em} = this;\n            const model = this;\n            const ppfx = em && em.getConfig('stylePrefix') || '';\n            if (!model.get('toolbar')) {\n                var tb = [];\n                if (model.collection) {\n                    tb.push({\n                        attributes: { class: 'fa fa-arrow-up' },\n                        command: ed => ed.runCommand('core:component-exit', { force: 1 })\n                    });\n                }\n                if (model.get('draggable')) {\n                    tb.push({\n                        attributes: {\n                            class: `fa fa-arrows ${ ppfx }no-touch-actions`,\n                            draggable: true\n                        },\n                        command: 'tlb-move'\n                    });\n                }\n                if (model.get('copyable')) {\n                    tb.push({\n                        attributes: { class: 'fa fa-clone' },\n                        command: 'tlb-clone'\n                    });\n                }\n                if (model.get('removable')) {\n                    tb.push({\n                        attributes: { class: 'fa fa-trash-o' },\n                        command: 'tlb-delete'\n                    });\n                }\n                model.set('toolbar', tb);\n            }\n        },\n        loadTraits(traits, opts = {}) {\n            traits = traits || this.get('traits');\n            traits = _.isFunction(traits) ? traits(this) : traits;\n            if (!(traits instanceof Traits)) {\n                const trt = new Traits([], this.opt);\n                trt.setTarget(this);\n                if (traits.length) {\n                    traits.undefined(tr => tr.attributes && delete tr.attributes.value);\n                    trt.add(traits);\n                }\n                this.set('traits', trt, opts);\n            }\n            return this;\n        },\n        getTrait(id) {\n            return this.get('traits').filter(trait => {\n                return trait.get('id') === id || trait.get('name') === id;\n            })[0];\n        },\n        updateTrait(id, props) {\n            const {em} = this;\n            const trait = this.getTrait(id);\n            trait && trait.set(props);\n            em && em.trigger('component:toggled');\n            return this;\n        },\n        getTraitIndex(id) {\n            const trait = this.getTrait(id);\n            return trait ? this.get('traits').indexOf(trait) : trait;\n        },\n        removeTrait(id) {\n            const {em} = this;\n            const ids = _.isArray(id) ? id : [id];\n            const toRemove = ids.map(id => this.getTrait(id));\n            const removed = this.get('traits').remove(toRemove);\n            em && em.trigger('component:toggled');\n            return removed;\n        },\n        addTrait(trait, opts = {}) {\n            const {em} = this;\n            const added = this.get('traits').add(trait, opts);\n            em && em.trigger('component:toggled');\n            return added;\n        },\n        normalizeClasses(arr) {\n            var res = [];\n            const em = this.em;\n            if (!em)\n                return;\n            var clm = em.get('SelectorManager');\n            if (!clm)\n                return;\n            arr.undefined(val => {\n                var name = '';\n                if (typeof val === 'string')\n                    name = val;\n                else\n                    name = val.name;\n                var model = clm.add(name);\n                res.push(model);\n            });\n            return res;\n        },\n        clone() {\n            const em = this.em;\n            const style = this.getStyle();\n            const attr = { ...this.attributes };\n            const opts = { ...this.opt };\n            attr.attributes = { ...attr.attributes };\n            delete attr.attributes.id;\n            attr.components = [];\n            attr.classes = [];\n            attr.traits = [];\n            this.get('components').each((md, i) => {\n                attr.components[i] = md.clone();\n            });\n            this.get('traits').each((md, i) => {\n                attr.traits[i] = md.clone();\n            });\n            this.get('classes').each((md, i) => {\n                attr.classes[i] = md.get('name');\n            });\n            attr.status = '';\n            attr.view = '';\n            opts.collection = null;\n            if (em && em.getConfig('avoidInlineStyle') && !_.isEmpty(style)) {\n                attr.style = style;\n            }\n            const cloned = new this.constructor(attr, opts);\n            const event = 'component:clone';\n            em && em.trigger(event, cloned);\n            this.trigger(event, cloned);\n            return cloned;\n        },\n        getName() {\n            const {em} = this;\n            const {type, tagName} = this.attributes;\n            const cName = this.get('name');\n            const isDiv = tagName == 'div';\n            const tag = isDiv ? 'box' : tagName;\n            const defName = type || tag;\n            const nameTag = !type && tagName && !isDiv && tagName;\n            const i18nPfx = 'domComponents.names.';\n            const i18nName = cName && em && em.t(`${ i18nPfx }${ cName }`);\n            const i18nNameTag = nameTag && em && em.t(`${ i18nPfx }${ nameTag }`);\n            const i18nDefName = em && (em.t(`${ i18nPfx }${ type }`) || em.t(`${ i18nPfx }${ tagName }`));\n            return this.get('custom-name') || i18nName || cName || i18nNameTag || b.capitalize(nameTag) || i18nDefName || b.capitalize(defName);\n        },\n        getIcon() {\n            let icon = this.get('icon');\n            return icon ? icon + ' ' : '';\n        },\n        toHTML(opts = {}) {\n            const model = this;\n            const attrs = [];\n            const customTag = opts.tag;\n            const tag = customTag || model.get('tagName');\n            const sTag = model.get('void');\n            const customAttr = opts.attributes;\n            let attributes = this.getAttrToHTML();\n            delete opts.tag;\n            if (customAttr) {\n                if (_.isFunction(customAttr)) {\n                    attributes = customAttr(model, attributes) || {};\n                } else if (_.isObject(customAttr)) {\n                    attributes = customAttr;\n                }\n            }\n            for (let attr in attributes) {\n                const val = attributes[attr];\n                const value = _.isString(val) ? val.replace(/\"/g, '&quot;') : val;\n                if (!_.isUndefined(value)) {\n                    if (_.isBoolean(value)) {\n                        value && attrs.push(attr);\n                    } else {\n                        attrs.push(`${ attr }=\"${ value }\"`);\n                    }\n                }\n            }\n            let attrString = attrs.length ? ` ${ attrs.join(' ') }` : '';\n            let code = `<${ tag }${ attrString }${ sTag ? '/' : '' }>${ model.get('content') }`;\n            model.get('components').each(comp => code += comp.toHTML(opts));\n            !sTag && (code += `</${ tag }>`);\n            return code;\n        },\n        getAttrToHTML() {\n            var attr = this.getAttributes();\n            delete attr.style;\n            return attr;\n        },\n        toJSON(...args) {\n            const obj = Backbone.Model.prototype.toJSON.apply(this, args);\n            obj.attributes = this.getAttributes();\n            delete obj.attributes.class;\n            delete obj.toolbar;\n            delete obj.traits;\n            if (this.em.getConfig('avoidDefaults')) {\n                const defaults = _.result(this, 'defaults');\n                _.forEach(defaults, (value, key) => {\n                    if ([\n                            'type',\n                            'content'\n                        ].indexOf(key) === -1 && obj[key] === value) {\n                        delete obj[key];\n                    }\n                });\n                if (_.isEmpty(obj.type)) {\n                    delete obj.type;\n                }\n                _.forEach([\n                    'attributes',\n                    'style'\n                ], prop => {\n                    if (_.isEmpty(defaults[prop]) && _.isEmpty(obj[prop])) {\n                        delete obj[prop];\n                    }\n                });\n                _.forEach([\n                    'classes',\n                    'components'\n                ], prop => {\n                    if (_.isEmpty(defaults[prop]) && !obj[prop].length) {\n                        delete obj[prop];\n                    }\n                });\n            }\n            return obj;\n        },\n        getId() {\n            let attrs = this.get('attributes') || {};\n            return attrs.id || this.ccid || this.cid;\n        },\n        setId(id, opts) {\n            const attrs = { ...this.get('attributes') };\n            attrs.id = id;\n            this.set('attributes', attrs, opts);\n            return this;\n        },\n        getEl(frame) {\n            const view = this.getView(frame);\n            return view && view.el;\n        },\n        getView(frame) {\n            let {view, views} = this;\n            if (frame) {\n                view = views.filter(view => view._getFrame() === frame.view)[0];\n            }\n            return view;\n        },\n        getCurrentView() {\n            const frame = (this.em.get('currentFrame') || {}).model;\n            return this.getView(frame);\n        },\n        getScriptString(script) {\n            var scr = script || this.get('script');\n            if (!scr) {\n                return scr;\n            }\n            if (typeof scr == 'function') {\n                var scrStr = scr.toString().trim();\n                scrStr = scrStr.replace(/^function[\\s\\w]*\\(\\)\\s?\\{/, '').replace(/\\}$/, '');\n                scr = scrStr.trim();\n            }\n            var config = this.em.getConfig();\n            var tagVarStart = escapeRegExp(config.tagVarStart || '{[ ');\n            var tagVarEnd = escapeRegExp(config.tagVarEnd || ' ]}');\n            var reg = new RegExp(`${ tagVarStart }([\\\\w\\\\d-]*)${ tagVarEnd }`, 'g');\n            scr = scr.replace(reg, (match, v) => {\n                this.scriptUpdated();\n                const result = this.attributes[v] || '';\n                return _.isArray(result) || typeof result == 'object' ? JSON.stringify(result) : result;\n            });\n            return scr;\n        },\n        emitUpdate(property, ...args) {\n            const em = this.em;\n            const event = 'component:update' + (property ? `:${ property }` : '');\n            property && this.updated(property, property && this.get(property), property && this.previous(property), ...args);\n            this.trigger(event, ...args);\n            em && em.trigger(event, this, ...args);\n        },\n        onAll(clb) {\n            if (_.isFunction(clb)) {\n                clb(this);\n                this.components().undefined(model => model.onAll(clb));\n            }\n            return this;\n        },\n        remove() {\n            const coll = this.collection;\n            return coll && coll.remove(this);\n        },\n        resetId(opts = {}) {\n            const {em} = this;\n            const oldId = this.getId();\n            if (!oldId)\n                return;\n            const newId = Component.createId(this);\n            this.setId(newId);\n            const rule = em && em.get('CssComposer').getIdRule(oldId);\n            const selector = rule && rule.get('selectors').at(0);\n            selector && selector.set('name', newId);\n            return this;\n        },\n        _getStyleRule({id} = {}) {\n            const {em} = this;\n            const idS = id || this.getId();\n            return em && em.get('CssComposer').getIdRule(idS);\n        },\n        _getStyleSelector(opts) {\n            const rule = this._getStyleRule(opts);\n            return rule && rule.get('selectors').at(0);\n        },\n        _idUpdated(m, v, opts = {}) {\n            if (opts.idUpdate)\n                return;\n            const {ccid} = this;\n            const {id} = this.get('attributes') || {};\n            const idPrev = (this.previous('attributes') || {}).id || ccid;\n            const list = Component.getList(this);\n            if (list[id]) {\n                return this.setId(idPrev, { idUpdate: 1 });\n            }\n            delete list[idPrev];\n            list[id] = this;\n            this.ccid = id;\n            const selector = this._getStyleSelector({ id: idPrev });\n            selector && selector.set({\n                name: id,\n                label: id\n            });\n        }\n    }, {\n        isComponent(el) {\n            return { tagName: el.tagName ? el.tagName.toLowerCase() : '' };\n        },\n        createId(model) {\n            const list = Component.getList(model);\n            let {id} = model.get('attributes');\n            let nextId;\n            if (id) {\n                nextId = Component.getIncrementId(id, list);\n                model.setId(nextId);\n            } else {\n                nextId = Component.getNewId(list);\n            }\n            list[nextId] = model;\n            return nextId;\n        },\n        getNewId(list) {\n            const count = Object.undefined(list).length;\n            const ilen = count.toString().length + 2;\n            const uid = (Math.random() + 1.1).toString(36).slice(-ilen);\n            let newId = `i${ uid }`;\n            while (list[newId]) {\n                newId = Component.getNewId(list);\n            }\n            return newId;\n        },\n        getIncrementId(id, list) {\n            let counter = 1;\n            let newId = id;\n            while (list[newId]) {\n                counter++;\n                newId = `${ id }-${ counter }`;\n            }\n            return newId;\n        },\n        getList(model) {\n            const domc = model.opt && model.opt.domc;\n            return domc ? domc.componentsById : {};\n        },\n        checkId(components, styles = [], list = {}) {\n            const comps = _.isArray(components) ? components : [components];\n            comps.undefined(comp => {\n                const {attributes = {}, components} = comp;\n                const {id} = attributes;\n                if (id && list[id]) {\n                    const newId = Component.getIncrementId(id, list);\n                    attributes.id = newId;\n                    _.isArray(styles) && styles.undefined(style => {\n                        const {selectors} = style;\n                        selectors.undefined((sel, idx) => {\n                            if (sel === `#${ id }`)\n                                selectors[idx] = `#${ newId }`;\n                        });\n                    });\n                }\n                components && Component.checkId(components, styles, list);\n            });\n        }\n    });\n    \n    Component.eventDrag = eventDrag;\n    \n    return Component;\n});\ndefine('skylark-grapejs/commands/index',[\n    'skylark-underscore',\n    './view/CommandAbstract',\n    './config/config',\n    '../../dom_components/model/Component'\n], function (a, CommandAbstract, defaults, b) {\n    'use strict';\n    return () => {\n        let em;\n        let c = {};\n        const commands = {};\n        const defaultCommands = {};\n        const active = {};\n        const commandsDef = [\n            [\n                'preview',\n                'Preview',\n                'preview'\n            ],\n            [\n                'resize',\n                'Resize',\n                'resize'\n            ],\n            [\n                'fullscreen',\n                'Fullscreen',\n                'fullscreen'\n            ],\n            [\n                'copy',\n                'CopyComponent'\n            ],\n            [\n                'paste',\n                'PasteComponent'\n            ],\n            [\n                'canvas-move',\n                'CanvasMove'\n            ],\n            [\n                'canvas-clear',\n                'CanvasClear'\n            ],\n            [\n                'open-code',\n                'ExportTemplate',\n                'export-template'\n            ],\n            [\n                'open-layers',\n                'OpenLayers',\n                'open-layers'\n            ],\n            [\n                'open-styles',\n                'OpenStyleManager',\n                'open-sm'\n            ],\n            [\n                'open-traits',\n                'OpenTraitManager',\n                'open-tm'\n            ],\n            [\n                'open-blocks',\n                'OpenBlocks',\n                'open-blocks'\n            ],\n            [\n                'open-assets',\n                'OpenAssets',\n                'open-assets'\n            ],\n            [\n                'component-select',\n                'SelectComponent',\n                'select-comp'\n            ],\n            [\n                'component-outline',\n                'SwitchVisibility',\n                'sw-visibility'\n            ],\n            [\n                'component-offset',\n                'ShowOffset',\n                'show-offset'\n            ],\n            [\n                'component-move',\n                'MoveComponent',\n                'move-comp'\n            ],\n            [\n                'component-next',\n                'ComponentNext'\n            ],\n            [\n                'component-prev',\n                'ComponentPrev'\n            ],\n            [\n                'component-enter',\n                'ComponentEnter'\n            ],\n            [\n                'component-exit',\n                'ComponentExit',\n                'select-parent'\n            ],\n            [\n                'component-delete',\n                'ComponentDelete'\n            ],\n            [\n                'component-style-clear',\n                'ComponentStyleClear'\n            ],\n            [\n                'component-drag',\n                'ComponentDrag'\n            ]\n        ];\n        const add = function (id, obj) {\n            if (a.isFunction(obj))\n                obj = { run: obj };\n            if (!obj.stop)\n                obj.noStop = 1;\n            delete obj.initialize;\n            obj.id = id;\n            commands[id] = CommandAbstract.extend(obj);\n            return this;\n        };\n        return {\n            CommandAbstract,\n            name: 'Commands',\n            init(config = {}) {\n                c = {\n                    ...defaults,\n                    ...config\n                };\n                em = c.em;\n                const ppfx = c.pStylePrefix;\n                if (ppfx)\n                    c.stylePrefix = ppfx + c.stylePrefix;\n                for (let k in c.defaults) {\n                    const obj = c.defaults[k];\n                    if (obj.id)\n                        this.add(obj.id, obj);\n                }\n                defaultCommands['tlb-delete'] = {\n                    run(ed) {\n                        return ed.runCommand('core:component-delete');\n                    }\n                };\n                defaultCommands['tlb-clone'] = {\n                    run(ed) {\n                        ed.runCommand('core:copy');\n                        ed.runCommand('core:paste');\n                    }\n                };\n                defaultCommands['tlb-move'] = {\n                    run(ed, sender, opts = {}) {\n                        let dragger;\n                        const em = ed.getModel();\n                        const event = opts && opts.event;\n                        const {target} = opts;\n                        const sel = target || ed.getSelected();\n                        const selAll = target ? [target] : [...ed.getSelectedAll()];\n                        const nativeDrag = event && event.type == 'dragstart';\n                        const defComOptions = { preserveSelected: 1 };\n                        const modes = [\n                            'absolute',\n                            'translate'\n                        ];\n                        const mode = sel.get('dmode') || em.get('dmode');\n                        const hideTlb = () => em.stopDefault(defComOptions);\n                        const altMode = a.includes(modes, mode);\n                        selAll.forEach(sel => sel.trigger('disable'));\n                        if (!sel || !sel.get('draggable')) {\n                            return em.logWarning('The element is not draggable');\n                        }\n                        nativeDrag ? setTimeout(hideTlb, 0) : hideTlb();\n                        const onStart = data => {\n                            em.trigger(`${ b.eventDrag }:start`, data);\n                        };\n                        const onDrag = data => {\n                            em.trigger(b.eventDrag, data);\n                        };\n                        const onEnd = (e, opts, data) => {\n                            em.runDefault(defComOptions);\n                            selAll.forEach(sel => sel.set('status', 'selected'));\n                            ed.select(selAll);\n                            sel.emitUpdate();\n                            em.trigger(`${ b.eventDrag }:end`, data);\n                            (altMode || data.cancelled) && em.set('_cmpDrag', 1);\n                        };\n                        if (altMode) {\n                            dragger = ed.runCommand('core:component-drag', {\n                                guidesInfo: 1,\n                                mode,\n                                target: sel,\n                                onStart,\n                                onDrag,\n                                onEnd,\n                                event\n                            });\n                        } else {\n                            if (nativeDrag) {\n                                event.dataTransfer.setDragImage(sel.view.el, 0, 0);\n                            }\n                            const cmdMove = ed.Commands.get('move-comp');\n                            cmdMove.onStart = onStart;\n                            cmdMove.onDrag = onDrag;\n                            cmdMove.onEndMoveFromModel = onEnd;\n                            cmdMove.initSorterFromModels(selAll);\n                        }\n                        selAll.forEach(sel => sel.set('status', 'freezed-selected'));\n                    }\n                };\n                defaultCommands['core:undo'] = e => e.UndoManager.undo();\n                defaultCommands['core:redo'] = e => e.UndoManager.redo();\n                commandsDef.forEach(item => {\n                    const oldCmd = item[2];\n                    const cmd = require(`./view/${ item[1] }`).default;\n                    const cmdName = `core:${ item[0] }`;\n                    defaultCommands[cmdName] = cmd;\n                    if (oldCmd) {\n                        defaultCommands[oldCmd] = cmd;\n                        [\n                            'run',\n                            'stop'\n                        ].forEach(name => {\n                            em.on(`${ name }:${ oldCmd }`, (...args) => em.trigger(`${ name }:${ cmdName }`, ...args));\n                        });\n                    }\n                });\n                if (c.em)\n                    c.model = c.em.get('Canvas');\n                this.loadDefaultCommands();\n                return this;\n            },\n            add,\n            get(id) {\n                let el = commands[id];\n                if (a.isFunction(el)) {\n                    el = new el(c);\n                    commands[id] = el;\n                } else if (!el) {\n                    em.logWarning(`'${ id }' command not found`);\n                }\n                return el;\n            },\n            extend(id, cmd = {}) {\n                const command = this.get(id);\n                if (command) {\n                    const cmdObj = {\n                        ...command.constructor.prototype,\n                        ...cmd\n                    };\n                    this.add(id, cmdObj);\n                    const oldCmd = commandsDef.filter(cmd => `core:${ cmd[0] }` === id && cmd[2])[0];\n                    oldCmd && this.add(oldCmd[2], cmdObj);\n                }\n                return this;\n            },\n            has(id) {\n                return !!commands[id];\n            },\n            getAll() {\n                return commands;\n            },\n            run(id, options = {}) {\n                return this.runCommand(this.get(id), options);\n            },\n            stop(id, options = {}) {\n                return this.stopCommand(this.get(id), options);\n            },\n            isActive(id) {\n                return this.getActive().hasOwnProperty(id);\n            },\n            getActive() {\n                return active;\n            },\n            loadDefaultCommands() {\n                for (var id in defaultCommands) {\n                    this.add(id, defaultCommands[id]);\n                }\n                return this;\n            },\n            runCommand(command, options = {}) {\n                let result;\n                if (command && command.run) {\n                    const id = command.id;\n                    const editor = em.get('Editor');\n                    if (!this.isActive(id) || options.force || !c.strict) {\n                        result = command.callRun(editor, options);\n                        if (id && command.stop && !command.noStop && !options.abort) {\n                            active[id] = result;\n                        }\n                    }\n                }\n                return result;\n            },\n            stopCommand(command, options = {}) {\n                let result;\n                if (command && command.run) {\n                    const id = command.id;\n                    const editor = em.get('Editor');\n                    if (this.isActive(id) || options.force || !c.strict) {\n                        if (id)\n                            delete active[id];\n                        result = command.callStop(editor, options);\n                    }\n                }\n                return result;\n            },\n            create(command) {\n                if (!command.stop)\n                    command.noStop = 1;\n                const cmd = CommandAbstract.extend(command);\n                return new cmd(c);\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/block_manager/config/config',[],function () {\n    'use strict';\n    return {\n        appendTo: '',\n        appendOnClick: 0,\n        blocks: []\n    };\n});\ndefine('skylark-grapejs/block_manager/model/Category',[\n\t'skylark-backbone'\n], function (Backbone) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            id: '',\n            label: '',\n            open: true,\n            attributes: {}\n        }\n    });\n});\ndefine('skylark-grapejs/block_manager/model/Block',[\n    'skylark-backbone',\n    './Category'\n], function (Backbone, Category) {\n    'use strict';\n    return Backbone.Model.extend({\n        defaults: {\n            activate: 0,\n            select: 0,\n            resetId: 0,\n            label: '',\n            media: '',\n            content: '',\n            category: '',\n            attributes: {}\n        },\n        initialize(opts = {}) {\n            let category = this.get('category');\n            if (category) {\n                if (typeof category == 'string') {\n                    var catObj = new Category({\n                        id: category,\n                        label: category\n                    });\n                }\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/block_manager/model/Blocks',[\n    'skylark-backbone',\n    './Block'\n], function (Backbone, Block) {\n    'use strict';\n    return Backbone.Collection.extend({ model: Block });\n});\ndefine('skylark-grapejs/block_manager/model/Categories',[\n    'skylark-backbone',\n    './Category'\n], function (Backbone, Category) {\n    'use strict';\n    return Backbone.Collection.extend({ model: Category });\n});\ndefine('skylark-grapejs/block_manager/view/BlockView',[\n    'skylark-backbone',\n    'skylark-underscore',\n    '../../utils/mixins'\n], function (Backbone, _, mixins) {\n    'use strict';\n    return Backbone.View.extend({\n        events: {\n            click: 'handleClick',\n            mousedown: 'startDrag',\n            dragstart: 'handleDragStart',\n            drag: 'handleDrag',\n            dragend: 'handleDragEnd'\n        },\n        initialize(o, config = {}) {\n            const {model} = this;\n            this.em = config.em;\n            this.config = config;\n            this.endDrag = this.endDrag.bind(this);\n            this.ppfx = config.pStylePrefix || '';\n            this.listenTo(model, 'destroy remove', this.remove);\n            this.listenTo(model, 'change', this.render);\n        },\n        handleClick() {\n            const {config, model, em} = this;\n            if (!config.appendOnClick)\n                return;\n            const sorter = config.getSorter();\n            const content = model.get('content');\n            const selected = em.getSelected();\n            sorter.setDropContent(content);\n            let target, valid;\n            if (selected) {\n                valid = sorter.validTarget(selected.getEl(), content);\n                if (valid.valid) {\n                    target = selected;\n                } else {\n                    const parent = selected.parent();\n                    valid = sorter.validTarget(parent.getEl(), content);\n                    if (valid.valid)\n                        target = parent;\n                }\n            }\n            if (!target) {\n                const wrapper = em.getWrapper();\n                valid = sorter.validTarget(wrapper.getEl(), content);\n                if (valid.valid)\n                    target = wrapper;\n            }\n            const result = target && target.append(content)[0];\n            result && em.setSelected(result, { scroll: 1 });\n        },\n        startDrag(e) {\n            const {config, em} = this;\n            if (e.button !== 0 || !config.getSorter || this.el.draggable)\n                return;\n            em.refreshCanvas();\n            const sorter = config.getSorter();\n            sorter.setDragHelper(this.el, e);\n            sorter.setDropContent(this.model.get('content'));\n            sorter.startSort(this.el);\n            mixins.on(document, 'mouseup', this.endDrag);\n        },\n        handleDragStart(ev) {\n            const {em, model} = this;\n            const content = model.get('content');\n            const isObj = _.isObject(content);\n            const data = isObj ? JSON.stringify(content) : content;\n            em.set('dragResult');\n            ev.dataTransfer.setData('text', data);\n            em.set('dragContent', content);\n            em.trigger('block:drag:start', model, ev);\n        },\n        handleDrag(ev) {\n            this.em.trigger('block:drag', this.model, ev);\n        },\n        handleDragEnd() {\n            const {em, model} = this;\n            const result = em.get('dragResult');\n            if (result) {\n                const oldKey = 'activeOnRender';\n                const oldActive = result.get && result.get(oldKey);\n                if (model.get('activate') || oldActive) {\n                    result.trigger('active');\n                    result.set(oldKey, 0);\n                }\n                if (model.get('select')) {\n                    em.setSelected(result);\n                }\n                if (model.get('resetId')) {\n                    result.onAll(model => model.resetId());\n                }\n            }\n            em.set({\n                dragResult: null,\n                dragContent: null\n            });\n            em.trigger('block:drag:stop', result, model);\n        },\n        endDrag(e) {\n            mixins.off(document, 'mouseup', this.endDrag);\n            const sorter = this.config.getSorter();\n            sorter.moved = 0;\n            sorter.endMove();\n        },\n        render() {\n            const {em, el, ppfx, model} = this;\n            const className = `${ ppfx }block`;\n            const label = em && em.t(`blockManager.labels.${ model.id }`) || model.get('label');\n            const render = model.get('render');\n            const media = model.get('media');\n            el.className += ` ${ className } ${ ppfx }one-bg ${ ppfx }four-color-h`;\n            el.innerHTML = `\n      ${ media ? `<div class=\"${ className }__media\">${ media }</div>` : '' }\n      <div class=\"${ className }-label\">${ label }</div>\n    `;\n            el.title = el.textContent.trim();\n            mixins.hasDnd(em) && el.setAttribute('draggable', true);\n            const result = render && render({\n                el,\n                model,\n                className,\n                prefix: ppfx\n            });\n            if (result)\n                el.innerHTML = result;\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/block_manager/view/CategoryView',[\n    'skylark-underscore',\n    'skylark-backbone'\n], function (_, Backbone) {\n    'use strict';\n    return Backbone.View.extend({\n        template: _.template(`\n  <div class=\"<%= pfx %>title\">\n    <i class=\"<%= pfx %>caret-icon\"></i>\n    <%= label %>\n  </div>\n  <div class=\"<%= pfx %>blocks-c\"></div>\n  `),\n        events: {},\n        initialize(o = {}, config = {}) {\n            this.config = config;\n            const pfx = config.pStylePrefix || '';\n            this.em = config.em;\n            this.pfx = pfx;\n            this.caretR = 'fa fa-caret-right';\n            this.caretD = 'fa fa-caret-down';\n            this.iconClass = `${ pfx }caret-icon`;\n            this.activeClass = `${ pfx }open`;\n            this.className = `${ pfx }block-category`;\n            this.events[`click .${ pfx }title`] = 'toggle';\n            this.listenTo(this.model, 'change:open', this.updateVisibility);\n            this.delegateEvents();\n        },\n        updateVisibility() {\n            if (this.model.get('open'))\n                this.open();\n            else\n                this.close();\n        },\n        open() {\n            this.el.className = `${ this.className } ${ this.activeClass }`;\n            this.getIconEl().className = `${ this.iconClass } ${ this.caretD }`;\n            this.getBlocksEl().style.display = '';\n        },\n        close() {\n            this.el.className = this.className;\n            this.getIconEl().className = `${ this.iconClass } ${ this.caretR }`;\n            this.getBlocksEl().style.display = 'none';\n        },\n        toggle() {\n            var model = this.model;\n            model.set('open', !model.get('open'));\n        },\n        getIconEl() {\n            if (!this.iconEl) {\n                this.iconEl = this.el.querySelector('.' + this.iconClass);\n            }\n            return this.iconEl;\n        },\n        getBlocksEl() {\n            if (!this.blocksEl) {\n                this.blocksEl = this.el.querySelector('.' + this.pfx + 'blocks-c');\n            }\n            return this.blocksEl;\n        },\n        append(el) {\n            this.getBlocksEl().appendChild(el);\n        },\n        render() {\n            const {em, el, $el, model} = this;\n            const label = em.t(`blockManager.categories.${ model.id }`) || model.get('label');\n            el.innerHTML = this.undefined({\n                pfx: this.pfx,\n                label\n            });\n            el.className = this.className;\n            $el.css({ order: model.get('order') });\n            this.updateVisibility();\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/block_manager/view/BlocksView',[\n    'skylark-backbone',\n    'skylark-underscore',\n    './BlockView',\n    './CategoryView'\n], function (Backbone, _, BlockView, CategoryView) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize(opts, config) {\n            _.bindAll(this, 'getSorter', 'onDrag', 'onDrop');\n            this.config = config || {};\n            this.categories = opts.categories || '';\n            this.renderedCategories = [];\n            var ppfx = this.config.pStylePrefix || '';\n            this.ppfx = ppfx;\n            this.noCatClass = `${ ppfx }blocks-no-cat`;\n            this.blockContClass = `${ ppfx }blocks-c`;\n            this.catsClass = `${ ppfx }block-categories`;\n            const coll = this.collection;\n            this.listenTo(coll, 'add', this.addTo);\n            this.listenTo(coll, 'reset', this.render);\n            this.em = this.config.em;\n            this.tac = 'test-tac';\n            this.grabbingCls = this.ppfx + 'grabbing';\n            if (this.em) {\n                this.config.getSorter = this.getSorter;\n                this.canvas = this.em.get('Canvas');\n            }\n        },\n        updateConfig(opts = {}) {\n            this.config = {\n                ...this.config,\n                ...opts\n            };\n        },\n        getSorter() {\n            if (!this.em)\n                return;\n            if (!this.sorter) {\n                var utils = this.em.get('Utils');\n                var canvas = this.canvas;\n                this.sorter = new utils.Sorter({\n                    container: canvas.getBody(),\n                    placer: canvas.getPlacerEl(),\n                    containerSel: '*',\n                    itemSel: '*',\n                    pfx: this.ppfx,\n                    onStart: this.onDrag,\n                    onEndMove: this.onDrop,\n                    onMove: this.onMove,\n                    document: canvas.getFrameEl().contentDocument,\n                    direction: 'a',\n                    wmargin: 1,\n                    nested: 1,\n                    em: this.em,\n                    canvasRelative: 1\n                });\n            }\n            return this.sorter;\n        },\n        onDrag(e) {\n            this.em.stopDefault();\n            this.em.trigger('block:drag:start', e);\n        },\n        onMove(e) {\n            this.em.trigger('block:drag:move', e);\n        },\n        onDrop(model) {\n            const em = this.em;\n            em.runDefault();\n            if (model && model.get) {\n                if (model.get('activeOnRender')) {\n                    model.trigger('active');\n                    model.set('activeOnRender', 0);\n                }\n                em.trigger('block:drag:stop', model);\n            }\n        },\n        addTo(model) {\n            this.add(model);\n        },\n        add(model, fragment) {\n            const {config} = this;\n            var frag = fragment || null;\n            var view = new BlockView({\n                model,\n                attributes: model.get('attributes')\n            }, config);\n            var rendered = view.render().el;\n            var category = model.get('category');\n            if (category && this.categories && !config.ignoreCategories) {\n                if (_.isString(category)) {\n                    category = {\n                        id: category,\n                        label: category\n                    };\n                } else if (_.isObject(category) && !category.id) {\n                    category.id = category.label;\n                }\n                var catModel = this.categories.add(category);\n                var catId = catModel.get('id');\n                var catView = this.renderedCategories[catId];\n                var categories = this.getCategoriesEl();\n                model.set('category', catModel);\n                if (!catView && categories) {\n                    catView = new CategoryView({ model: catModel }, this.config).render();\n                    this.renderedCategories[catId] = catView;\n                    categories.appendChild(catView.el);\n                }\n                catView && catView.append(rendered);\n                return;\n            }\n            if (frag)\n                frag.appendChild(rendered);\n            else\n                this.append(rendered);\n        },\n        getCategoriesEl() {\n            if (!this.catsEl) {\n                this.catsEl = this.el.querySelector(`.${ this.catsClass }`);\n            }\n            return this.catsEl;\n        },\n        getBlocksEl() {\n            if (!this.blocksEl) {\n                this.blocksEl = this.el.querySelector(`.${ this.noCatClass } .${ this.blockContClass }`);\n            }\n            return this.blocksEl;\n        },\n        append(el) {\n            let blocks = this.getBlocksEl();\n            blocks && blocks.appendChild(el);\n        },\n        render() {\n            const ppfx = this.ppfx;\n            const frag = document.createDocumentFragment();\n            this.catsEl = null;\n            this.blocksEl = null;\n            this.renderedCategories = [];\n            this.el.innerHTML = `\n      <div class=\"${ this.catsClass }\"></div>\n      <div class=\"${ this.noCatClass }\">\n        <div class=\"${ this.blockContClass }\"></div>\n      </div>\n    `;\n            this.collection.each(model => this.add(model, frag));\n            this.append(frag);\n            const cls = `${ this.blockContClass }s ${ ppfx }one-bg ${ ppfx }two-color`;\n            this.$el.addClass(cls);\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/block_manager/index',[\n    'skylark-underscore',\n    './config/config',\n    './model/Blocks',\n    './model/Categories',\n    './view/BlocksView'\n], function (a, defaults, Blocks, BlockCategories, BlocksView) {\n    'use strict';\n    return () => {\n        var c = {};\n        var blocks, blocksVisible, blocksView;\n        var categories = [];\n        return {\n            name: 'BlockManager',\n            init(config) {\n                c = config || {};\n                const em = c.em;\n                for (let name in defaults) {\n                    if (!(name in c)) {\n                        c[name] = defaults[name];\n                    }\n                }\n                blocks = new Blocks([]);\n                blocksVisible = new Blocks([]);\n                categories = new BlockCategories();\n                blocksView = new BlocksView({\n                    collection: blocksVisible,\n                    categories\n                }, c);\n                blocks.listenTo(blocks, 'add', model => {\n                    blocksVisible.add(model);\n                    em && em.trigger('block:add', model);\n                });\n                blocks.listenTo(blocks, 'remove', model => {\n                    blocksVisible.remove(model);\n                    em && em.trigger('block:remove', model);\n                });\n                blocks.listenTo(blocks, 'reset', coll => {\n                    blocksVisible.reset(coll.models);\n                });\n                return this;\n            },\n            getConfig() {\n                return c;\n            },\n            onLoad() {\n                const blocks = this.getAll();\n                !blocks.length && blocks.reset(c.blocks);\n            },\n            postRender() {\n                const elTo = this.getConfig().appendTo;\n                if (elTo) {\n                    const el = a.isElement(elTo) ? elTo : document.querySelector(elTo);\n                    el.appendChild(this.render());\n                }\n            },\n            add(id, opts) {\n                var obj = opts || {};\n                obj.id = id;\n                return blocks.add(obj);\n            },\n            get(id) {\n                return blocks.get(id);\n            },\n            getAll() {\n                return blocks;\n            },\n            getAllVisible() {\n                return blocksVisible;\n            },\n            remove(id) {\n                return blocks.remove(id);\n            },\n            getCategories() {\n                return categories;\n            },\n            getContainer() {\n                return blocksView.el;\n            },\n            render(blocks, opts = {}) {\n                const toRender = blocks || this.getAll().models;\n                if (opts.external) {\n                    return new BlocksView({\n                        collection: new Blocks(toRender),\n                        categories\n                    }, {\n                        ...c,\n                        ...opts\n                    }).render().el;\n                }\n                if (!blocksView.rendered) {\n                    blocksView.render();\n                    blocksView.rendered = 1;\n                }\n                blocksView.updateConfig(opts);\n                blocksView.collection.reset(toRender);\n                return this.getContainer();\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/editor/model/Editor',[\n    \"skylark-langx\",\n    'skylark-underscore',\n    'skylark-jquery',\n    'skylark-backbone',\n    '../../utils/extender',\n    '../../utils/mixins',\n    \"../../utils/index\",\n    \"../../i18n/index\",\n    \"../../keymaps/index\",\n    \"../../undo_manager/index\",\n    \"../../storage_manager/index\",\n    \"../../device_manager/index\",\n    \"../../parser/index\",\n    \"../../selector_manager/index\",\n    \"../../style_manager/index\",\n    \"../../modal_dialog/index\",\n    \"../../code_manager/index\",\n    \"../../panels/index\",\n    \"../../rich_text_editor/index\",\n    \"../../asset_manager/index\",\n    \"../../css_composer/index\",\n    \"../../trait_manager/index\",\n    \"../../dom_components/index\",\n    \"../../navigator/index\",\n    \"../../canvas/index\",\n    \"../../commands/index\",\n    \"../../block_manager/index\"\n], function (langx,_, $, Backbone, Extender, b,\n    _utils,\n    _i18n,\n    _keymaps,\n    _undo_manager,\n    _storage_manager,\n    _device_manager,\n    _parser,\n    _selector_manager,\n    _style_manager,\n    _modal_dialog,\n    _code_manager,\n    _panels,\n    _rich_text_editor,\n    _asset_manager,\n    _css_composer,\n    _trait_manager,\n    _dom_components,\n    _navigator,\n    _canvas,\n    _commands,\n    _block_manager\n) {\n    'use strict';\n    Backbone.$ = $;\n    const deps = [\n        _utils,\n        _i18n,\n        _keymaps,\n        _undo_manager,\n        _storage_manager,\n        _device_manager,\n        _parser,\n        _selector_manager,\n        _style_manager,\n        _modal_dialog,\n        _code_manager,\n        _panels,\n        _rich_text_editor,\n        _asset_manager,\n        _css_composer,\n        _trait_manager,\n        _dom_components,\n        _navigator,\n        _canvas,\n        _commands,\n        _block_manager\n    ];\n    const {Collection} = Backbone;\n    let timedInterval;\n    let updateItr;\n    Extender({\n        Backbone: Backbone,\n        $: Backbone.$\n    });\n    const logs = {\n        debug: console.log,\n        info: console.info,\n        warning: console.warn,\n        error: console.error\n    };\n    return Backbone.Model.extend({\n        defaults() {\n            return {\n                editing: 0,\n                selected: new Collection(),\n                clipboard: null,\n                dmode: 0,\n                componentHovered: null,\n                previousModel: null,\n                changesCount: 0,\n                storables: [],\n                modules: [],\n                toLoad: [],\n                opened: {},\n                device: ''\n            };\n        },\n        initialize(c = {}) {\n            this.config = c;\n            this.set('Config', c);\n            this.set('modules', []);\n            this.set('toLoad', []);\n            this.set('storables', []);\n            this.set('dmode', c.dragMode);\n            const el = c.el;\n            const log = c.log;\n            const toLog = log === true ? _.keys(logs) : _.isArray(log) ? log : [];\n            _.bindAll(this, 'initBaseColorPicker');\n            if (el && c.fromElement)\n                this.config.components = el.innerHTML;\n            this.attrsOrig = el ? _.toArray(el.attributes).reduce((res, next) => {\n                res[next.nodeName] = next.nodeValue;\n                return res;\n            }, {}) : '';\n            deps.forEach(name => this.loadModule(name));\n            this.on('change:componentHovered', this.componentHovered, this);\n            this.on('change:changesCount', this.updateChanges, this);\n            toLog.forEach(e => this.listenLog(e));\n            [{\n                    from: 'change:selectedComponent',\n                    to: 'component:toggled'\n                }].forEach(event => {\n                const eventFrom = event.from;\n                const eventTo = event.to;\n                this.listenTo(this, eventFrom, (...args) => {\n                    this.trigger(eventTo, ...args);\n                    this.logWarning(`The event '${ eventFrom }' is deprecated, replace it with '${ eventTo }'`);\n                });\n            });\n        },\n        getContainer() {\n            return this.config.el;\n        },\n        listenLog(event) {\n            this.listenTo(this, `log:${ event }`, logs[event]);\n        },\n        getConfig(prop) {\n            const config = this.config;\n            return _.isUndefined(prop) ? config : config[prop];\n        },\n        loadOnStart(clb = null) {\n            const sm = this.get('StorageManager');\n            this.get('toLoad').forEach(module => {\n                module.onLoad();\n            });\n            const postLoad = () => {\n                const modules = this.get('modules');\n                modules.forEach(module => module.postLoad && module.postLoad(this));\n                clb && clb();\n            };\n            if (sm && sm.canAutoload()) {\n                this.load(postLoad);\n            } else {\n                postLoad();\n            }\n        },\n        updateChanges() {\n            const stm = this.get('StorageManager');\n            const changes = this.get('changesCount');\n            updateItr && clearTimeout(updateItr);\n            updateItr = setTimeout(() => this.trigger('update'));\n            if (this.config.noticeOnUnload) {\n                window.onbeforeunload = changes ? e => 1 : null;\n            }\n            if (stm.isAutosave() && changes >= stm.getStepsBeforeSave()) {\n                this.store();\n            }\n        },\n        loadModule(moduleName) {\n            const {config} = this;\n            const Module = moduleName.default || moduleName;\n            const Mod = new Module();\n            const name = Mod.name.charAt(0).toLowerCase() + Mod.name.slice(1);\n            const cfgParent = !_.isUndefined(config[name]) ? config[name] : config[Mod.name];\n            const cfg = cfgParent || {};\n            const sm = this.get('StorageManager');\n            cfg.pStylePrefix = config.pStylePrefix || '';\n            if (!_.isUndefined(cfgParent) && !cfgParent) {\n                cfg._disable = 1;\n            }\n            if (Mod.storageKey && Mod.store && Mod.load && sm) {\n                cfg.stm = sm;\n                const mth = name == 'domComponents' ? 'unshift' : 'push';\n                this.get('storables')[mth](Mod);\n            }\n            cfg.em = this;\n            Mod.init(cfg);\n            !Mod.private && this.set(Mod.name, Mod);\n            Mod.onLoad && this.get('toLoad').push(Mod);\n            this.get('modules').push(Mod);\n            return this;\n        },\n        init(editor) {\n            this.set('Editor', editor);\n        },\n        getEditor() {\n            return this.get('Editor');\n        },\n        handleUpdates(model, val, opt = {}) {\n            if (opt.temporary) {\n                return;\n            }\n            timedInterval && clearInterval(timedInterval);\n            timedInterval = setTimeout(() => {\n                if (!opt.avoidStore) {\n                    this.set('changesCount', this.get('changesCount') + 1, opt);\n                }\n            }, 0);\n        },\n        componentHovered(editor, component, options) {\n            const prev = this.previous('componentHovered');\n            prev && this.trigger('component:unhovered', prev, options);\n            component && this.trigger('component:hovered', component, options);\n        },\n        getSelected() {\n            return this.get('selected').last();\n        },\n        getSelectedAll() {\n            return this.get('selected').models;\n        },\n        setSelected(el, opts = {}) {\n            const multiple = _.isArray(el);\n            const els = multiple ? el : [el];\n            const selected = this.get('selected');\n            let added;\n            multiple && this.removeSelected(selected.filter(s => !_.contains(els, s)));\n            els.forEach(el => {\n                const model = b.getModel(el, $);\n                if (model && !model.get('selectable'))\n                    return;\n                !multiple && this.removeSelected(selected.filter(s => s !== model));\n                this.addSelected(model, opts);\n                added = model;\n            });\n        },\n        addSelected(el, opts = {}) {\n            const model = b.getModel(el, $);\n            const models = _.isArray(model) ? model : [model];\n            models.forEach(model => {\n                if (model && !model.get('selectable'))\n                    return;\n                const selected = this.get('selected');\n                opts.forceChange && selected.remove(model, opts);\n                selected.push(model, opts);\n            });\n        },\n        removeSelected(el, opts = {}) {\n            this.get('selected').remove(b.getModel(el, $), opts);\n        },\n        toggleSelected(el, opts = {}) {\n            const model = b.getModel(el, $);\n            const models = _.isArray(model) ? model : [model];\n            models.forEach(model => {\n                if (this.get('selected').undefined(model)) {\n                    this.removeSelected(model, opts);\n                } else {\n                    this.addSelected(model, opts);\n                }\n            });\n        },\n        setHovered(el, opts = {}) {\n            const model = b.getModel(el, $);\n            if (model && !model.get('hoverable'))\n                return;\n            opts.forceChange && this.set('componentHovered', '');\n            this.set('componentHovered', model, opts);\n        },\n        getHovered() {\n            return this.get('componentHovered');\n        },\n        setComponents(components) {\n            return this.get('DomComponents').setComponents(components);\n        },\n        getComponents() {\n            var cmp = this.get('DomComponents');\n            var cm = this.get('CodeManager');\n            if (!cmp || !cm)\n                return;\n            var wrp = cmp.getComponents();\n            return cm.getCode(wrp, 'json');\n        },\n        setStyle(style) {\n            var rules = this.get('CssComposer').getAll();\n            for (var i = 0, len = rules.length; i < len; i++)\n                rules.pop();\n            rules.add(style);\n            return this;\n        },\n        getStyle() {\n            return this.get('CssComposer').getAll();\n        },\n        setState(value) {\n            this.set('state', value);\n            return this;\n        },\n        getState() {\n            return this.get('state');\n        },\n        getHtml() {\n            const config = this.config;\n            const exportWrapper = config.exportWrapper;\n            const wrapperIsBody = config.wrapperIsBody;\n            const js = config.jsInHtml ? this.getJs() : '';\n            var wrp = this.get('DomComponents').getComponent();\n            var html = this.get('CodeManager').getCode(wrp, 'html', {\n                exportWrapper,\n                wrapperIsBody\n            });\n            html += js ? `<script>${ js }</script>` : '';\n            return html;\n        },\n        getCss(opts = {}) {\n            const config = this.config;\n            const wrapperIsBody = config.wrapperIsBody;\n            const avoidProt = opts.avoidProtected;\n            const keepUnusedStyles = !_.isUndefined(opts.keepUnusedStyles) ? opts.keepUnusedStyles : config.keepUnusedStyles;\n            const cssc = this.get('CssComposer');\n            const wrp = this.get('DomComponents').getComponent();\n            const protCss = !avoidProt ? config.protectedCss : '';\n            return protCss + this.get('CodeManager').getCode(wrp, 'css', {\n                cssc,\n                wrapperIsBody,\n                keepUnusedStyles\n            });\n        },\n        getJs() {\n            var wrp = this.get('DomComponents').getWrapper();\n            return this.get('CodeManager').getCode(wrp, 'js').trim();\n        },\n        store(clb) {\n            var sm = this.get('StorageManager');\n            var store = {};\n            if (!sm)\n                return;\n            this.get('storables').forEach(m => {\n                var obj = m.store(1);\n                for (var el in obj)\n                    store[el] = obj[el];\n            });\n            sm.store(store, res => {\n                clb && clb(res);\n                this.set('changesCount', 0);\n                this.trigger('storage:store', store);\n            });\n            return store;\n        },\n        load(clb = null) {\n            this.getCacheLoad(1, res => {\n                this.get('storables').forEach(module => module.load(res));\n                clb && clb(res);\n            });\n        },\n        getCacheLoad(force, clb) {\n            if (this.cacheLoad && !force)\n                return this.cacheLoad;\n            const sm = this.get('StorageManager');\n            const load = [];\n            if (!sm)\n                return {};\n            this.get('storables').forEach(m => {\n                let key = m.storageKey;\n                key = _.isFunction(key) ? key() : key;\n                const keys = _.isArray(key) ? key : [key];\n                keys.forEach(k => load.push(k));\n            });\n            sm.load(load, res => {\n                this.cacheLoad = res;\n                clb && clb(res);\n                setTimeout(() => this.trigger('storage:load', res));\n            });\n        },\n        getDeviceModel() {\n            var name = this.get('device');\n            return this.get('DeviceManager').get(name);\n        },\n        runDefault(opts = {}) {\n            var command = this.get('Commands').get(this.config.defaultCommand);\n            if (!command || this.defaultRunning)\n                return;\n            command.stop(this, this, opts);\n            command.run(this, this, opts);\n            this.defaultRunning = 1;\n        },\n        stopDefault(opts = {}) {\n            var command = this.get('Commands').get(this.config.defaultCommand);\n            if (!command)\n                return;\n            command.stop(this, this, opts);\n            this.defaultRunning = 0;\n        },\n        refreshCanvas() {\n            this.set('canvasOffset', null);\n            this.set('canvasOffset', this.get('Canvas').getOffset());\n        },\n        clearSelection(win) {\n            var w = win || window;\n            w.getSelection().removeAllRanges();\n        },\n        getCurrentMedia() {\n            const config = this.config;\n            const device = this.getDeviceModel();\n            const condition = config.mediaCondition;\n            const preview = config.devicePreviewMode;\n            const width = device && device.get('widthMedia');\n            return device && width && !preview ? `(${ condition }: ${ width })` : '';\n        },\n        getWrapper() {\n            return this.get('DomComponents').getWrapper();\n        },\n        setCurrentFrame(frameView) {\n            return this.set('currentFrame', frameView);\n        },\n        getCurrentFrame() {\n            return this.get('currentFrame');\n        },\n        getCurrentFrameModel() {\n            return (this.getCurrentFrame() || {}).model;\n        },\n        getDirtyCount() {\n            return this.get('changesCount');\n        },\n        getZoomDecimal() {\n            return this.get('Canvas').getZoomDecimal();\n        },\n        getZoomMultiplier() {\n            return this.get('Canvas').getZoomMultiplier();\n        },\n        setDragMode(value) {\n            return this.set('dmode', value);\n        },\n        t(...args) {\n            return this.get('I18n').t(...args);\n        },\n        inAbsoluteMode() {\n            return this.get('dmode') === 'absolute';\n        },\n        destroyAll() {\n            const {DomComponents, CssComposer, UndoManager, Panels, Canvas, Keymaps, RichTextEditor} = this.attributes;\n            DomComponents.clear();\n            CssComposer.clear();\n            UndoManager.clear().removeAll();\n            Panels.getPanels().reset();\n            Canvas.getCanvasView().remove();\n            Keymaps.removeAll();\n            RichTextEditor.destroy();\n            this.view.remove();\n            this.stopListening();\n            $(this.config.el).empty().attr(this.attrsOrig);\n        },\n        setEditing(value) {\n            this.set('editing', value);\n            return this;\n        },\n        isEditing() {\n            return !!this.get('editing');\n        },\n        log(msg, opts = {}) {\n            const {ns, level = 'debug'} = opts;\n            this.trigger('log', msg, opts);\n            level && this.trigger(`log:${ level }`, msg, opts);\n            if (ns) {\n                const logNs = `log-${ ns }`;\n                this.trigger(logNs, msg, opts);\n                level && this.trigger(`${ logNs }:${ level }`, msg, opts);\n            }\n        },\n        logInfo(msg, opts) {\n            this.log(msg, langx.mixin({},opts, {evel: 'info' }));\n        },\n        logWarning(msg, opts) {\n            this.log(msg, langx.mixin({},opts, {evel: 'warning' }));\n        },\n        logError(msg, opts) {\n            this.log(msg, langx.mixin({},opts, {evel: 'error' }));\n        },\n        initBaseColorPicker(el, opts = {}) {\n            const config = this.getConfig();\n            const {\n                colorPicker = {}\n            } = config;\n            const elToAppend = config.el;\n            const ppfx = config.stylePrefix;\n            return $(el).spectrum(langx.mixin({\n                    containerClassName: `${ ppfx }one-bg ${ ppfx }two-color`,\n                    appendTo: elToAppend || 'body',\n                    maxSelectionSize: 8,\n                    showPalette: true,\n                    palette: [],\n                    showAlpha: true,\n                    chooseText: 'Ok',\n                    cancelText: '\\u2A2F',\n                },opts,colorPicker)\n            );\n        },\n        data(el, name, value) {\n            const varName = '_gjs-data';\n            if (!el[varName]) {\n                el[varName] = {};\n            }\n            if (_.isUndefined(value)) {\n                return el[varName][name];\n            } else {\n                el[varName][name] = value;\n            }\n        }\n    });\n});\ndefine('skylark-grapejs/editor/view/EditorView',[\n    \"skylark-jquery\",\n    'skylark-backbone',\n    '../../utils/mixins'\n], function ($,Backbone, mixins) {\n    'use strict';\n    return Backbone.View.extend({\n        initialize() {\n            const {model} = this;\n            model.view = this;\n            this.conf = model.config;\n            this.pn = model.get('Panels');\n            this.cv = model.get('Canvas');\n            model.on('loaded', () => {\n                this.pn.active();\n                this.pn.disableButtons();\n                setTimeout(() => {\n                    model.runDefault();\n                    model.trigger('load', model.get('Editor'));\n                });\n            });\n        },\n        render() {\n            const {model, $el, conf} = this;\n            const pfx = conf.stylePrefix;\n            const contEl = $(conf.el || `body ${ conf.container }`);\n            mixins.appendStyles(conf.cssIcons, {\n                unique: 1,\n                prepand: 1\n            });\n            $el.empty();\n            if (conf.width)\n                contEl.css('width', conf.width);\n            if (conf.height)\n                contEl.css('height', conf.height);\n            $el.append(this.cv.render());\n            $el.append(this.pn.render());\n            $el.attr('class', `${ pfx }editor ${ pfx }one-bg ${ pfx }two-color`);\n            contEl.addClass(`${ pfx }editor-cont`).empty().append($el);\n            return this;\n        }\n    });\n});\ndefine('skylark-grapejs/editor/index',[\n    \"skylark-langx\",\n    'skylark-jquery',\n    './config/config',\n    './model/Editor',\n    './view/EditorView'\n], function (langx,$, defaults, EditorModel, EditorView) {\n    'use strict';\n    return (config = {}) => {\n\n        const c = langx.mixin(\n            {},\n            defaults,\n            config\n        );\n\n        c.pStylePrefix = c.stylePrefix;\n\n        var em = new EditorModel(c);\n\n        var editorView = new EditorView({\n            model: em,\n            config: c\n        });\n        \n        return {\n            $,\n            editor: em,\n            I18n: em.get('I18n'),\n            DomComponents: em.get('DomComponents'),\n            LayerManager: em.get('LayerManager'),\n            CssComposer: em.get('CssComposer'),\n            StorageManager: em.get('StorageManager'),\n            AssetManager: em.get('AssetManager'),\n            BlockManager: em.get('BlockManager'),\n            TraitManager: em.get('TraitManager'),\n            SelectorManager: em.get('SelectorManager'),\n            CodeManager: em.get('CodeManager'),\n            Commands: em.get('Commands'),\n            Keymaps: em.get('Keymaps'),\n            Modal: em.get('Modal'),\n            Panels: em.get('Panels'),\n            StyleManager: em.get('StyleManager'),\n            Canvas: em.get('Canvas'),\n            UndoManager: em.get('UndoManager'),\n            DeviceManager: em.get('DeviceManager'),\n            RichTextEditor: em.get('RichTextEditor'),\n            Parser: em.get('Parser'),\n            Utils: em.get('Utils'),\n            Config: em.get('Config'),\n            init() {\n                em.init(this);\n                em.on('loaded', () => {\n                    this.UndoManager.clear();\n                    em.get('modules').forEach(module => {\n                        module.postRender && module.postRender(editorView);\n                    });\n                });\n                return this;\n            },\n            getConfig(prop) {\n                return em.getConfig(prop);\n            },\n            getHtml(opts) {\n                return em.getHtml(opts);\n            },\n            getCss(opts) {\n                return em.getCss(opts);\n            },\n            getJs() {\n                return em.getJs();\n            },\n            getComponents() {\n                return em.get('DomComponents').getComponents();\n            },\n            getWrapper() {\n                return em.get('DomComponents').getWrapper();\n            },\n            setComponents(components) {\n                em.setComponents(components);\n                return this;\n            },\n            addComponents(components, opts) {\n                return this.getWrapper().append(components, opts);\n            },\n            getStyle() {\n                return em.get('CssComposer').getAll();\n            },\n            setStyle(style) {\n                em.setStyle(style);\n                return this;\n            },\n            getSelected() {\n                return em.getSelected();\n            },\n            getSelectedAll() {\n                return em.getSelectedAll();\n            },\n            getSelectedToStyle() {\n                let selected = em.getSelected();\n                if (selected) {\n                    return this.StyleManager.getModelToStyle(selected);\n                }\n            },\n            select(el, opts) {\n                em.setSelected(el, opts);\n                return this;\n            },\n            selectAdd(el) {\n                em.addSelected(el);\n                return this;\n            },\n            selectRemove(el) {\n                em.removeSelected(el);\n                return this;\n            },\n            selectToggle(el) {\n                em.toggleSelected(el);\n                return this;\n            },\n            setDevice(name) {\n                em.set('device', name);\n                return this;\n            },\n            getDevice() {\n                return em.get('device');\n            },\n            runCommand(id, options = {}) {\n                return em.get('Commands').run(id, options);\n            },\n            stopCommand(id, options = {}) {\n                return em.get('Commands').stop(id, options);\n            },\n            store(clb) {\n                return em.store(clb);\n            },\n            load(clb) {\n                return em.load(clb);\n            },\n            getContainer() {\n                return c.el;\n            },\n            getDirtyCount() {\n                return em.getDirtyCount();\n            },\n            refresh() {\n                em.refreshCanvas();\n            },\n            setCustomRte(obj) {\n                this.RichTextEditor.customRte = obj;\n            },\n            setCustomParserCss(parser) {\n                this.Parser.getConfig().parserCss = parser;\n                return this;\n            },\n            setDragMode(value) {\n                em.setDragMode(value);\n                return this;\n            },\n            log(msg, opts = {}) {\n                em.log(msg, opts);\n                return this;\n            },\n            t(...args) {\n                return em.t(...args);\n            },\n            on(event, callback) {\n                em.on(event, callback);\n                return this;\n            },\n            once(event, callback) {\n                em.once(event, callback);\n                return this;\n            },\n            off(event, callback) {\n                em.off(event, callback);\n                return this;\n            },\n            trigger(event) {\n                em.trigger.apply(em, arguments);\n                return this;\n            },\n            destroy() {\n                return em.destroyAll();\n            },\n            getEl() {\n                return editorView.el;\n            },\n            getModel() {\n                return em;\n            },\n            render() {\n                editorView.render();\n                return editorView.el;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/utils/polyfills',[],function () {\n    'use strict';\n    return () => {\n        const isIE = () => {\n            let match;\n            const agent = window.navigator.userAgent;\n            const rules = [\n                [\n                    'edge',\n                    /Edge\\/([0-9\\._]+)/\n                ],\n                [\n                    'ie',\n                    /MSIE\\s(7\\.0)/\n                ],\n                [\n                    'ie',\n                    /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/\n                ],\n                [\n                    'ie',\n                    /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/\n                ]\n            ];\n            for (let i = 0; i < rules.length; i++) {\n                const rule = rules[i];\n                match = rule[1].exec(agent);\n                if (match)\n                    break;\n            }\n            return !!match;\n        };\n        if (isIE()) {\n            const originalCreateHTMLDocument = DOMImplementation.prototype.createHTMLDocument;\n            DOMImplementation.prototype.createHTMLDocument = title => {\n                if (!title)\n                    title = '';\n                return originalCreateHTMLDocument.apply(document.implementation, [title]);\n            };\n        }\n    };\n});\ndefine('skylark-grapejs/plugin_manager/config/config',[],function () {\n    'use strict';\n    return { plugins: [] };\n});\ndefine('skylark-grapejs/plugin_manager/index',['./config/config'], function (defaults) {\n    'use strict';\n    return config => {\n        var c = config || {};\n        for (var name in defaults) {\n            if (!(name in c))\n                c[name] = defaults[name];\n        }\n        var plugins = {};\n        return {\n            add(id, plugin) {\n                if (plugins[id]) {\n                    return plugins[id];\n                }\n                plugins[id] = plugin;\n                return plugin;\n            },\n            get(id) {\n                return plugins[id];\n            },\n            getAll() {\n                return plugins;\n            }\n        };\n    };\n});\ndefine('skylark-grapejs/main',[\n    \"skylark-langx/langx\",\n    'skylark-jquery',\n    './editor/index',\n    'skylark-underscore',\n    './utils/polyfills',\n    './plugin_manager/index'\n], function (langx,$, Editor, _, polyfills, PluginManager) {\n    'use strict';\n    polyfills();\n    const plugins = new PluginManager();\n    const editors = [];\n    const defaultConfig = {\n        autorender: 1,\n        plugins: [],\n        pluginsOpts: {}\n    };\n    return {\n        $,\n        editors,\n        plugins,\n        version: '<# VERSION #>',\n        init(config = {}) {\n            const els = config.container;\n            if (!els)\n                throw new Error(\"'container' is required\");\n            config = langx.mixin({},\n                defaultConfig,\n                config\n            );\n            config.el = _.isElement(els) ? els : document.querySelector(els);\n            const editor = new Editor(config).init();\n            config.plugins.forEach(pluginId => {\n                let plugin = plugins.get(pluginId);\n                const plgOptions = config.pluginsOpts[pluginId] || {};\n                if (!plugin) {\n                    const wplg = window[pluginId];\n                    plugin = wplg && wplg.default ? wplg.default : wplg;\n                }\n                if (plugin) {\n                    plugin(editor, plgOptions);\n                } else if (_.isFunction(pluginId)) {\n                    pluginId(editor, plgOptions);\n                } else {\n                    console.warn(`Plugin ${ pluginId } not found`);\n                }\n            });\n            editor.getModel().loadOnStart();\n            config.autorender && editor.render();\n            editors.push(editor);\n            return editor;\n        }\n    };\n});\ndefine('skylark-grapejs', ['skylark-grapejs/main'], function (main) { return main; });\n\n"]}